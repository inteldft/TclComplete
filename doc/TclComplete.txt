*TclComplete.txt*  Omni-completion for Tcl!!

Author:  Chris Heithoff ( christopher.b.heithoff@intel.com )
Initial Date:  10/31/2017
Latest Rev:    07/09/2018
   
==============================================================================
1. Intro                                          *TclComplete*
   TclComplete.vim adds omni-completion for Tcl (filetype=tcl).

   Omni-completion is a built-in Vim auto-completion reserved for
   filetype-dependent user-defined completion.
   
   Vim ships with omni-completion for Python, Ruby, Tcl, Javascript, etc...
   but not a dedicated one for Tcl....so here it is!
   
   This plug-in ships with a sample set of TclComplete collateral 
   files in the TclComplete/sample directory.  This is the default
   location that TclComplete looks in.

==============================================================================
2) Populating the completion files                *TclComplete:Populate*

   Because there can be different versions of Tcl, and also many
   possible procs that may vary from project to project, it is
   recommended to open up your Tcl shell (or icc2_shell or pt_shell..)
   and source the tcl/WriteTclCompleteFiles.tcl file.

   This will create a directory $WARD/TclComplete and populate it with
   .json files representing the data structures (lists, dicts, dicts of list, etc)
   for all the completion options.
   JSON format is not Vim specific, so similar plugins for other text
   editors can use these.
   
   There will also be two Vim specific files.  One defines some
   insert mode aliases.  The other does syntax highlighting.

    (NOTE:  This expects user to be an Intel back-end engineer who works
     in a back-end environment, where the $WARD is your work area. If 
     you need this changed, then modify the tcl script or fake it out
     by defining an environment variable called WARD.)

==============================================================================
3) Configuring TclComplete in Vim             *TclComplete:config*

                                                  *g:TclComplete#dir*
   - Tell Vim how to find the TclComplete directory
       defaults (in order of descending priority)
          $WARD/TclComplete
          $WARD/dp/user_scripts/TclComplete
          <location_of_plugin>/sample

       to override default:   
          :let g:TclComplete#dir = "/non/default/directory/"
               -Hard-coded strings must be in quotes. 
               -Environment variables use $ prefixes.
               -Concatenate strings and expressions with a dot (.)
            For example:
              :let g:TclComplete#dir = $PROJ_AREA . "/TclComplete"


==============================================================================
3) Entering TclComplete auto-completion

                                                *<tab>_c*
<tab>          <c-x><c-o> is the Vim keymap to trigger omni-completion.
               This still applies, but the <tab> key has been remapped
               to <c-x><c-o> in insert mode.
               (future revs will allow an opt-out feature)

               This will bring up Vim's pop-up autocompletion menu.  
               The menu is context aware:
                  - A builtin, command, or proc will be the default menu
                  - If you've already typed a command on the same line
                     and within a open brackets, then the menu will supply
                     options for the builtin, command, or proc.
                  - "package require" will put the package list in the menu.
                  - Nothing yet is done for namespaces but that's a future plan.

==============================================================================
4) Once the pop-up menu is open....

  Enter auto-complete mode will open a pop-up menu.  This is the same type
of pop-up menu used in Vim's built-in auto-complete modes. (:help *insert_expand*)

  ^N and ^P will switch to the next/previous choices.

  ^E will end the pop-up menu and return to insert mode
  
  ^Y will accept the current choice and stay in insert mode.  ('yes')

** TclComplete adds a few extra abilities. ****

<tab>    When the pop-up menu is open, <tab> will act like control-n (^N)

                                                *TclComplete:ctrl-d*
ctrl-d   Scroll the pop-up menu down by 10 choices.

                                                *TclComplete:ctrl-u*
ctrl-u   Scroll the pop-up menu up by 10 choices.

                                                *TclComplete#popupscroll*
   (the scroll distance can be set by :let g:TclComplete#popupscroll=<new-value>)

==============================================================================
5) Wildcard mode.

  By default, the auto-completion takes wilcard (glob) patterns similar to what 
you would use in Tcl scripts for Synopsys tools.

  *cells*<tab>  --> popup menu will show all matching commands

   (there's no regex mode)

==============================================================================
6) Aliases become insert mode abbreviations!
     Some interactive Tcl shell aliases you defined when the $WARD/TclComplete collateral was
     generated will be converted into iabbrev commands in $WARD/TclComplete/aliases.vim.

     In other words, type 'fic' followed by <space> will automatically replace
     'fic' with foreach_in_collection. 

     This plugin's Tcl script intentionally to limits the abbrevations to:
         fic   = foreach_in_collection
         ga    = get_attribute
         cs    = change_selection
         gs    = get_selection

     To avoid triggering an abbreviation, type ctrl-v and <space> 

==============================================================================
7) Special categories of completion:
     
      - variable names starting with $ 
      - G_variables
      - attributes in the get_attribute/set_attribute commands
      - expr functions
      - command ensembles (dict, string, package, etc)
      - package require <your_list_of_packages_here>
      - iccpp parameters with iccpp_com::get_param and iccpp_com::set_param
      - tech::get_techfile_info autocompletion 
      - getenv completion 
      - get_xxx -design completion (also works for current_design and set_working_design)
      - smarter attribute completion to derive the object class from
      get_cells, get_nets, etc.
      - inside a namespace eval ... {} block
      - inside a oo:: {} block.
      - things that act like namespace ensemble but aren't 

==============================================================================
8) Call to action!
     If you like this, let me know!   christopher.b.heithoff@intel.com 
    
    Future plans for improvements:
    - add namespaces to auto-complete upon ::
    - identify any compound commands that are not namespace ensembles.
      for example, "file" is a namespace ensemble, but "info" and "package"
          are not.  I hardcoded to "info" and "package" subcommands into
          the tcl script.



