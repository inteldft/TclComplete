P_astro_upsize_script -fix_ratio (Ratio)
P_astro_upsize_script -out (Output file name)
P_astro_upsize_script -vio_report (Violation report from PrimeTime )
P_back2back -out (Output file name)
P_cell_usage -out (Output file name)
P_connect_net_to_pin_of_cell -net (Name of net of the current design to be connected to pin of a cell)
P_connect_net_to_pin_of_cell -pin (Name of pin of a cell)
P_continue -scr (Name of procedure or absolute path & filename of script)
P_continue -snapshot (Take a snapshot of the calling script/procedure)
P_create_unique_object_name -basename (Base name of the object, this will be cat'ed with an integer to make the object name)
P_create_unique_object_name -max_integer (The integer will be incremented to this limit, if a unique object name is not found by then, an empty string will be returned (default: 1000000))
P_create_unique_object_name -no_warning (Suppress warning message if '-max_integer' limit was reached without creating a unique object name)
P_create_unique_object_name -object (Object for which the unique name will be used: 
P_create_unique_object_name -start_integer 
P_elapsed_time -end (End task tag)
P_elapsed_time -mesg (message)
P_elapsed_time -quiet (Do not echo any messages)
P_elapsed_time -start (Start task tag)
P_elapsed_time -timestamp (Execute P_timestamp before calculating time)
P_find_file_ext -ext (List of extensions)
P_find_file_ext -only (Look for tag file only)
P_find_file_ext -tag (Tag for the file)
P_find_proc -only (Look for tag procedure only)
P_find_proc -tag (Tag for the procedure)
P_get_best_driver -load (load)
P_get_best_driver -ref (Reference name)
P_get_best_driver -ref_pin (Reference pin name)
P_get_scon_from_rtl -latest (To copy to latest tree also)
P_get_scon_from_rtl -rtlm (RTL Model Name)
P_get_scon_from_rtl -rtlp (Path to Local RTL)
P_get_scon_from_rtl -sdm (SD Model)
P_hookup_port -no_hier (Dont connect ports to pins on sub designs of current design)
P_hookup_port -pin (Name of pin of the cell to be hooked up)
P_hookup_port -port (Name of port to be hooked up)
P_interrupt -scr (Script file to use)
P_proj_analyze -base (Base Name)
P_proj_analyze -design (Design Name)
P_proj_analyze -hier (Relace all occurences throughout hier)
P_proj_analyze -inc (Verilog include files)
P_proj_analyze -pkg (Package)
P_proj_analyze -prm (Param/file)
P_proj_analyze -src (Source code)
P_proj_analyze -type (Source format: 
P_proj_change_names -nohier (Apply rule only to this design, not hierarchical.)
P_proj_change_names -rule (Name of the rule, all rules are applied by default)
P_proj_change_names -verbose (Apply rule only to this design, not hierarchical.)
P_rename_soft_macro -prefix (Prefix to use when changing name, default is G_DESIGN_NAME)
P_rpt_unmapped -output (Name of output file)
P_set_fix_multiple_port_nets -nohier (Apply rule only to this design, not hierarchical.)
P_set_mcp -edge (Apply to edge: 
P_set_mcp -fall_from (Apply to paths falling from only)
P_set_mcp -fall_through 
P_set_mcp -fall_to (Apply to paths falling to only)
P_set_mcp -from (Apply to paths from )
P_set_mcp -reference (Clock to move: 
P_set_mcp -rise_from (Apply to paths rising from only)
P_set_mcp -rise_through 
P_set_mcp -rise_to (Apply to paths rising to only)
P_set_mcp -through (Apply to paths through)
P_set_mcp -to (Apply to paths to)
P_set_mcp -type (Analysis type: 
P_source_proj_setup -before (Works with 'default_setup'. Source 'default_setup' BEFORE project setup)
P_source_proj_setup -force (Works with 'default_setup'. Source it AFTER project setup)
P_split -char (Character at which to split at)
P_split -count (Split at what count)
P_split -l2r (Count left to right)
P_split -str (String to split)
P_store_syn_vars -group (Synopsys variable group (default: all))
P_store_syn_vars -proc (Name of the restore procedure (default: P_restore_syn_vars))
P_swap_srflop -lib (Library to look at for getting sr and nsr flops)
P_swap_srflop -log (File to write which contains a list of all cells which were swapped)
P_swap_srflop -srflop_list 
P_timestamp -prefix (String to print before the date)
P_timestamp -quiet (Do not echo the timestamp)
als_change_highlight -add (Add)
als_change_highlight -color (Color)
als_change_highlight -remove (Remove)
als_get_highlight -color (Color)
als_print_collection -annotate (Annotate driver/receiver. Default: None)
als_print_collection -attribute (Name of attribute. Default: full_name)
als_print_list -range (Range list to print)
analyze_timing_correlation -clear_work_dir (Overwrite existing work_dir on completion)
analyze_timing_correlation -delay_calculation_style 
analyze_timing_correlation -disable_compatibility_settings 
analyze_timing_correlation -enable_ccs_rcv_cap 
analyze_timing_correlation -enable_compatibility_settings 
analyze_timing_correlation -overwrite_work_dir (Initially overwrite existing work_dir)
analyze_timing_correlation -pass_rate_threshold 
analyze_timing_correlation -pt_exec_path 
analyze_timing_correlation -pt_post_link_script 
analyze_timing_correlation -pt_pre_link_script 
analyze_timing_correlation -pt_search_path 
analyze_timing_correlation -pt_user_script 
analyze_timing_correlation -save_pt_session (Save PrimeTime-Sessions for later use. Saved-directory will be named as <work_dir>/saved_session/<block>_<scenario>_<pt_version>_auto.save_session)
analyze_timing_correlation -scenarios 
analyze_timing_correlation -script_only (Write the auto-scripts files only.)
analyze_timing_correlation -si_enable_analysis 
analyze_timing_correlation -use_pt_save_session (Reuse existing PrimeTime-save-Sessions. Expects session to be named as <work_dir>/saved_session/<block>_<scenario>_<pt_version>_auto.save_session)
analyze_timing_correlation -verbose (Show more details about command execution)
analyze_timing_correlation -waveform_analysis_mode 
analyze_timing_correlation -work_dir (Directory for output files, Reuse existing data if directory already exists)
apr_read_aocvm -corner (Name of corner, usually max or min)
apr_read_aocvm -table (Pointer to AOCVM file)
check_wires_for_pushdown -nets (Nets to run push-down on for testing)
compare_checksum -icc2 (Path to ICC2 checksums)
compare_checksum -pt (Path to PT checksums)
cr_align_repeaters_to_trunks -layer (layer name of trunks)
cr_align_repeaters_to_trunks -move_repeater_routing 
cr_align_repeaters_to_trunks -nets (list of nets to extract shapes)
cr_align_repeaters_to_trunks -repeater_name (repeater cell name pattern)
cr_checkerboard_repeaters -nets (nets to drop repeaters)
cr_checkerboard_repeaters -preview (do not create shapes, just annotate)
cr_checkerboard_repeaters -repeater_collection 
cr_checkerboard_repeaters -repeater_name_pattern 
cr_checkerboard_repeaters -spread_mult (multiplier to spread checkerboarding out.  if 2 is passed, spreading will be 2x width or height of rptcell)
cr_complete_nets_detail -max_layer (maximum layer for zroute to use for routing, default derived from trunks)
cr_complete_nets_detail -min_layer (minimum layer for zroute to use for routing, default derived from trunks)
cr_complete_nets_detail -nets (nets to complete)
cr_complete_nets_detail -shield (shield net)
cr_complete_nets_detail -shield_name (shield name)
cr_complete_track_region -fill_trunk_name (net name assigned to fill trunk)
cr_complete_track_region -pattern (track pattern name/s)
cr_complete_track_region -track_region (track region)
cr_create_finish_metal -backoff (backoff)
cr_create_finish_metal -backoff_multiplier (need more than winWidth backoff, pass multiplier like (2) to get 2x minWidth)
cr_create_finish_metal -backoff_override_value 
cr_create_finish_metal -bbox (bounding box to fill within)
cr_create_finish_metal -color (color of your annotation for preview)
cr_create_finish_metal -exclude_power (exclude power from checking obstructions)
cr_create_finish_metal -extra_min_width_shrink 
cr_create_finish_metal -get_rid_of_min_width 
cr_create_finish_metal -layer (layer name for pin trunks to be on)
cr_create_finish_metal -preview (do not create shapes, just annotate)
cr_create_finish_metal -width (width of the track for layer name for pin trunks to be on)
cr_create_ladders -add_routing_blockage 
cr_create_ladders -cells (collection of cells)
cr_create_ladders -do_not_add_vias (by default vias will be added to each rung, if this is passed, vias will not be inserted)
cr_create_ladders -layer_width_straps (list of , separated layer,width,number_of_straps, eg. m2,0.024,2 m3,0.024,5 m4,0.036,2 m5,0.040-0.042,2 m6,0.050,2 m7,0.056,2 )
cr_create_ladders -pin (either in or out)
cr_create_ladders -preview (do not create shapes, just draw annotations of shapes)
cr_create_ladders -use_full_cell_bbox (instead of using pin bbox to drive ladder rungs, use cell bbox entirely)
cr_create_terminals -add_metal (create a metal shape underneath the terminal)
cr_create_terminals -additional_attributes 
cr_create_terminals -bbox (bounding box to create terminal)
cr_create_terminals -center_coord (center-line coordinate, to be snapped to closest track)
cr_create_terminals -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
cr_create_terminals -do_not_check_shorts (do not check if track has obstructions)
cr_create_terminals -edge (Edge of boundary to create terminal on.  Edge is a number 1-to-#of edges starting from Y of lower left corner and moving clockwise)
cr_create_terminals -hi (If Edge and depth is not supplied, the terminal will be floating, lo and hi values must be supplied)
cr_create_terminals -layer (layer name)
cr_create_terminals -lo (If Edge and depth is not supplied, the terminal will be floating, lo and hi values must be supplied)
cr_create_terminals -of_cell (instances of cell to be used to place terms, cell_name_expr)
cr_create_terminals -port_names (LIST of port names to create terminal for)
cr_create_terminals -preview (do not create shapes, just annotate)
cr_create_terminals -shield (shield)
cr_create_terminals -shield_name (shield name)
cr_create_terminals -shield_type (type of shielding to preform)
cr_create_terminals -term_bbox (bounding box to create terminal)
cr_create_terminals -term_length (Micron value of lenght of the terminal)
cr_create_terminals -term_length_multiplier 
cr_create_terminals -terminal_names (LIST of port names to create terminal for)
cr_create_terminals -track_num (track)
cr_create_terminals -track_step (track_step)
cr_create_terminals -width (width to tracks to use, track numbers are according to this width)
cr_create_track_region -dont_delete_existing_tracks 
cr_create_track_region -pattern (track pattern name/s)
cr_create_track_region -track_region (track region to create tracks in)
cr_create_track_shared_trunks -complete_routing (finish routing of trunks with constrained zroute)
cr_create_track_shared_trunks -do_not_check_shorts (do not check if obstructions exist)
cr_create_track_shared_trunks -exclude_cells (instances of cells (and optioanl edges) to be excluded from calculation of net bbox, cell_name_expr:t|b|l|r)
cr_create_track_shared_trunks -find_free_tracks (finds free (un-obstructrd) tracks to trunk on)
cr_create_track_shared_trunks -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_track_shared_trunks -ignore_boundary_guide 
cr_create_track_shared_trunks -layer (layer name for pin trunks to be on)
cr_create_track_shared_trunks -nets (nets to track share)
cr_create_track_shared_trunks -of_cells (instances of cells (and optioanl edges) to be used to calculate net bbox, cell_name_expr:t|b|l|r)
cr_create_track_shared_trunks -preview (do not create shapes, just annotate)
cr_create_track_shared_trunks -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horx or the bottom side if vertical)
cr_create_track_shared_trunks -pullback_rt (takes micron value. will cut back trunk for the end on the left side if horx or the bottom side if vertical)
cr_create_track_shared_trunks -ref_net (the net to take the ref object from)
cr_create_track_shared_trunks -ref_obj (pin | port to be used to calculate track number, if track_num is supplied, ref_obj is ignored)
cr_create_track_shared_trunks -shield (shield net)
cr_create_track_shared_trunks -shield_name (shield name)
cr_create_track_shared_trunks -shield_type (type of shielding to preform)
cr_create_track_shared_trunks -to_trunk (specifies which net segments need to be connected to an existing trunk)
cr_create_track_shared_trunks -track_num (track number to put trunks on)
cr_create_track_shared_trunks -use_ref_obj_layer (take layer/width from the ref object, will override layer/width passed)
cr_create_track_shared_trunks -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_track_shared_trunks -width (width of the track for layer name for pin trunks to be on)
cr_create_tracks_region -anchor (bbox anchor, can be {X Y}-location in micron|patterns track number|Lego track number|Duplo track number)
cr_create_tracks_region -bbox (bounding box of the track region in microns. If -bbox is speified, -anchor -extend -of_track_width options are ignored)
cr_create_tracks_region -extend (bbox extend, can be {Width Heigh} in micron|number of patterns tracks|number of Legos|number of Duplos)
cr_create_tracks_region -layer (layer name)
cr_create_tracks_region -name (region name)
cr_create_tracks_region -of_track_width (consider tracks of theat width when specifying anchor and extend)
cr_create_tracks_region -pattern (track pattern tag)
cr_create_trunk -bbox (bounding box to create trunk within)
cr_create_trunk -do_not_check_shorts (do not check if track has obstructions)
cr_create_trunk -exclude_cells (instances of cells (and optioanl edges) to be excluded from calculation of net bbox, cell_name_expr:t|b|l|r)
cr_create_trunk -find_free_tracks (finds free (un-obstructrd) tracks to trunk on)
cr_create_trunk -gravity (trunk gravity: driver<,offset> | receiver<,offset> | cog<,offset> | '%-of-net_bbox'`<,offset>, optional offset value in micron)
cr_create_trunk -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunk -ignore_boundary_guides 
cr_create_trunk -include_power_for_free_tracks 
cr_create_trunk -layer (layer name)
cr_create_trunk -net_bbox_override (use provided bbox as net bbox, ignore net bbox)
cr_create_trunk -nets (LIST of nets to create wire for)
cr_create_trunk -num_wires (number of wires to create per net)
cr_create_trunk -of_cells (instances of cells (and optioanl edges) to be used to calculate net bbox, cell_name_expr:t|b|l|r)
cr_create_trunk -preview (do not create shapes, just annotate)
cr_create_trunk -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)
cr_create_trunk -pullback_rt (takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)
cr_create_trunk -shield (shield)
cr_create_trunk -shield_name (shield name)
cr_create_trunk -shield_type (type of shielding to preform)
cr_create_trunk -track_num (track)
cr_create_trunk -track_step (track_step)
cr_create_trunk -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunk -width (width to tracks to use, track numbers are according to this width)
cr_create_trunk_from_here_to_there -avoid_area (list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )
cr_create_trunk_from_here_to_there -avoid_layers (list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )
cr_create_trunk_from_here_to_there -bloat_channel (THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
cr_create_trunk_from_here_to_there -bloat_zone (THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
cr_create_trunk_from_here_to_there -channel (THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
cr_create_trunk_from_here_to_there -clean_channel_tracks 
cr_create_trunk_from_here_to_there -clean_named_zone_tracks 
cr_create_trunk_from_here_to_there -clean_zone_tracks (THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)
cr_create_trunk_from_here_to_there -clear (remove any existing shapes prior creating them)
cr_create_trunk_from_here_to_there -clear_zone (remove zone annotations before re-displaying them)
cr_create_trunk_from_here_to_there -create_port (create port(s) from trunk(s))
cr_create_trunk_from_here_to_there -custom_attr (list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )
cr_create_trunk_from_here_to_there -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
cr_create_trunk_from_here_to_there -cutout_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout)
cr_create_trunk_from_here_to_there -cutout_bloat (bloat cutout area in DR units, + to inflate, - to deflate)
cr_create_trunk_from_here_to_there -cutout_pullback (the list of 'start|end,layer,pullback', e.g. 'end,m10,100 start,m9,80 end,m8,-18'. pullback from cutout area as specified)
cr_create_trunk_from_here_to_there -display_channel (THIS GOT RETIRED, use -display_zone: will annotate channels/edges and track capacity based on list of layer/width comma seperated)
cr_create_trunk_from_here_to_there -display_zone (THIS IS REPLACING -display_channel: will annotate channels/edges and track capacity based on list of layer/width comma seperated)
cr_create_trunk_from_here_to_there -do_not_check_shorts (do not check if track has obstructions)
cr_create_trunk_from_here_to_there -do_not_cutout_nets (list of nets to be ignored while performing cutout)
cr_create_trunk_from_here_to_there -edge_overhang (overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)
cr_create_trunk_from_here_to_there -edge_pullback (pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)
cr_create_trunk_from_here_to_there -edge_pullback_custom 
cr_create_trunk_from_here_to_there -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
cr_create_trunk_from_here_to_there -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunk_from_here_to_there -ignore_boundary_guides 
cr_create_trunk_from_here_to_there -include_power_for_free_tracks 
cr_create_trunk_from_here_to_there -just_clear_zone (remove all zone annotations)
cr_create_trunk_from_here_to_there -log_track_number (reports track number that net was created on)
cr_create_trunk_from_here_to_there -nets (list of nets to create trunk(s) for)
cr_create_trunk_from_here_to_there -nets_order (values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )
cr_create_trunk_from_here_to_there -num_wires (number of trunks to create per net)
cr_create_trunk_from_here_to_there -preview (do not create shapes, just draw annotations of shapes)
cr_create_trunk_from_here_to_there -remove (remove any existing shapes do not create (for clean-up))
cr_create_trunk_from_here_to_there -reuse_channel_tracks 
cr_create_trunk_from_here_to_there -reuse_zone_tracks (THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)
cr_create_trunk_from_here_to_there -shield (shield)
cr_create_trunk_from_here_to_there -shield_name (shield name)
cr_create_trunk_from_here_to_there -shield_pullback (pullback shield trunk from edge half DR (per layer))
cr_create_trunk_from_here_to_there -shield_type (type of shielding to preform)
cr_create_trunk_from_here_to_there -skip_tracks (rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)
cr_create_trunk_from_here_to_there -snap_to_track (if topology is specified using micron value, snap coord to track for givem layer/width)
cr_create_trunk_from_here_to_there -stepping (list of steppings per layer/width pairs, make sure to accomodate for shielding, e.g full - 3, half - 2)
cr_create_trunk_from_here_to_there -swizzle (Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass "swizzle_layer,location")
cr_create_trunk_from_here_to_there -topology (topology description as a list of legs that reference trunking channels and their layers/width/track|micron|p values)
cr_create_trunk_from_here_to_there -track_overrides_pin (even if pin exists, use the track number passed)
cr_create_trunk_from_here_to_there -trim_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)
cr_create_trunk_from_here_to_there -use_pin (Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))
cr_create_trunk_from_here_to_there -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunk_from_here_to_there -verbose (turn on printing of display_channel capacities)
cr_create_trunk_from_here_to_there -wrong_way_metal (allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)
cr_create_trunk_from_here_to_there -zone (THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
cr_create_trunk_on_track -bbox (bounding box used to calculate relative track number relative to the bbox)
cr_create_trunk_on_track -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
cr_create_trunk_on_track -delete (clear before annotating the track)
cr_create_trunk_on_track -do_not_check_shorts (do not check if track has obstructions)
cr_create_trunk_on_track -exclude_cells (instances of cells (and optioanl edges) to be excluded from calculation of net bbox, cell_name_expr:t|b|l|r)
cr_create_trunk_on_track -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
cr_create_trunk_on_track -group (group name for wire)
cr_create_trunk_on_track -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunk_on_track -hi (override nets bounding box lo value: trunks will be cut/stratched to this value)
cr_create_trunk_on_track -ignore_boundary_guides 
cr_create_trunk_on_track -include_power_for_free_tracks 
cr_create_trunk_on_track -layer (layer name)
cr_create_trunk_on_track -lo (override nets bounding box lo value: trunks will be cut/stratched to this value)
cr_create_trunk_on_track -net_bbox_override (bounding box used to override nets bounding box: trunks will be cut/stratched to this bbox)
cr_create_trunk_on_track -net_path_area (similar to -bbox but trunks will be cut/stratched to the bbox only if net bbox is outside the area bbox)
cr_create_trunk_on_track -nets (list of nets to create trunks for)
cr_create_trunk_on_track -num_wires (number of shapes to be created per net)
cr_create_trunk_on_track -of_cells (instances of cells (and optioanl edges) to be used to calculate net bbox, cell_name_expr:t|b|l|r)
cr_create_trunk_on_track -preview (do not create shapes, just annotate)
cr_create_trunk_on_track -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)
cr_create_trunk_on_track -pullback_rt (takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)
cr_create_trunk_on_track -shield (shield)
cr_create_trunk_on_track -shield_name (shield name)
cr_create_trunk_on_track -shield_type (type of shielding to preform)
cr_create_trunk_on_track -track_num (track number(s) or x,y coordinate(s) that will be snapped to closest track of layer/width(s))
cr_create_trunk_on_track -track_step (track_step, if specified then the 1st element of tracks list is used as anchor and track list got re-calculated)
cr_create_trunk_on_track -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunk_on_track -width (width to tracks to use, can be a comma-separated list of widths)
cr_create_trunk_straps_for_pins -do_not_check_shorts (do not check if obstrutions exist)
cr_create_trunk_straps_for_pins -extension_direction 
cr_create_trunk_straps_for_pins -extension_distance (how far in microns to extend from ports)
cr_create_trunk_straps_for_pins -layer (layer name for pin trunks to be on)
cr_create_trunk_straps_for_pins -nets (nets to create trunk straps)
cr_create_trunk_straps_for_pins -of_cells (cells (instances of macros) and the side from which to extend pins, e.g. {cell1:r cell2:l cell3*:b})
cr_create_trunk_straps_for_pins -preview (do not create shapes, just annotate)
cr_create_trunk_straps_for_pins -route_type (route type to be set for resulting net shapes)
cr_create_trunk_straps_for_pins -shield (shield net)
cr_create_trunk_straps_for_pins -shield_name (shield name)
cr_create_trunk_straps_for_pins -snap_to_track (snap trunk centerline to track, if not specified trunk will be extended from pin bbox exactly)
cr_create_trunk_straps_for_pins -width (width of the track for layer name for pin trunks to be on)
cr_create_trunks_from_pin_to_pin -complete_routing (finish routing of trunks with constrained zroute)
cr_create_trunks_from_pin_to_pin -dir_follows_sign (direction of the leg travel defined by the sign of the leg, not net bbox. i.e. 0.25 goes to the right/up, -0.25 goes to left/down)
cr_create_trunks_from_pin_to_pin -do_not_check_shorts (do not check if obstructions exist)
cr_create_trunks_from_pin_to_pin -extensions (list of how far to extend pins in microns, net bbox fraction, lego, duplo.  list corresponds with list of layers -1)
cr_create_trunks_from_pin_to_pin -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
cr_create_trunks_from_pin_to_pin -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_pin_to_pin -layer_legs (layers for which turns will be created on.  first layer will be drawn first, second is second etc.)
cr_create_trunks_from_pin_to_pin -nets (nets to create trunks for)
cr_create_trunks_from_pin_to_pin -preview (do not create shapes, just annotate)
cr_create_trunks_from_pin_to_pin -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)
cr_create_trunks_from_pin_to_pin -pullback_rt (takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)
cr_create_trunks_from_pin_to_pin -return_track_info (returns a list of lists with net_name, track_number per layer/width)
cr_create_trunks_from_pin_to_pin -shield (shield net)
cr_create_trunks_from_pin_to_pin -shield_name (shield name)
cr_create_trunks_from_pin_to_pin -shield_type (type of shielding to preform)
cr_create_trunks_from_pin_to_pin -start_from (which pin to start from, either Low pin to High pin, LoHi (lowest y will be first leg) or High pin to Low pin, HiLo)
cr_create_trunks_from_pin_to_pin -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_pins_to_point -complete_routing (finish routing of trunks with constrained zroute)
cr_create_trunks_from_pins_to_point -create_terminals (create terminals on boundary if extention distance is to_boundary)
cr_create_trunks_from_pins_to_point -do_not_check_shorts (do not check if obstrutions exist)
cr_create_trunks_from_pins_to_point -extension_direction (which direction to extend off pin, either RIGHT_or_TOP or Left_or_Bottom)
cr_create_trunks_from_pins_to_point -extension_distance (how far to extend pins in microns or 'to_cell:cell_name' to extend to a closest edge of cell_name oe 'to_boundary' to extend to boundary edge)
cr_create_trunks_from_pins_to_point -layer (layer name for pin trunks to be on)
cr_create_trunks_from_pins_to_point -min_layer (min layer name for pin trunks to be on, default is pin layer unless it is lower than min layer)
cr_create_trunks_from_pins_to_point -nets (nets to create trunk from port)
cr_create_trunks_from_pins_to_point -of_cells (cells (instances of macros) and the side from which to extend pins, e.g. {cell1:r cell2:l cell3*:b cell4*:0,0,10,10 bbox relative to cell origin})
cr_create_trunks_from_pins_to_point -pin_layer (layer pin should be on to extend off of)
cr_create_trunks_from_pins_to_point -preview (do not create shapes, just annotate)
cr_create_trunks_from_pins_to_point -push_pins (create pins where iccpp_trunks cross cells)
cr_create_trunks_from_pins_to_point -shield (shield net)
cr_create_trunks_from_pins_to_point -shield_name (shield name)
cr_create_trunks_from_pins_to_point -shield_type (type of shielding to preform)
cr_create_trunks_from_pins_to_point -snap_to_track (snap trunk centerline to track, if not specified trunk will be extended from pin bbox exactly)
cr_create_trunks_from_pins_to_point -use_routespec (read routespec, find closest track for given port that matches NDR and layer and )
cr_create_trunks_from_pins_to_point -width (width of the track for layer name for pin trunks to be on)
cr_create_trunks_from_pins_to_trunk -cluster_proximity (micron value used to cluster receiver pins together, 0 means use each pin by itself)
cr_create_trunks_from_pins_to_trunk -complete_routing (finish routing of trunks with constrained zroute)
cr_create_trunks_from_pins_to_trunk -do_not_check_shorts (do not check if obstructions exist)
cr_create_trunks_from_pins_to_trunk -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
cr_create_trunks_from_pins_to_trunk -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_pins_to_trunk -include_power_for_free_tracks 
cr_create_trunks_from_pins_to_trunk -layer (layer name for trunks to be on)
cr_create_trunks_from_pins_to_trunk -min_layer (minimum layer for terminals to be considered (used to extend trunks from))
cr_create_trunks_from_pins_to_trunk -nets (nets to create trunk from pin(s))
cr_create_trunks_from_pins_to_trunk -of_cells (instances of macros and the side from which to extend pins)
cr_create_trunks_from_pins_to_trunk -offset_cell_pin (instances of macros and the side and the offset distance to modify pins bbox cella:b:-2)
cr_create_trunks_from_pins_to_trunk -pin_direction (use only pins of specified direction)
cr_create_trunks_from_pins_to_trunk -preview (do not create shapes, just annotate)
cr_create_trunks_from_pins_to_trunk -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)
cr_create_trunks_from_pins_to_trunk -pullback_rt (takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)
cr_create_trunks_from_pins_to_trunk -shield (shield net)
cr_create_trunks_from_pins_to_trunk -shield_name (shield name)
cr_create_trunks_from_pins_to_trunk -shield_type (type of shielding to preform)
cr_create_trunks_from_pins_to_trunk -track_offset (offset (in track numbers) for a resulting trunk(s) to be placed on)
cr_create_trunks_from_pins_to_trunk -use_existing_shape (format: layer[,min_length] (e.g m5,80) extend to existing net shape on layer 'layer' that is optionaly longer then 'min_length' if no trunks are found)
cr_create_trunks_from_pins_to_trunk -use_routespec (read routespec, find closest track for given port that matches NDR and layer and )
cr_create_trunks_from_pins_to_trunk -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_pins_to_trunk -width (width of the track for layer name for pin trunks to be on)
cr_create_trunks_from_ports -backoff_from_ports (amount to offset from ports, should be value,layer)
cr_create_trunks_from_ports -complete_routing (finish routing of trunks with constrained zroute)
cr_create_trunks_from_ports -do_not_check_shorts (do not check if obstrutions exist)
cr_create_trunks_from_ports -extension_direction 
cr_create_trunks_from_ports -extension_distance (how far in microns to extend from ports)
cr_create_trunks_from_ports -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
cr_create_trunks_from_ports -h_layer_override (overrides the horizontal metal layer of port even if -layer is passed)
cr_create_trunks_from_ports -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_ports -ignore_boundary_guide 
cr_create_trunks_from_ports -include_power_for_free_tracks 
cr_create_trunks_from_ports -layer (use this layer for the trunk, not the port layer)
cr_create_trunks_from_ports -min_layer (minimum layer for terminals to be considered (used to extend trunks from))
cr_create_trunks_from_ports -nets (nets to create trunk from port)
cr_create_trunks_from_ports -preview (do not create shapes, just annotate)
cr_create_trunks_from_ports -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)
cr_create_trunks_from_ports -pullback_rt (takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)
cr_create_trunks_from_ports -shield (shield net)
cr_create_trunks_from_ports -shield_name (shield name)
cr_create_trunks_from_ports -shield_type (type of shielding to preform)
cr_create_trunks_from_ports -use_port_width (use port width, do not snap to track (assuming ports are on correct tracks))
cr_create_trunks_from_ports -use_routespec (read routespec, find closest track for given port that matches NDR and layer and )
cr_create_trunks_from_ports -v_layer_override (overrides the vertical metal layer of port even if -layer is passed)
cr_create_trunks_from_ports -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_ports -width (width of tracks to use)
cr_create_trunks_from_ports_to_trunk -backoff_from_ports (amount to offset from port)
cr_create_trunks_from_ports_to_trunk -complete_routing (finish routing of trunks with constrained zroute)
cr_create_trunks_from_ports_to_trunk -do_not_check_shorts (do not check if obstrutions exist)
cr_create_trunks_from_ports_to_trunk -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
cr_create_trunks_from_ports_to_trunk -h_layer_override (overrides the horizontal metal layer of port even if -layer is passed)
cr_create_trunks_from_ports_to_trunk -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_ports_to_trunk -layer (layer name for port trunks to be on)
cr_create_trunks_from_ports_to_trunk -min_layer (min layer name for port trunks to be on, default is port layer unless it is lower than min layer)
cr_create_trunks_from_ports_to_trunk -nets (nets to create trunk from port)
cr_create_trunks_from_ports_to_trunk -preview (do not create shapes, just annotate)
cr_create_trunks_from_ports_to_trunk -pullback_lb (takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)
cr_create_trunks_from_ports_to_trunk -pullback_rt (takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)
cr_create_trunks_from_ports_to_trunk -shield (shield net)
cr_create_trunks_from_ports_to_trunk -shield_name (shield name)
cr_create_trunks_from_ports_to_trunk -shield_type (type of shielding to preform)
cr_create_trunks_from_ports_to_trunk -use_routespec (read routespec, find closest track for given port that matches NDR and layer and )
cr_create_trunks_from_ports_to_trunk -v_layer_override (overrides the vertical metal layer of port even if -layer is passed)
cr_create_trunks_from_ports_to_trunk -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
cr_create_trunks_from_ports_to_trunk -width (width of the track for trunks to be on)
cr_create_vias_for_custom_shields -advanced_drc_off (turn off advanced drc checking, this will most likely create vias that have drcs)
cr_create_vias_for_custom_shields -delete (remove vias)
cr_create_vias_for_custom_shields -shield_layers (list of layers that you have custom shields on, OPTIONAL - if not pass layers will be derived from layout)
cr_create_vias_for_custom_shields -shield_nets (net names of custom shield nets)
cr_create_vias_for_custom_shields -tag (group name for vias, default is iccpp_preroute_sheild_vias)
cr_create_vias_for_preroutes -advanced_drc_off (turn off advanced drc checking, this will most likely create vias that have drcs)
cr_create_vias_for_preroutes -bbox (bounding box to drop vias in for nets)
cr_create_vias_for_preroutes -delete (remove vias)
cr_create_vias_for_preroutes -from_layer (from layer name)
cr_create_vias_for_preroutes -nets (nets to drop vias on)
cr_create_vias_for_preroutes -tag (group name for vias, default is iccpp_preroute_vias)
cr_create_vias_for_preroutes -to_layer (to layer name)
cr_create_wire_on_track -adjust_wire (change wire lenght etc.)
cr_create_wire_on_track -area_bbox (bounding box to create trunk within)
cr_create_wire_on_track -delete (clear before annotating the track)
cr_create_wire_on_track -do_not_check_shorts (do not check if track has obstructions)
cr_create_wire_on_track -group (group name for wire)
cr_create_wire_on_track -layer (layer name)
cr_create_wire_on_track -net_name (LIST of nets to create wire for)
cr_create_wire_on_track -num_wires (number of wires to create per net)
cr_create_wire_on_track -of_track_width (width to tracks to use, track numbers are according to this width)
cr_create_wire_on_track -preview (do not create shapes, just annotate)
cr_create_wire_on_track -shield (shield)
cr_create_wire_on_track -shield_name (shield name)
cr_create_wire_on_track -track_num (track)
cr_create_wire_on_track -track_step (track_step)
cr_delete_track_region -pattern (track pattern name/s)
cr_delete_track_region -reset_to_default (set track patterns back to default)
cr_delete_track_region -track_region (track region to create tracks in)
cr_extract_track_shared_trunks -layer_from (layer name to extract shapes)
cr_extract_track_shared_trunks -layer_to (layer name to generate shapes)
cr_extract_track_shared_trunks -min_length (min length of shape to be extracted, any shapes shorter will be skipped)
cr_extract_track_shared_trunks -nets (list of nets to extract shapes)
cr_extract_track_shared_trunks -output (file name that will contain iTAR commands to generate new trunks)
cr_extract_track_shared_trunks -preview (make iTAR commands to generate trunk previes not new trunks)
cr_extract_track_shared_trunks -start_track_num (specifies start track number to be used in iTAR command to generate new trunks)
cr_extract_track_shared_trunks -width_from (shape width to extract shapes)
cr_extract_track_shared_trunks -width_to (width to generate shapes)
cr_get_agressor_locations -backoff (backoff)
cr_get_agressor_locations -backoff_multiplier (need more than winWidth backoff, pass multiplier like (2) to get 2x minWidth)
cr_get_agressor_locations -backoff_override_value 
cr_get_agressor_locations -bbox (bounding box to fill within)
cr_get_agressor_locations -color (color of your annotation for preview)
cr_get_agressor_locations -exclude_power (exclude power from checking obstructions)
cr_get_agressor_locations -extra_min_width_shrink 
cr_get_agressor_locations -get_rid_of_min_width 
cr_get_agressor_locations -layer (layer name for pin trunks to be on)
cr_get_agressor_locations -preview (do not create shapes, just annotate)
cr_get_agressor_locations -width (width of the track for layer name for pin trunks to be on)
cr_place_repeaters -append_suffix (appends a unique suffix to the post-repeater nets in addition to the auto-generated suffix)
cr_place_repeaters -do_not_stagger (do not stagger or checkerboard placed repeaters)
cr_place_repeaters -exclude_cells (instances of cells to be excluded from calculation of repeater net connections, cell_name_expr)
cr_place_repeaters -layer (layer liat of trunk(s) to be repeated)
cr_place_repeaters -layer_weight (when -repeater_distance is specified define weight per layer to be applied to the distance value)
cr_place_repeaters -nets (nets to drop repeaters)
cr_place_repeaters -of_cells (instances of cells to be used to calculate repeater net connections, cell_name_expr)
cr_place_repeaters -preview (do not create shapes, just annotate)
cr_place_repeaters -remove (remove all repeaters on the net, reconnect net to the original state)
cr_place_repeaters -repeater_cutlines (list of cutlines to calculate exact locations {X Y} (cutline intersection with trunk) to drop repeaters )
cr_place_repeaters -repeater_distance (the distance to insert repeaters: insert a repeater every micron value specified)
cr_place_repeaters -repeater_locations (list of exact locations {X Y} to drop repeaters)
cr_place_repeaters -repeater_name (name of repeater cell to be inserted)
cr_place_repeaters -repeater_number (how many repeaters to place on path)
cr_place_repeaters -repeater_relative_cutlines 
cr_place_repeaters -repeater_suffix (syffix to repeater cell and repeated net)
cr_place_repeaters -repeater_type (type of repeater:buffer (bfr) or inverter pair (inv))
cr_place_repeaters -stagger_mult (spread repeaters in X direction by (repeater_width * st) when staggering or checkeboarding placed repeaters)
cr_report_failed_trunks -layer (layer name, ex. m9)
cr_report_failed_trunks -nets (List of nets to create trunks for)
cr_report_failed_trunks -width (width to tracks to use, track numbers are according to this width)
cr_restore_itar_attributes_on_nets -nets (nets to trim on)
cr_restore_itar_attributes_on_nets -user_attr (name of user attribute)
cr_trim_antennas -nets (nets to trim on)
cr_trim_antennas -user_attr (name of user attribute)
cr_trunk_flopped_nets_p2p -hlayer (horizontal layer name)
cr_trunk_flopped_nets_p2p -hwidth (horizontal layer width width)
cr_trunk_flopped_nets_p2p -main_trunk_layer (main trunk layer name)
cr_trunk_flopped_nets_p2p -main_trunk_loc (main trunk location in ref net bbox % with offset, e.g. 0.5,-10 50% of net's bbox - 10 micron)
cr_trunk_flopped_nets_p2p -main_trunk_ref_net (reference net, bbox of which is used to calculate main trunk location)
cr_trunk_flopped_nets_p2p -nets (List of nets to create trunks for)
cr_trunk_flopped_nets_p2p -position_sequentials (how to position sequentials (move them): 'spread' or a list of name-XY for each)
cr_trunk_flopped_nets_p2p -preview (do not create shapes, just annotate)
cr_trunk_flopped_nets_p2p -repeater_distance (the distance to insert repeaters: insert a repeater every micron value specified)
cr_trunk_flopped_nets_p2p -repeater_locations (list of exact locations {X Y} to drop repeaters)
cr_trunk_flopped_nets_p2p -repeater_name (name of repeater cell to be inserted)
cr_trunk_flopped_nets_p2p -repeater_number (how many repeaters to place on path)
cr_trunk_flopped_nets_p2p -repeater_type (type of repeater:buffer (bfr) or inverter pair (inv))
cr_trunk_flopped_nets_p2p -start_from (which pin/port to start from, either Low pin to High pin, LoHi or High pin to Low pin, HiLo)
cr_trunk_flopped_nets_p2p -track_step (track step to create trunks for nets passed, start track is calculated from -main_trunk_loc)
cr_trunk_flopped_nets_p2p -vlayer (vertical layer name)
cr_trunk_flopped_nets_p2p -vwidth (vertical layer width width)
create_bs_upf -blocks (blocks)
create_bs_upf -budget_shell_nlib 
create_bs_upf -budget_shell_nlib_dir 
create_bs_upf -debug (Enable Debug Output)
create_marker_around -micron (marker depth, default value is ZERO)
create_marker_around -objects (Create markers around)
create_pg_mesh_pattern -layers 
create_pg_mesh_pattern -parameters 
create_pg_mesh_pattern -via_rule (via rule between straps in this PG mesh pattern)
getvar -names (Returns the array indexes (similar to array names)
getvar -nosubst (Does not run subst on the return value)
getvar -quiet (Does not error when the var is not defined)
gui_change_layer -layer (Layer to use)
gui_change_layer -object (Objects to change the layer of)
gui_change_via_def -via (Vias to change the via def)
gui_change_via_def -via_def (New simple via definition)
gui_change_via_size -columns (Number of columns)
gui_change_via_size -rows (Number of rows)
gui_change_via_size -via (Vias to change the number of row or columns)
gui_create_clock_graph -clct (Collection of objects)
gui_create_clock_graph -latency (Show latency graph)
gui_create_clock_graph -levelized (Show levelized graph)
gui_create_schematic -clct (Collection of objects)
gui_create_schematic -size (Specify size {w h} of schematic window)
gui_eval_task_command -command (command to execute inside task assistant)
gui_eval_task_command -script (insert the command in the script editor (exclusive with -task))
gui_eval_task_command -task (task name to be added to MRU palette (exclusive with -script))
gui_get_clock_tree -clocks (clocks whose fanout or fanin cone is calculated.)
gui_get_clock_tree -from (the starting points of fanout or fanin cone.)
gui_get_clock_tree -trace_direction (trace direction must be one of 'forward' 'backward' or 'both'.)
gui_get_setting -list (When specified the list of settings is returned.)
gui_get_setting -setting (The name of the setting to get.)
gui_get_setting -window (The target window to apply this setting.)
gui_highlight_nets_of_selected -flylines (highlight flylines instead of shapes)
gui_load_area_net_connection_vm -area (coordinates of analysis region)
gui_load_area_net_connection_vm -hier (hierarchy)
gui_load_area_net_connection_vm -type (net types)
gui_load_hierarchy_vm -clear (clear the hierarchy visual mode)
gui_load_hierarchy_vm -hierarchical (Display map data hierarchically)
gui_load_hierarchy_vm -level (color hierarchical cells at level)
gui_load_hierarchy_vm -objects (color the collection of hierarchical cells)
gui_load_imported_path_pins_vm -clear (clear all buckets before importing)
gui_load_imported_path_pins_vm -timing_report 
gui_load_imported_path_pins_vm -timing_text (timing report text)
gui_load_rp_group_net_connectivity_vm -clct 
gui_load_rp_group_net_connectivity_vm -type (type of nets)
gui_load_rp_vm -cell_only (color cells in each RP group only)
gui_load_rp_vm -color (enum of color mode of RP Groups visual mode)
gui_load_rp_vm -num_colors (maximum number of colors, range: 5 to 20, default: 10)
gui_load_scan_chain_vm -chains 
gui_overlay_layout -add (Add this design as an overlay.)
gui_overlay_layout -brightness (Set the brightness for this overlay.)
gui_overlay_layout -design (The name of the design to overlay.)
gui_overlay_layout -remove (Remove this design as an overlay.)
gui_overlay_layout -window (The target window to apply this setting.)
gui_schematic_add_logic -new (Create new schematic.)
gui_schematic_add_logic -schematic (Schematic view to update (default: most recently active schematic).)
gui_schematic_add_logic -window (Top level window name to place new schematic (default: current window).)
gui_schematic_remove_logic -schematic (Schematic view to update (default: most recently active schematic).)
gui_select_connected_net_shapes -cross_net (trace shapes across different nets)
gui_select_connected_net_shapes -hierarchical (trace nets across block boundaries)
gui_select_nets_of_selected -hierarchical (trace nets across block boundaries)
gui_select_vmbucket -add (Add vmbucket content to global selection)
gui_select_vmbucket -name (Name of visual mode bucket)
gui_select_vmbucket -remove (Remove vmbucket content from global selection)
gui_select_vmbucket -replace (Replace global selection with vmbucket content)
gui_select_vmbucket -vmname (Name of the visual mode)
gui_set_layout_layer_visibility -only (Turn off all layers and then turn on only the specified layer.)
gui_set_layout_layer_visibility -toggle (Toggle the visibility of the specified layer.)
gui_set_layout_layer_visibility -window (The target layout window to apply visibility setting. 
gui_set_layout_user_command -apply_cmd (The user procedure to be called when input completed. 
gui_set_layout_user_command -cancel_cmd (The user procedure to be called when input is canceled.)
gui_set_layout_user_command -clear (Cancel all pending input and return layout to default mouse mode.
gui_set_layout_user_command -input_type (The desired input type: rectangle|line|polygon|path|point. Default is rectangle)
gui_set_layout_user_command -snap_type (The desired snap type: litho|site|midsite|wiretrack|midwiretrack|user. Default is litho)
gui_set_layout_user_command -status_text (The help string to be shown in layout window status bar.)
gui_set_select_menu_adds_to_selection -value (add to selection mode boolean flag)
gui_set_setting -setting (The name of the setting to set.)
gui_set_setting -value (The value of the setting.)
gui_set_setting -window (The target window to apply this setting.)
gui_show_man_page -apropos (do apropos search for topic)
gui_show_man_page -html ()
h2t -avoid_area (list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )
h2t -avoid_layers (list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )
h2t -bloat_channel (THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
h2t -bloat_zone (THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
h2t -channel (THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
h2t -clean_channel_tracks 
h2t -clean_named_zone_tracks 
h2t -clean_zone_tracks (THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)
h2t -clear (remove any existing shapes prior creating them)
h2t -clear_zone (remove zone annotations before re-displaying them)
h2t -create_port (create port(s) from trunk(s))
h2t -custom_attr (list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )
h2t -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
h2t -cutout_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)
h2t -cutout_bloat (bloat cutout area in DR units, + to inflate, - to deflate)
h2t -cutout_pullback (the list of 'start|end,layer,pullback', e.g. 'end,m10,100 start,m9,80 end,m8,-18'. pullback from cutout area as specified)
h2t -display_channel (THIS GOT RETIRED, use -display_zone: will annotate channels/edges and track capacity based on list of layer/width comma seperated)
h2t -display_zone (THIS IS REPLACING -display_channel: will annotate channels/edges and track capacity based on list of layer/width comma seperated)
h2t -do_not_check_shorts (do not check if track has obstructions)
h2t -do_not_cutout_nets (list of nets to be ignored while performing cutout)
h2t -edge_overhang (overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)
h2t -edge_pullback (pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)
h2t -edge_pullback_custom 
h2t -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
h2t -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
h2t -ignore_boundary_guides 
h2t -include_power_for_free_tracks 
h2t -just_clear_zone (remove all zone annotations)
h2t -log_track_number (reports track number that net was created on)
h2t -nets (list of nets to create trunk(s) for)
h2t -nets_order (values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )
h2t -num_wires (number of trunks to create per net)
h2t -preview (do not create shapes, just draw annotations of shapes)
h2t -remove (remove any existing shapes do not create (for clean-up))
h2t -reuse_channel_tracks 
h2t -reuse_zone_tracks (THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)
h2t -shield (shield)
h2t -shield_name (shield name)
h2t -shield_pullback (pullback shield trunk from edge half DR (per layer))
h2t -shield_type (type of shielding to preform)
h2t -skip_tracks (rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)
h2t -snap_to_track (if topology is specified using micron value, snap coord to track for givem layer/width)
h2t -stepping (list of steppings per layer/width pairs, make sure to accomodate for shielding, e.g full - 3, half - 2)
h2t -swizzle (Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass "swizzle_layer,location")
h2t -topology (topology description as a list of legs that reference trunking channels and their layers/width/track|micron|p values)
h2t -track_overrides_pin (even if pin exists, use the track number passed)
h2t -trim_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)
h2t -use_pin (Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))
h2t -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
h2t -verbose (turn on printing of display_channel capacities)
h2t -wrong_way_metal (allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)
h2t -zone (THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
icc2_dump_icc_mcmm_config -outdir (output file name)
icc2_dump_icc_mcmm_config -regsub_from_to_file 
iccpp_com_annotate_rule_based_track_info -bbox (bounding box to annotabe tracks within)
iccpp_com_annotate_rule_based_track_info -cutline (cut-line to annotabe tracks crossing)
iccpp_com_annotate_rule_based_track_info -group (annotation group name)
iccpp_com_annotate_rule_based_track_info -layer (layer name)
iccpp_com_annotate_rule_based_track_info -width (track width)
iccpp_com_get_rule_based_track_capacity -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_capacity -layer (layer name)
iccpp_com_get_rule_based_track_capacity -width (track width)
iccpp_com_get_rule_based_track_info -layer (layer name)
iccpp_com_get_rule_based_track_info_flat -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat -layer (layer name)
iccpp_com_get_rule_based_track_info_flat -text_annotation (do text annotation for tracks)
iccpp_com_get_rule_based_track_info_flat -width (track width)
iccpp_com_get_rule_based_track_info_flat_cntr -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_cntr -exclude_bbox (list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_cntr -text_annotation (do text annotation for tracks)
iccpp_com_get_rule_based_track_info_flat_cntr -width (track width)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t -exclude_bbox (list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t -skip_tracks (rule to skip tracks, e.g m9,10,3-7-9 meaning out of each 10 tracks skip 3d, 7th and 9th)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t -width (track width)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar -exclude_bbox (list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar -skip_tracks (rule to skip tracks, e.g m9,10,3-7-9 meaning out of each 10 tracks skip 3d, 7th and 9th)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar -width (track width)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps -exclude_bbox (list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps -skip_tracks (rule to skip tracks, e.g m9,10,3-7-9 meaning out of each 10 tracks skip 3d, 7th and 9th)
iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps -width (track width)
iccpp_com_get_rule_based_track_info_flat_no_tracks_defined -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_no_tracks_defined -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_no_tracks_defined -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_no_tracks_defined -text_annotation (do text annotation for tracks)
iccpp_com_get_rule_based_track_info_flat_no_tracks_defined -width (track width)
iccpp_com_get_rule_based_track_info_flat_simple -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_simple -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_simple -width (track width)
iccpp_com_get_rule_based_track_info_flat_width_h2t -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_width_h2t -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_width_h2t -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_width_h2t -text_annotation (do text annotation for tracks)
iccpp_com_get_rule_based_track_info_flat_width_h2t -width (track width)
iccpp_com_get_rule_based_track_info_flat_width_h2t_itar -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_width_h2t_itar -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_width_h2t_itar -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_width_h2t_itar -text_annotation (do text annotation for tracks)
iccpp_com_get_rule_based_track_info_flat_width_h2t_itar -width (track width)
iccpp_com_get_rule_based_track_info_flat_width_h2t_snps -bbox (bounding box to get tracks within)
iccpp_com_get_rule_based_track_info_flat_width_h2t_snps -cutline (cut-line to annotabe tracks crossing)
iccpp_com_get_rule_based_track_info_flat_width_h2t_snps -layer (layer name)
iccpp_com_get_rule_based_track_info_flat_width_h2t_snps -width (track width)
iccpp_com_track_num_to_track_info -bbox (bounding box to get tracks within)
iccpp_com_track_num_to_track_info -centerline (display track as centerline)
iccpp_com_track_num_to_track_info -clear (clear before annotating the track)
iccpp_com_track_num_to_track_info -display (annotate the track(s))
iccpp_com_track_num_to_track_info -group (annotation group name)
iccpp_com_track_num_to_track_info -layer (layer name)
iccpp_com_track_num_to_track_info -track_num (LIST of track numbers)
iccpp_com_track_num_to_track_info -width (track width)
iccpp_com_xy_to_track_info -bbox (bounding box to annotabe tracks within)
iccpp_com_xy_to_track_info -centerline (display track as centerline)
iccpp_com_xy_to_track_info -clear (clear before annotating the track)
iccpp_com_xy_to_track_info -display (annotate the track)
iccpp_com_xy_to_track_info -dont_init_spreading (intialize track spreading cache outside of this call)
iccpp_com_xy_to_track_info -group (annotation group name)
iccpp_com_xy_to_track_info -layer (layer name)
iccpp_com_xy_to_track_info -nets (LIST of nets associated with XY points passes thru -point option)
iccpp_com_xy_to_track_info -point (LIST of cordinates of point(s) on canvas X Y)
iccpp_com_xy_to_track_info -snap_to_dir (direction to snap coord to track, values are:  ld == snap to left/down or ru == snap to right/up)
iccpp_com_xy_to_track_info -width (track width)
iccpp_cr_create_term_from_bbox -add_metal (add metal underneath terminal)
iccpp_cr_create_term_from_bbox -area_bbox (bounding box to create term within)
iccpp_cr_create_term_from_bbox -associate_shield_nets 
iccpp_cr_create_term_from_bbox -delete (clear before annotating the track)
iccpp_cr_create_term_from_bbox -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_term_from_bbox -group (group name for wire)
iccpp_cr_create_term_from_bbox -layer (layer name)
iccpp_cr_create_term_from_bbox -net_bbox (already calculated net_bbox so use it)
iccpp_cr_create_term_from_bbox -port_name (name of port to create)
iccpp_cr_create_term_from_bbox -preview (do not create shapes, just annotate)
iccpp_cr_create_term_from_bbox -shield (shield)
iccpp_cr_create_term_from_bbox -shield_name (shield name)
iccpp_cr_create_term_from_bbox -shield_type (type of shielding to preform)
iccpp_cr_create_term_from_bbox -term_name (name of terminal to create)
iccpp_cr_create_term_from_bbox -track (track)
iccpp_cr_create_trunk_from_here_to_there -avoid_area (list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there -avoid_layers (list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there -bloat_channel (THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there -bloat_zone (THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there -channel (THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there -clean_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there -clean_named_zone_tracks 
iccpp_cr_create_trunk_from_here_to_there -clean_zone_tracks (THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)
iccpp_cr_create_trunk_from_here_to_there -clear (remove any existing shapes/annotations prior to creating them)
iccpp_cr_create_trunk_from_here_to_there -create_port (create port(s) from trunk(s))
iccpp_cr_create_trunk_from_here_to_there -custom_attr (list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )
iccpp_cr_create_trunk_from_here_to_there -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
iccpp_cr_create_trunk_from_here_to_there -cutout_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)
iccpp_cr_create_trunk_from_here_to_there -cutout_bloat (bloat cutout area in DR units, + to inflate, - to deflate)
iccpp_cr_create_trunk_from_here_to_there -cutout_pullback (the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)
iccpp_cr_create_trunk_from_here_to_there -do_not_check_shorts (do not check if track has obstructions)
iccpp_cr_create_trunk_from_here_to_there -do_not_cutout_nets (list of nets to be ignored while performing cutout)
iccpp_cr_create_trunk_from_here_to_there -edge_overhang (overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)
iccpp_cr_create_trunk_from_here_to_there -edge_pullback (pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)
iccpp_cr_create_trunk_from_here_to_there -edge_pullback_custom 
iccpp_cr_create_trunk_from_here_to_there -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
iccpp_cr_create_trunk_from_here_to_there -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there -ignore_boundary_guides 
iccpp_cr_create_trunk_from_here_to_there -include_power_for_free_tracks 
iccpp_cr_create_trunk_from_here_to_there -log_track_number (reports track number that net was created on)
iccpp_cr_create_trunk_from_here_to_there -nets (list of nets to create trunk(s) for)
iccpp_cr_create_trunk_from_here_to_there -nets_order (values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )
iccpp_cr_create_trunk_from_here_to_there -preview (do not create shapes, just annotate)
iccpp_cr_create_trunk_from_here_to_there -reuse_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there -reuse_zone_tracks (THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)
iccpp_cr_create_trunk_from_here_to_there -shield (shield)
iccpp_cr_create_trunk_from_here_to_there -shield_name (shield name)
iccpp_cr_create_trunk_from_here_to_there -shield_pullback (pullback shield trunk from edge half DR (per layer))
iccpp_cr_create_trunk_from_here_to_there -shield_type (type of shielding to preform)
iccpp_cr_create_trunk_from_here_to_there -skip_tracks (rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)
iccpp_cr_create_trunk_from_here_to_there -snap_to_track (if topology is specified using micron value, snap coord to track for givem layer/width)
iccpp_cr_create_trunk_from_here_to_there -stepping (list of steppings per topology leg)
iccpp_cr_create_trunk_from_here_to_there -swizzle (Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass "swizzle_layer,location")
iccpp_cr_create_trunk_from_here_to_there -topology (topology description as a list of legs that reference trunking channels and their layers/width/track numbers or exisiting trunks)
iccpp_cr_create_trunk_from_here_to_there -trim_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)
iccpp_cr_create_trunk_from_here_to_there -use_pin (Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))
iccpp_cr_create_trunk_from_here_to_there -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there -wrong_way_metal (allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)
iccpp_cr_create_trunk_from_here_to_there -zone (THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', zone is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -avoid_area (list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -avoid_layers (list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -bloat_channel (THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -bloat_zone (THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -channel (THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -clean_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -clean_named_zone_tracks 
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -clean_zone_tracks (THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -clear (remove any existing shapes/annotations prior to creating them)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -create_port (create port(s) from trunk(s))
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -custom_attr (list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -cutout_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -cutout_bloat (bloat cutout area in DR units, + to inflate, - to deflate)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -cutout_pullback (the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -do_not_check_shorts (do not check if track has obstructions)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -do_not_cutout_nets (list of nets to be ignored while performing cutout)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -edge_overhang (overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -edge_pullback (pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -edge_pullback_custom 
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -ignore_boundary_guides 
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -include_power_for_free_tracks 
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -log_track_number (reports track number that net was created on)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -nets (list of nets to create trunk(s) for)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -nets_order (values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -preview (do not create shapes, just annotate)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -reuse_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -reuse_zone_tracks (THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -shield_pullback (pullback shield trunk from edge half DR (per layer))
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -skip_tracks (rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -snap_to_track (if topology is specified using micron value, snap coord to track for givem layer/width)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -stepping (list of steppings per topology leg)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -swizzle (Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass "swizzle_layer,location")
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -topology (topology description as a list of legs that reference trunking zones and their layers/width/track numbers or exisiting trunks)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -trim_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -use_pin (Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -wrong_way_metal (allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)
iccpp_cr_create_trunk_from_here_to_there_for_swizzle -zone (THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -avoid_area (list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -avoid_layers (list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -bloat_channel (THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -bloat_zone (THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -channel (THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -clean_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -clean_named_zone_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -clean_zone_tracks (THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -clear (remove any existing shapes/annotations prior to creating them)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -create_port (create port(s) from trunk(s))
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -custom_attr (list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -cutout_pullback (the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -do_not_check_shorts (do not check if track has obstructions)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -edge_overhang (overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -edge_pullback (pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -edge_pullback_custom 
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -ignore_boundary_guides 
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -include_power_for_free_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -log_track_number (reports track number that net was created on)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -nets (list of nets to create trunk(s) for)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -nets_order (values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -preview (do not create shapes, just annotate)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -reuse_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -reuse_zone_tracks (THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -shield (shield)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -shield_name (shield name)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -shield_pullback (pullback shield trunk from edge half DR (per layer))
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -shield_type (type of shielding to preform)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -skip_tracks (rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -snap_to_track (if topology is specified using micron value, snap coord to track for givem layer/width)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -stepping (list of steppings per topology leg)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -swizzle (Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass "swizzle_layer,location")
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -topology (topology description as a list of legs that reference trunking zones and their layers/width/track numbers or exisiting trunks)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -use_pin (Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -wrong_way_metal (allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)
iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding -zone (THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there_with_shielding -avoid_area (list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there_with_shielding -avoid_layers (list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )
iccpp_cr_create_trunk_from_here_to_there_with_shielding -bloat_channel (THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -bloat_zone (THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -channel (THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunk_from_here_to_there_with_shielding -clean_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_shielding -clean_named_zone_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_shielding -clean_zone_tracks (THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -clear (remove any existing shapes/annotations prior to creating them)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -create_port (create port(s) from trunk(s))
iccpp_cr_create_trunk_from_here_to_there_with_shielding -custom_attr (list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )
iccpp_cr_create_trunk_from_here_to_there_with_shielding -custom_tag (an internal tag that will be added to a trunk, DO NOT use it in user scripts)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -cutout_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -cutout_bloat (bloat cutout area in DR units, + to inflate, - to deflate)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -cutout_pullback (the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -do_not_check_shorts (do not check if track has obstructions)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -do_not_cutout_nets (list of nets to be ignored while performing cutout)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -edge_overhang (overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -edge_pullback (pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -edge_pullback_custom 
iccpp_cr_create_trunk_from_here_to_there_with_shielding -find_free_tracks (finds free (un-obstructed) tracks to trunk on)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -h_track_freedom (expands the Y-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -ignore_boundary_guides 
iccpp_cr_create_trunk_from_here_to_there_with_shielding -include_power_for_free_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_shielding -log_track_number (reports track number that net was created on)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -nets (list of nets to create trunk(s) for)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -nets_order (values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )
iccpp_cr_create_trunk_from_here_to_there_with_shielding -preview (do not create shapes, just annotate)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -reuse_channel_tracks 
iccpp_cr_create_trunk_from_here_to_there_with_shielding -reuse_zone_tracks (THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -shield (shield)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -shield_name (shield name)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -shield_pullback (pullback shield trunk from edge half DR (per layer))
iccpp_cr_create_trunk_from_here_to_there_with_shielding -shield_type (type of shielding to preform)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -skip_tracks (rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -snap_to_track (if topology is specified using micron value, snap coord to track for givem layer/width)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -stepping (list of steppings per topology leg)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -swizzle (Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass "swizzle_layer,location")
iccpp_cr_create_trunk_from_here_to_there_with_shielding -topology (topology description as a list of legs that reference trunking channels and their layers/width/track numbers or exisiting trunks)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -trim_area (list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -use_pin (Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))
iccpp_cr_create_trunk_from_here_to_there_with_shielding -v_track_freedom (expands the X-direction search distance outside net bbox in microns to find free tracks)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -wrong_way_metal (allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)
iccpp_cr_create_trunk_from_here_to_there_with_shielding -zone (THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))
iccpp_cr_create_trunks_from_pin_to_pin -dir_follows_sign (direction of the leg travel defined by the sign of the leg, not net bbox. i.e. 0.25 goes to the right/up, -0.25 goes to left/down)
iccpp_cr_create_trunks_from_pin_to_pin -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_trunks_from_pin_to_pin -extensions (list of how far to extend pins in microns, net bbox fraction, lego, duplo.  list coresponds with list of layers -1)
iccpp_cr_create_trunks_from_pin_to_pin -layer_legs (layers and widths for which turns will be created on, e.g. 'm9:1.4,2.8 m8:1.0'. first layer/width will be drawn first, second second etc.)
iccpp_cr_create_trunks_from_pin_to_pin -nets (nets to complete)
iccpp_cr_create_trunks_from_pin_to_pin -preview (Do not create shapes, just annotate)
iccpp_cr_create_trunks_from_pin_to_pin -shield (shield)
iccpp_cr_create_trunks_from_pin_to_pin -shield_name (shield name)
iccpp_cr_create_trunks_from_pin_to_pin -shield_type (type of shielding to preform)
iccpp_cr_create_trunks_from_pin_to_pin -start_from (which pin to start from, either Low pin to High pin, LoHi (lowest y will be first leg) or High pin to Low pin, HiLo)
iccpp_cr_create_trunks_from_pins_to_point -create_terminals (create terminals on boundary if extention distance is to_boundary)
iccpp_cr_create_trunks_from_pins_to_point -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_trunks_from_pins_to_point -extention_direction (direction to extend pins, either Left_or_Bottom|lb or Right_or_Top|tr)
iccpp_cr_create_trunks_from_pins_to_point -extention_distance (how far in microns to extend pins or to_cell:cell_name)
iccpp_cr_create_trunks_from_pins_to_point -layer (layer name for pin trunks to be on)
iccpp_cr_create_trunks_from_pins_to_point -min_layer (layer name)
iccpp_cr_create_trunks_from_pins_to_point -nets (nets to complete)
iccpp_cr_create_trunks_from_pins_to_point -of_cells (instances of macros and the side from which to extend pins)
iccpp_cr_create_trunks_from_pins_to_point -pin_layer (list of layer name(s) that pin(s) should be on to extend off of)
iccpp_cr_create_trunks_from_pins_to_point -preview (Do not create shapes, just annotate)
iccpp_cr_create_trunks_from_pins_to_point -push_pins (create pins where iccpp_trunks cross cells)
iccpp_cr_create_trunks_from_pins_to_point -shield (shield net)
iccpp_cr_create_trunks_from_pins_to_point -shield_name (shield name)
iccpp_cr_create_trunks_from_pins_to_point -shield_type (type of shielding to preform)
iccpp_cr_create_trunks_from_pins_to_point -snap_to_track (snap trunk centerline to track, if not specified trunk will be extended from pin bbox exactly)
iccpp_cr_create_trunks_from_pins_to_point -width (width of the reack for layer name for pin trunks to be on)
iccpp_cr_create_trunks_from_pins_to_trunk -cluster_proximity (micron value used to cluster receiver pins together, 0 means use each pin by itself)
iccpp_cr_create_trunks_from_pins_to_trunk -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_trunks_from_pins_to_trunk -layer (layer name for pin trunks to be on)
iccpp_cr_create_trunks_from_pins_to_trunk -min_layer (layer name)
iccpp_cr_create_trunks_from_pins_to_trunk -nets (nets to complete)
iccpp_cr_create_trunks_from_pins_to_trunk -of_cells (instances of macros and the side from which to extend pins)
iccpp_cr_create_trunks_from_pins_to_trunk -offset_cell_pin (instances of macros and the side and the offset distance to modify pins bbox cella:b:-2)
iccpp_cr_create_trunks_from_pins_to_trunk -pin_direction (use only pins of specified direction)
iccpp_cr_create_trunks_from_pins_to_trunk -preview (Do not create shapes, just annotate)
iccpp_cr_create_trunks_from_pins_to_trunk -shield (shield net)
iccpp_cr_create_trunks_from_pins_to_trunk -shield_name (shield name)
iccpp_cr_create_trunks_from_pins_to_trunk -shield_type (type of shielding to preform)
iccpp_cr_create_trunks_from_pins_to_trunk -track_offset (offset (in track numbers) for a resulting trunk(s) to be placed on)
iccpp_cr_create_trunks_from_pins_to_trunk -use_existing_shape (format: layer[,min_length] (e.g m5,80) extend to existing net shape on layer 'layer' that is optionaly longer then 'min_length' if no trunks are found)
iccpp_cr_create_trunks_from_pins_to_trunk -width (width of the reack for layer name for pin trunks to be on)
iccpp_cr_create_trunks_from_ports -backoff_from_ports (amount to offset from port)
iccpp_cr_create_trunks_from_ports -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_trunks_from_ports -extention_direction 
iccpp_cr_create_trunks_from_ports -extention_distance (how far in microns to extend from ports)
iccpp_cr_create_trunks_from_ports -layer (use this layer not the port layer)
iccpp_cr_create_trunks_from_ports -min_layer (minimum layer for terminals to be considered (used to extend trunks from))
iccpp_cr_create_trunks_from_ports -nets (nets to complete)
iccpp_cr_create_trunks_from_ports -preview (Do not create shapes, just annotate)
iccpp_cr_create_trunks_from_ports -shield (shield)
iccpp_cr_create_trunks_from_ports -shield_name (shield name)
iccpp_cr_create_trunks_from_ports -shield_type (type of shielding to preform)
iccpp_cr_create_trunks_from_ports -use_port_width (use port width, do not snap to track (assuming ports are on correct tracks))
iccpp_cr_create_trunks_from_ports -width (width of tracks to use)
iccpp_cr_create_trunks_from_ports_to_trunk -backoff_from_ports (amount to offset from port)
iccpp_cr_create_trunks_from_ports_to_trunk -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_trunks_from_ports_to_trunk -layer (layer name for pin trunks to be on)
iccpp_cr_create_trunks_from_ports_to_trunk -min_layer (minimum layer for terminals to be considered (used to extend trunks from))
iccpp_cr_create_trunks_from_ports_to_trunk -nets (nets to complete)
iccpp_cr_create_trunks_from_ports_to_trunk -preview (Do not create shapes, just annotate)
iccpp_cr_create_trunks_from_ports_to_trunk -shield (shield)
iccpp_cr_create_trunks_from_ports_to_trunk -shield_name (shield name)
iccpp_cr_create_trunks_from_ports_to_trunk -shield_type (type of shielding to preform)
iccpp_cr_create_trunks_from_ports_to_trunk -width (width of the reack for layer name for pin trunks to be on)
iccpp_cr_create_wire_from_net_bbox -area_bbox (bounding box to create trunk within)
iccpp_cr_create_wire_from_net_bbox -associate_shield_nets 
iccpp_cr_create_wire_from_net_bbox -delete (clear before annotating the track)
iccpp_cr_create_wire_from_net_bbox -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_wire_from_net_bbox -group (group name for wire)
iccpp_cr_create_wire_from_net_bbox -layer (layer name)
iccpp_cr_create_wire_from_net_bbox -net_bbox (already calculated net_bbox so use it)
iccpp_cr_create_wire_from_net_bbox -net_name (net to create wire for)
iccpp_cr_create_wire_from_net_bbox -preview (do not create shapes, just annotate)
iccpp_cr_create_wire_from_net_bbox -shield (shield)
iccpp_cr_create_wire_from_net_bbox -shield_name (shield name)
iccpp_cr_create_wire_from_net_bbox -shield_type (type of shielding to preform)
iccpp_cr_create_wire_from_net_bbox -track (track)
iccpp_cr_create_wire_from_net_bbox_h2t -area_bbox (bounding box to create trunk within)
iccpp_cr_create_wire_from_net_bbox_h2t -associate_shield_nets 
iccpp_cr_create_wire_from_net_bbox_h2t -delete (clear before annotating the track)
iccpp_cr_create_wire_from_net_bbox_h2t -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_wire_from_net_bbox_h2t -group (group name for wire)
iccpp_cr_create_wire_from_net_bbox_h2t -layer (layer name)
iccpp_cr_create_wire_from_net_bbox_h2t -net_bbox (already calculated net_bbox so use it)
iccpp_cr_create_wire_from_net_bbox_h2t -net_name (net to create wire for)
iccpp_cr_create_wire_from_net_bbox_h2t -preview (do not create shapes, just annotate)
iccpp_cr_create_wire_from_net_bbox_h2t -shield (shield)
iccpp_cr_create_wire_from_net_bbox_h2t -shield_name (shield name)
iccpp_cr_create_wire_from_net_bbox_h2t -shield_type (type of shielding to preform)
iccpp_cr_create_wire_from_net_bbox_h2t -track (track)
iccpp_cr_create_wire_from_net_bbox_h2t -width (wire width)
iccpp_cr_create_wire_from_net_bbox_with_track -area_bbox (bounding box to create trunk within)
iccpp_cr_create_wire_from_net_bbox_with_track -associate_shield_nets 
iccpp_cr_create_wire_from_net_bbox_with_track -delete (clear before annotating the track)
iccpp_cr_create_wire_from_net_bbox_with_track -do_not_check_shorts (do not check if obstructions exist)
iccpp_cr_create_wire_from_net_bbox_with_track -group (group name for wire)
iccpp_cr_create_wire_from_net_bbox_with_track -layer (layer name)
iccpp_cr_create_wire_from_net_bbox_with_track -net_bbox (already calculated net_bbox so use it)
iccpp_cr_create_wire_from_net_bbox_with_track -net_name (net to create wire for)
iccpp_cr_create_wire_from_net_bbox_with_track -preview (do not create shapes, just annotate)
iccpp_cr_create_wire_from_net_bbox_with_track -shield (shield)
iccpp_cr_create_wire_from_net_bbox_with_track -shield_name (shield name)
iccpp_cr_create_wire_from_net_bbox_with_track -shield_type (type of shielding to preform)
iccpp_cr_create_wire_from_net_bbox_with_track -track (track)
iccpp_cr_place_flops -layer (layer of trunk to be repeated)
iccpp_cr_place_flops -layer_weight (when -repeater_distance is specified define weight per layer to be applied to the distance value)
iccpp_cr_place_flops -nets (nets to drop repeaters)
iccpp_cr_place_flops -repeater_distance (the distance to insert repeaters: insert a repeater every micron value specifiedhow much to disect length of layer to place repeaters)
iccpp_cr_place_flops -repeater_name (name of repeater cell to be incerted)
iccpp_cr_place_flops -repeater_number (how many repeaters to place on path)
iccpp_cr_place_flops -xy (exact location {X Y} to drop repeater)
iccpp_cr_remove_user_shape_antennas -nets (nets to trim)
iccpp_cr_remove_vias_for_preroutes -layer (layer name to nuke vias from)
iccpp_cr_remove_vias_for_preroutes -nets (nets to nuke vias on)
iccpp_cr_remove_vias_for_preroutes -tag (group name for vias, default is iccpp_preroute_vias)
iccpp_cr_track_shared_trunks -complete_routing (finish routing of trunks with constrained zroute)
iccpp_cr_track_shared_trunks -do_not_check_shorts (do not check if obstrutions exist)
iccpp_cr_track_shared_trunks -layer (layer name for pin trunks to be on)
iccpp_cr_track_shared_trunks -nets (nets to track share)
iccpp_cr_track_shared_trunks -preview (Do not create shapes, just annotate)
iccpp_cr_track_shared_trunks -ref_net (the net to take the ref object from)
iccpp_cr_track_shared_trunks -ref_obj (pin | port to be used to calculate track number, if track num is supplied, ref_obj is ignored)
iccpp_cr_track_shared_trunks -shield (shield net)
iccpp_cr_track_shared_trunks -shield_name (shield name)
iccpp_cr_track_shared_trunks -shield_type (type of shielding to preform)
iccpp_cr_track_shared_trunks -to_trunk (specifies which net segments need to be connected to an existing trunk)
iccpp_cr_track_shared_trunks -track_num (track number to put trunks on)
iccpp_cr_track_shared_trunks -use_ref_obj_layer (take layer/width from the ref object, will overrride layer/width passed)
iccpp_cr_track_shared_trunks -width (width of the track for layer name for pin trunks to be on)
iccpp_cr_trim_antennas -interactive (runs in interactive mode only due to issue with error message in route_group cmd)
iccpp_cr_trim_antennas -nets (nets to trim on)
iccpp_cr_trim_antennas -user_attr (name of user attribute)
info_var -defined (Returns 1 if the value was set)
info_var -history (Returns the history of parameter; )
info_var -is_array (Returns 1 if the variables is an array)
info_var -property (Returns user property for parameter)
info_var -type (Returns type of the parameter; does not work with -property)
lminus -exact (exact match)
pdintent2spec -blocks (User list of blocks to perform pdintent diff)
pdintent2spec -pd_intent_file_path 
print_message_info -ids (List of message ids to report)
print_message_info -summary (Summarize diagnostics)
print_time -msg (User message)
print_time -stage (Print header type time stamp for stage)
print_time -tag (Start/finish type: 
print_vars -print (Print the result)
print_vars -regexp (Regular expression filter)
print_vars -value (Print value too)
pwrlite_gen_saif_all_units -delay_model (optional arg; default: zero; delay model to be used for gate level sim <string>)
pwrlite_gen_saif_all_units -outdir (required arg; )
pwrlite_gen_saif_all_units -testname (optional arg; test name to include in testlist )
pwrlite_gen_saif_all_units -verilog (optional arg; default: write out a netlist; verilog pointer <file> )
pwrlite_gen_unit_testlists -outdir (optional arg; )
pwrlite_gen_unit_testlists -testlist (required arg; )
pwrlite_gen_unit_testlists -testname (optional arg; test name to include in testlist )
rdt_call_configulate_local -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_call_configulate_local -cmdline (Cmd to supply to configulate_local)
rdt_call_configulate_local -xml (Path o the xml file)
rdt_constrain_visa_logic -scenario (Running for for specific scenario)
rdt_convert_units -from (current unit: 
rdt_convert_units -to (units to be converted to: 
rdt_convert_units -value (Value to be converted)
rdt_copy_collateral -dssc_ver (MW Ver in DSSC for closure)
rdt_copy_collateral -file_type (file type (Eg spef,vg,upf)
rdt_copy_collateral -flow (Flow to copy)
rdt_copy_collateral -output_dir (outputs directory)
rdt_copy_collateral -stage (Stage to copy)
rdt_done -stage (stage name, defaults to global var G_CURRENT_STAGE)
rdt_gen_parallel_rpts -run_dir (stage name)
rdt_gen_parallel_rpts -stage (stage name)
rdt_gen_visa_hier_report -stage (Stage Tag)
rdt_get_all_corners -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_all_corners -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_all_modes -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_all_modes -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_all_scenarios -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_all_scenarios -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_block_data -block (Block to search for block_data files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_block_data -block_name (Blocks to get data for.Eg func_max,max. Default to all. Can give comma separated list)
rdt_get_block_data -debug (Print out the variables getting set to help debug)
rdt_get_block_data -keys (Keys to get block data for.Eg stdlib_type. Default to all. Can give comma separated list)
rdt_get_block_data -noheaders (Print out/return only the value without the block_data+key information)
rdt_get_block_data -set_gvars (Set G_BLOCK_DETAILS for RDT instead of returning data)
rdt_get_block_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_block_list -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_block_list -fval (Keys to get block data for.Eg stdlib_type. Default to all. Can give comma separated list)
rdt_get_block_list -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_derate_data -alt (Filter list of derate files by alt)
rdt_get_derate_data -analysis_type 
rdt_get_derate_data -block (Default block is G_DESIGN if block doesnt exist)
rdt_get_derate_data -corner (Filter list of derate files by corner)
rdt_get_derate_data -derate (Filter list of derate files by derate)
rdt_get_derate_data -flow (Filter list of derate files by flow filter)
rdt_get_derate_data -grid_size (Filter list of derate files by grid size)
rdt_get_derate_data -model_type (Filter list of derate files by model_type)
rdt_get_derate_data -variant (Filter list of derate files by variant)
rdt_get_derate_data -view (Filter list of derate files by view)
rdt_get_derate_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_dont_use_list -groupfile ()
rdt_get_dont_use_reasons -groupfile ()
rdt_get_global_voltages -corner (Corners search for rail information from for.Eg vcclow,vcchigh,nominal. Default to all. Can give comma separated list)
rdt_get_lib_attribute_data -alt (Filter list of library attribute files by alt)
rdt_get_lib_attribute_data -block (Default block is G_DESIGN if block doesnt exist)
rdt_get_lib_attribute_data -flow (Filter list of library attribute files by derate)
rdt_get_lib_attribute_data -model_type (Filter list of library attribute files by model_type)
rdt_get_lib_attribute_data -variant (Filter list of library attribute files by variant)
rdt_get_lib_attribute_data -view (Filter list of library attribute files by view)
rdt_get_lib_attribute_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_lib_data -alt_type (Filter list on alternate libs. Defaults to alt type default)
rdt_get_lib_data -block (Default block is G_DESIGN if block doesnt exist)
rdt_get_lib_data -cell_type (Filter list of libraries by cell_type)
rdt_get_lib_data -corner (Corner to get libs for. Based on pvconditions.xml file)
rdt_get_lib_data -file (Filter list of libraries by file name)
rdt_get_lib_data -flow (Flow to get libs for. Based on flow_settings.xml file)
rdt_get_lib_data -headers (Control the fields return for libraries, after applying filters)
rdt_get_lib_data -lib (Filter list of libraries based on lib_type)
rdt_get_lib_data -model_type (Filter list of libraries by model_type)
rdt_get_lib_data -variant (Filter list of libraries by variants)
rdt_get_lib_data -view (Filter list of libraries by view)
rdt_get_lib_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_lib_settings_data -alt (Set global variables for library setup based on alt)
rdt_get_lib_settings_data -block (Default block is G_DESIGN if block doesnt exist)
rdt_get_lib_settings_data -flow (Set global variables for library setup based on flow)
rdt_get_lib_settings_data -headers (Setting to return a value for. For eg view. Required)
rdt_get_lib_settings_data -model_type (Set global variables for library setup based on model_type)
rdt_get_lib_settings_data -scenario (Set global variables for library setup based on scenario)
rdt_get_lib_settings_data -settings_label 
rdt_get_lib_settings_data -view (Set global variables for library setup based on view)
rdt_get_lib_settings_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_lib_ver_data -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block.)
rdt_get_lib_ver_data -library (Library for which to get version information about. Default is all.)
rdt_get_lib_ver_data -manifest (Instead of providing path to the library, provide path to the manifest file instead.)
rdt_get_lib_ver_data -print_libname (Append the lib_name for each library)
rdt_get_lib_ver_data -section (Section (subcategory) of each library to get version information about. Examples are path, attribute and derate. Default is all.)
rdt_get_lib_ver_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required.)
rdt_get_library_list -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block.)
rdt_get_library_list -work_dir (Will default to WARD. Add a full path to directory if a new one is required.)
rdt_get_license -max_attempts 
rdt_get_license -wait (Time to wait between each query (default 60 seconds))
rdt_get_pdk_data -fval (Filters to select the file by. Eg -fval view=tf,model_type=icc)
rdt_get_pdk_data -headers (Data to return from the xml file based on the filters. Defaults to the path and file)
rdt_get_pdk_data -separator (Separator to use for configulate_local call)
rdt_get_pdk_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_pdk_settings -block (Default block is G_DESIGN if block doesnt exist)
rdt_get_pdk_settings -headers (List of headers to return values for using the filters)
rdt_get_pdk_settings -model_type (Filter list of derate files by model_type)
rdt_get_pdk_settings -stdlib_type (Filter list of derate files by stdlib_type)
rdt_get_pdk_settings -technology (Filter list of derate files by technology )
rdt_get_pdk_settings -view (Filter list of derate files by view)
rdt_get_pdk_settings -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_pvc -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_pvc -corner (Corners to get pvc data for.Eg vcclow,vcchigh,nominal. Default to all. Can give comma separated list)
rdt_get_pvc -debug (Print out the variables getting set to help debug)
rdt_get_pvc -noheaders (Print out/return only the value without the corner+key information)
rdt_get_pvc -set_gvars (Set G_CORNER_DETAILS for RDT instead of returning data)
rdt_get_pvc -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_rail_voltage -corner (Corners search for rail information from for.Eg vcclow,vcchigh,nominal. Default to all. Can give comma separated list)
rdt_get_rail_voltage -min (Returns min voltage. If format is vcc:1.05:1.15,min returns second field (1.15). If no second field, it returns first field(1.05))
rdt_get_rail_voltage -rail (Rail to search for Voltage)
rdt_get_relevant_scenario_data -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_relevant_scenario_data -keys (Keys to get scenario data for.Eg analysis_type. Can give comma separated list)
rdt_get_relevant_scenario_data -scenario (Scenarios to get data for.Eg func_max,max. Default to all. Can give comma separated list)
rdt_get_relevant_scenario_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_relevant_scenarios -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_relevant_scenarios -flow (name of the flow to query in MCMM)
rdt_get_relevant_scenarios -primary (whether to query for the primary scenario)
rdt_get_relevant_scenarios -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_get_scenario_data -block (Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)
rdt_get_scenario_data -debug (Print out the variables getting set to help debug)
rdt_get_scenario_data -keys (Keys to get scenario data for.Eg analysis_Type. Default to all. Can give comma separated list)
rdt_get_scenario_data -noheaders (Print out/return only the value without the scenario+key information)
rdt_get_scenario_data -scenario (Scenarios to get data for.Eg func_max,max. Default to all. Can give comma separated list)
rdt_get_scenario_data -set_gvars (Set G_SCENARIO_DETAILS for RDT instead of returning data)
rdt_get_scenario_data -work_dir (Will default to WARD. Add a full path to directory if a new one is required)
rdt_is_xml_file_empty -xml (XML File to test if empty)
rdt_list_flow -sources (Prints the source file of the step procedures)
rdt_list_steps -print (Enable formated printing)
rdt_list_steps -sources (Prints the source file of the step procedures)
rdt_mark_stage -duration (step duration)
rdt_mark_stage -memory (step memory used)
rdt_mark_stage -stage (stage name)
rdt_mark_stage -step_sequence 
rdt_remove_stage -flow (The name of the flow to modify (apr, syn, etc))
rdt_remove_stage -stage (The stage name to remove)
rdt_remove_step -name (The stage.step to remove)
rdt_report_dont_use -cell (Library cell name to report dont_use reason)
rdt_reset_logscan_pointer -line (Line number to set)
rdt_reset_logscan_pointer -unset (unset pointer)
rdt_run_logscan -aux_rules (auxiliary rules file if present, uses ${-aux_rules}.rules)
rdt_run_logscan -check_only (Only check whether logscan files present)
rdt_run_logscan -logfiles (logfile(s) to run rule checks on)
rdt_run_logscan -rules (rules {sets rules file = ${-rules}.rules})
rdt_run_logscan -skip_logfile_header_lines 
rdt_run_logscan -summary_file (output summary file {default=${logfiles(0)}.sum})
rdt_run_multiple_sessions -bits (Number of bits of Machine (for netbatch): 
rdt_run_multiple_sessions -mode (ICV jobs can run on local/netbatch: 
rdt_run_multiple_sessions -os (Machine operating system type(for netbatch): 
rdt_run_multiple_sessions -rundir (Directory where the fill job will run.  Default is {pwd}/)
rdt_save_attributes -change_stage (set to update with stage_run status)
rdt_save_attributes -change_step (set to update with step_attr)
rdt_save_attributes -flow_status (returns the list of executed stages)
rdt_save_attributes -parent_run (Gets status from the parent run being executed. Useful for rdt parallel runs)
rdt_save_attributes -stage (stage name)
rdt_save_attributes -stage_run (set if stage has run successfully - only used if -change_stage is set)
rdt_save_attributes -step_attr (value for step attribute - only updated is -change_step is set)
rdt_scenario_timing_constraints -scenario (Loading timing constraints for specific scenario)
rdt_signoff_status -stage (Signoff stage to get status for)
rdt_source_if_exists -display (Displays the list of files with complete paths (without sourcing them) in the order they will be sourced)
rdt_source_if_exists -inclusive (Enabling this switch will source all the files found in seaach path)
rdt_source_if_exists -local (Sources the file locally, within the context of the executing procedure)
rdt_source_if_exists -require (Indicates the file is required)
rdt_source_if_exists -silent (Do not print any messages)
rdt_source_if_exists_in_scenario -display (Displays the list of files with complete paths (without sourcing them) in the order they will be sourced)
rdt_source_if_exists_in_scenario -inclusive (Enabling this switch will source all the files found in serach path)
rdt_source_if_exists_in_scenario -local (Sources the file locally, with-in the context of the executing procedure)
rdt_source_if_exists_in_scenario -require (Indicates the file is required)
rdt_source_if_exists_in_scenario -scenario (Scenario name)
rdt_source_if_exists_in_scenario -silent (Do not print any messages)
rdt_status -leaf (Display leaf level status of the flow)
rdt_status -par_rpts (Display report information also)
rdt_status -stage (stage name)
rdt_step_run_status -change_stage (set to update with stage_run status)
rdt_step_run_status -change_step (set to update with step_attr)
rdt_step_run_status -stage (stage name)
rdt_step_run_status -stage_run (set if stage has run successfully - only used if -change_stage is set)
rdt_step_run_status -step_attr (value for step attribute - only updated is -change_step is set)
rdt_timing_constraints -scenario (Loading timing constraints for specific scenario)
rdt_wrap -body (The body of the procedure to create)
rdt_wrap -disable (This is to disable a pre or post procedure at block level)
rdt_wrap -post (This is a post procedure)
rdt_wrap -pre (This is a pre procedure)
rdt_wrap -stage (The name of the stage to create the pre or post procedure for)
rdt_wrap -step (The name of the step to create the pre or post procedure for)
rdt_zip_files -logs (enabling this option zips the log files)
rdt_zip_files -reports (enabling this option zips the reports)
rdt_zip_files -stage (stage name)
reconnect_fishbone_style_power_switch -ack_pin_name 
reconnect_fishbone_style_power_switch -ctrl_pin_name 
reconnect_fishbone_style_power_switch -sw_cells 
remove_duplicate_timing_contexts -analyze_only (only perform minimization analysis)
remove_duplicate_timing_contexts -exclude_group_path_directives 
report_custom_power_data -cell_internals_data_file 
report_custom_power_data -cust_rpt_module_file 
report_custom_power_data -help (Get this help information.)
report_custom_power_data -no_io (Exclude cells in fanin/fanout cones of IO ports of the block (both clock and data).)
report_custom_power_data -outdir (Output directory to create reports in, defaults to $PWD)
report_custom_power_data -stdcell_regex (Provide a regular expression to match the reference names of leaf cells which are standard cells.  If not provided, they are found using means other than naming convention.)
report_custom_power_data -unswitched_limit 
report_gui_stroke_bindings -dictionary (dictionary to report bindings for)
report_gui_stroke_builtins -dictionary (dictionary to report bindings for)
report_hierarchical_z -attributes (The attributes which will appear in the report (default: tg_{hvt,svt,nominal}_{n,p}_device_total_width))
report_hierarchical_z -block (The design it's hierarchy will be reported. (must argument))
report_hierarchical_z -maxDepth (The max hierarchical depth to report (default is 6))
report_hierarchical_z -outDir (The output directory to write the reports to. (default: "."))
report_hierarchical_z -rootCell (The cell it's hierarchy will be reported. (default: The loaded design))
report_hierarchical_z -stage (The design stage to add the report into. (default: syn_final))
rls_table -breaks (include break lines?)
rls_table -csv_mode (write out a csv rather than an actual table
rls_table -file (set output file name instead of STDOUT)
rls_table -footer (footer to print after table - no formatting)
rls_table -format (list of format styles for table columns)
rls_table -header (table header titles:
rls_table -no_separator (no vertical separator?)
rls_table -offset (add some spaces to the left of the entire table)
rls_table -repeat_header 
rls_table -spacious (add extra spaces for columns?)
rls_table -table (table data - is a list of lists)
rls_table -title (title to print before table - no formatting)
rls_table -to (set output file handle instead of STDOUT)
rls_table -width_limit (limit column width (breaks to lines) - off by default)
runRDT -init (initialize flow -> restart from beginning)
runRDT -jump (jump to 'step' within the current stage (else if integer move step +forward or -reverse))
runRDT -load (load design flow from this stage)
runRDT -load_cel (Specify the  cel in starting  db that you want to load . Provide only the name of the cel along with the path to database from -load_path)
runRDT -load_path (Specify the location of starting db. Provide a complete path to database)
runRDT -mark_loaded_stage (Added along with the -load of a stage to automatically mark the loaded stage. Usefui to overcome logscan errors)
runRDT -no_run ()
runRDT -reset_ebb_libs (Specify If the link and reference libs needs to be reset)
runRDT -reset_start_stage (reset all the stages from start to final)
runRDT -signoff (signoff flow to be run. Supported flows are in signoff_procs.tcl file)
runRDT -stage (run next stage only)
runRDT -standalone (run specified standalone design flow)
runRDT -start (start the run from specified stage )
runRDT -step (run next step only)
runRDT -stop (stop design flow after this stage or stage.step)
runRDT -subflow (Execute a defined subflow instead of the standard flow)
sd_add_diffcheck -include_macro_refs 
sd_add_diffcheck -layer_name 
sd_add_diffcheck -outputview 
sd_add_diffcheck -phase (negative straddles boundary {default=positive}: 
sd_add_diffcheck -pitch (layer pitch {default=0.084})
sd_add_diffcheck -skip (skip diffcheck generation {default=0, do not skip}: 
sd_add_diffcheck -width (layer width {default=0.028})
sd_add_halo_metals -no_partition_twire (Don't add transition shapes or PG on the partition boundary)
sd_add_polycheck -datatype (datatype for layer_num - requires layer_num is defined {default use polycheck layer_datatype})
sd_add_polycheck -include_macro_refs 
sd_add_polycheck -layer_name 
sd_add_polycheck -outputview 
sd_add_polycheck -phase (negative straddles boundary {default=positive}: 
sd_add_polycheck -pitch (layer pitch {default=0.140})
sd_add_polycheck -skip (skip polycheck generation {default=0, do not skip}: 
sd_add_polycheck -width (layer width {default=0.042})
sd_add_routing_blockage_for_boundary -for_create_strap_only 
sd_add_routing_blockage_for_macro -additional_blkg (To create additional blockage around EBB/Macros based on G_PWR_ADDITIONAL_BLOCKAGE_FOR_CUSTOM & G_PWR_ADDITIONAL_BLOCKAGE_FOR_MACRO )
sd_add_routing_blockage_for_va -for_create_strap_only 
sd_aon_pg_hookup -cells (Specify the aon cells to insert via ladder)
sd_aon_pg_hookup -constraint_only (Setting constraints only)
sd_aon_pg_hookup -incremental (Run pg hookup for newly added aon cells only)
sd_aon_pg_hookup -logtag (Add log tag)
sd_bottom_up_run_parallel_job -script_name (name of script to execute, include full-path to script)
sd_bottom_up_run_parallel_job -work_dir (name of working directory where run_block_script jobs will be managed)
sd_channel_add_buffer_on_route -distance (Repeater distance for add-buffer-on-route use)
sd_channel_add_buffer_on_route -max_layer (Maximum layer for routing use)
sd_channel_add_buffer_on_route -min_layer (Minimum layer for routing use)
sd_channel_add_buffer_on_route -nets (Channel nets to insert repeaters)
sd_channel_add_buffer_on_route -repeater (Repeater name for add-buffer-on-route use)
sd_channel_add_buffer_on_route -verbose (Print more information. Default: None)
sd_channel_add_buffer_on_route -vialadder (Via ladder constraints)
sd_channel_block_recipe -backoff (Placement backoff from port. Default: 1.0um/G_CHANNEL_BACKOFF(BLOCK))
sd_channel_block_recipe -debug (Used specifically for GCR debug. Default: G_GCR_DEBUG)
sd_channel_block_recipe -distance (Repeater distance for add-buffer-on-route use. Default: LookUp/G_CHANNEL_REPEATER_DISTANCE(BLOCK))
sd_channel_block_recipe -keep_reps (Do not remove existing repeaters. Default: Remove/G_CHANNEL_KEEP_REPEATERS(BLOCK))
sd_channel_block_recipe -max_layer (Maximum layer for routing use. Default: G_MAX_ROUTING_LAYER/G_CHANNEL_MAX_LAYER(BLOCK))
sd_channel_block_recipe -min_layer (Minimum layer for routing use. Default: G_MIN_ROUTING_LAYER/G_CHANNEL_MIN_LAYER(BLOCK))
sd_channel_block_recipe -ports (Ports to trace and place/route channel cells. Default: All/G_CHANNEL_PORT_LIST(BLOCK))
sd_channel_block_recipe -repeater (Repeater name for add-buffer-on-route use. Default: G_CHANNEL_REPEATER(BLOCK))
sd_channel_block_recipe -save_steps (Save intermediate steps in the flow. Default: None/G_CHANNEL_SAVE_STEPS(BLOCK))
sd_channel_block_recipe -steps (Steps to run: {place route abor}. Default: All/G_CHANNEL_STEPS(BLOCK))
sd_channel_block_recipe -use_gcr (Run GCR routing. Default: ZRoute/G_GCR_ROUTE)
sd_channel_block_recipe -verbose (Print more information. Default: None/G_CHANNEL_VERBOSE)
sd_channel_block_recipe -vialadder (Via ladder default constraints. Default: G_CHANNEL_VIA_LADDER_DEFAULT_CONSTRAINTS/G_CHANNEL_VIA_LADDER_CONSTRAINTS(REF_NAME))
sd_channel_block_recipe -widths (Routing layer-width list {la wa lb wb ...} for wide wire routing)
sd_channel_place_cells -backoff (Placement backoff from port. Default: At Port)
sd_channel_place_cells -keep_reps (Do Not remove repeaters. Default: Remove)
sd_channel_place_cells -ports (Ports to trace and place channel cells)
sd_channel_place_cells -verbose (Print more information. Default: None)
sd_channel_place_cells_based_on_route -first_distance 
sd_channel_place_cells_based_on_route -keep_reps (Do Not remove repeaters. Default: Remove)
sd_channel_place_cells_based_on_route -max_layer (Maximum layer for routing use)
sd_channel_place_cells_based_on_route -min_layer (Minimum layer for routing use)
sd_channel_place_cells_based_on_route -ports (Ports to trace and place channel cells)
sd_channel_place_cells_based_on_route -use_gcr (Run GCR router. Default is Z-route route_group)
sd_channel_place_cells_based_on_route -widths (Routing layer-width list for wide wire routing)
sd_channel_priority_route -cells (Channel cells to route)
sd_channel_priority_route -debug (Used specifically for GCR debug. Default: None)
sd_channel_priority_route -max_layer (Maximum layer for routing use)
sd_channel_priority_route -min_layer (Minimum layer for routing use)
sd_channel_priority_route -use_gcr (Run GCT routing. Default: Global Route)
sd_channel_priority_route -verbose (Print more information. Default: None)
sd_channel_priority_route -vialadder (Via ladder constraints)
sd_channel_priority_route -widths (Routing layer-width list for wide wire routing)
sd_channel_remove_repeaters -port (Port)
sd_channel_remove_repeaters -supernet (Supernet)
sd_commit_blocks -same_lib (Force commit of blocks in same library)
sd_connect_ackport -drv_pin (Drive pin)
sd_connect_ackport -rev_pin (Receive pin)
sd_connect_aon_supply_pins -cells (List of cells)
sd_connect_aon_supply_pins -force (If given, existing cells connections will be disconnected and re-connected)
sd_connect_ebb_enables -reset_based_on_upf (Reset G_ vars based on upf values)
sd_connect_ebb_enables -va_name (Voltage name)
sd_create_analog_pg_template -file (Specifies template file name)
sd_create_analog_pg_template -layers (Specifies layers list)
sd_create_analog_power_strap -pg_regions (create grid on analog pg regions)
sd_create_bbox_analog_power_strategies -bbox (Specify the bounding box to create grid. Format {{xl yl} {xh yh}})
sd_create_bbox_analog_power_strategies -grid_template 
sd_create_bbox_analog_power_strategies -layers (layers that need to be created)
sd_create_bbox_analog_power_strategies -nets 
sd_create_bbox_analog_power_strategies -pg_region 
sd_create_bbox_analog_power_strategies -recreate_template (recreate pg template for calling standalone call)
sd_create_custom_grid_vars -pgr (list pg region names)
sd_create_custom_grid_vars -va (list of gas station voltage area names)
sd_create_custom_power_strap -bbox (Specify the bounding box to create grid. Format {{xl yl} {xh yh}}, if specified pg_region will be created)
sd_create_custom_power_strap -grid_template 
sd_create_custom_power_strap -net (Supply net name)
sd_create_custom_power_strap -pg_region 
sd_create_dir -dir (name of directory to createt)
sd_create_path_groups -modes (run for specific modes list)
sd_create_patterns -add_net_type (Add net type into the track spec of the pattern. Default: None)
sd_create_patterns -outfile (Specify output file-name for writing patterns file)
sd_create_patterns -pattern (Specify the patterns used for pattern creation)
sd_create_patterns -region (Specify the regions used for pattern creation. Default: None)
sd_create_patterns -verbose (Print more information. Default: None)
sd_create_power_straps -custom_only (Generate macro and custom rails only)
sd_create_power_straps -custom_tags (Generate power straps for specified custom tags only)
sd_create_power_straps -layers (Generate power straps for specified layers only)
sd_create_power_straps -no_vias (Turn off power via creation)
sd_create_power_straps -strategy_only (Generate pg strategy only)
sd_create_power_straps_m0 -keep_to_bnd (Keep space to boundary of top level (width of vert halo))
sd_create_power_straps_m0 -keep_to_macro (Keep this space to macro on left and right)
sd_create_power_straps_m0 -m0_width (Create m0 of this width)
sd_create_power_straps_m0 -m2width_ts (Min metal2 width threshold)
sd_create_power_straps_m0 -remove_only (Remove existed m0)
sd_create_top_va_pg_blockage -hierarchical (Process all VA in all hierarchy)
sd_create_trackfill_config -layers (List of layers to fill)
sd_create_trackfill_config -out_dir (Output directory)
sd_create_tracks -bounding_box 
sd_create_tracks -dont_delete (Does not delete the existent tracks)
sd_create_tracks -exclusive (Create track for exclusive creation)
sd_create_tracks -layer (Specify the layer to create track. If the layer defined in pattern does not match, it will be skipped)
sd_create_tracks -pattern (Specify the patterns used for track creation)
sd_create_tracks -reserved (Create the reserved tracks)
sd_create_tracks -skip_pg_track (Skip generating tracks for power rail)
sd_create_tracks -tag (Add tag to track)
sd_create_tracks -width (Specify the width to create track. If the width defined in pattern does not match, it will be skipped. Used for wide wire routing)
sd_create_tracks_for_hip_pins -cells (Cells to insert track on their pins.)
sd_create_tracks_for_hip_pins -layers (Pin's layers.)
sd_create_tracks_for_hip_pins -pins (Pin name to create tracks on it.)
sd_create_uin -layers (List of layers to fill)
sd_create_uin -out_dir (Output directory to save uin files)
sd_create_uin -type (Type of UIN files to be created)
sd_ctm_route_dops -dirty_mode (Allow DRCs for debug)
sd_ctm_route_dops -dop_nets (DOP nets - default all CTMESH dop nets)
sd_eco_boundary_cells -action (Option to remove or add boundary cells: 
sd_eco_boundary_cells -direction (Specify inside or outside given bbox update the boundary cells 
sd_eco_boundary_cells -target_obj_boundary_list 
sd_eco_rc_to_icc2_changelist -icc2_changelist (Pointer to the output ICC changelist file)
sd_eco_rc_to_icc2_changelist -rc_changelist (Pointer to input RC changelist file)
sd_extraction_options_setup -corners (list of corners to work on, default is all)
sd_fdr_constraints -out_path (output directory for override tcl file(s))
sd_fdr_constraints -scenarios (list of scenarios to run for, by default run for all scenarios)
sd_fdr_write_vrlg_attr -flow (flow name)
sd_fdr_write_vrlg_attr -outfile (Output file name)
sd_find_accessible_tap -cell (Cell requiring tap)
sd_find_accessible_tap -direction (Specify which direction (left/right/both) to search for taps (default: both))
sd_find_accessible_tap -distance (Specify the max distance allowed between the cell and the tap (default: G_TAP_MAX_SPACING/2))
sd_find_accessible_tap -nwell_break_names 
sd_find_accessible_tap -nwell_break_refs 
sd_find_accessible_tap -tap_cells (Specify particular tap cells to be searched (default: G_TAP_CELL))
sd_find_closest_cell -cell (Cell from which the closest cell is to be found)
sd_find_closest_cell -direction (Specify which direction (left/right/both) to search for the cells (default: both))
sd_find_closest_cell -distance (Specify the max distance allowed between the cell and the tap (default: G_TAP_MAX_SPACING/2))
sd_find_closest_cell -include_variants (Specify whether variants of the ref names provided should also be checked)
sd_find_closest_cell -inst_names 
sd_find_closest_cell -ref_cells (Ref names of cells to be searched)
sd_fn_calculate_track_region -cell (Lower level block name)
sd_fn_calculate_track_region -coordinate (Coordinate of original region)
sd_fn_create_stub_upf -outdir (output stub upf directory)
sd_fn_create_stub_upf -stub_modules (stub modules)
sd_fn_create_stub_upf -upf_dir (input upf directory)
sd_fn_create_track_check_edge -bounding_box 
sd_fn_create_track_check_edge -direction (Direction : X or Y)
sd_fn_create_track_check_edge -exclusive (Index of point in the list)
sd_fn_create_track_check_edge -index (Index of point in the list)
sd_fn_create_track_check_edge -points (location)
sd_fn_duplicate_terminal -attr (Specifies attribute to attached to the new terminal)
sd_fn_duplicate_terminal -port (Specifies port related to the terminal)
sd_fn_duplicate_terminal -terms 
sd_fn_eco_concat_verilog_file -out_file ()
sd_fn_eco_concat_verilog_file -v_files ()
sd_fn_eco_concat_verilog_file -v_list ()
sd_fn_get_io_connected_cells -net (Net name)
sd_fn_get_io_connected_cells -type (receive or driver)
sd_fn_insert_level_shifter -power (power)
sd_fn_place_global_dic_cells -dic_distance (User defined relative distance to keep between DICs. Default is got from central var G_DIC_DIST)
sd_fn_place_global_dic_cells -num_dics (User defined number of DIC pairs expected in design. Default is calculated based on core area)
sd_fn_place_global_dic_cells -remove_existing (User defined boolean switch if want to remove existing DIC cells and start afresh. Default OFF)
sd_fn_place_global_fid_cells -global_fid_distance 
sd_fn_place_global_fid_cells -num_global_fids (User defined number of global FIDs expected in design. Default is calculated based on core area)
sd_fn_place_global_fid_cells -remove_existing (User defined boolean switch if want to remove existing global FID cells and start afresh. Default OFF)
sd_fn_ps_connect_top_pg -cells (Specify the ps cells to insert via ladder)
sd_fn_ps_create_rb_on_pg -cell (Specify the ps cell to insert via ladder)
sd_fn_ps_create_rb_on_pg -layers (Specify the layers to check)
sd_fn_ps_create_rb_on_pg -net (Specify the ps net to insert via ladder)
sd_fn_pvt_setup -analysis (analysis type (max/min): 
sd_fn_pvt_setup -corner (corner name)
sd_fn_run_a_command_on_blocks -command (name of the TCL command to be executed)
sd_fn_run_parallel_set_of_commands_on_block -blocks (names of blocks)
sd_fn_run_parallel_set_of_commands_on_block -command_list 
sd_fn_save_user_attributes -outfile (File name)
sd_fn_source_icc_file -infile (Input file)
sd_fn_source_icc_file -outfile (output file)
sd_fn_source_icc_file -tag (Procedure tag)
sd_fn_template_based_partition_bbt -partition (Collection or list of partition to create bbt. Default: Selected)
sd_gcr_create_commands -bus_with_signal_flow 
sd_gcr_create_commands -debug (Add report command to print out details of each route. Default: Do not print report for each net)
sd_gcr_create_commands -devtest (DO NOT USE!!! Developer testing switch ONLY. Default: PRD)
sd_gcr_create_commands -nets (Nets to set gcr min/max layer workaround)
sd_gcr_create_commands -outfile (Specify output file-name for writing gcr commands)
sd_gcr_create_commands -quick_route (Route with no converge passes to speedup runtime. Default: Route with converge passes)
sd_gcr_create_commands -skip_pre_checking (Skip pre-checking for pin access issues. Default: Check)
sd_gcr_create_commands -strip_pg_mesh (Remove PG mesh during design readin. Default: Do not remove PG mesh)
sd_gcr_create_commands -trunk_only (Route on preferred layers only. Default: Route on preferred layers and other layers to access pins)
sd_gcr_create_commands -work_dir (Specify working directory-name for priority-route use)
sd_gcr_create_patterns -add_net_type (Add net type into the track spec of the pattern. Default: None)
sd_gcr_create_patterns -outfile (Specify output file-name for writing patterns file)
sd_gcr_create_patterns -verbose (Print more information. Default: None)
sd_gcr_create_patterns -work_dir (Specify working directory-name for priority-route use)
sd_gcr_dump_bus_constraints -outfile (Specify output file-name for GCR bus constraint file)
sd_gcr_dump_bus_constraints -verbose (Print more information. Default: None)
sd_gcr_dump_bus_constraints -work_dir (Specify working directory-name for priority-route use)
sd_gcr_pin_analysis_debug -outfile (Specify output file-name for debug report. Default: <block>_check_pin_access_debug.rpt)
sd_gcr_pin_analysis_debug -return (Return nets instead. Default: ErrCount)
sd_gcr_pin_analysis_debug -standalone (Standalone pin access reporting. Default: None)
sd_gcr_pin_analysis_debug -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
sd_gcr_routing_summary -outfile (Specify output file-name for summary report. Default: <block>_GCR_routing_summary.rpt)
sd_gcr_routing_summary -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
sd_generate_critical_nets -add_options 
sd_generate_critical_nets -max_paths (Total number of timing paths to generate. Default is 2000000 (2e6))
sd_generate_critical_nets -net_threshold 
sd_generate_critical_nets -slack_lesser_than 
sd_generate_pg_template -custom_only (Turn off power via creation)
sd_generate_pg_template -file (Template file name)
sd_generate_pg_template -layers (Generate power straps for specified layers only)
sd_generate_pg_template -macro (Create template for macro)
sd_generate_pg_template -no_stack_vias (Turn off stack via)
sd_generate_pg_template -no_vias (Turn off power via creation)
sd_get_boundary_cells_from_gvar -boundary_type_list (List of boundary cells with the GVARs of cell and orientation info)
sd_get_boundary_cells_from_gvar -layer (Layer To use for while expanding the GVAR)
sd_get_bus_layers_widths -verbose (Print more information. Default: None)
sd_get_macro_metal_layers -hml_type (Type for metal layer query, G_HEML, G_HPML or G_HSML)
sd_get_macro_metal_layers -macro_info (Array that will contain metal layer info per macro)
sd_get_macro_metal_layers -macro_refs (List of macro names)
sd_get_normalized_pattern -add_net_type (Add net type into the track spec of the pattern. Default: None)
sd_get_normalized_pattern -mult (Specify the pattern multipler)
sd_get_normalized_pattern -pattern (Specify the pattern)
sd_get_normalized_pattern -pitch (Pattern pitch)
sd_get_normalized_pattern -verbose (Print more information. Default: None)
sd_get_pattern_from_track_def -add_net_type (Add net type into the track spec of the pattern. Default: None)
sd_get_pattern_from_track_def -track_def (Specify the track definition)
sd_get_pattern_from_track_def -verbose (Print more information. Default: None)
sd_get_twire_config -use_pg_nets 
sd_get_twire_config -uses_aon_nets 
sd_get_twire_edge_polygons -layers (Only compute edge polygons for the specified layers)
sd_incr_stdcell_power_hookup -area (use defined area for hookup removal/insertion)
sd_incr_stdcell_power_hookup -cells (use area defined by cells boundary)
sd_insert_ps_cells_around_macro -va (voltage area for ps cell)
sd_lbist_constraints -scenarios (run for list of scenarios, by default running for all scenarios)
sd_limit_template_layers -excl_layers (exclude layers, mutual exclusive with layers)
sd_limit_template_layers -excl_tags 
sd_limit_template_layers -layers (include layers, mutual exclusive with excl_layers)
sd_limit_template_layers -tags 
sd_load_aocvm_gcd -corner (Name of corner, usually max or min)
sd_load_aocvm_gcd -timing_mode (Timing analysis mode: hold or setup)
sd_load_aocvm_legacy -corner (Name of corner, usually max or min)
sd_load_aocvm_legacy -timing_mode (Timing analysis mode: hold or setup)
sd_load_aocvm_legacy -voltage (Voltage for corner)
sd_load_aocvm_legacy -vt_list (List of valid VT types: ln, nn, etc)
sd_macropowerswitchorder -drive_p (Drive pin)
sd_macropowerswitchorder -inputPortPattern 
sd_macropowerswitchorder -outputPortPattern 
sd_macropowerswitchorder -va_name (Voltage name)
sd_mark_critical_nets_for_qea_fill -nets (List or collection of nets to be marked as critical for qea fill)
sd_mbist_constraints -scenarios (run for list of scenarios, by default running for all scenarios)
sd_mcmm_set_corner_constraints -corners (list of corners to run for, default is all)
sd_mcmm_set_mode_constraints -modes (list of modes to run for, default is all)
sd_mcmm_set_parasitics_parameters -corners (list of corners to work on, default is all)
sd_mcmm_set_process_labels_numbers -corners (list of corners to work on, default is all)
sd_mcmm_set_scenario_constraints -scenarios (list of scenarios to run for, default is all)
sd_mcmm_set_temperature -corners (list of corners to work on, default is all)
sd_mcmm_set_voltage -corners (list of corners to work on, default is all)
sd_mcmm_set_voltage_by_source -corners (list of corners to work on, default is all)
sd_mcmm_setup -keep_existing_scenarios 
sd_mcmm_setup -skip_loading_constraints 
sd_mcmm_source_constraints_file -filename (file name to source)
sd_mcmm_source_constraints_file -flags (flags passed to rdt_source_if_exists)
sd_mcmm_source_constraints_file -logfile (log file name)
sd_mcmm_timing_constraints -corners (list of corners to run for, default is all)
sd_mcmm_timing_constraints -modes (list of modes to run for, default is all)
sd_mcmm_timing_constraints -scenarios (list of scenarios to run for, default is all)
sd_merge_layout_files -cell (Specify top cell in the input layout file.)
sd_merge_layout_files -compress (Specify if the layout file is compressed)
sd_merge_layout_files -gds (Specify the input gds file.)
sd_merge_layout_files -merge_list 
sd_merge_layout_files -oasis (Specify the input oasis file.)
sd_merge_layout_files -units (Specify the length precision.)
sd_open_library -block (Block to be opened; default G_DESIGN_NAME)
sd_open_library -dont_copy (Does not copy the lib to design_LIB)
sd_open_library -init (Create the library and design (G_DESIGN_NAME))
sd_open_library -keep_all_blocks (Do not delete the non-opened blocks from library)
sd_open_library -lib (Library to be opened)
sd_open_library -load (Loads a library based on a tag)
sd_open_library -readonly (Open the library in read only mode)
sd_open_library -reset_references (Reset the references)
sd_open_library -update_design_tech (Update tech file and tlu+)
sd_open_library -update_techfile (Update the tech file)
sd_outputs_box_file -output_file (Specify the location of the output file)
sd_outputs_data_for_extraction -generate_boxfile (Generates the boxfile as a part of the FC pushdown call)
sd_outputs_data_for_extraction -input_lib (Pointer to input nlib)
sd_outputs_data_for_extraction -output_lib (Pointer to output lib)
sd_outputs_data_for_extraction -update_hips (Update the hip references-Ensure you have run noble -populate to get latest hip_list.tcl in WARD/collateral/rtl)
sd_pg_calculate_blockage -custom_pg (Include custom powergrid)
sd_pg_calculate_blockage -domain_name (Specify the domain name of upf design)
sd_pg_calculate_custom_grid_blockage -no_softmacro_blockage 
sd_pg_calculate_custom_grid_blockage -polygon (Specify the polygon of the custom grid)
sd_pg_set_strategy -block (blocks)
sd_pg_set_strategy -blockages (specify blockage for the power grid)
sd_pg_set_strategy -custom_tags (Generate power strategies for specified custom tags only)
sd_pg_set_strategy -net (net name)
sd_pg_set_strategy -pg_pin (create_pg_pins)
sd_pg_set_strategy -tag (strategy tag name)
sd_pg_set_strategy -va (voltage area)
sd_pg_set_strategy -va_mode (create strategy base on va area instead of design boundary)
sd_pg_via0_via1_insertion -dirty_mode (Insert missing vias)
sd_place_pins -nets (Nets to run place-pins on for testing)
sd_post_priority_route_report -nets (Nets to report on priority route)
sd_post_priority_route_report -use_gcr (Report from GCR priority routing. Default: ZRoute)
sd_post_priority_route_report -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
sd_pre_priority_route_report -nets (Nets to report on priority route)
sd_pre_priority_route_report -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
sd_priority_create_shields -nets (Nets to priority create-shields. Default: All)
sd_priority_create_shields -post_gcr (Post GCR shield modification. Default: None)
sd_priority_route -debug (Used specifically for GCR debug. Default: G_PRIORITY_DEBUG)
sd_priority_route -devtest (DO NOT USE!!! Developer testing switch ONLY. Default: PRD)
sd_priority_route -gcr_avoid_PG_tracks (Add net type into the track spec of the pattern and avoid using PG tracks. Default: None)
sd_priority_route -gcr_effort (Route effort: quick==quick-route, trunk==trunk-only, full==full-route. Default: G_GCR_EFFORT/full)
sd_priority_route -gcr_keep_session (ONLY use to keep GCR session loaded when there is a real need to run multiple times and close on last call. Default: Close)
sd_priority_route -gcr_route_clocks (Do not filter-out HFN clock nets for GCR routing. Default: G_GCR_ROUTE_CLOCKS)
sd_priority_route -gcr_skip_pre_checking 
sd_priority_route -gcr_specific_constr_only 
sd_priority_route -gcr_strip_pg_mesh (Remove PG mesh during design readin. Default: Do not remove PG mesh)
sd_priority_route -nets (Nets to priority route. Default: All Constrained/G_GCR_SPECIFIC_CONSTRAINTS_ONLY + G_USER_PRIORITY_NETS_FILE)
sd_priority_route -shield_only (Run shielding-only on priority routes. Default: G_PRIORITY_SHIELD_ONLY/Both)
sd_priority_route -use_gcr (Run GCR for priority routing. Default: G_GCR_ROUTE/ZRoute)
sd_priority_route -verbose (Print more information. Default: None)
sd_priority_route -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
sd_priority_route_group -nets (Nets to priority group-route)
sd_ps_handle_dangling_ack_net -drv_pin (Pin to drive the ps chain hier ack pin)
sd_ps_handle_dangling_ack_net -is_top_level_port 
sd_ps_handle_dangling_ack_net -ps_ack_port 
sd_ps_handle_dangling_ack_net -ps_ack_port_net 
sd_ps_pg_hookup -cells (Specify the ps cells to insert via ladder)
sd_ps_pg_hookup_use_cfg -cells (Use to specify individual cells, otherwise operation is performed on all cells)
sd_ps_pg_hookup_use_cfg -connect_layer (Specify the ungated layer to hookup. Default is m5)
sd_ps_pg_hookup_use_cfg -incremental (Run the power switch power hookup in incremental mode on newly added PS cells)
sd_ps_pg_hookup_use_cfg -ps_pin_name 
sd_ps_remove_hookup -cells (Specify the ps cells to insert via ladder)
sd_pwr_hookup_interity_check -checker_max_tracks_for_gcn 
sd_pwr_hookup_interity_check -checker_max_tracks_for_m0 
sd_pwr_hookup_interity_check -max_tracks_for_gcn_in_cell 
sd_pwr_hookup_interity_check -max_tracks_for_m0_in_cell 
sd_read_design -force_full_view (Force reading of full verilog - full view)
sd_read_layout_file -cell (Specify top cell name in input oasis)
sd_read_layout_file -oasis 
sd_read_layout_file -type (Specify dfm run type)
sd_remove_aon_pg_hookup -cells (Specify the aon cells to insert via ladder)
sd_remove_priority_routes -nets (Nets to remove priority routes)
sd_route_add_via_ladders -allow_drcs 
sd_route_add_via_ladders -report_tag (Report stage tag.)
sd_run_conformal_check -run_check (optional argument to run actual conformal check, default only shell shell executable file is generated)
sd_run_parallel_job -blocks (collection of blocks for which script will run)
sd_run_parallel_job -cells (collection of cells for which script will run)
sd_run_parallel_job -detach (detach)
sd_run_parallel_job -host_options 
sd_run_parallel_job -run_order (top_down or bottom_up or all)
sd_run_parallel_job -script_name (name of scripts to execute, include full-path to script)
sd_run_parallel_job -var_list (list_of_variable_value_pairs)
sd_run_parallel_job -work_dir (name of working directory where run_block_script jobs will be managed)
sd_seq_chain_alignment -anchors (Ports or pins that are startpoints for the chains)
sd_seq_chain_alignment -corridor (Routing corridor object that is created in the database)
sd_seq_chain_alignment -run_place_pins (Switch to enable place_pins command run after all constraints are set)
sd_set_detail_route_shape_use_and_physical_status -layers (List of layers to set shape-use and physical-status. Default: All)
sd_set_detail_route_shape_use_and_physical_status -nets (Nets to set shape-use from detail-route. Default: All)
sd_set_detail_route_shape_use_and_physical_status -phys_status 
sd_set_detail_route_shape_use_and_physical_status -shape_use (Shape-use to set from detail-route shape-use. Default: user_route)
sd_set_freeze_port_constraints -remove (remove all freeze port settings)
sd_set_freeze_port_constraints -type (data/clock/all )
sd_set_io_preroute_constraints -max_layer_constraint 
sd_set_io_preroute_constraints -min_layer_constraint 
sd_set_io_preroute_constraints -ports (List of port to check)
sd_set_io_preroute_constraints -use_ndr (Use ndr for the net. Default is not use)
sd_set_layer_costs -costlist (Specify a complete list {via1 via2 ... via9  m0 m1 ... m10})
sd_set_layer_costs -reset (Reset layer costs back to defaults)
sd_set_priority_route_options -trunk_only (Route on preferred layers only. Default: Route on preferred layers and other layers to access pins)
sd_set_priority_route_options -use_gcr (Set GCR route options. Default: ZRoute)
sd_snap_macro_placement -pushdown (Enable and control snapping for pushdowns)
sd_split_ps_chain -control_signal (List of control signal names of "a" chain of above power domains in the same order)
sd_split_ps_chain -domain_name (List of power domain names to split the chain)
sd_split_ps_chain -use_g_var_libcell (Uses G_POWER_SWITCH_CELL instead of upf lib cell)
sd_swap_macrohalos_heml4 -macros (to query blocks info for all macros)
sd_time_derate_setup -corners (list of corners to work on, default is all)
sd_tm_popup -disable_mim (Dont process MIM Cap layers)
sd_tm_route_terminal_blockage_on_boundary -layer (Layers to be processed)
sd_tm_route_terminal_blockage_on_boundary -only_blockages (If only blockages to create)
sd_tm_route_terminal_blockage_on_boundary -rects (Rectangle withtin which termianls/blockages are created)
sd_tm_write_collateral -convert_term_to_shape 
sd_tm_write_collateral -deleteCurrentLayerTM 
sd_tm_write_collateral -disable_mim (Dont process MIM Cap layers)
sd_tm_write_collateral -dont_delete_top_metals 
sd_tm_write_collateral -generate_def (To generate DEF file(both bu_tm & td_tm) : Default is .tcl format)
sd_tm_write_collateral -skip_bu_tm (In case if you want to generate only td_tm you can disable generating bu_tm with this option)
sd_write_collateral_for_block -block (Name of the block for which collateral is being written)
sd_write_collateral_for_block -cache_dir (Directory with cached collateral info)
sd_write_collateral_for_block -formats (List of formats to write collaterals)
sd_write_evr_collateral_for_one_cell -cell (Cell to write collateral for)
sd_write_evr_collateral_for_one_cell -file_name (File name)
sd_write_evr_collateral_for_one_cell -layers (List of layers to write EVR collateral for)
sd_write_layout_file -cell (Specify the cell for the layout file. Default is the current open cel)
sd_write_layout_file -compress (Specify if layout file to be compressed.  Oasis is compressed by default)
sd_write_layout_file -create_port_for_terminals 
sd_write_layout_file -ignore_blocks 
sd_write_layout_file -lib (Specify the lib for the cell to include in the layout file. Default is the current open ndm library)
sd_write_layout_file -output_file 
sd_write_layout_file -output_net_text (Specify if text is to be written for a net-shape)
sd_write_layout_file -rename_cell 
sd_write_layout_file -skip_fill_output (Specify if fill data should be skipped)
sd_write_layout_file -use_donut (Enable using donut models for sub blocks)
sd_write_oas2ndm -fillcell (Specify if oas write to FILL view)
sd_write_oas2ndm -input_oasis_file 
sd_write_oas2ndm -input_top_cell 
sd_write_oas2ndm -ndm_lib_cell 
sd_write_oas2ndm -ndm_lib_name 
sd_write_oas2ndm -ndm_lib_path 
sd_write_oas2ndm -rundir (run directory)
sd_zt_brb_on_pin_ends -pin (Pin to add routing blockages on ends)
sd_zt_create_brb_around_macro -back_off_half_dr (back_off brb half dr from boundary)
sd_zt_create_brb_around_macro -macro (generate brb for this macro)
sd_zt_create_fkp_over_macros -layers (layers to create fkp on)
sd_zt_create_staggered_pin_triplets -layers (Specify layers to stagger boundary pins.)
sd_zt_extend_power_staples_neighbors -terminals (Find neighbors of this non-staple terminal)
sd_zt_extend_power_staples_neighbors -zt_staple_ext 
sd_zt_extend_power_staples_to_boundary -layers (Only extend on these layers)
sd_zt_extend_power_staples_to_macros -layers (Only extend on these layers)
sd_zt_get_dbbrg_layer_spacing -layer (Layer to calculate dbbrg spacing)
sd_zt_neighbor_isolated_pins -layers (Only run on isolated pins on these layers)
sd_zt_neighbor_isolated_pins -terminals (Specify terminals to fix. Default is for all terminals of specified layer)
sd_zt_pull_back_boundary_terms -layers (Pull-back terminals on these layers)
sd_zt_query_term_neighbor -dir (Provide direction to look for neighbor: left/right/up/down)
sd_zt_query_term_neighbor -terminal (Find neighbor of this terminal)
sd_zt_stagger_pin_triplets -layer (Specify layer to stagger boundary pins.)
sd_zt_stagger_pin_triplets -length1 (First terminal length)
sd_zt_stagger_pin_triplets -length2 (Second terminal length)
sd_zt_stagger_pin_triplets -length3 (Third terminal length)
sd_zt_stagger_pin_triplets -length4 (Fourth terminal length)
sd_zt_stagger_pin_triplets -length5 (Fifth terminal length)
sd_zt_stagger_pin_triplets -length6 (Sixth terminal length.  Longest between length1, length2, length3, length4, length5 and lenght6 will be used to as first pin length in pattern. 2nd longest will be used as 2nd pin length and so on. )
set_info_var -caller (Procedure that uses the var (usually step procedure))
set_info_var -category (Step/procedure/category for the variable - default global)
set_info_var -one_of (List of user specified value for the variable)
set_info_var -required (Variable needs to be set)
set_info_var -type (Type of the variable. Similar to the option used by setvar - default: string)
set_ssc_clock -clock (name of the new generated clock)
set_ssc_clock -debug (enable debug message)
set_ssc_clock -from (name of the source register clock pin)
set_ssc_clock -to (port name at which you want to create generated clock)
set_ssc_data_read -clock (name of the clock against which the check should be defined)
set_ssc_data_read -debug (enable debug message)
set_ssc_data_read -from (name of the data port at which you want to create the check)
set_ssc_data_read -hold_args (hold value)
set_ssc_data_read -nofp (dont apply false paths)
set_ssc_data_read -setup_args (setup value)
set_ssc_data_read -to (name of the source register )
set_ssc_data_write -clock (name of the clock against which the check should be defined)
set_ssc_data_write -debug (enable debug message)
set_ssc_data_write -from (name of the source register name or pin)
set_ssc_data_write -hold_args (hold value)
set_ssc_data_write -nofp (dont apply false paths)
set_ssc_data_write -setup_args (setup value)
set_ssc_data_write -to (name of the data port at which you want to create the check)
setvar -constant (Value cannot be modified after setting)
setvar -info (Information about the parameter)
setvar -one_of (List of user specified value for the variable)
setvar -property (User property for parameter)
setvar -roulette (Values for roulette flow.)
setvar -subst (Run subst before returning the value in getvar)
setvar -type (Type of the parameter)
setvar_array_copy_partial -clean (Cleanup target array first)
setvar_array_copy_partial -from_array (Source array name)
setvar_array_copy_partial -from_tag (Source array key pattern)
setvar_array_copy_partial -to_array (Target array name)
setvar_array_copy_partial -to_tag (Target array key pattern)
unsetvar -array (Consider the parameter as an array)
write_checksum -output_directory 
write_checksum -scenario (Optional, scenario for which report needs to be generated; if not specified, will use current_scenario. This option should not be used for PT.)
write_checksum -type (Optional, one of the following checksum type "library design parasitics constraints". If this option is not used, all checksums are generated.)
write_clock_trunks -clock (List of clocks for which to write the clock trunk.)
write_clock_trunks -file (File to write TCL commands to.)
write_inc_srsn_for_eco -blocks 
write_pt_checksum -output_directory 
write_pt_checksum -pt_exec_path (Path to PT shell executable)
write_pt_checksum -pt_user_script 
write_pt_checksum -type (Optional, one of the following checksum type "library design parasitics constraints". If this option is not used, all checksums are generated.)
CSM::csm_cP -X (X delta)
CSM::csm_cP -Y (Y delta)
CSM::csm_cPx -N (N times)
CSM::csm_cPx -X (X delta)
CSM::csm_cPy -N (N times)
CSM::csm_cPy -Y (Y delta)
CSM::csm_eB -Y (Y coordinate to extend to)
CSM::csm_eL -X (X coordinate to extend to)
CSM::csm_eR -X (X coordinate to extend to)
CSM::csm_eT -Y (Y coordinate to extend to)
CSM::csm_mO -X (Delta X)
CSM::csm_mO -Y (Delta Y)
CSM::csm_routePins -dir (Direction of the routing: up|down|left|right)
CSM::csm_routePins -length (Length)
CSM::csm_routeTerm -dir (Direction of the routing: up|down|left|right)
CSM::csm_routeTerm -length (Length)
CSM::csm_sL -length (Length to set on the selected wires)
CSM::csm_sN -net_name (Net name to set to the selected object )
CSM::select_vias -add (Add to selected. Default: Replace)
CSM::select_vias -layer (Layers to select (vx vy vz). Default: All Connected)
CSM::select_vias -objs (Collection of objects to select wires from. Default: Selected)
EVR::convert_evr_tcl_to_icc -replace (Replace input file with converted file)
EVR::convert_evr_tcl_to_icc -safe (Any unknown command is commented out)
EVR::convert_evr_tcl_to_icc -to (Output file path for converted file)
EVR::cut_wires_cell -all (Includes C4 objects that are part of c4_id tag (c4bdrawn (c4), tv1, tm1), given -layer. Default, c4_id objects not touched)
EVR::cut_wires_cell -attributes_to_add 
EVR::cut_wires_cell -attributes_to_save 
EVR::cut_wires_cell -bloat (Bloat the cell polygon in microns)
EVR::cut_wires_cell -blockages (Include blockages in output files)
EVR::cut_wires_cell -bump_numbers (Return csv file that includes bump net names, numbers, x, and y. -nets ignored.)
EVR::cut_wires_cell -create_block (Create block declaration is not commented out)
EVR::cut_wires_cell -cut (Physically cut the wires inside the cell)
EVR::cut_wires_cell -dr (Cut wires according to dr rules. Wires cut at boundary will be ignored.)
EVR::cut_wires_cell -evr (Align saved output to cell location/rotation. Does not allow cut and remove)
EVR::cut_wires_cell -evr_cells (Add cell declaration in EVR of these cells. Empty string will use cellName argument instead)
EVR::cut_wires_cell -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)
EVR::cut_wires_cell -icc (Converts tcl output from ICC2 to ICC compatible code)
EVR::cut_wires_cell -multiple (Allow multiple cells to be used when otherwise an error would occur requiring user to pick an instance.)
EVR::cut_wires_cell -net_type_from_netname 
EVR::cut_wires_cell -netlist (Use verilog netlist(s) to map netnames. See EVR::parse_netlist for more details)
EVR::cut_wires_cell -nets (Only run on specified nets)
EVR::cut_wires_cell -not_strict (Allow multiple cells to not be adjacent. Bbox created around all cells)
EVR::cut_wires_cell -pinconn_map (Use current layout to map current level net to pin name)
EVR::cut_wires_cell -pinlist (Use csv pinlist to map netnames. See EVR::parse_pinlist for more details)
EVR::cut_wires_cell -pinlist_lowercase (Converts all nets in pinlist to lowercase before mapping)
EVR::cut_wires_cell -port_to_net (Treats terminal objects as net objects. No port declaration in tcl file(s))
EVR::cut_wires_cell -rcext (Like -evr, but cuts boundary wires so there is no overlap. Signal nets renamed to syn_fcl_<net>. All power is vss)
EVR::cut_wires_cell -remove (Removes all the shapes and vias inside the polygon)
EVR::cut_wires_cell -save (Save layers inside cell to a file)
EVR::cut_wires_cell -terms (Include terminals objects)
EVR::cut_wires_cell -to (Save to folder location)
EVR::cut_wires_cell -to_file (Name of file prefix, i.e. $filename.evr.tcl)
EVR::cut_wires_cell -to_inst_name (Use instance name instead of cellname for file prefix)
EVR::cut_wires_cell -top_cell (Name of top level cell in netlist)
EVR::find_all_cell_locations -boundary (Return the boundary (string) of the cell)
EVR::find_cell_hier -boundary (Return the boundary (string) of the cell)
EVR::find_cells -boundary (Return the boundary (string) of the cell)
EVR::find_inst -boundary (Return the boundary (string) of the cell)
EVR::get_cell_info -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)
EVR::get_cell_info -multiple (Allows for multiple cells to be returned)
EVR::get_cell_poly -bbox (Bbox (ANDs with cells). Can be string/geo_mask/shape)
EVR::get_cell_poly -boundary (Polygon (ANDs with cells). Can be string/geo_mask/shape)
EVR::get_cell_poly -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)
EVR::get_cell_poly -multiple (Allow multiple cells to be used when otherwise an error would occur requiring user to pick an instance.)
EVR::parse_netlist -cell (Instance name of the subcell, i.e. partition inside soc.v. Only parses nets in that cell)
EVR::parse_netlist -top_cell (By default, all cell wires will always be parsed. Add -top_cell to only parse wires of top level cell (interface always parsed).)
EVR::parse_pinlist -include_cell (Include the cell names in the mapping instead of just hip net)
EVR::parse_pinlist -lower (Make all nets lowercase (ignore case))
EVR::place_cell -dx (Offset x coordinate of the cell by this dx)
EVR::place_cell -dy (Offset y coordinate of the cell by this dy)
EVR::place_cell -inst (Instance name for the cell. Default is cellName)
EVR::place_cell -o (Orientation of the cell. Default is R0)
EVR::place_cell -replace (If the cell instance already exists in design, replace it. Otherwise existing cell is returned as is)
EVR::place_cell -verbose (Display more information)
EVR::place_cell -view (View type of cell. Default is "frame")
EVR::place_cell_auto -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)
EVR::place_cell_auto -inst (Name to call the cell. Default is cellName)
EVR::place_cell_auto -optcell (Place this cell instead of one used for searching (cell). Useful if you have cell with a different name than the cell in the floorplan)
EVR::place_cell_auto -verbose (Display more information)
EVR::place_cell_auto -view (View type of the cell. Default is "frame")
EVR::source_to -cell (name of the cell or instance name for hierarchical cell)
EVR::source_to -create_block (Uses create_block and boundary in file generate a block view)
EVR::source_to -create_net (This will run create_net to ensure that all shapes are created under any netname)
EVR::source_to -dx (x coordinate for translating wire. Default is 0.)
EVR::source_to -dy (y coordinate for translating wire. Default is 0.)
EVR::source_to -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost)
EVR::source_to -layers (Only source wires with specified metal layers)
EVR::source_to -nets (Only source wires with specified nets)
EVR::source_to -o (orientation of the wires. Default is R0)
EVR::source_to -tag (tag the objects with attribute (source_tag))
EVR::source_to -term2wire (convert terms to wires)
MIM::find_cell_hier -boundary (Return the boundary (string) of the cell)
MIM::find_cells -boundary (Return the boundary (string) of the cell)
MIM::get_cell_info -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)
MIM::get_cell_info -multiple (Allows for multiple cells to be returned)
MIM::get_cell_poly -bbox (Bbox (ANDs with cells). Can be string/geo_mask/shape)
MIM::get_cell_poly -boundary (Polygon (ANDs with cells). Can be string/geo_mask/shape)
MIM::get_cell_poly -hier (Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost)
MIM::get_cell_poly -multiple (Allow multiple cells to be used when otherwise an error would occur requiring user to pick an instance.)
MIM::mim_auto_regions -bloat (Set bloat distance around metals and vias used to create regions. Default is 50um.)
MIM::mim_auto_regions -clear (Clear the annotations)
MIM::mim_auto_regions -ignore (Ignore existing regions while creating new ones (will result in overlaps))
MIM::mim_auto_regions -min_area (Set the minimum area (mm^2) of a new region. Default is 0.003mm^2)
MIM::mim_auto_regions -remove_kors (Remove exisiting kors before creating new regions)
MIM::mim_auto_regions -replace (Remove existing regions and create new ones)
MIM::mim_auto_regions -test (Don't add regions, just show annotation)
MIM::mim_auto_regions -vias (Use vias to create regions)
MIM::run_mim_flow -file (path to the UIN file. )
MIM::run_mim_flow -tool (Use "icv" or "pds" for invoking MIMGEN. pds = _pypdsbuilder.)
MIM::run_mimgen_icv -cfg (Override for run_icv.cfg script for MIMGEN. Under G_KIT_PATH is the default)
MIM::run_mimgen_icv -debug (Debug switch to enable debug outputs)
MIM::run_mimgen_icv -mimrunsetpath 
MIM::run_mimgen_icv -project (Project switch for project specific flow steps)
MIM::run_mimgen_icv -rundir (Directory where the MIMGEN job will run. Default is {pwd}/{design}_icv)
MIM::run_mimgen_icv -uin (path to the UIN file)
MIM::run_mimgen_local -mimrunsetpath 
MIM::run_mimgen_local -rundir (Directory where the MIMGEN job will run. Default is $WARD/mimgen/)
MIM::run_mimgen_local -uin (path to the UIN file)
MIM::run_mimgen_pds -debug (Debug switch to enable debug outputs)
MIM::run_mimgen_pds -uin (path to the UIN file)
above_fc::above_fc -c4_r1_cell (Name of the R1 C4 bump cell)
above_fc::above_fc -c4_r2_cell (Name of the R2 C4 bump cell)
above_fc::above_fc -c4bump_lib (Full path to the C4 Bump cell library file)
above_fc::above_fc -calc_dimensions_only 
above_fc::above_fc -dic_lib (Full path to the DIC ndm file)
above_fc::above_fc -die_file (Full path to the die file)
above_fc::above_fc -edm_edm_pins (EDM ring pin names to be connected to SoC)
above_fc::above_fc -edm_etch_combined (Set this option if EDM and ETCH are combined in one library, provide the path through -edm_lib option)
above_fc::above_fc -edm_lib (Full path to the EDM ndm file)
above_fc::above_fc -etch_lib (Full path to the ETCH ndm file)
above_fc::above_fc -pkgtop_name (The name for the top level above FC design)
above_fc::above_fc -shim_12pp_cell 
above_fc::above_fc -shim_8pp_cell 
above_fc::above_fc -shim_lib (Full path to the SHIM cell library file)
above_fc::above_fc -soc_edm_pins (Soc pin names to be connected to EDM ring)
above_fc::above_fc -soc_lib (Full path to SoC ICC2 nlib database)
above_fc::above_fc -soc_name (The name of the top level SoC design)
above_fc::process_die_file -case (Maintains case sensitivity. Default all nets converted to lowercase)
above_fc::process_die_file -dx (Translate the die file by dx um)
above_fc::process_die_file -dy (Translate the die file by dy um)
above_fc::process_die_file -o (Rotate or flip die file. Options are R0, R90, R180, R270, MX, MXR90, MY, MYR90)
above_fc::process_die_file -pkgtop (Sets die at 0,0 without rotation from die_drawn2Final_transform)
above_fc::propagate_bumps -default_layer (Layer to use in case of unknown layer)
above_fc::propagate_bumps -pins (Collection of pins to propagate)
above_fc::read_die_file_cells -case (Maintains case sensitivity. Default all nets converted to lowercase)
above_fc::read_die_file_cells -dx (Translate the die file by dx um)
above_fc::read_die_file_cells -dy (Translate the die file by dy um)
above_fc::read_die_file_cells -o (Rotate or flip die file. Options are R0, R90, R180, R270, MX, MXR90, MY, MYR90)
above_fc::read_die_file_cells -pkgtop (Sets die at 0,0 without rotation from die_drawn2Final_transform)
c4bump::connect_hierarchical_pins -direction (Port/pin direction.  DEFAULT: in)
c4bump::connect_hierarchical_pins -pin_name_list (List of pin names to connect.  Ports/pins/nets are created as necessary.)
c4bump::connect_hierarchical_pins -type (Net type.  DEFAULT = signal: 
c4bump::generate_c4_bump_files -input_path (Input path for partition TM1 files)
c4bump::generate_c4_bump_files -library (Library path and name)
c4bump::generate_c4_bump_files -output_path (Output path for toplevel C4 bump files)
c4bump::generate_c4_bump_files -top_block (toplevel block)
c4bump::hier_connect_net_to_pin -net (Net to be connected.  The net is created if it does not exist.)
c4bump::hier_connect_net_to_pin -pins (Leaf pins to be connected.  The pins must already exist.)
c4bump::hier_connect_net_to_pin -type (Net type.  DEFAULT = signal: 
c4bump::write_loc_for_field -debug (Create a log file with data source of all block cells.)
c4bump::write_loc_for_field -depth (depth to extract to top-level loc file)
c4bump::write_loc_for_field -file (output file name)
c4bump::write_loc_for_field -print (Print copy of output to screen.)
cleanup::convert_wires_to_routing_corridors -match (Match wire dimensions. Default: Size)
cleanup::create_terminals_matching_pins -layers (List of layers of which to create terminals only. Default: Pin-Layer)
cleanup::remove_duplicate_vias -method (Specify either all or selected )
cleanup::remove_duplicate_vias -netname (Specify the net (a requirement for all method only) )
cleanup::remove_null_shape_objects -force (Force remove NULL shapes. Default: Return Only)
cleanup::remove_null_shape_objects -layers (List of layers to remove NULL shapes. Default: Interconnect)
clk_bu::check_glbdrv_legs -cells (list of cells)
clk_bu::is_cell_bbox_in_die -bbox (Bbox)
clkpush::pushdown_clock_network -buffered_nets (buffered nets)
clkpush::pushdown_clock_network -clk_cells (clk cells)
clkpush::pushdown_clock_network -filter (filter text)
clkpush::pushdown_clock_network -unbuffered_nets (unbuffered nets)
clock::check_clock_cells -clock_cells (Collection of clock cells)
clock::check_clock_cells -file (Report file name)
clock::check_clock_cells -verbose (Print all violators)
clock::fix_clock_cell_vt -cells (Cells to swap)
clock::fix_clock_cell_vt -vt (Vt type identifier in cell name. Example: l or n)
clock::get_clock_cells -clock (List of clocks)
clock::get_clock_cells -filter (Filter the dont_touch/fixed cells)
clock::replace_nonclock_cells -cells (Cells to swap)
clock::resize_cells_to_valid_size -cells (Cells to swap)
collgen::add_net -net (net to be created)
collgen::add_net -nettype (net type. DEFAULT: signal)
collgen::add_port -port (port to be created)
collgen::add_port -portdir (port direction)
collgen::add_port -porttype (port_type to set for -port)
collgen::add_port_and_net -net (net to be created)
collgen::add_port_and_net -nettype (net_type to set for -net)
collgen::add_port_and_net -port (port to be created)
collgen::add_port_and_net -portdir (port direction)
collgen::add_port_and_net -porttype (port_type to set for -port)
collgen::cgn_connect_net -net (net to be connected)
collgen::cgn_connect_net -pin (pin to be connected)
collgen::cleanup_port -debug (Print out pins and buffers visited.)
collgen::cleanup_port -filter (apply filter for removing objects.)
collgen::cleanup_port -ports (List of port or hier pin names.)
collgen::connect_port -filehandle (File handle to write out to the file.)
collgen::connect_port -ports (List of port and hierarchical pin names.)
collgen::copy_lib_and_refs -no_refs (To NOT copy local references like (./inputs/*.ndm). Default: Copy)
collgen::dump_floorplan -format (Write out in icc or icc2 format. DEFAULT: icc2: 
collgen::dump_floorplan -objects (Collection of objects to write out.)
collgen::dump_floorplan -output_file (Output file name.)
collgen::dump_pin_constraints_for_selected -no_fts (Filter out FTs for write-out. Default: All)
collgen::dump_pin_constraints_for_selected -objects (Collection or list of ports/pins. Default: Selected)
collgen::dump_routes -format (Write out in icc or icc2 format. DEFAULT: icc2: 
collgen::dump_routes -objects (Collection of objects to write out.)
collgen::dump_routes -output_file (Output file name.)
collgen::dump_terminals_per_block -file_suffix (Suffix string to be used for each file name: e.g. ${block}$suffix)
collgen::dump_terminals_per_block -objects (Selected terminals, pins, or ports.  DEFAULT: All hierarchical terminals in current design.)
collgen::dump_terminals_per_block -outdir (Output directory to write the file(s).  DEFAULT: Current working directory.)
collgen::generate_formality_do_file -file_name (name of formality do-file)
collgen::get_tail_connectivity -port_array (Empty port array variable that will be populated with port name and laod net name.)
collgen::get_tail_connectivity -ports (Ports of the partition to trace.)
collgen::read_wrapper_shadow_eco -input_dir (input dir shadow tcl file)
collgen::set_td_type -clear (Remove the td_type attribute.  Required and mutually exclusive with -td_type option.)
collgen::set_td_type -ports (Ports of the partition to mark/unmark with td_type value.)
collgen::set_td_type -td_type (td_type value. Required and mutually exclusive with -clear option.)
collgen::split_blocks -blocks (Target blocks list)
collgen::split_blocks -no_refs (To NOT copy local references like (./inputs/*.ndm). Default: Copy)
collgen::split_blocks -tlib (Target library to create a copy)
collgen::write_macro_shell_verilog -macro_list (list of macros to generate shell verilog)
collgen::write_td_subset_cells -block (Name of current block.)
collgen::write_td_subset_cells -output_file (Output file name. DEFAULT: ${block}_td_${td_type}_route_eco.tcl)
collgen::write_td_subset_cells -path (Path to default output file name)
collgen::write_td_subset_cells -td_type (Value of td_type attribute.)
collgen::write_td_subset_connectivity -block (Name of current block.)
collgen::write_td_subset_connectivity -output_file (Output file name. DEFAULT: ${block}_td_${td_type}_eco.tcl)
collgen::write_td_subset_connectivity -path (Path to default output file name)
collgen::write_td_subset_connectivity -td_type (Value of td_type attribute.)
collgen::write_td_subset_routes -block (Name of current block.)
collgen::write_td_subset_routes -output_file (Output file name. DEFAULT: ${block}_td_${td_type}_route_eco.tcl)
collgen::write_td_subset_routes -path (Path to default output file name)
collgen::write_td_subset_routes -td_type (Value of td_type attribute.)
collgen::write_wrapper_shadow_eco -append_output (append to output file)
collgen::write_wrapper_shadow_eco -input_shadow_file 
collgen::write_wrapper_shadow_eco -nets (nets)
collgen::write_wrapper_shadow_eco -output_dir (output dir shadow tcl file)
common::check_error_counter -return_num (Return the number of errors only)
comp::remove_icc_cmds_from_sdc_file -cmds_to_remove (ICC cmds not supported in ICC2 scheduled for removal)
comp::remove_icc_cmds_from_sdc_file -sdc_file (Input file)
comp::translate_icc2_orientations -file (Input file)
comp::translate_icc2_vias_file -in_pg_vias_file (Input file)
comp::translate_icc2_vias_file -in_signal_vias_file 
comp::translate_icc2_vias_file -outfile (output file)
comp::translate_icc_dc_dont_touch_cells_file -infile (Input file)
comp::translate_icc_dc_dont_touch_cells_file -outfile (output file)
comp::translate_icc_place_file -infile (Input file)
comp::translate_icc_place_file -outfile (output file)
comp::translate_icc_route_file -infile (Input file)
comp::translate_icc_route_file -outfile (output file)
comp::translate_icc_sdc_file -infile (Input file)
comp::translate_icc_sdc_file -outfile (output file)
comp::translate_icc_sdc_file -sdc_lib_mapping_file 
comp::translate_icc_track_file -infile (Input file)
comp::translate_icc_track_file -outfile (output file)
ctm::balance_levels -clk (Name of the clock)
ctm::balance_levels -level (Number of levels between cell and source)
ctm::check_lib_constraints -clks (Clock names - default ctmesh clocks)
ctm::disable_multi_clocks -clks (Name of the clock source)
ctm::duplicate_flop_chain -bbox (Bounding box size)
ctm::duplicate_flop_chain -levels (No of levels to be duplicated)
ctm::duplicate_flop_chain -pins (Collection of pins driven by the logic tobe duplicated)
ctm::duplicate_instance -copy_user_attributes 
ctm::duplicate_instance -inst (Instance to be duplicated)
ctm::duplicate_instance -pins (List of receivers of the original cell to be driven by the new cell)
ctm::duplicate_instance -prefix (Prefix; any suffix used will be ignored)
ctm::duplicate_instance -suffix (Suffix)
ctm::get_clock_cells -clk (Name of the clock source or net)
ctm::get_clock_cells -group (Name of the DOP group)
ctm::get_clock_cells -level (number of levels between cell and source)
ctm::get_clock_leaf_pins -clk (Name of the clock or collection)
ctm::get_clock_leaf_pins -group (Name of the DOP group)
ctm::get_clock_leaf_pins -level (Number of levels from clock source)
ctm::get_clock_leaves -clk (Name of the clock source (port))
ctm::get_clock_leaves -group (Name of the DOP group)
ctm::get_clock_leaves -level (number of levels between cell and source)
ctm::get_clock_nets -clk (Name of the clock source or net)
ctm::get_clock_nets -group (Name of the DOP group)
ctm::get_clock_nets -level (number of levels between cell and source)
ctm::get_clock_var -clk (Clock name)
ctm::get_clock_var -quiet (Does not error when the var is not defined)
ctm::get_exceptions -clk (Name of the clock source (port))
ctm::get_exceptions -group (Name of the DOP group)
ctm::get_grid_nets -clk (Name of the clock)
ctm::get_grid_nets -group (Name of DOP group)
ctm::get_gridclk -master (Return the master clocks if the clocks are generated)
ctm::get_non_buffer_driver -pins (name list or collection of pins)
ctm::nominalize_clock_cells -clks (Clocks)
ctm::remove_dangling_clock_cells -clks (Clocks)
ctm::report_clock_levels -clks (Name of the clock source or net)
ctm::report_clock_levels -groups (Name of the clock groups)
ctm::set_exceptions -clocks (Clocks)
ctm::set_exceptions -ignore_gen_clocks 
ctm::set_exceptions -ignore_pins (Collection of pins to ignore)
ctm::set_exceptions -stop_cells (Collection of cells)
ctm::set_exceptions -stop_pins (Collection of stop pins)
ctm::set_ideal_latency -clk (Name of the clock)
ctm::set_ideal_latency -scenario (Name of the scenario)
ctm::set_spine_net_timing -clk (Clock)
ctm::set_stop_pins -clocks (Clocks)
ctm::set_stop_pins -pins (Pins to set exceptions)
ctm::stamp_gridnet_delays -clks (Clocks)
ctm::write_cell_delay_report -clocks (Clocks)
ctm::write_cell_delay_report -file ()
ctm::write_latency_diff_report -clocks (Clocks)
ctm::write_latency_diff_report -file ()
ctm::write_latency_expanded_report -clocks (Clocks)
ctm::write_latency_expanded_report -file ()
ctm::write_net_delay_report -clocks (Clocks)
ctm::write_net_delay_report -file ()
ctm::write_transition_report -clocks (Clocks)
ctm::write_transition_report -file ()
cts::expand_refs -return (Return the cells list)
cts::set_constrainted_clock_max_transition -clocks (Collection of clocks from current mode)
cts::set_constrainted_clock_max_transition -max_tran (Max transition value)
cts::set_constrainted_clock_max_transition -scenarios (Collection of scenarios)
dmm::report_ddh -file (Name of report file)
dop::get_dop_clocks -force (Reload clock_types.tcl file)
dop::get_dop_clocks -type (List of clock types (ctmesh, cts, etc) - Default all)
dop::get_dop_output_nets -clock (Name of the clock)
dop::get_dop_output_nets -force (Reload clock_types.tcl file)
dop::get_dop_output_nets -group (DOP group name; default *)
dop::get_dop_output_nets -type (List of clock types (ctmesh, cts, etc) - Default all)
dop::get_dops -clock (Name of the clock)
dop::get_dops -force (Reload clock_types.tcl file)
dop::get_dops -group (Group name)
dop::get_dops -type (List of clock types, ctmesh cts - Default both)
dop::get_groups_of_clock -clk (Clock name)
dop::get_groups_of_clock -type (List of clock types, ctmesh cts - Default both)
dop::get_master_dop_pin -dop_pins (Collection containing the DOP pins)
dop::get_master_dop_pin -exception_pins 
dop::get_ref_clock -group (Group name)
dop::insert_dop_via_ladder -allow_drcs (Allow drcs for debug)
dop::insert_dop_via_ladder -dop_nets (DOP nets - default all CTMESH dop nets)
dop::insert_dop_via_ladder -dop_pins (DOP pins - default all CTMESH dop pins)
dop::insert_dop_via_ladder -remove (Remove existing straps - default skip)
dop::legalize_dops -dops (DOP cells to be legalized)
dop::legalize_dops -layer (Layer used for aligning the DOP cell - align the left edge of DOP to mx ground track)
dop::read_clock_types -file (Read this clock_types.tcl file)
dop::read_clock_types -force (Reread clock_types.tcl file)
dop::reconnect_dop_taps -dop_pins (Collection contaning the DOP pins)
dop::reconnect_dop_taps -taps (collection with tap cells)
dop::shield_dop_nets -dirty_mode (Allow DRCs for debug)
dop::shield_dop_nets -dop_nets (DOP nets)
draw::add_text -color (color of drawing. The default is white)
draw::add_text -location (location as {x y})
draw::add_text -text (Content of text)
draw::add_text -width (width of drawing. The default is 4)
draw::draw_alignment_edge -color (specify the color. Default is yellow)
draw::draw_alignment_edge -edge (specify the left or right edge)
draw::draw_alignment_edge -layer (layer name)
draw::draw_bbox -bbox (bbox)
draw::draw_bbox -color (color of drawing. The default is white)
draw::draw_bbox -cross (draw a cross)
draw::draw_bbox -width (width of drawing. The default is 2)
draw::draw_line -color (color of drawing. The default is white)
draw::draw_line -points (list of points.)
draw::draw_line -type (Show line type, line, arrow, polyline, polygon)
draw::draw_line -width (width of drawing. The default is 4)
draw::draw_polygon -color (color of drawing. The default is white)
draw::draw_polygon -points (list of polygon points)
draw::draw_polygon -width (width of drawing. The default is 2)
draw::draw_routing_track -colors (Colors. Number should be atleast number of widths)
draw::draw_routing_track -layer (layer name)
draw::draw_routing_track -width (layer width. Default is all width)
dtDfm::V0_328_vss_fixing -contact_name (name of contact to place for v0_328 fixing)
dtDfm::V0_328_vss_fixing -ground_name (Name of ground rail (default = vss))
dtDfm::V0_328_vss_fixing -ground_voltage_areas 
dtDfm::V0_328_vss_fixing -keepin_cells_list 
dtDfm::V0_328_vss_fixing -power_name (Name of power rail (default = vcc))
dtDfm::V0_328_vss_fixing -power_voltage_areas 
dtDfm::V0_328_vss_fixing -process_name (process name)
dtDfm::V0_328_vss_fixing -write_def_file 
dtDfm::fill_base_layer -density_boundary_assumption 
dtDfm::fill_base_layer -density_kor_assumption 
dtDfm::fill_base_layer -density_window_size 
dtDfm::fill_base_layer -density_window_x_offset 
dtDfm::fill_base_layer -density_window_x_stepping 
dtDfm::fill_base_layer -density_window_y_offset 
dtDfm::fill_base_layer -density_window_y_size 
dtDfm::fill_base_layer -density_window_y_stepping 
dtDfm::fill_base_layer -excludeKOR (Exclude KOR layer objs)
dtDfm::fill_base_layer -far_fill_density_target 
dtDfm::fill_base_layer -keepout_cells_list 
dtDfm::fill_base_layer -korspX (Fill to KOR X spacing in micron)
dtDfm::fill_base_layer -korspY (Fill to KOR Y spacing in micron)
dtDfm::fill_base_layer -layer (Metal layer to fill - i.e. poly)
dtDfm::fill_base_layer -near_fill_density_target 
dtDfm::fill_base_layer -ply (Polygon region based fill, i.e {0.0,0.04 0.0,182.36 207.32,182.36 ...})
dtDfm::fill_base_layer -plys (Multiple polygon region based fill, i.e { {polygon1} {polygon2} ... })
dtDfm::fill_base_layer -top_level_only_kor 
dtDfm::fill_base_layer -verbatim (Adds PXL code to UIN file verbatim)
dtDfm::fill_metal_icv -break_min_length (Break pattern min length of wires to apply breaks to)
dtDfm::fill_metal_icv -break_offset (Break pattern offset)
dtDfm::fill_metal_icv -break_pattern 
dtDfm::fill_metal_icv -break_patterns 
dtDfm::fill_metal_icv -cellname (	Name of the cell on which fill is to be performed
dtDfm::fill_metal_icv -do_ungridded_fill (Do ungridded fill)
dtDfm::fill_metal_icv -grid_patterns 
dtDfm::fill_metal_icv -hybrid (Do hybrid fill)
dtDfm::fill_metal_icv -layer (Metal layer to fill - i.e. metal2)
dtDfm::fill_metal_icv -offset (Fill pattern offset wrt left/bottom boundary of the cell)
dtDfm::fill_metal_icv -outputcellname 
dtDfm::fill_metal_icv -pattern (Pattern has the format triplet1:triplet2:.....
dtDfm::fill_metal_icv -property (Fill metal property info
dtDfm::fill_metal_icv -region_grids (region grids
dtDfm::fill_metal_icv -stub_property 
dtDfm::fill_metal_icv -stubnet (Genesys specific feature: net name to be used for stubs
dtDfm::fill_metal_icv -techname (Techname of the cell
dtDfm::fill_metal_icv -transition_offset (Transition pattern offset)
dtDfm::fill_metal_icv -transition_pattern 
dtDfm::fill_metal_icv -transition_patterns 
dtDfm::fill_metal_icv -transition_period (Transition pattern period)
dtDfm::fill_metal_icv -viewname (Viewname of the cell
dtDfm::fill_metal_icv_init -cellname (Name of the cell on which fill is to be performed)
dtDfm::fill_metal_icv_init -do_final_texting 
dtDfm::fill_metal_icv_init -explicit_parallel 
dtDfm::fill_metal_icv_init -fast_read_fill_vias (Use alternative read in procedure for via fill only. Should only be used if filling via only and there is a large number of fill vias. This is a workaround for situations when reading in a large number of fill objects causes Genesys to hang)
dtDfm::fill_metal_icv_init -fillincelview (ICC specific option: saves fill in MW CEL view)
dtDfm::fill_metal_icv_init -fillinmw (ICC specific option: saves fill in MW)
dtDfm::fill_metal_icv_init -icv_options (List of options to be used with ICV)
dtDfm::fill_metal_icv_init -launch_script 
dtDfm::fill_metal_icv_init -layer_map_for_mw 
dtDfm::fill_metal_icv_init -mwlibrary (ICC specific option: MW library name)
dtDfm::fill_metal_icv_init -mwoutpath (ICC specific option: directory in which MW library resides)
dtDfm::fill_metal_icv_init -nbclass (Request this type of netbatch machine (default: SLES10_EM64T_16G))
dtDfm::fill_metal_icv_init -nbpool (Enable Netbatch on -explict_parallel max number of Netbatch jobs using pool specified (ie: pdx_dts))
dtDfm::fill_metal_icv_init -nbslot (Submit netbatch jobs to this specified queue slot (ie: cds))
dtDfm::fill_metal_icv_init -netname_for_untexted_objects 
dtDfm::fill_metal_icv_init -no_tracks_file 
dtDfm::fill_metal_icv_init -only_write_uin (When this option is used fill_metal_icv only writes out UIN file)
dtDfm::fill_metal_icv_init -outputcellname 
dtDfm::fill_metal_icv_init -property (Genesys specific option: fill metal property info)
dtDfm::fill_metal_icv_init -rename_nets (List of nets to be renamed { {from1 to1} {from2 to2} ... })
dtDfm::fill_metal_icv_init -run_mode (Specify this option as: [list mode1 mode2...].  The user is to provide non-conflicting modes.  The following modes are supported: vfill_w_min_density (default) vfill_w_no_breaking use_existing_uin verbatim_only_uin.)
dtDfm::fill_metal_icv_init -save_workdir (Saves ICV work directory for debugging purpose)
dtDfm::fill_metal_icv_init -skip_dummy_250 
dtDfm::fill_metal_icv_init -skip_output (Skip STM output)
dtDfm::fill_metal_icv_init -skip_result_stm_output 
dtDfm::fill_metal_icv_init -stream (Path to an existing stream file, skips generating a new stream file)
dtDfm::fill_metal_icv_init -streamlined (Do necessary setup to run streamlined metal/via fill
dtDfm::fill_metal_icv_init -stub_property 
dtDfm::fill_metal_icv_init -stubnet (Genesys specific option: net name to be used for stubs
dtDfm::fill_metal_icv_init -techname (Techname of the cell)
dtDfm::fill_metal_icv_init -text_extensions 
dtDfm::fill_metal_icv_init -uindir (Location to save UIN files, default location <work_area_root_dir>/pds/uins)
dtDfm::fill_metal_icv_init -use_lnf_input (Uses LNF from disk as input format for the flow)
dtDfm::fill_metal_icv_init -use_pds (Use PDS to launch ICV job; required to support netbatch in non -explict_parallel mode)
dtDfm::fill_metal_icv_init -verbatim (Adds PXL code to UIN file verbatim: flexfill_fill_layers.rs)
dtDfm::fill_metal_icv_init -viewname (Viewname of the cell)
dtDfm::fill_metal_icv_run_streamlined -layer_opts (list of opts for each layer)
dtDfm::fill_metal_icv_run_streamlined -layers (list of fill layers)
dtDfm::fill_metal_icv_run_streamlined -prune_cells_lists 
dtDfm::fill_metal_icv_run_streamlined -tiling_opts (list of tiling opts for each layer)
dtDfm::fill_via_icv -check_for_hv (Check for HV rules in via fill.)
dtDfm::fill_via_icv -connect_to_existing_floating_metal 
dtDfm::fill_via_icv -ehv_nets (Names of the EHV nets)
dtDfm::fill_via_icv -fill_container_name 
dtDfm::fill_via_icv -hv_nets (Names of the HV nets)
dtDfm::fill_via_icv -layers (Via layers to fill - i.e. {vcn, via2, via9})
dtDfm::fill_via_icv -uhv_nets (Names of the UHV nets)
dtDfm::fill_via_icv -use_drawn_kor 
dtDfm::fill_via_icv -use_fill_kor 
dtDfm::fill_via_icv -use_global_kor 
dtDfm::fill_via_icv -use_pod_density_windows 
dtDfm::fill_via_icv -use_route_kor 
dtDfm::fill_via_icv -use_switch_id_kor 
dtDfm::fill_via_icv -verbatim (Adds PXL code to UIN file verbatim)
dtDfm::fill_via_icv_old -cellname (Name of the cell on which fill is to be performed
dtDfm::fill_via_icv_old -hookup_regions 
dtDfm::fill_via_icv_old -layer (Via layer to fill - i.e. via2)
dtDfm::fill_via_icv_old -property (Fill metal property info
dtDfm::fill_via_icv_old -stub_property 
dtDfm::fill_via_icv_old -techname (Techname of the cell
dtDfm::fill_via_icv_old -viewname (Viewname of the cell
dtDfm::fix_v0pax_dfmg -excludeKOR (Exclude KOR layer objs)
dtDfm::fix_v0pax_dfmg -keepin_cells_list 
dtDfm::fix_v0pax_dfmg -keepout_cells_list 
dtDfm::fix_v0pax_dfmg -keepout_cells_x_space 
dtDfm::fix_v0pax_dfmg -keepout_cells_y_space 
dtDfm::fix_v0pax_dfmg -korspX (Fill to KOR X spacing in micron)
dtDfm::fix_v0pax_dfmg -korspY (Fill to KOR Y spacing in micron)
dtDfm::fix_v0pax_dfmg -layer (Via layer to fill - i.e. via1)
dtDfm::fix_v0pax_dfmg -result_container_name 
dtDfm::fix_v0pax_dfmg -top_level_only_kor 
dtDfm::fix_vcx250 -excludeKOR (Exclude KOR layer objs)
dtDfm::fix_vcx250 -keepin_cells_list 
dtDfm::fix_vcx250 -keepout_cells_list 
dtDfm::fix_vcx250 -keepout_cells_x_space 
dtDfm::fix_vcx250 -keepout_cells_y_space 
dtDfm::fix_vcx250 -korspX (Fill to KOR X spacing in micron)
dtDfm::fix_vcx250 -korspY (Fill to KOR Y spacing in micron)
dtDfm::fix_vcx250 -layer (Via layer to fill - i.e. via1)
dtDfm::fix_vcx250 -result_container_name 
dtDfm::fix_vcx250 -top_level_only_kor 
dtDfm::powerhookup -add_zt_m1_extensions 
dtDfm::powerhookup -bndry_y_min (block boundary lower-y (default = 0.0))
dtDfm::powerhookup -cell_height (Height of single height stdcell)
dtDfm::powerhookup -checker_max_tracks_for_gcn 
dtDfm::powerhookup -checker_max_tracks_for_m0 
dtDfm::powerhookup -dh_bonus_cells_list 
dtDfm::powerhookup -disable_dfm_bridging 
dtDfm::powerhookup -disable_m1_row_jumpers 
dtDfm::powerhookup -drawn_kor_x_space (Fill to KOR X spacing in micron)
dtDfm::powerhookup -drawn_kor_y_space (Fill to KOR Y spacing in micron)
dtDfm::powerhookup -dsn_core_areas 
dtDfm::powerhookup -enable_m0_ek_mode 
dtDfm::powerhookup -force_hookup_cells_list 
dtDfm::powerhookup -ground_name (Name of ground rail (default = vss))
dtDfm::powerhookup -ground_pin_names 
dtDfm::powerhookup -ground_rail_y_start 
dtDfm::powerhookup -ground_voltage_areas 
dtDfm::powerhookup -hookup_cell_names_list 
dtDfm::powerhookup -hookup_cell_names_list_xn 
dtDfm::powerhookup -hookup_via_settings 
dtDfm::powerhookup -icc2_mode 
dtDfm::powerhookup -keepin_cells_list 
dtDfm::powerhookup -keepout_cells_list 
dtDfm::powerhookup -keepout_cells_x_space 
dtDfm::powerhookup -keepout_cells_y_space 
dtDfm::powerhookup -limit_hookup_to_area 
dtDfm::powerhookup -m2_rail_width (Width of m2 pwr/gnd rails)
dtDfm::powerhookup -max_tracks_for_gcn_in_cell 
dtDfm::powerhookup -max_tracks_for_m0_in_cell 
dtDfm::powerhookup -power_name (Name of power rail (default = vcc))
dtDfm::powerhookup -power_pin_names 
dtDfm::powerhookup -power_voltage_areas 
dtDfm::powerhookup -powerhookup_all_segments 
dtDfm::powerhookup -powerhookup_avoid_drv 
dtDfm::powerhookup -powerhookup_cells_area 
dtDfm::powerhookup -powerhookup_drv_vias_cells_list 
dtDfm::powerhookup -powerhookup_empty_area 
dtDfm::powerhookup -powerhookup_grid_count 
dtDfm::powerhookup -powerhookup_offset_locations 
dtDfm::powerhookup -process_name (process name)
dtDfm::powerhookup -top_level_only_kor 
dtDfm::powerhookup -use_drawn_kor 
dtDfm::powerhookup -use_fill_kor 
dtDfm::powerhookup -use_global_kor 
dtDfm::powerhookup -use_route_kor 
dtDfm::powerhookup -use_xll_grid 
dtDfm::powerhookup -v0_master (v0 via master)
dtDfm::powerhookup -v1_master (v1 via master)
dtDfm::powerhookup -verbatim (Adds PXL code to UIN file verbatim, e.g. query_m0_text = true;)
dtDfm::powerhookup -write_coord_file 
dtDfm::powerhookup -write_def_file_prefix 
dtDfm::powerhookup -write_user_shape_file 
dtDfm::powervia12dg -keepout_cells_list 
dtDfm::powervia12dg -power_nets (Name of power/ground rails)
dtDfm::powervia12dg -process_name (process name)
dtDfm::read_stm -convert_to_bbox 
dtDfm::read_stm -from_cell (name of STM cell from which contents need to be read)
dtDfm::read_stm -from_view (view name of from_cell)
dtDfm::read_stm -layers (list of fill layers)
dtDfm::read_stm -netname_for_untexted_objects 
dtDfm::read_stm -path (path to the input STM file)
dtDfm::read_stm -property (propery to be assigned to fill metal)
dtDfm::read_stm -rename_nets (nets are renamed as per these specs
dtDfm::read_stm -stub_property 
dtDfm::read_stm -stubnet (net to be assigned to stubs; by default the stubs are assigned syn* nets)
dtDfm::read_stm -techname (Techname of the cell)
dtDfm::read_stm -to_cell (name of cell into which contents need to be read)
dtDfm::read_stm -to_view (view name of the to_cell)
dtDfm::rename_nets -mw_cellname (Name of the mw output cell)
dtDfm::rename_nets -nets_to_rename 
dtDfm::set_metal_fill_defaults_icv -consider_off_grid 
dtDfm::set_metal_fill_defaults_icv -excludeKOR 
dtDfm::set_metal_fill_defaults_icv -fill_length (Fill length)
dtDfm::set_metal_fill_defaults_icv -half_dr_end_to_end ()
dtDfm::set_metal_fill_defaults_icv -korspX (Fill to KOR X spacing in micron)
dtDfm::set_metal_fill_defaults_icv -korspY (Fill to KOR Y spacing in micron)
dtDfm::set_metal_fill_defaults_icv -layers (metal layers for which these defaults should be set)
dtDfm::set_metal_fill_defaults_icv -use_fill_markers 
dtDfm::set_metal_fill_defaults_icv -verbatim (Specify any uin option(s) string verbatim)
dtDfm::set_via_fill_defaults_icv -consider_hv_violations 
dtDfm::set_via_fill_defaults_icv -density_boundary_assumption 
dtDfm::set_via_fill_defaults_icv -density_fill_downto (Fill down to density as opposed up to to density)
dtDfm::set_via_fill_defaults_icv -density_kor_assumption 
dtDfm::set_via_fill_defaults_icv -density_target (Via density target (a number between 0 and 1 e.g. 0.02 is 2%))
dtDfm::set_via_fill_defaults_icv -density_window_size 
dtDfm::set_via_fill_defaults_icv -density_window_x_offset 
dtDfm::set_via_fill_defaults_icv -density_window_x_stepping 
dtDfm::set_via_fill_defaults_icv -density_window_y_offset 
dtDfm::set_via_fill_defaults_icv -density_window_y_size 
dtDfm::set_via_fill_defaults_icv -density_window_y_stepping 
dtDfm::set_via_fill_defaults_icv -eco_region (ECO is performed in these polygon regions { {polygon1} {polygon2} ... })
dtDfm::set_via_fill_defaults_icv -ehv_nets (Names of the EHV nets)
dtDfm::set_via_fill_defaults_icv -exclCells (Wild card expression for the names of cells
dtDfm::set_via_fill_defaults_icv -excludeKOR (Exclude KOR layer objs)
dtDfm::set_via_fill_defaults_icv -fast_density (Use a simpler density algorithm to reduce memory / run time)
dtDfm::set_via_fill_defaults_icv -fill_container_name 
dtDfm::set_via_fill_defaults_icv -fill_net_names 
dtDfm::set_via_fill_defaults_icv -hv_nets (Names of the HV nets)
dtDfm::set_via_fill_defaults_icv -icv_options (List of ICV options specific to this layer when run in -explicit_parallel mode (default: -norscache -dp8))
dtDfm::set_via_fill_defaults_icv -iteration_count (Number of Via SG passes to maximize density (with deminising returns))
dtDfm::set_via_fill_defaults_icv -korspX (Fill to KOR X spacing in micron)
dtDfm::set_via_fill_defaults_icv -korspY (Fill to KOR Y spacing in micron)
dtDfm::set_via_fill_defaults_icv -layers (Via layers for which these defaults should be set)
dtDfm::set_via_fill_defaults_icv -top_level_only_kor 
dtDfm::set_via_fill_defaults_icv -uhv_nets (Names of the UHV nets)
dtDfm::set_via_fill_defaults_icv -verbatim (Adds PXL code to UIN file verbatim)
dtDfm::upsz_via -excludeKOR (Exclude KOR layer objs)
dtDfm::upsz_via -keepin_cells_list 
dtDfm::upsz_via -keepout_cells_list 
dtDfm::upsz_via -keepout_cells_x_space 
dtDfm::upsz_via -keepout_cells_y_space 
dtDfm::upsz_via -korspX (Fill to KOR X spacing in micron)
dtDfm::upsz_via -korspY (Fill to KOR Y spacing in micron)
dtDfm::upsz_via -layer (Via layer to fill - i.e. via1)
dtDfm::upsz_via -result_container_name 
dtDfm::upsz_via -top_level_only_kor 
eco::get_added_cells -skip_capture (Skip the capture step to save runtime)
eco::get_added_or_modified_cells -skip_capture (Skip the capture step to save runtime)
eco::get_modified_cells -skip_capture (Skip the capture step to save runtime)
eco::get_variant_cells -skip_capture (Skip the capture step to save runtime)
eco::insert_power_switches -aon_connect (Do the physical AON pin connection for eco ps)
eco::insert_power_switches -boundary (polygon boundary to insert power switches)
eco::insert_power_switches -dont_chain (Dont chain the eco ps to connect with the rest of the ps cells)
eco::insert_power_switches -dont_snap (snap to pg)
eco::insert_power_switches -x_incr (X step value. Default is G_POWER_SWITCH_X_INCREMENT)
eco::insert_power_switches -y_incr (Y step value. Default is G_POWER_SWITCH_Y_INCREMENT)
eco::insert_ps_around_rp -ps_x_incr (X step value. Default is G_POWER_SWITCH_X_INCREMENT)
eco::insert_ps_around_rp -ps_y_incr (Y step value. Default is G_POWER_SWITCH_Y_INCREMENT)
eco::insert_ps_around_rp -rp_bloat_x (X Width around RP boundary to insert PS cells. Default is G_POWER_SWITCH_X_INCREMENT/2)
eco::insert_ps_around_rp -rp_bloat_y (Y Height around  RP boundary to insert PS cells. Default is G_POWER_SWITCH_Y_INCREMENT/2)
fevcheck::generate_lec_do_file -mode (determine if partitions are bboxed or not in Conformal run.: 
file::create_icc_cmd_file -cmds (commands to run)
file::create_icc_cmd_file -exit (exit in the end)
file::create_icc_cmd_file -log_file (log file)
file::create_icc_cmd_file -out_file (output file to return)
file::create_icc_setup_cmd_file -at (append tool)
file::create_icc_setup_cmd_file -cmd_file (command file to run)
file::create_icc_setup_cmd_file -dbb (dbb name (default current dbb name))
file::create_icc_setup_cmd_file -machine (machine name (used only if -new_machine is on , default current machine name))
file::create_icc_setup_cmd_file -new_machine (open new machine with ssh (default use same machine))
file::create_icc_setup_cmd_file -ot (ot name (default current ot name))
file::create_icc_setup_cmd_file -out_file (output file to return)
file::create_icc_setup_cmd_file -ov (ov name (default current dir of work area name))
file::create_icc_setup_cmd_file -project (setup project)
file::create_icc_setup_cmd_file -tool (open tool (default sd))
file::create_icc_setup_cmd_file -work_area_name 
file::create_icc_setup_cmd_file -xterm (open in a new xterm (default not))
foveros::import_die_file -auto_net_creation (Automatically create missing net for initial testing. Default is off)
foveros::import_die_file -case_sensitive (Maintains case sensitivity. Default all nets converted to lowercase)
foveros::import_die_file -diefile_netname_mapfile 
foveros::import_die_file -dx (Translate coordinate dx in x direction)
foveros::import_die_file -dy (Translate coordinate dy in y direction)
foveros::import_die_file -orientation 
fp::check_terminal_offgrid -fix (Fix width )
fp::check_terminal_offgrid -terminals (Terminals list )
fp::check_terminal_width -fix (Fix width )
fp::check_terminal_width -terminals (Terminals list )
fp::check_voltage_area -logfile (Output log file)
fp::create_ps_pg_grid -cells (list of cells)
fp::create_ps_pg_grid -grid_num (number of grid created in center. Default is all the grid in cell area)
fp::create_ps_pg_grid -grid_type (Convert to specified grid name)
fp::create_ps_pg_grid -indexes (Specifiy the indexes to convert)
fp::create_ps_pg_grid -layers (power grid layer)
fp::create_ps_pg_grid -net_tag (Net to replace. Default is GND and PRIMARY)
fp::create_routing_blockage_around_polygons -enable_guides_on_boundary 
fp::create_routing_blockage_around_polygons -layers (Layer list for which to create route guides)
fp::create_routing_blockage_around_polygons -margin (The margins for route guides around the polygon shape. Format is {x_inside y_inside} {x_outside y_outside})
fp::create_routing_blockage_around_polygons -poly (The Polygon around which the route guide is to be created)
fp::create_routing_blockage_around_polygons -prefix (Prefix of the route guide name. Default is POLY_RG)
fp::create_routing_blockage_for_macro -layers (Specify the layers to create routing blockages around macro)
fp::create_row -flip_first_row (Flip the first row. Default is not flipping)
fp::create_row -tiles (List of tile name which should be defined in techfile)
fp::create_rows_for_bonus -tileinfo (Specifiy the tile width and height)
fp::create_rows_for_bonus -tilename (Bonus tile name which should be defined in techfile)
fp::create_rows_for_core -die_area (Create site rows starting from Die area, mainly used for designs with core/die area different ex: XN, XLLP, 1222/7nm designs)
fp::create_rows_for_core -name (Custom name for the site rows to be named)
fp::create_rows_for_core -tilename (Tile name which should be defined in techfile)
fp::define_custom_pg_config -bbox (Custom PG area coordinates. Can take multiple sets of coordinates, bbox and polygon.)
fp::define_custom_pg_config -custom_template 
fp::define_custom_pg_config -reset (Reset custom PG variables.)
fp::define_custom_pg_config -tag (Custom PG area tag name.)
fp::define_custom_pg_config -tag_append (Custom PG area tag name. (Works exactly the same as -tag, but kept for compatibility.))
fp::define_custom_pg_config -vdd_net (Custom PG Power net.)
fp::define_custom_pg_config -vss_net (Custom PG Ground net. Do not set this unless you want to create a secondary VSS region)
fp::extend_terminals -layers (List of layers to extend)
fp::extend_terminals -ports (List of port to extend)
fp::get_track_location -all (Specify all width and track location info)
fp::get_track_location -dont_ignore_reserved_track 
fp::get_track_location -ignore_power (Ignore power track)
fp::get_track_location -layer (Specify layer)
fp::get_track_location -skip_track_next_to_power 
fp::get_track_location -width (Specify the width for the track. The default is defaultWidth for the layer)
fp::get_tracks_cross_bbox -bbox (Bounding box to check)
fp::get_tracks_cross_bbox -endpoint_offset 
fp::get_tracks_cross_bbox -layer (Track layer)
fp::get_tracks_cross_bbox -pitch (Track pitch. Default is 2)
fp::get_tracks_cross_bbox -tracks (Track infomation for specified layer)
fp::is_boundary_terminal_layer -layer (Layer name)
fp::propagate_macro_pins_to_terminals -all_pins (Find and make terms above all macro pins. Canceling -convert_pg_pins,-pins Default 0)
fp::propagate_macro_pins_to_terminals -convert_pg_pins (Find and make terms above PG macro pins. Default 0)
fp::propagate_macro_pins_to_terminals -debug (Print cmd insted of actually create term)
fp::propagate_macro_pins_to_terminals -for_framgen (List of layers that should be unconditionally exposed on macro pin)
fp::propagate_macro_pins_to_terminals -layers (Layers of pins and terminals)
fp::propagate_macro_pins_to_terminals -macros (List of macro cells for propagating pins, default all macros)
fp::propagate_macro_pins_to_terminals -pins (Collection of user defined macro pins to propagate)
fp::propagate_macro_pins_to_terminals -skip_mjc (Skip set must_join_class 1 on new terminals)
fp::pull_back_terminal_from_boundary -port_list (List of port to extend)
fp::pushdown_cells -cells (Specify the cells to reconcile VAs. Could be stdcells macros all or cells )
fp::write_voltage_area -gen_cmd (Generate command for creating voltage area. Default is to generate variable with region(polygon) info)
fp::write_voltage_area -outfile (Output files. Default is $env(WARD)/collateral/floorplan/$block.va.tcl)
fp_edit::align_pins_from_selected -anchor (Used to force anchor on a certain object class. Default: None)
fp_edit::align_pins_from_selected -pins (Port/Pins/Terminals collection to align. Default: Selected)
fp_edit::align_shape_pins_from_selected -anchor (Used to force anchor on a certain object class. Default: None)
fp_edit::align_shape_pins_from_selected -objects (Shape/Port/Pins/Terminals collection to align. Default: Selected)
fp_edit::calc_channel_width -number_of_routes 
fp_edit::calc_channel_width -pattern (Defined routing pattern)
fp_edit::calc_path_width -bbox (Shape bbox )
fp_edit::calc_path_width -shape_dir 
fp_edit::calc_per_block_polygons -poly (Original polygon)
fp_edit::change_width -force (Force setting the exact specified width)
fp_edit::change_width -non_preferred (Change width of the route in non-preferred direction)
fp_edit::change_width -pins (Collection of pins or ports for width change)
fp_edit::change_width -shapes (Collection of shapes for width change)
fp_edit::change_width -width (The new width for the selected pins)
fp_edit::check_shapes_match_pattern -layer (Routing layer of the pattern)
fp_edit::check_shapes_match_pattern -pattern (Routing pattern to check against. Only shapes of the corresponding layer will be checked)
fp_edit::check_shapes_match_pattern -polygon (Shapes inside provided polygon will be checked )
fp_edit::check_shapes_match_pattern -return_offgrid (Function will return off-grid shapes. By default it returns collection of shapes with incorrect or updated width)
fp_edit::check_shapes_match_pattern -snap_to_track (Snap off-grid shapes to the correct track)
fp_edit::check_shapes_match_pattern -terminals (Check or snap terminals in addition to the routing shapes)
fp_edit::check_shapes_match_pattern -update_width (Change the width of the mismatching shapes to the correct width)
fp_edit::copy_mi_routing -master (Master cell)
fp_edit::copy_mi_routing -objects (Objects to copy)
fp_edit::copy_mi_routing -pin_map_file 
fp_edit::copy_mi_routing -remove (Remove previous net routing)
fp_edit::copy_mi_routing -targets (Target cells)
fp_edit::copy_shape_bbox -bbox (BBOX coords)
fp_edit::copy_shape_bbox -shape 
fp_edit::count_routing_tracks -pattern (Defined routing pattern)
fp_edit::count_routing_tracks -range (Range to be covered bu tracks)
fp_edit::create_abutted_pins -direction (The direction in which abutted pins will be created: 
fp_edit::create_abutted_pins -logical_pin_exists (Indicates that abutted pin exists logically)
fp_edit::create_abutted_pins -pins (Existing pins)
fp_edit::create_boundary_terminals_from_shapes -shapes (Collection of shapes )
fp_edit::create_pin_guides_from_pins_with_distance_and_direction -direction (Direction in which to create pin guide (N|S|E|W): 
fp_edit::create_pin_guides_from_pins_with_distance_and_direction -distance (Pin guide distance)
fp_edit::create_pin_guides_from_pins_with_distance_and_direction -layers (layers of pin_guide)
fp_edit::create_pin_guides_from_pins_with_distance_and_direction -port (Port or Pin to create pin guides from. Default: Selected)
fp_edit::create_pin_guides_from_pins_with_distance_and_direction -route_corridor (Create route_corridor instead of pin_guide. Default: pin_guide)
fp_edit::create_pins_under_terminals -logical_pin_exists (Indicates that abutted pin exists logically)
fp_edit::create_pins_under_terminals -ports (Existing pins)
fp_edit::create_port_terminal -coord (Approximate coordinate for terminal location )
fp_edit::create_port_terminal -layer (Layer for the terminal )
fp_edit::create_port_terminal -port (Port name )
fp_edit::create_port_terminal -remove_existing_terminals 
fp_edit::create_port_terminal -snap_to_boundary (Create terminal on design boundary)
fp_edit::create_port_terminal -term_length (Terminal length )
fp_edit::create_region_tracks -bbox (bbox coordinates where region tracks will be created)
fp_edit::create_region_tracks -create_tracks (Set this option to get wide tracks created at the moment when this proc is executed)
fp_edit::create_region_tracks -file_name (File name where to dump the G_ variable setting for the region tracks creation)
fp_edit::create_region_tracks -patterns (List of Wide wire pattern names)
fp_edit::create_region_tracks -ratio (Every X's gutter will have wide wire region. Set to 1 to make the whole bbox a region, set to 2 to create ww region in every other gutter, etc.)
fp_edit::create_region_tracks -tag (Unique tag prefix for the region track)
fp_edit::create_region_tracks_based_on_pins -file_name (File name where to dump the G_ variable setting for the region tracks creation)
fp_edit::create_region_tracks_based_on_pins -no_filter (Regular expression to filter out not allowed patterns)
fp_edit::create_region_tracks_based_on_pins -pins (List of pins to identify routing patterns for)
fp_edit::create_region_tracks_based_on_pins -range (Coordinate range in the direction of the routing where region tracks will be created)
fp_edit::create_region_tracks_based_on_pins -tag (Unique tag prefix for the region track)
fp_edit::create_region_tracks_based_on_pins -visualize (Draw regions and pattern names)
fp_edit::create_region_tracks_based_on_pins -yes_filter (Regular expression to identify allowed patterns)
fp_edit::create_td_pin_shape -bbox (BBox To cut out pin shapes from the routing shapes)
fp_edit::create_td_pin_shape -cell (Cell name for which the pins will be created)
fp_edit::create_td_pin_shape -keep_existing_pin_shapes 
fp_edit::create_td_pin_shape -shapes (Routing shapes)
fp_edit::create_td_pins_on_dangling_wires -cells (Cell names for which the pins will be created)
fp_edit::create_td_pins_on_dangling_wires -nets (Nets )
fp_edit::create_terminals_from_bbox -bbox (BBox to create terminal. Default: Region Tool Dialog)
fp_edit::create_terminals_from_bbox -layer (Layer to create terminal on)
fp_edit::create_terminals_from_bbox -port (Port or Pin to create terminal for. Default: Selected)
fp_edit::create_terminals_from_shapes -bbox_coord (Bbox coordinates )
fp_edit::create_terminals_from_shapes -rm_shapes (Option to remove the shapes after terminals are created)
fp_edit::create_terminals_from_shapes -shapes (Collection of shapes )
fp_edit::create_top_level_terminal -layer (Layer for the terminal )
fp_edit::create_top_level_terminal -net (Net name )
fp_edit::cut_shapes_by_bbox -bbox_coord (Bbox coordinates )
fp_edit::cut_shapes_by_bbox -rm_shapes (Option to remove the shapes after terminals are created)
fp_edit::cut_shapes_by_bbox -shapes (Collection of shapes )
fp_edit::dump_block_boundaries -cells (Collection of cells. Default: selected)
fp_edit::extend_pins_to_side_and_preroute -pins (Collection of pins to extend)
fp_edit::extend_pins_to_side_and_preroute -side (Top level boundary side where to create terminals: 
fp_edit::extend_shapes_to_boundary -shapes (Collection of shapes )
fp_edit::extend_shapes_to_boundary -side (Which boundary to extend to: 
fp_edit::extend_shapes_to_point -point (Point coordinates)
fp_edit::extend_shapes_to_point -shapes (Collection of shapes )
fp_edit::find_pattern -layer (Layer)
fp_edit::find_pattern -quiet (Dont print on the screen, just return the results)
fp_edit::find_pattern -signal_only (Check only signal tracks)
fp_edit::find_pattern -width (Width)
fp_edit::focus_on_net -nets (Nets to focus on. Default: Selected)
fp_edit::focus_on_net -remove (Removes highlight for the specified net)
fp_edit::identify_pattern -layer (Layer)
fp_edit::identify_pattern -width_space_list (List of widths and spacings)
fp_edit::identify_track_pattern_based_on_pins -no_filter (Regular expression to filter out not allowed patterns)
fp_edit::identify_track_pattern_based_on_pins -pins (List of pins to identify routing patterns for)
fp_edit::identify_track_pattern_based_on_pins -yes_filter (Regular expression to identify allowed patterns)
fp_edit::match_pattern -patterns (List of pattern names)
fp_edit::match_pattern -width_space_list (List of widths and spacings)
fp_edit::over_bump_routing -bbox (Bbox that will contain the via ladder structure)
fp_edit::over_bump_routing -list_of_patterns 
fp_edit::over_bump_routing -net (The net that shapes and vias will belong to)
fp_edit::port_up_shapes -shapes (Collection of shapes )
fp_edit::project_pins_to_top_boundary -direction (Direction in which to route (N|S|E|W): 
fp_edit::project_pins_to_top_boundary -pins (Collection of pins to project to boundary. Default: selected)
fp_edit::report_track_patterns -layer (Layer)
fp_edit::route_aligned_ft_terminals -terminals (Collection of terminals to connect with their pair. Default: Selected)
fp_edit::route_from_pins_given_direction_and_distance -anchor_pin 
fp_edit::route_from_pins_given_direction_and_distance -direction (Direction in which to route (N|S|E|W): 
fp_edit::route_from_pins_given_direction_and_distance -distance (Distance to rotue in direction. Distance in microns.)
fp_edit::route_from_pins_given_direction_and_distance -hlayer (Horizontal routing layer)
fp_edit::route_from_pins_given_direction_and_distance -pins (Collection of pins from which to create route segments. Default: selected)
fp_edit::route_from_pins_given_direction_and_distance -vlayer (Vertical routing layer)
fp_edit::route_shape_by_shape -pins (Collection of pins or ports to start routing from)
fp_edit::route_shape_by_shape -topo (List of <layer_name length width direction>. The direction can be <left|right|up|down>)
fp_edit::route_signals_push_pins -bundle (Bundle of nets to be routed)
fp_edit::route_signals_push_pins -hlayer (Horizontal routing layer)
fp_edit::route_signals_push_pins -hwidth (Horizontal routing width)
fp_edit::route_signals_push_pins -is_td (is_td and is_preroute attributes will be set on shapes and vias)
fp_edit::route_signals_push_pins -nets (Collection of nets to be routed)
fp_edit::route_signals_push_pins -points (Routing topology points)
fp_edit::route_signals_push_pins -push_down_pins (To push down hierarchical pins based on routing)
fp_edit::route_signals_push_pins -vlayer (Vertical routing layer)
fp_edit::route_signals_push_pins -vwidth (Vertical routing width)
fp_edit::route_simple_topology -nets (Collection of nets to be routed)
fp_edit::set_cells_grid -cells (selected|all|wildcard)
fp_edit::set_cells_grid -grid (HPML|Partition. Default: Partition)
fp_edit::set_cells_grid -snap (Snap cells to grid)
fp_edit::snap_pins -anchor (net/pin)
fp_edit::snap_pins -objects (pin/ports)
fp_edit::snap_pins -port (Aligns ports to their wires. If not specified can only align pins)
fp_edit::snap_poly_to_zero -points (Polygon coordinates)
fp_edit::sort_nets_based_on_pin_location -direction (Routing direction of the pin layer: 
fp_edit::sort_nets_based_on_pin_location -pins (Collection of pins or ports)
fp_edit::un_port_terminals -ports (Collection of ports or terminals)
fp_edit::update_to_min_length -shapes (Shapes or terminals to be updated )
fp_gcr::gcr_group_routing -debug (Used specifically for GCR debug. Default: G_PRIORITY_DEBUG)
fp_gcr::gcr_group_routing -effort (Uses pre-defined effort map to specification so router works harder on using higher-layers (low medium high). Default: medium)
fp_gcr::gcr_group_routing -group_size (Number of nets in each group for each routing loop. Default: All)
fp_gcr::gcr_group_routing -nets (Nets to priority route)
fp_gcr::gcr_group_routing -pref_step (Preferred layer-step specification to control layer usage {{<lay> <num>}}. Default: Effort)
fp_gcr::gcr_group_routing -verbose (Print more information. Default: None)
fp_gcr::gcr_group_routing -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
fp_gcr::gcr_swizzle_routing -jog_up (To jog with n+1 layer. By default jog with layer one below the specified main layer)
fp_gcr::gcr_swizzle_routing -layer (Main layer for the net routing. It should match with the pin layer)
fp_gcr::gcr_swizzle_routing -nets (Collection of nets which have flipped pin connectivity and all pins on the same layer)
fp_rpt::break_one_shape_and_reassign -cut_line (Four coordinates defining the cut line)
fp_rpt::break_one_shape_and_reassign -new_net (Net to re-assign shapes after the break to)
fp_rpt::break_one_shape_and_reassign -original_net_side 
fp_rpt::break_one_shape_and_reassign -shape (Shape to break)
fp_rpt::break_wire_rename_net -cells (Collection or list of repeaters)
fp_rpt::break_wire_rename_net -nets (Collection or list of nets)
fp_rpt::break_wire_rename_net -original_net_side 
fp_rpt::get_timing_based_rpt_coord -delay (Delay in ps)
fp_rpt::get_timing_based_rpt_coord -net (Net name)
fp_rpt::get_timing_based_rpt_coord -start (Coordinate from which to start calculating the delay)
fp_rpt::insert_place_one_repeater -buffer_lib_cell 
fp_rpt::insert_place_one_repeater -inverter_lib_cell 
fp_rpt::insert_place_one_repeater -net (Net to insert a repeater on)
fp_rpt::insert_place_one_repeater -new_net (New net name after the repeater)
fp_rpt::insert_place_one_repeater -original_net_side 
fp_rpt::insert_place_one_repeater -rpt_location (Cooirdinate to place the repeater at)
fp_rpt::insert_place_one_repeater -rpt_name (Name of the new repeater cell)
fp_rpt::insert_place_one_repeater -rpt_orientation 
fp_rpt::insert_place_one_repeater -shape (Shape to break)
fp_rpt::rpt_legalize_and_route_tails -legalize (Run legalization)
fp_rpt::rpt_legalize_and_route_tails -route_tails (Run tail routing)
fp_rpt::rpt_legalize_and_route_tails -rpt_cells (List or collection of repeaters cells)
fp_rpt::rpt_pwr_hookup -cells (Collection or list of repeaters)
fp_rpt::rpt_pwr_hookup -power_supply_net 
fp_rpt::sd_insert_rpt_bboxes -add_gnacs (Insert gnac on repeater input pin)
fp_rpt::sd_insert_rpt_bboxes -grid_width (Width of a single checker board grid rectangle)
fp_rpt::sd_insert_rpt_bboxes -is_td (Sets is_td attribute on the repeater cells)
fp_rpt::sd_insert_rpt_bboxes -nets (Net names pattern)
fp_rpt::sd_insert_rpt_bboxes -on_top_hierarchy (Add buffer on highest hierarchical net of the given net)
fp_rpt::sd_insert_rpt_bboxes -reset_structures (Reset internal arrays keeping information about previously inserted repeaters)
fp_rpt::sd_insert_rpt_bboxes -respect_gas_station 
fp_rpt::sd_insert_rpt_bboxes -respect_voltage_areas 
fp_rpt::sd_insert_rpt_bboxes -rpt_lib_cell (Repeater standard cell name)
fp_rpt::sd_insert_rpt_bboxes -rpt_station_bboxes 
fp_rpt::sd_insert_rpt_bboxes -tail_routing (Run route_eco for tail routing)
fp_rpt::sd_insert_rpt_distance -dump_command_line_only 
fp_rpt::sd_insert_rpt_distance -exclude_partitions 
fp_rpt::sd_insert_rpt_distance -is_td (Sets is_td attribute on the repeater cells)
fp_rpt::sd_insert_rpt_distance -legalize (Run cell legalization)
fp_rpt::sd_insert_rpt_distance -nets (Net names pattern)
fp_rpt::sd_insert_rpt_distance -on_top_hierarchy (Add buffer on highest hierarchical net of the given net)
fp_rpt::sd_insert_rpt_distance -rpt_lib_cell (Repeater standard cell name)
fp_rpt::sd_insert_rpt_distance -rpt_partitions (List of hierarchical cells where repeaters are allowd)
fp_rpt::sd_insert_rpt_distance -tail_routing (Run cell legalization and route_eco for tail routing)
fp_rpt::sd_place_existing_rpt -bbox (Bbox coordinates where to place cells)
fp_rpt::sd_place_existing_rpt -cells (Ordered collection of cells to be placed)
fp_rpt::sd_place_existing_rpt -cells_in_grid (Number of cells in one grid column (for vertical routes) or row (for horizontal routes))
fp_rpt::sd_place_existing_rpt -grid_height_mult 
fp_rpt::sd_place_existing_rpt -grid_width (Width of one grid cell)
fp_rpt::sd_place_existing_rpt -route_dir (Routing direction)
fp_rpt::sd_place_existing_rpt_based_on_routes -anchors (Pins, ports, or routing shapes to align to)
fp_rpt::sd_place_existing_rpt_based_on_routes -bbox (Bbox coordinates where to place cells)
fp_rpt::sd_place_existing_rpt_based_on_routes -cells (Cells to be placed)
fp_rpt::sd_place_existing_rpt_based_on_routes -grid_width (Width of one grid cell)
fp_rpt::sd_place_existing_rpt_based_on_routes -route_dir (Routing direction)
fp_rpt::sd_remove_inv -buf_lib_cell (Inverter standard cell name)
fp_rpt::sd_remove_inv -cells (Buffer cells to replace)
fp_rpt::sd_remove_inv -remove_buffer (Remove the buffer and repair the net)
fp_rpt::sd_replace_buf_with_inv -buffers (Buffer cells to replace)
fp_rpt::sd_replace_buf_with_inv -inv_lib_cell (Inverter standard cell name)
geo::bbox_is_containing_pt -no_touch (Do not consider the points are at bbox boundary. The default is to consider points at boundary)
geo::create_windows -columns (Number of columns)
geo::create_windows -rows (Number of rows)
geo::create_windows -within (Bbox of area to be split into windows. Default: boundary_bbox of current_design)
geo::get_boundary_edges -boundary (List of boundary points.)
geo::get_boundary_edges -edge_type (Type of edge to return: 
gui::highlight_nets -layers (Highlight specified layers)
gui::highlight_nets -nets (list of nets to be highlight)
gui::highlight_nets -terminal_only (Highlight terminal only)
gui::select_cell -highlight (highlight selection)
gui::select_cell -zoom (zoom to selection)
gui::select_lib_cell -highlight (highlight selection)
gui::select_lib_cell -zoom (zoom to selection)
gui::select_net -highlight (highlight selection)
gui::select_net -layers (Highlight specified layers)
gui::select_net -zoom (zoom to selection)
gui::select_port -highlight (highlight selection)
gui::select_port -zoom (zoom to selection)
gui::select_terminal -highlight (highlight selection)
gui::select_terminal -of_port (Select the terminals of a port)
gui::select_terminal -zoom (zoom to selection)
gui::zoom -selection (get_selection)
hc::check_nets_which_cannot_be_pushed_down -nets (List or collection of nets to check. Default: Pushed ONLY)
hc::distributed_health_checks -force (Force run checking. Default: G_RUN_HEALTH_CHECKS)
hc::distributed_health_checks -init_summary (Initialize summary file. By default initialized only in stage 01)
hc::distributed_health_checks -top_only (Run checking on top-level block only. Default: All)
hc::distributed_health_checks_for_all_blocks -force (Force run checking. Default: G_RUN_HEALTH_CHECKS)
hc::distributed_health_checks_for_all_blocks -init_summary (Initialize summary file. By default initialized only in stage 01)
hc::runtime -min_time (Minimum elapsed time in seconds for reporting. Default: 5)
hc::runtime -start (Force start time reset for tag-name. Default: Report)
hc_cbc::check_cbc_boundary -hpml (Providing a custom hpml value when checking polygon coordinates)
hc_cbc::check_cbc_boundary -no_report (No report mode when embedded in other procedures for lego check)
hc_cbc::check_cbc_boundary -polygon (Specify a rectangle or polygon to check)
hc_cbc::check_cbc_boundary -stage (Stage name)
hc_cbc::check_cbc_boundary -top_block_only (Run only if current block is top block)
hc_cbc::check_cbc_multiple_boundary -polygon (Specify a rectangle or polygon to check)
hc_cbc::check_cbc_multiple_boundary -stage (Stage name)
hc_cbc::check_cbc_placement -blocks (Blocks and macros to check - a collection. Default All)
hc_cbc::check_cbc_placement -stage (Stage name)
hc_cbc::check_clock_cells_cbc_placement -stage (Stage name)
hc_cbc::check_custom_cells_cbc_placement -reference_name (Cell template/reference whose instances to run check on)
hc_cbc::check_custom_cells_cbc_placement -stage (Stage name)
hc_cbc::check_custom_cells_cbc_placement -x_lego_number (X lego dimension to check against)
hc_cbc::check_custom_cells_cbc_placement -x_offset (X offset number to use while X lego checking)
hc_cbc::check_custom_cells_cbc_placement -y_lego_number (Y lego dimension to check against)
hc_cbc::check_custom_cells_cbc_placement -y_offset (Y offset number to use while Y lego checking)
hc_cbc::check_hard_macro_minsize -stage (Stage name)
hc_collateral::check_clock_collgen_attributes -stage (Stage name)
hc_collateral::check_clockbuilder_objects_exist -stage (Stage name)
hc_collateral::check_output_collateral_sanity -collateral_type (either of td OR refresh - types of output collaterals to check for)
hc_collateral::check_output_collateral_sanity -stage (Stage name)
hc_connectivity::check_cell_dangling_inputs -gclk (Run the check on only clock objects)
hc_connectivity::check_cell_dangling_inputs -stage (Stage name)
hc_connectivity::check_cell_names -stage (Stage name)
hc_connectivity::check_clock_connection_vs_pinlocation -debug_file (Generate tcl scripts to show errors as annotations. Default: None)
hc_connectivity::check_clock_connection_vs_pinlocation -keep_detail_report (Keep the detail report that is generated during the check running. Default: Delete)
hc_connectivity::check_clock_connection_vs_pinlocation -nets (Clock source net name)
hc_connectivity::check_clock_connection_vs_pinlocation -out_dir (Output report directory. Default: ./[getvar -quiet G_REPORTS_PATH]/[getvar -quiet G_DESIGN_NAME]/)
hc_connectivity::check_clock_connection_vs_pinlocation -rtl_connection_file (Input net2run.cfg.ref file. Option -nets will be ignored if defined)
hc_connectivity::check_clock_connection_vs_pinlocation -stage (Stage name)
hc_connectivity::check_clock_connection_vs_pinlocation -verbose (Produce and print more debug information. Default: None)
hc_connectivity::check_clock_p2p_length -debug_file (Generate tcl scripts to show errors as annotations. Default: None)
hc_connectivity::check_clock_p2p_length -hcost (Weight value for horizontal metal layer. Default: 100)
hc_connectivity::check_clock_p2p_length -keep_detail_report (Keep the detail report that is generated during the check running. Default: Delete)
hc_connectivity::check_clock_p2p_length -layer_prefix (Physical routing layer prefix string. Default: "m")
hc_connectivity::check_clock_p2p_length -length_diff_tolerance 
hc_connectivity::check_clock_p2p_length -net (Clock source net name)
hc_connectivity::check_clock_p2p_length -out_dir (Output report directory. Default: ./[getvar -quiet G_REPORTS_PATH]/[getvar -quiet G_DESIGN_NAME]/)
hc_connectivity::check_clock_p2p_length -stage (Stage name)
hc_connectivity::check_clock_p2p_length -vcost (Weight value for vertical metal layer. Default: 102)
hc_connectivity::check_clock_p2p_length -verbose (Produce and print more debug information. Default: None)
hc_connectivity::check_clock_p2p_polarity -debug_file (Generate tcl scripts to show errors as annotations. Default: None)
hc_connectivity::check_clock_p2p_polarity -keep_detail_report (Keep the detail report that is generated during the check running. Default: Delete)
hc_connectivity::check_clock_p2p_polarity -net2run_cfg_file (Input net2run.cfg.ref file. Option -nets will be ignored if defined)
hc_connectivity::check_clock_p2p_polarity -nets (Clock source net name)
hc_connectivity::check_clock_p2p_polarity -out_dir (Output report directory. Default: ./[getvar -quiet G_REPORTS_PATH]/[getvar -quiet G_DESIGN_NAME]/)
hc_connectivity::check_clock_p2p_polarity -polarity (Polarity either odd or even. Default:even)
hc_connectivity::check_clock_p2p_polarity -stage (Stage name)
hc_connectivity::check_clock_p2p_polarity -verbose (Produce and print more debug information. Default: None)
hc_connectivity::check_dangling_ports -stage (Stage name)
hc_connectivity::check_dangling_ports_pins -stage (Stage name)
hc_connectivity::check_feedthru_net_names_match_ports -stage (Stage name)
hc_connectivity::check_illegal_net_names -stage (Stage name)
hc_connectivity::check_multiple_drivers -gclk (Queries clk objects)
hc_connectivity::check_multiple_drivers -nets (Collection or list of nets to check.)
hc_connectivity::check_multiple_drivers -stage (Stage name)
hc_connectivity::check_port_net_names -stage (Stage name)
hc_connectivity::check_ports_with_illegal_direction -stage (Stage name)
hc_connectivity::check_spec_fev -stage (Stage name)
hc_connectivity::report_ports_with_inout_direction -gclk (run the check on only cb2 objects)
hc_connectivity::report_ports_with_inout_direction -stage (Stage name)
hc_connectivity::report_unconnected_pins -stage (Stage name)
hc_drc::check_opens -gclk (Queries clk objects)
hc_drc::check_opens -max_errors (Maximum number of errors LVS check should report)
hc_drc::check_opens -nets (Collection or list of nets to check.)
hc_drc::check_opens -stage (Stage name)
hc_drc::check_route_drcs -stage (Stage name)
hc_drc::check_shorts -gclk (Queries clk objects)
hc_drc::check_shorts -max_errors (Maximum number of errors LVS check should report)
hc_drc::check_shorts -nets (Collection or list of nets to check.)
hc_drc::check_shorts -stage (Stage name)
hc_extraction::check_vias_in_frams -stage (Stage name)
hc_floorplan::check_block_overlaps -stage (Stage name)
hc_floorplan::check_ebb_size_is_lego -layer (Layer name)
hc_floorplan::check_hip_spacing -stage (Stage name)
hc_floorplan::check_min_channel -stage (Stage name)
hc_floorplan::check_no_default_va -stage (Stage name)
hc_floorplan::check_port_supply_net -block (partition name)
hc_floorplan::check_port_supply_net -stage (Stage name)
hc_floorplan::check_port_tie_offs -stage (Stage name)
hc_floorplan::check_ps_service_area -stage (Stage name)
hc_floorplan::check_same_power_aon_cells -stage (Stage name)
hc_floorplan::check_std_cell_power_hookup -stage (Stage name)
hc_floorplan::check_terminals_oob -block_dir (Optional switch to put reports in block based dir, like in DP flow)
hc_floorplan::check_terminals_oob -stage (Stage name)
hc_floorplan::check_terminals_shorts -stage (Stage name)
hc_floorplan::check_top_layer_hip_power_pins_exposed -stage (Stage name)
hc_floorplan::check_va_boundaries_abutted -stage (Stage name)
hc_floorplan::check_va_dimensions -stage (Stage name)
hc_floorplan::check_xor_voltage_and_bounding_areas -stage (Stage name)
hc_gcr::check_hard_layer_mode_constraints_match_pin_layers -nets (Nets to check for pin and track issues. Default: Selected/All)
hc_gcr::check_hard_layer_mode_constraints_match_pin_layers -outfile (Specify output file-name for pin check report)
hc_gcr::check_hard_layer_mode_constraints_match_pin_layers -return (Return nets instead. Default: ErrCount)
hc_gcr::check_hard_layer_mode_constraints_match_pin_layers -warn (Return for warnings only. Default: Errors)
hc_gcr::check_hard_layer_mode_constraints_match_pin_layers -work_dir (Specify working directory-name for priority-route use)
hc_gcr::check_missing_terminals_on_priority_net_routing -nets (Nets to check for missing terminals. Default: Selected/All)
hc_gcr::check_missing_terminals_on_priority_net_routing -outfile (Specify output file-name for terminal check report)
hc_gcr::check_missing_terminals_on_priority_net_routing -return (Return nets instead. Default: ErrCount)
hc_gcr::check_missing_terminals_on_priority_net_routing -work_dir (Specify working directory-name for priority-route use)
hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns -nets (Nets to check for pin and track issues. Default: Selected/All)
hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns -outfile (Specify output file-name for pin check report)
hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns -return (Return nets instead. Default: ErrCount)
hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns -skip_gen (Skip GCR Pattern Generation. Default: Generate)
hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns -verbose (Print more information. Default: None)
hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns -work_dir (Specify working directory-name for priority-route use)
hc_gcr::check_route_boundary_pin_enclosure -nets (Nets to check for pin and track issues. Default: Selected/All)
hc_gcr::check_route_boundary_pin_enclosure -outfile (Specify output file-name for pin check report)
hc_gcr::check_route_boundary_pin_enclosure -return (Return nets instead. Default: ErrCount)
hc_gcr::check_route_boundary_pin_enclosure -work_dir (Specify working directory-name for priority-route use)
hc_gcr::check_unplaced_cells_on_priority_net_routing -nets (Nets to check for unplaced cells. Default: Selected/All)
hc_gcr::check_unplaced_cells_on_priority_net_routing -outfile (Specify output file-name for unplaced cell check report)
hc_gcr::check_unplaced_cells_on_priority_net_routing -return (Return cells instead. Default: ErrCount)
hc_gcr::check_unplaced_cells_on_priority_net_routing -work_dir (Specify working directory-name for priority-route use)
hc_general::check_lib_versions -report (Report file name)
hc_general::check_missing_library -report (Report file name)
hc_general::check_modification_time -report (Report file name)
hc_netspec::check_allowed_layers_constraints -debug (Used to show errors as annotations. Default: None)
hc_netspec::check_allowed_layers_constraints -layers (Listing of dominant layers used to determine the length specification.)
hc_netspec::check_allowed_layers_constraints -min_length (Minimum total net route-length to check dominant layer length. Default: 0.0um)
hc_netspec::check_allowed_layers_constraints -nets (Collection or list of nets to check.)
hc_netspec::check_allowed_layers_constraints -no_error (Used to not create an error view cell for loading in error browser. Default: Created)
hc_netspec::check_allowed_layers_constraints -tolerance (Percentage length check tolerance. Default: 0.0)
hc_netspec::check_allowed_layers_constraints -usage (Print an example of usages. Default: None)
hc_netspec::check_allowed_layers_constraints -verbose (Produce and print more debug information. Default: None)
hc_netspec::check_attrxml_netspecs -dice_dir (Input Attribute-XML XML directory to read constraints. Default: inputs)
hc_netspec::check_attrxml_netspecs -dice_file (Input Attribute-XML XML file (or list of files) to read constraints. Default: inputs/*.attribute.xml)
hc_netspec::check_attrxml_netspecs -excl_dtouch (Exclude dont-touch constraints checking. Default: Check)
hc_netspec::check_attrxml_netspecs -excl_layers (Exclude allowed-layers constraints checking. Default: Check)
hc_netspec::check_attrxml_netspecs -excl_shield (Exclude shield constraints checking. Default: Check)
hc_netspec::check_attrxml_netspecs -excl_width (Exclude width-per-layer constraints checking. Default: Check)
hc_netspec::check_attrxml_netspecs -min_length (Minimum total net route-length for shielding/width/length checks. Default: 10um)
hc_netspec::check_attrxml_netspecs -min_seglen (Minimum wire segment length for width check. Default: 5.0um)
hc_netspec::check_attrxml_netspecs -no_macros (Ignores shield wires/pin-shapes missing within macro boundaries. Default: Flag All)
hc_netspec::check_attrxml_netspecs -prop_fanout (Propagate constraint checking to all-fanout nets. Default: None)
hc_netspec::check_attrxml_netspecs -skip_fetch (Skip fetch of Attribute-XML constraint files. Default: Fetch)
hc_netspec::check_attrxml_netspecs -stage (Stage name)
hc_netspec::check_attrxml_netspecs -strict (Consider wire widths greater than specification as errors for width check. Default: Warnings)
hc_netspec::check_attrxml_netspecs -tolerance (Percentage checking tolerance for shielding/width/length checks. Default: Width:0.0 and Shield/Length:5.0)
hc_netspec::check_attrxml_netspecs -verbose (Produce and print more debug information. Default: None)
hc_netspec::check_database_netspecs -excl_layers (Exclude allowed-layers constraints checking. Default: Check)
hc_netspec::check_database_netspecs -excl_limit (Exclude length-limit constraints checking. Default: Check)
hc_netspec::check_database_netspecs -excl_match (Exclude length-match constraints checking. Default: Check)
hc_netspec::check_database_netspecs -excl_shield (Exclude shield constraints checking. Default: Check)
hc_netspec::check_database_netspecs -excl_width (Exclude width-per-layer constraints checking. Default: Check)
hc_netspec::check_database_netspecs -min_length (Minimum total net route-length for shielding/width/length checks. Default: 10um)
hc_netspec::check_database_netspecs -min_seglen (Minimum wire segment length for width check. Default: 5.0um)
hc_netspec::check_database_netspecs -no_macros (Ignores shield wires/pin-shapes missing within macro boundaries. Default: Flag All)
hc_netspec::check_database_netspecs -prop_fanout (Propagate constraint checking to all-fanout nets. Default: None)
hc_netspec::check_database_netspecs -stage (Stage name)
hc_netspec::check_database_netspecs -strict (Consider wire widths greater than specification as errors for width check. Default: Warnings)
hc_netspec::check_database_netspecs -tolerance (Percentage checking tolerance for shielding/width/length checks. Default: Width:0.0 and Shield/Length:5.0)
hc_netspec::check_database_netspecs -verbose (Produce and print more debug information. Default: None)
hc_netspec::check_dont_touch_constraints -debug (Used to show errors as annotations. Default: None)
hc_netspec::check_dont_touch_constraints -nets (Collection or list of nets to check. Default: Selected)
hc_netspec::check_dont_touch_constraints -no_error (Used to not create an error view cell for loading in error browser. Default: Created)
hc_netspec::check_dont_touch_constraints -repeaters (Only flag repeater cells. Default: All)
hc_netspec::check_dont_touch_constraints -usage (Print an example of usages. Default: None)
hc_netspec::check_dont_touch_constraints -verbose (Produce and print more debug information. Default: None)
hc_netspec::check_length_limit_constraints -min_value (Minimum length to check for)
hc_netspec::check_length_limit_constraints -nets (Collection or list of nets to check.)
hc_netspec::check_length_limit_constraints -tolerance (Percentage length check tolerance. Default: 0.0)
hc_netspec::check_length_match_constraints -nets (Collection or list of nets to check.)
hc_netspec::check_length_match_constraints -per_layer (Checks length matching per-layer. Default: Total)
hc_netspec::check_length_match_constraints -tolerance (Percentage length check tolerance. Default: 0.0)
hc_netspec::check_multiple_shield_constraints -constr (Constraint list for the space and width of the shield depending upon the layer)
hc_netspec::check_multiple_shield_constraints -debug (Used to show errors as annotations. Default: None)
hc_netspec::check_multiple_shield_constraints -gclk (For clkbuilder objects. Default: None )
hc_netspec::check_multiple_shield_constraints -nets (Collection or list of nets to check. Default: Selected)
hc_netspec::check_multiple_shield_constraints -snets (List of useable shield nets names for different metal layers. Default: vss)
hc_netspec::check_multiple_shield_constraints -stype (Shield type (half or full) for different metal layers. Default: full)
hc_netspec::check_multiple_shield_constraints -tol_match (Percentage shield match check tolerance of total net-length for different metal layers.. Default: 0.0)
hc_netspec::check_multiple_shield_constraints -tol_space (Percentage shield space check tolerance for different metal layers.. Default: 0.0)
hc_netspec::check_multiple_shield_constraints -tol_width (Percentage shield width check tolerance for different metal layers.. Default: 0.0)
hc_netspec::check_multiple_shield_constraints -tolerance (Tolerance list for metal layers)
hc_netspec::check_multiple_shield_constraints -usage (Print an example of usages. Default: None)
hc_netspec::check_shield_constraints -debug (Used to show errors as annotations. Default: None)
hc_netspec::check_shield_constraints -err_info (Used to return violated net names and their bbox  if selected  Default off)
hc_netspec::check_shield_constraints -filter (Used to filter wires with this attributes ... Default empty)
hc_netspec::check_shield_constraints -lshield (Listing of layer, space constraint, space, width constraint, and width.)
hc_netspec::check_shield_constraints -min_length (Minimum total shielded net route-length to check AND un-shieled total length (>min_length/2). Default: 0.0um)
hc_netspec::check_shield_constraints -nets (Collection or list of nets to check. Default: Selected)
hc_netspec::check_shield_constraints -no_error (Used to not create an error view cell for loading in error browser. Default: Created)
hc_netspec::check_shield_constraints -no_macros (Ignores shield wires/pin-shapes missing within macro boundaries. Default: Flag All)
hc_netspec::check_shield_constraints -snets (List of useable shield nets names. Default: vss)
hc_netspec::check_shield_constraints -stype (Shield type (half or full). Default: full)
hc_netspec::check_shield_constraints -tol_match (Percentage shield match check tolerance of total net-length. Default: 0.0)
hc_netspec::check_shield_constraints -tol_space (Percentage shield space check tolerance. Default: 0.0)
hc_netspec::check_shield_constraints -tol_width (Percentage shield width check tolerance. Default: 0.0)
hc_netspec::check_shield_constraints -tolerance (Percentage shield check tolerance in general. Default: 0.0)
hc_netspec::check_shield_constraints -usage (Print an example of usages. Default: None)
hc_netspec::check_shield_constraints -verbose (Produce and print more debug information. Default: None)
hc_netspec::check_width_per_layer_constraints -debug (Used to show errors as annotations. Default: None)
hc_netspec::check_width_per_layer_constraints -lwidth (Listing of layer, width constraint, width, and optional length constraint and length.)
hc_netspec::check_width_per_layer_constraints -min_length (Minimum total net route-length to check width. Default: 0.0um)
hc_netspec::check_width_per_layer_constraints -min_seglen (Generic minimum wire segment length to check width. Default: 0.0um)
hc_netspec::check_width_per_layer_constraints -nets (Collection or list of nets to check.)
hc_netspec::check_width_per_layer_constraints -no_error (Used to not create an error view cell for loading in error browser. Default: Created)
hc_netspec::check_width_per_layer_constraints -strict (Consider wire widths greater than specification as errors. Default: Warnings)
hc_netspec::check_width_per_layer_constraints -tolerance (Percentage width check tolerance. Default: 0.0)
hc_netspec::check_width_per_layer_constraints -usage (Print an example of usages. Default: None)
hc_netspec::check_width_per_layer_constraints -verbose (Produce and print more debug information. Default: None)
hc_pin::check_critical_pin_placement_errors -stage (Stage name)
hc_pin::check_disallowed_layer_terminals -disallowed_layers 
hc_pin::check_disallowed_layer_terminals -stage (Stage name)
hc_pin::check_ebb_pin_placement_errors -stage (Stage name)
hc_pin::check_edge_terminals_below_spec_layer -spec_layer (Layer to check below which edge terminals are not allowed)
hc_pin::check_edge_terminals_below_spec_layer -stage (Stage name)
hc_pin::check_nonedge_terminals_above_heml -stage (Stage name)
hc_pin::check_nonedge_terminals_minlength -stage (Stage name)
hc_pin::check_pg_pin_placement_errors -skip_top (Used to skip checker on top-level pins of design i.e. ports of current design. Default: Check)
hc_pin::check_pg_pin_placement_errors -stage (Stage name)
hc_pin::check_pin_placement_errors -skip_blocks (Used to skip checker on blocks - child to child pins within current design. Default: Check)
hc_pin::check_pin_placement_errors -skip_top (Used to skip checker on top-level pins of design i.e. ports of current design. Default: Check)
hc_pin::check_pin_placement_errors -stage (Stage name)
hc_pin::check_pin_spacing_errors -skip_blocks (Used to skip checker on blocks - child to child pins within current design. Default: Check)
hc_pin::check_pin_spacing_errors -skip_top (Used to skip checker on top-level pins of design i.e. ports of current design. Default: Check)
hc_pin::check_pin_spacing_errors -stage (Stage name)
hc_pin::check_ports_missing_terminal -stage (Stage name)
hc_pin::check_ports_with_multi_terms -skip_list (list of port names/regular expressions to skip)
hc_pin::check_ports_with_multi_terms -stage (Stage name)
hc_pin::check_terminal_widths_match_track_ref -stage (Stage name)
hc_pin::check_terminals_longer_than_threshold -stage (Stage name)
hc_pin::check_terminals_longer_than_threshold -threshold (Number in microns above which to flag terminals as too long)
hc_pin::check_terminals_minlength -stage (Stage name)
hc_pin::check_terminals_not_on_track -stage (Stage name)
hc_pin::check_terminals_within_hsml -stage (Stage name)
hc_pin::check_weave_ft_connections -stage (Stage name)
hc_placement::check_block_abutment -debug (Used to show errors as annotations. Default: None)
hc_placement::check_block_abutment -mlph (Used to make the checker go through all levels of hierarchy and report. Default off)
hc_placement::check_block_abutment -no_error (Used to not create an error view cell for loading in error browser. Default: Created)
hc_placement::check_block_abutment -stage (Stage name)
hc_placement::check_cells_outside_block_boundary -debug (Used to show errors as annotations. Default: None)
hc_placement::check_cells_outside_block_boundary -macros (Used to check macros only. Default: All)
hc_placement::check_cells_outside_block_boundary -mlph (Used to make the checker go through all levels of hierarchy and report. Default off)
hc_placement::check_cells_outside_block_boundary -no_error (Used to not create an error view cell for loading in error browser. Default: Created)
hc_placement::check_cells_outside_block_boundary -stage (Stage name)
hc_placement::check_cells_outside_block_boundary -stdcells (Used to check standard cells only. Default: All)
hc_placement::check_cells_within_voltage_area -disallow_multiple_va_shapes 
hc_placement::check_cells_within_voltage_area -stage (Stage name)
hc_placement::check_clk_hip_spacing -stage (Stage name)
hc_placement::check_global_cell_relative_dist_adherence -highlight (Highlight global cells of given template violating threshold rule.Default off)
hc_placement::check_global_cell_relative_dist_adherence -stage (Stage name)
hc_placement::check_global_cell_relative_dist_adherence -template (Specify a global cell template to check. Default DIC)
hc_placement::check_global_cell_relative_dist_adherence -threshold (Specify the max distance allowed between adjacent global cells. Default 1000)
hc_placement::check_global_clock_cell_attr -stage (Stage name)
hc_placement::check_hip_bound_for_logic_cells -stage (Stage name)
hc_placement::check_hip_to_parent_boundary -stage (Stage name)
hc_placement::check_negative_boundary_coordinates -stage (Stage name)
hc_placement::check_no_ebbs_touching_parent_boundary -stage (Stage name)
hc_placement::check_odi_vdm_placement -mlph (Used to run checker from top design in one shot. Default off)
hc_placement::check_odi_vdm_placement -stage (Stage name)
hc_placement::check_partition_boundary_halo_cells -stage (Stage name)
hc_placement::check_placement_legality -ignore_expression 
hc_placement::check_placement_legality -stage (Stage name)
hc_placement::check_unplaced_cells -stage (Stage name)
hc_placement::check_va_cell_spacing -gclk (Queries clk objects)
hc_placement::check_va_cell_spacing -stage (Stage name)
hc_placement::check_va_hip_spacing -stage (Stage name)
hc_power::check_no_power_above_hpml -stage (Stage name)
hc_power::check_pg_connectivity_errors -stage (Stage name)
hc_power::check_pg_drc_errors -stage (Stage name)
hc_power::check_pg_region_lego_compliance -stage (Stage name)
hc_power::check_power_domains_missing_voltage_areas -stage (Stage name)
hc_power::check_power_grid_missing_vias -stage (Stage name)
hc_power::check_power_supply_ports_correlation -stage (Stage name)
hc_power::check_voltage_area_lego_compliance -stage (Stage name)
hc_power::check_voltage_value_per_supply_net -stage (Stage name)
hc_route::FindPowerLinesInArea -bbox (bbox to search)
hc_route::FindPowerLinesInArea -layer (layer to check)
hc_route::FindPowerLinesInArea -no_shield (disregard shield wires)
hc_route::check_floating_vias -gclk (For clkbuilder objects. Default: None )
hc_route::check_floating_vias -gui (open error browser or not Default:off)
hc_route::check_floating_vias -nets (nets collection/list to check)
hc_route::check_floating_vias -vias (vias collection/list to check)
hc_route::check_global_clock_route_widths -stage (Stage name)
hc_route::check_missing_wires -stage (Stage name)
hc_route::check_non_preferred_direction_routes -exclude_pg (Do not check for PG routes. Saves runtime. Default: check PG)
hc_route::check_non_preferred_direction_routes -gclk (Run on clkbuilder objects only. Default: Off)
hc_route::check_non_preferred_direction_routes -layers (run on given set of layers)
hc_route::check_non_preferred_direction_routes -stage (Stage name)
hc_route::check_nonpg_missing_vias -nets (Specify certain nets to check on)
hc_route::check_nonpg_missing_vias -stage (Stage name)
hc_route::check_null_via_shape_objects -stage (Stage name)
hc_route::check_preroute_block_intersection -nets (Specify certain nets to check on)
hc_route::check_preroute_block_intersection -stage (Stage name)
hc_route::check_preroute_completion -nets (Specify certain nets to check preroutes completion on)
hc_route::check_preroute_completion -stage (Stage name)
hc_route::check_preroute_width_vs_length -nets (Specify certain nets to check width vs length on)
hc_route::check_preroute_width_vs_length -stage (Stage name)
hc_route::check_route_hsml_compliance -stage (Stage name)
hc_route::check_route_shape_endcap_values -stage (Stage name)
hc_route::check_route_shape_type -stage (Stage name)
hc_route::check_route_terminal_intersection -nets (Specify certain nets to check on)
hc_route::check_route_terminal_intersection -stage (Stage name)
hc_route::check_signal_wire_shorts -stage (Stage name)
hc_route::check_wires_on_track -gclk (Used to run the checker on clk objects if selected  Default off)
hc_route::check_wires_on_track -stage (Stage name)
hc_route::check_wires_on_track_cb2_track_lines -gclk (Used to run the checker on clk objects if selected  Default off)
hc_route::check_wires_on_track_cb2_track_lines -stage (Stage name)
hc_route::get_duplicate_shapes -debug (extra debug printing)
hc_route::get_duplicate_shapes -layer (only work on specified layer Shapes)
hc_route::get_duplicate_shapes -nets (only work on specified shapes of nets)
hc_route::get_duplicate_shapes -stage (Stage name)
hc_route::get_duplicate_shapes -write_fixer_file (create file with remove commands for duplicate shapes)
hc_route::get_duplicate_vias -cut_layer (only work on specified cut_layer vias)
hc_route::get_duplicate_vias -debug (extra debug printing)
hc_route::get_duplicate_vias -nets (only work on specified nets)
hc_route::get_duplicate_vias -stage (Stage name)
hc_route::get_duplicate_vias -write_fixer_file (create file with remove commands for duplicate shapes)
hc_route::get_track_lines -bbox (bbox string)
hc_route::get_track_lines -include_power (include power tracks which are occupied)
hc_route::get_track_lines -layer (layer to calculate)
hc_route::get_track_lines -net (find available tracks for net)
hc_route::get_track_lines -no_hash_reset (do not reset the hash which collects the data (for run time purposes))
hc_route::get_track_lines -widths (specific widths to calculate)
hc_route::report_clock_pushdown_failures -stage (Stage name)
hc_route::report_pushdown_failures -stage (Stage name)
hc_timing::check_impossible_constraints -only_top (Run on only top design, meaning ports coming through TD collaterals to DP flow)
hc_timing::check_impossible_constraints -stage (Stage name)
hc_timing::check_io_constraints_clock -only_top (Run on only top design, meaning ports coming through TD collaterals to DP flow)
hc_timing::check_io_constraints_clock -stage (Stage name)
hc_timing::check_unconstrained_pins -only_top (Run on only top design)
hc_timing::check_unconstrained_pins -stage (Stage name)
hc_timing::check_unconstrained_ports -only_top (Run on only top design, meaning ports coming through TD collaterals to DP flow)
hc_timing::check_unconstrained_ports -stage (Stage name)
hc_timing::report_pg_with_clock_latency_set -stage (Stage name)
hc_timing::report_pins_with_no_timing_paths -only_top (Run on only top design)
hc_timing::report_pins_with_no_timing_paths -stage (Stage name)
hc_timing::report_tspec_read -stage (Stage name)
hc_timing::report_unclocked_sequentials -only_top (Run on only top design)
hc_timing::report_unclocked_sequentials -stage (Stage name)
hc_tm::check_tm_bu_collaterals -create_terminal (create terminals from the child block in current design)
hc_tm::check_tm_bu_collaterals -repair (stiches missing connectivity in current design)
hc_tm::check_tm_bu_collaterals -stage (Stage name)
hc_tm::check_tsv_bump_alignment -stage (Stage name)
hc_upf::check_hier_srsn -stage (Stage name)
hc_upf::check_isolation -stage (Stage name)
hc_upf::check_mv_design_violations -dp_mode (DP mode - check ERC and power connectivity only)
hc_upf::check_mv_design_violations -stage (Stage name)
hc_upf::check_srsn -skip_partitions (Run SRSN checker only on assembly level hierarchies)
hc_upf::check_srsn -stage (Stage name)
hc_utils::bbox_list_to_annotation -color (Color used for annotation. Default: red)
hc_utils::bbox_list_to_annotation -keep (Keep existing annotation. Default: Remove)
hc_utils::bbox_list_to_annotation -name (Name of annotation. Default: default)
hc_utils::bbox_list_to_err_file -checker_name (Name of checker)
hc_utils::bbox_list_to_err_file -information (Information string about these errors. Default: None)
hc_utils::bbox_list_to_err_file -layer_list (List of layers corresponding to objects flagged)
hc_utils::bbox_list_to_err_file -object_list (List of objects causing violations)
hc_utils::extract_runtime_from_health_check_logs -block (Name of block - directory in which all health check logs/reports are located)
hc_utils::extract_runtime_from_health_check_logs -checks (List of checks whose health check logs you want to extract runtime out of)
hc_utils::extract_runtime_from_health_check_logs -out_file (path to output file name)
hc_utils::extract_runtime_from_health_check_logs -reports_dir (Path to reports dir, if want to mention custom path different from current work area)
hc_utils::extract_runtime_from_health_check_logs -stage (Name of stage whose health check logs you want to extract runtime out of)
hc_utils::init_summary -clean_slate (Remove all existing healthcheck reports from reports dir. Default - don't remove)
hc_utils::mark_err_files_based_on_text_waivers -all_blocks (Run on all blocks in MLPH design, else run only on current block)
hc_utils::parse_text_rpt_waivers -list_of_checks 
hc_utils::parse_text_rpt_waivers -milestone_closure (run on milestone closure list of checks, list derived from config user is in)
hc_utils::parse_text_rpt_waivers -stage_run (if user has done single stage run with all HCs, to mention stage name)
hc_utils::parse_text_rpt_waivers -standalone_run (indicate to utility that health checks run standalone, outside of any flow)
hc_utils::runtime -min_time (Minimum elapsed time in seconds for reporting. Default: 5)
hc_utils::runtime -start (Force start time reset for tag-name. Default: Report)
hc_utils::write_text_waivers_from_err_files -all_blocks (Run on all blocks in MLPH design, else run only on current block)
hotkey::selection_mode_toggle -arg (Selection Type)
hotkey::toggle_via_master -previous (Previous master from the sorted list. Default Next)
iccpp_com::obj_get_defined_attributes -application (List application attributes as well.)
iccpp_com::obj_get_defined_attributes -class (List attributes of this class only; run 'man list_attributes' for more details.)
iccpp_cr::create_route_track_for_net -layer (Specify layer)
iccpp_cr::create_route_track_for_net -nets (Specify the net to create track. Can be regular expression)
iccpp_cr::cut_shapes -bbox (bbox to cut shapes out of)
iccpp_cr::cut_shapes -layer (layers of shapes to remove)
iccpp_cr::cut_shapes -nets (list of nets)
iccpp_cr::cut_shapes_on_iccpp_trunks -bbox (bbox to cut shapes out of)
iccpp_cr::cut_shapes_on_iccpp_trunks -layer (layers of shapes to remove)
iccpp_cr::cut_shapes_on_iccpp_trunks -nets (list of nets)
iccpp_cr::ri_create_repeater_from_repeater_list -exclude_cells (excluded destination cells)
iccpp_cr::ri_create_repeater_from_repeater_list -of_cells (destination cells)
iccpp_cr::ri_create_repeater_from_repeater_list -preview (Do not create shapes, just annotate)
ism::get_ism_attr_info -attr_name (Name of the attribute.)
ism::pdintent_write -all_custom_cells_placement 
ism::pdintent_write -all_macros (write PD INTENT for all macros, by default only writes for objects tagged with pd_intent true)
ism::pdintent_write -all_pgrs (write PD INTENT for all pg regions, by default only writes for objects tagged with pd_intent true)
ism::pdintent_write -all_placement_blockages 
ism::pdintent_write -all_ports_tintent (write TINTENT for all ports)
ism::pdintent_write -all_routing_blockages 
ism::pdintent_write -all_terminals (write PD INTENT for all terminals, by default only writes for objects tagged with pd_intent true)
ism::pdintent_write -all_vas (write PD INTENT for all vas, by default only writes for objects tagged with pd_intent true)
ism::pdintent_write -include_tms (To include all TMS collaterals)
ism::pdintent_write -path (location where INTENT files are written out)
ism::pdintent_write -pgr_collection 
ism::pdintent_write -va_collection 
layout_edit::add_gnac -coordinate (Gnac location)
layout_edit::add_gnac -net (Net name)
layout_edit::get_nearest_legal_coord -cell (Cell to be placed)
layout_edit::get_nearest_legal_coord -coordinate (Initial coordinate)
layout_edit::get_nearest_legal_coord -snap (Snap the cell to the new location)
list::numbered_lines_string -cells (Objects are all cells)
list::numbered_lines_string -locations (Include object location)
list::numbered_lines_string -max_lines (Max number of lines)
list::numbered_lines_string -no_sort (Do not sort the list)
menu::run_health_check -top_only (Run checking on top-level block only. Default: All)
menu::run_iss -flow (ISS flow name: 
mpp::read_pv_voltage_map -file (PV voltage map)
mpp::save_incremental_upf -output (Incremental upf)
mpp::write_voltage_tcl -pv_voltage_map (pv voltage map file)
mpp::write_voltage_tcl -voltage_tcl (voltage tcl filename)
name::generate_unique_name -name (Original name for duplication)
name::generate_unique_name -tag (Insert this tag in the name)
name::generate_unique_name -type (Object type: 
netspec::extract_simulation_netlist -driver_subckt_files 
netspec::extract_simulation_netlist -from (From pin list)
netspec::extract_simulation_netlist -nets (Net list. Default: All Fanout)
netspec::extract_simulation_netlist -spice_header_files 
netspec::extract_simulation_netlist -subckt_name (Subcircuit name)
netspec::extract_simulation_netlist -to (To pin list. Default: All Fanout)
netspec::gcr_create_bus_constraint -corner_type 
netspec::gcr_create_bus_constraint -disabled_layers 
netspec::gcr_create_bus_constraint -gap (Spacing from outermost bit nets and other design objects)
netspec::gcr_create_bus_constraint -group_name (Name of bus group)
netspec::gcr_create_bus_constraint -min_segment 
netspec::gcr_create_bus_constraint -shield (Option to enable bus shielding. Default: no shielding)
netspec::gcr_create_bus_constraint -shield_placement 
netspec::gcr_create_bus_constraint -shield_spacings 
netspec::gcr_create_bus_constraint -shield_widths 
netspec::gcr_create_bus_constraint -snet (Shield-net. Default: vss)
netspec::gcr_create_bus_constraint -valid_layers (List of layers to use for bus trunk)
netspec::gcr_create_diffpair_constraint -disabled_layers 
netspec::gcr_create_diffpair_constraint -gap (Spacing from outermost bit nets and other design objects)
netspec::gcr_create_diffpair_constraint -group_name (Name of differential pair group)
netspec::gcr_create_diffpair_constraint -min_segment 
netspec::gcr_create_diffpair_constraint -shield (Option to enable differential pair shielding. Default: no shielding)
netspec::gcr_create_diffpair_constraint -shield_placement 
netspec::gcr_create_diffpair_constraint -shield_spacings 
netspec::gcr_create_diffpair_constraint -shield_widths 
netspec::gcr_create_diffpair_constraint -snet (Shield-net. Default: vss)
netspec::gcr_create_diffpair_constraint -valid_layers (List of layers to use for the differential pair trunk)
netspec::gcr_create_length_limit_constraint -min_value (Minimum length value for router to achieve on the specified nets)
netspec::gcr_create_length_match_constraint -disabled_layers 
netspec::gcr_create_length_match_constraint -group_name (Name of match group)
netspec::gcr_create_length_match_constraint -match_type 
netspec::gcr_create_length_match_constraint -min_segment 
netspec::gcr_create_length_match_constraint -relative (Makes tolerance number be a relative percentage. Default: um)
netspec::gcr_create_length_match_constraint -shield (Option to enable length match shielding. Default: no shielding)
netspec::gcr_create_length_match_constraint -shield_spacings 
netspec::gcr_create_length_match_constraint -shield_widths 
netspec::gcr_create_length_match_constraint -snet (Shield-net. Default: vss)
netspec::gcr_create_length_match_constraint -style 
netspec::gcr_create_length_match_constraint -tolerance (Absolute matching tolerance (um or percentage). Default: 0)
netspec::gcr_create_net_priority_constraint -priority (Net priority value. Value is an integer with range from -128 to 128.)
netspec::gcr_create_rv_constraint -disabled_layers 
netspec::gcr_create_rv_constraint -min_segment 
netspec::gcr_create_rv_constraint -rv_spec (List of layers with number of parallel wires per layer)
netspec::gcr_create_rv_constraint -shield (Option to enable RV shielding. Default: no shielding)
netspec::gcr_create_rv_constraint -shield_spacings 
netspec::gcr_create_rv_constraint -shield_widths 
netspec::gcr_create_rv_constraint -snet (Shield-net(s). Default: vss)
netspec::gcr_create_rv_constraint -style 
netspec::gcr_create_shield_constraint -disabled_layers 
netspec::gcr_create_shield_constraint -min_segment 
netspec::gcr_create_shield_constraint -shield_spacings 
netspec::gcr_create_shield_constraint -shield_widths 
netspec::gcr_create_shield_constraint -snet (Shield-net(s). Default: vss)
netspec::gcr_create_shield_constraint -style 
netspec::get_constrained_nets -dump (File to dump constraints information to. Default: None)
netspec::get_constrained_nets -gcr (Get GCR specific constraints only. Default: All)
netspec::ndr_update_net_routing_rule -disabled_layers 
netspec::ndr_update_net_routing_rule -max_layer_mode 
netspec::ndr_update_net_routing_rule -max_layer_mode_soft_cost 
netspec::ndr_update_net_routing_rule -max_routing_layer 
netspec::ndr_update_net_routing_rule -min_layer_mode 
netspec::ndr_update_net_routing_rule -min_layer_mode_soft_cost 
netspec::ndr_update_net_routing_rule -min_routing_layer 
netspec::ndr_update_net_routing_rule -min_segment 
netspec::ndr_update_net_routing_rule -shield (Add basic shield constraint. Default: None)
netspec::ndr_update_net_routing_rule -shield_spacings 
netspec::ndr_update_net_routing_rule -shield_widths 
netspec::ndr_update_net_routing_rule -snet (Shield-net(s). Default: vss)
netspec::ndr_update_net_routing_rule -style 
netspec::ndr_update_net_routing_rule -widths (Layer-Width list {la wa lb wb ...} to update basic routing widths constraint. Default: None)
netspec::propagate_down -force (Force propagate down. Default: None)
netspec::propagate_net_constraints -constrs (Constraints list to propagate. Default: {dont_touch allowed_layers ndr})
netspec::propagate_up -force (Force propagate up. Default: None)
netspec::read_attribute_xml_format -array_name (Returned array-name)
netspec::read_dice_attrxml_files -echo (Echo constraints ONLY. Default: None)
netspec::read_dice_format -echo (Echo DICE constraints ONLY. Default: None)
netspec::report_match_lengths -group (Name of group to report on.)
netspec::report_match_lengths -nets (Collection or list of nets to check.)
netspec::report_match_lengths -outfile (Specify output file-name for length match report. Default: <block>_GCR_length_match_summary.rpt)
netspec::report_match_lengths -per_layer (Checks length matching per-layer. Default: Total)
netspec::report_match_lengths -report_file (Create a report file. Default: Only report to ICC2 log)
netspec::report_match_lengths -work_dir (Specify working directory-name for priority-route use. Default: priority_route)
netspec::set_allowed_layers_from_net -net (Constrained net reference)
netspec::set_allowed_layers_from_net -tnets (Target nets)
netspec::set_ndr_from_net -net (Constrained net reference)
netspec::set_ndr_from_net -tnets (Target nets)
netspec::write_constraints_from_attrxml -add_lock (Add net re-routing locked constraint when dont-touch is set. Default: None)
netspec::write_constraints_from_attrxml -append (Append to output file. Default: None)
netspec::write_constraints_from_attrxml -apply (Apply constraints written to file on current DB. Default: None)
netspec::write_constraints_from_attrxml -dice_dir (Input Attribute-XML directory to read constraints. Default: inputs)
netspec::write_constraints_from_attrxml -dice_file (Input Attribute-XML file (or list of files) to read constraints. Default: inputs/*.attribute.xml)
netspec::write_constraints_from_attrxml -prop_fanout (Propagate constraints to all-fanout nets. Default: None)
pg_util::sd_create_ebb_blanket_blockage -boundary_offset 
pg_util::sd_create_ebb_blanket_blockage -cells (List of cells to create routing blockage over)
pg_util::sd_create_ebb_blanket_blockage -include_ground (Blockage for vss also)
pg_util::sd_create_ebb_blanket_blockage -layers (List of routing layers)
pg_util::sd_pg_repair -bbox (Bbox where to search for power terminals)
pg_util::sd_pg_repair -layer (Routing layer)
pg_util::sd_pg_repair -net (Power net name)
pg_util::sd_protect_pins_in_pg_region -bbox (Bbox where to look for pin shapes and terminals)
pg_util::sd_protect_pins_in_pg_region -layers (List of routing layers)
pg_util::sd_protect_pins_in_pg_region -size (Size of the blockage)
pg_util::sd_pull_back_pg_from_ebb -cells (List of EBB cells. Default: all EBB cells)
pg_util::sd_pull_back_pg_from_ebb -force (Pull back layers above EBB HPML)
pg_util::sd_pull_back_pg_from_ebb -gap_size (Distance between EBB edge and PG wire edge)
pg_util::sd_pull_back_pg_from_ebb -layer (Routing layer)
pg_util::sd_pull_back_pg_from_ebb -pg_net (PG net name)
pg_util::sd_rm_straddle_pg_shapes_over_ebb -cells (List of EBB cells. Default: all EBB cells)
pg_util::sd_rm_straddle_pg_shapes_over_ebb -force (Force to remove shapes that are above EBB HPML)
pg_util::sd_rm_straddle_pg_shapes_over_ebb -layer (Routing layer. Default: HPML of the EBB)
pinPairing::create_pin_pairing_stubs -cells (Cells to run the command on (default all soft macros))
pinPairing::create_pin_pairing_stubs -layer (Layer name to run pin pairing (default: m5))
pinPairing::create_pin_pairing_stubs -net_name (Net name to be used for pairing net (default vss))
pinPairing::create_pin_pairing_stubs -verbose (Whether to print extensive message)
pinPairing::remove_pin_pairing_stubs -hierarchical (Remove pin pairing stubs hierarhically)
place::rpd_get_overlapped_cells -vas (Voltage areas)
place::rpd_process_layout_only_cells -vas (Voltage areas)
place::rpd_process_ps_cells -vas (Voltage areas)
place::rpd_verify_rp -check_only (Returns a list of corrupt RP groups and skips destructuring.)
place::rpd_verify_rp -legalize (Performs a legalize_placement if any genrams were destructured.)
place::rpd_verify_rp -log (Specifies the log file.)
place::rpd_write_rsh -input (Syn RPD-Shell command file)
place::rpd_write_rsh -output (ICC2 RPD-Shell command file)
place::swap_cell_types -cells (Specify target cells)
place::write_placement -all (Include physical only cells)
place::write_placement -filename (The output placement file name. The default is to write to standard output.)
place::write_placement -ignore_fixed (Do not include the fixed cells)
place::write_placement -inst_list (The instance name list. The default is to write out eco placement for all instances.)
ppp::pop_tm_terminals -layers (List of layers of which to create terminals only. Default: Pin-Layer)
ppp::pop_tm_terminals -macros (List of macros templates to pop terminals for. Default: G_BU_TM_MACRO_LIST)
ppp::push_routes -nets (Nets to run push-down on for testing)
ps::get_pwr_grid_config -layer (Name of the metal layer)
ps::get_pwr_grid_config -net_type (Could be AON, GND, PRIMARY, NON_UPF_PRIMARY, etc)
ps::get_pwr_grid_config -param (Could be width, pitch, offset)
ps::get_pwr_switch_config -dont_snap (dont_snap to pg)
ps::insert_ps_cells_around_macro -get_ps_config (Give this switch if you want to read PS config)
ps::insert_ps_cells_around_macro -macro_names (macro names around which to insert PS)
ps::insert_ps_cells_around_macro -va (voltage area for ps cell)
ps::pull_point_into_va -direction (direction of PS insertion)
ps::pull_point_into_va -increment (increments to move the point)
ps::pull_point_into_va -point (point to pull into va)
ps::pull_point_into_va -va (voltage area for ps cell)
ps::snap_to_nearest_locn -around_ebb (snapping is around ebb)
ps::snap_to_nearest_locn -ceil (ceil the coord)
ps::snap_to_nearest_locn -coord (coordinate to snap)
ps::snap_to_nearest_locn -direction (x or y direction)
ps::snap_to_nearest_locn -floor (floor the coord)
ps::snap_to_nearest_locn -no_extra_check (For -floor switch, no need to check (snap value + ps_width or ps_height) < coord given)
ps::snap_to_nearest_locn -nolayersnap (dont snap to layer, only snap to legal tile location)
ps::snap_to_nearest_locn -ps_ref_name (ref_name of PS cell to snap)
ps_dfb::calculate_single_start_location -start_direction 
ps_dfb::calculate_single_start_location -switch_list 
ps_dfb::calculate_single_start_location -voltage_area_name 
ps_dfb::calculate_start_location -start_direction 
ps_dfb::calculate_start_location -switch_control_signal_daisy_chain0 
ps_dfb::calculate_start_location -switch_list 
ps_dfb::calculate_start_location -voltage_area_name 
ps_dfb::create_power_switch_array_pattern_wa -bbox (bbox to insert)
ps_dfb::create_power_switch_array_pattern_wa -orient ()
ps_dfb::create_power_switch_array_pattern_wa -pattern ()
ps_dfb::create_power_switch_array_pattern_wa -power_switch ()
ps_dfb::create_power_switch_array_pattern_wa -prefix ()
ps_dfb::create_power_switch_array_pattern_wa -snap_to_site_row ()
ps_dfb::create_power_switch_array_pattern_wa -voltage_area ()
ps_dfb::create_power_switch_array_pattern_wa -x_offset ()
ps_dfb::create_power_switch_array_pattern_wa -x_pitch ()
ps_dfb::create_power_switch_array_pattern_wa -y_offset ()
ps_dfb::create_power_switch_array_pattern_wa -y_pitch ()
ps_dfb::insert_ps_stitch_hfn -native_snap_to_site_row 
ps_dfb::insert_ps_stitch_hfn -power_domain (power domain name to insert PS cells)
ps_dfb::replace_fishbone_with_daisy -cells (cells)
ps_dfb::replace_fishbone_with_daisy -coords (coords)
ps_dfb::replace_fishbone_with_daisy -start_switch 
ps_dfb::replace_fishbone_with_daisy -voltage_areas 
ps_dfb::report_long_switch_nets -only_voltage_area 
ps_dfb::show_daisy_chain -domain (Power Domain to highlight - default all)
ps_dfb::show_daisy_chain -remove (Remove highlight)
ps_dfb::show_main_chain -domain (Power Domain to highlight - default all)
ps_dfb::show_main_chain -remove (Remove highlight)
ps_dfb::show_power_switch_chain -domain (Power Domain to highlight - default all)
ps_dfb::show_power_switch_chain -remove (Remove highlight)
ps_dfb::show_power_switch_chain -type (Chain type, either daisy or main.  Default is to show both)
ps_dfb::stitching_daisy_fb -no_rpts (Do not generate the reports default generated)
ps_dfb::stitching_daisy_fb -only_voltage_area 
ps_dfb::stitching_daisy_fb -search_box_diameter 
pwr::add_pg_in_polygon -layers (Layers to heal PG)
pwr::add_pg_in_polygon -polygon_list (List of polygons to heal)
pwr::convert_pwr_shapes_to_terminals -layers (Layer name)
pwr::get_power_layers -custom_only (Print out the net and layer info, including customized rail)
pwr::get_power_layers -net_tag (power net tag. GND, PRIMARY or AON for default config, and custom power net for customized rails.)
pwr::get_power_layers -verbose (Print out the net and layer info, including customized rail)
pwr::remove_pg_in_polygon -layers (Layers to heal PG)
pwr::remove_pg_in_polygon -polygon_list (List of polygones to heal)
pwr::remove_power_grid -dont_remove_terminal 
pwr::remove_power_grid -layer (Remove power rails for specific layer)
pwr::remove_power_grid -nets (Nets to remove)
pwr::stdcell_hookup_via1 -m1_pitch (m1 track patch)
pwr::stdcell_hookup_via1 -output (TCL output)
pwr::stdcell_hookup_via1 -start_track (m1 starting track offset)
pwr::stdcell_hookup_via1 -via_master (via1 master)
pwr::stdcell_hookup_via1 -via_track_pitch (via1 pitch)
pwr::write_power_grid -outfile (Output file. Default is G_OUTPUT_PATH/G_DESIGN_NAME_powergrid.tcl)
pwr_hookup::create_stdcell_powerhookup -allowed_via_master_overrides 
pwr_hookup::create_stdcell_powerhookup -check_hookup_integrity 
pwr_hookup::create_stdcell_powerhookup -post_route_hookup (Post route hookup - look at route for drv avoidance)
pwr_hookup::create_stdcell_powerhookup -powerhookup_all_segments 
pwr_hookup::create_stdcell_powerhookup -powerhookup_avoid_drv 
pwr_hookup::create_stdcell_powerhookup -powerhookup_cells_area 
pwr_hookup::create_stdcell_powerhookup -powerhookup_empty_area 
pwr_hookup::create_stdcell_powerhookup -powerhookup_grid_count 
pwr_hookup::create_stdcell_powerhookup -vcc_name (Do power hookup of the specified vcc net)
pwr_hookup::create_stdcell_powerhookup -via_master_overrides 
pwr_hookup::create_stdcell_powerhookup -vss_name (Do ground hookup of the specified vss net)
pwr_hookup::create_stdcell_powerhookup -within (Hookup incremental within defined area. Default is hookup the entire design)
pwr_hookup::find_flexfill_pwr_hookup_options -optname_only (only return list of option names)
pwr_hookup::get_first_gnd_rail -core_lly 
pwr_hookup::get_first_gnd_rail -tile_name 
pwr_hookup::get_first_gnd_rail -y_first_gnd 
pwr_hookup::get_first_gnd_rail -y_gnd 
pwr_hookup::get_hookup_layer_vias_and_shapes -shapes 
pwr_hookup::get_hookup_layer_vias_and_shapes -vias (variable to store collection of vias)
pwr_hookup::get_pwr_gnd_regions -aon_area 
pwr_hookup::get_pwr_gnd_regions -gnd_area 
pwr_hookup::get_pwr_gnd_regions -pwr_area 
pwr_hookup::get_pwr_hookup_process_settings -clear (clear stored process settings)
pwr_hookup::get_pwr_hookup_process_settings -no_via_query (don't resolve hookup via masters)
pwr_hookup::get_pwr_hookup_ref_cell_info -cell_ref_pattern 
pwr_hookup::get_pwr_hookup_ref_cell_info -exclude_macros 
pwr_hookup::get_pwr_hookup_ref_cell_info -possible_hookup_refs 
pwr_hookup::get_pwr_hookup_ref_cell_info -strict_exclude_refs 
pwr_hookup::get_pwr_hookup_ref_cell_info -within (limit to only look for possible refs in defined area)
pwr_hookup::hookup_convert_cell_wildcards -within (limit to only look for refs in defined area)
pwr_hookup::modify_def_vias_section -user_shape_file 
pwr_hookup::print_via_shape_summary -remove (print messages to remove {default is to add})
pwr_hookup::print_via_shape_summary -shapes (collection of shapes)
pwr_hookup::print_via_shape_summary -vias (collection of vias)
pwr_hookup::remove_stdcell_powerhookup -net_names (Remove the given pwr/gnd connections. Default is '*')
pwr_hookup::remove_stdcell_powerhookup -within (Remove only within or intersecting the area. Default is entire design)
pwr_hookup::set_hookup_via_type -layer_name (layer name.  Overrides type)
pwr_hookup::set_hookup_via_type -type (Type to set.  Default=1)
q::get_highest_layer -attribute (Block Details attribute that is being queried.: 
q::get_highest_layer -template (Cell tamplate)
q::get_logic_between_pins -add_end (Add startpoint cell to return collection)
q::get_logic_between_pins -add_start (Add startpoint cell to return collection)
q::get_logic_between_pins -end (Endpoint pins)
q::get_logic_between_pins -start (Startpoint pins)
q::get_macros -filter (valid get_cells -hierarchical filter expression. This filter is added on top of above G vars )
q::get_macros -of_objects (valid get_cells -hierarchical -of_objects expression. This switch is added on top of all the above G var filters)
q::get_next_size -allow_dont_use (consider the dont_use cells too)
q::get_next_size -levels (Number of upsize levels- default 1)
q::get_power_domain_info -domain_name 
q::get_power_domain_info -no_gas_stations (Define power domain name)
q::get_prev_size -allow_dont_use (consider the dont_use cells too)
q::get_prev_size -levels (Number of upsize levels- default 1)
q::get_techfile_info -tech_dump (variable to store unparsed techfile dump)
q::get_voltage_area_of_cell_location -cell (Specify the cell to check)
q::get_voltage_area_of_cell_location -smallest_va (If specified returns the smallest va, else returns all VAs cell location falls into)
q::is_nested_va -domain_name (domain name)
q::is_vertical_layer -layer (Layer name)
refresh::dump_refresh -blocks (Dump out refresh collateral only for this list of blocks (template name). DEFAULT: All MLPH blocks of current design)
refresh::dump_refresh -collateral_type 
refresh::dump_refresh -filter (Filter collection with 'expression'.  Applies only to refresh collateral.)
refresh::dump_refresh -objects (Dump out only these objects (legal objects: terminals, shapes, vias, blockages, pg_regions, voltage_areas).  DEFAULT: all)
refresh::dump_rptr_connectivity -cells (Repeater/inverter cells only.)
refresh::dump_rptr_connectivity -output_file (Output file name. DEFAULT: ./${block}.refresh.rptr_connectivity.tcl)
refresh::hier_sort_bottom_up -cells (Collection of cells.)
refresh::write_eco_files -golden_block 
refresh::write_eco_files -golden_lib 
refresh::write_eco_files -outdir (Output directory name.)
refresh::write_eco_files -pre_golden_lib 
rolluplib::main -rollup_block 
rolluplib::main -rollup_lib (rollup library name)
rolluplib::main -source_lib (source library name)
route::get_net_wirelength -net (Net info)
route::get_routing_layers -above_layer (returns all routing layers above the mentioned layer)
route::get_routing_layers -below_layer (returns all routing layers below the mentioned layer)
route::get_routing_layers -next_layer (returns the next default layer above the specified layer)
route::get_routing_layers -no_metal (only returns vias)
route::get_routing_layers -no_via (only returns metals)
route::get_routing_layers -prev_layer (returns the next default layer below the specified layer)
route::reroute_shorts -loop (Number of iterations of Zroute. Default is from routing command)
route::reroute_shorts -remove_all (Remove all the routes. Default is to remove segment within error bbox)
route::reroute_shorts -remove_constraints (Remove layer constraints. Default is to keep the layer constrails)
route::reroute_shorts -shorts_thresold 
route::set_via_color -color_value (Color of the value. Default is 1)
route::set_via_color -power_net_only (Power net type only)
route::set_via_color -via_layer (Color the vias)
route::set_via_color -via_master 
route::set_via_ladder_rule -config_file 
rpt::check_qor_report -file (Qor report)
rpt::clock_information -clknets (Clock nets to report)
rpt::clock_information -tag (Tag)
rpt::create_run_summary -append (Append new info to file)
rpt::create_run_summary -report_dir 
rpt::create_run_summary -stage_tag 
rpt::create_run_summary -summary_file (Summary output file)
rpt::power_domains -file (name of report file)
rpt::pvt -corner (which corner to dump out report)
rpt::pvt -file (name of report file)
rpt::qor -corner (which corner to dump out report)
rpt::qor -file (name of report file)
rpt::qor_summary -file (name of report file)
rpt::report_custom_powergrid_info -outfile (Path to the file)
rpt::route_info_of_paths -corner (which corner to dump out timing for)
rpt::route_info_of_paths -llist (list of layers to report)
rpt::route_info_of_paths -max_path (Number of paths to report)
rpt::route_info_of_paths -mode (which mode to dump out timing for)
rpt::route_info_of_paths -nand_gate_area (Nand gate area)
rpt::route_info_of_paths -nworst (Number of paths to report per endpoint)
rpt::route_info_of_paths -outfile (name of report file)
rpt::route_info_of_paths -pathlist (name of start end point list file)
rpt::route_info_of_paths -slack (Only  those paths with a slack less than)
rpt::route_info_of_paths -vlist (list of vias to report)
rpt::route_info_one_path -corner (which corner to dump out timing for)
rpt::route_info_one_path -epoint (End point of the timing path)
rpt::route_info_one_path -llist (list of layers to report)
rpt::route_info_one_path -mode (which mode to dump out timing for)
rpt::route_info_one_path -nand_gate_area (Nand gate area)
rpt::route_info_one_path -spoint (Start point of the timing path)
rpt::route_info_one_path -vlist (list of vias to report)
rpt::supply_nets -file (name of report file)
rpt::timing -corner (which corner to dump out timing for)
rpt::timing -file (name of report file)
rpt::timing -mode (which mode to dump out timing for)
rpt::zero_interconnect_timing -tag (Optional tag name for the reports; to be appended in the name)
tech::get_techfile_info -layer (Layer (or ContactCode, or whatever makes sense for the specified type))
tech::get_techfile_info -type (Type of info [Technology, Color, Tile, Layer, LayerDataType, ContactCode])
tech::read_techfile_info -techfile (Specify techfile to read (default dump tf from library))
tm_custom_scripts::insert_tv0 -force (Deletes existing TV0s on specified nets or all nets, boolean argument)
tm_custom_scripts::insert_tv0 -nets (Collection of nets, for multiple nets use comma as separator)
tm_custom_scripts::insert_tv0 -trim (places trimed vias from defined list, boolean argument)
tm_custom_scripts::insert_tv0 -trimfile (user enter trim value; if not passed takes default trim values)
tm_custom_scripts::insert_tv0 -via_type (VIA TYPE, default is tv0A)
tm_custom_scripts::insert_tv0 -within (Inserts via within mentioned bbox)
tm_custom_scripts::rename_shapes -net (Renaming net name)
tmtd::change_ndm_to_design_view -create (creates a design view from ndm )
tmtd::change_ndm_to_design_view -ndm_ref_name (ndm reference name)
tmtd::check_bu_collaterals -create_terminal (create terminals from the child block in current design)
tmtd::check_bu_collaterals -repair (stiches missing connectivity in current design)
tmtd::create_def -block (Def block name)
tmtd::create_def -def_file (output def file)
tmtd::create_def -interface_nets (ports of the block)
tmtd::create_def -noports (No ports in DEF only shapes)
tmtd::create_def -tcl_file (tcl file to be sourced)
tmtd::delete_older_shapes -cellname (Deletes shapes from this cell)
tmtd::delete_older_shapes -change_working_design 
tmtd::delete_older_shapes -current_block_name (current block name)
tmtd::delete_older_shapes -only_ports (Deletes only interface net objects)
tmtd::delete_older_shapes -outside_terminals (Deletes only outside terminals)
tmtd::process_internal_nets -current_block_name (This is needed to attach blockage origin)
tmtd::process_internal_nets -delete_blockage (Delete processed blockages,adds delete blockage attribute)
tmtd::process_internal_nets -delete_obj (Delete shapes after conerting into blockages)
tmtd::process_internal_nets -nets (Collection of nets)
tmtd::process_internal_nets -only_shape (Process only shapes for the given nets)
tmtd::process_internal_nets -only_via (Process only vias for the given nets)
tmtd::process_internal_nets -shapes (Collection of shapes/vias; this will override -nets option)
tmtd::process_owner_attribute -current_block_name (current block name)
tmtd::process_owner_attribute -force (Forces attribute name to be current_block_name)
tmtd::process_owner_attribute -objects (Processing objects)
tmtd::process_owner_attribute -remove (Deletes current_block_name attribute)
tmtd::tm_collateral_diff -compare_coll_format 
tmtd::tm_collateral_diff -compare_collateral (compare collateral)
tmtd::tm_collateral_diff -ref_block (reference block name)
tmtd::tm_collateral_diff -ref_coll_format (Reference collateral format; default is tcl)
tmtd::tm_collateral_diff -ref_collateral (reference collateral)
tmtd::tm_collateral_diff -ref_lib (reference lib name)
tmtd::tm_consume_td_tm_file -block (block name)
tmtd::tm_consume_td_tm_file -lib (lib name)
tmtd::tm_consume_td_tm_file -td_tm_collateral (top-down tm collateral)
tmtd::tm_validate_bu_with_original -bu_collateral (reference collateral)
tmtd::tm_validate_bu_with_original -bu_file_format (bottom_up file format, default is tcl)
tmtd::tm_validate_bu_with_original -oas (input format, default is gds)
tmtd::tm_validate_bu_with_original -ref_block (reference block name)
tmtd::tm_validate_bu_with_original -ref_lib (reference lib name)
tmtd::transform_objects_parent_2_child -child_orientation 
tmtd::transform_objects_parent_2_child -child_points (child co-ordinates)
tmtd::transform_objects_parent_2_child -object (object)
tmtd::transform_points_child_2_parent -child_orientation 
tmtd::transform_points_child_2_parent -child_origin 
tmtd::transform_points_child_2_parent -from_points (from child points)
tmtd::transform_points_parent_2_child -child_orientation 
tmtd::transform_points_parent_2_child -child_origin 
tmtd::transform_points_parent_2_child -from_points (from parent points)
tmtd::write_blockages -objects (collection of objects)
tmtd::write_blockages -output (appends blockages into a file)
tmtd::write_mims -objects (collection of objects)
tmtd::write_mims -output (appends mimcap into a file)
tmtd::write_terminals -convert_to_shape (Converts terminals to shape and writes into file)
tmtd::write_terminals -objects (collection of objects)
tmtd::write_terminals -output (appends shapes into a file)
tspec::clipper -nets (nets)
tspec::clipper -reset (reset)
tspec::create_bbt -filename (Pointer to BBT template file)
tspec::timing_path_analyze -corner 
tspec::timing_path_analyze -max_paths 
tspec::timing_path_analyze -net_delay_limit 
tspec::timing_path_analyze -tpaths 
utils::add_header_to_file -comment_char (Comment character(s) (default is '#|'))
utils::add_header_to_file -file_name (Filename to add header to)
utils::add_header_to_file -msg (Message to include in header)
utils::add_header_to_file -runtime (Elapse time (seconds) for generating this file.)
utils::convert_units -from (current unit: 
utils::convert_units -to (units to be converted to: 
utils::convert_units -value (Value to be converted)
utils::get_design_info -stages_done (Return the stages done)
utils::get_tmp_dir_name -group (Protect the dir with this group)
utils::port_up_terminals -cells (Port up terminals only from these cells. DEFAULT: All hierarchical cells.)
utils::port_up_terminals -layer (Port up terminals on this layer. DEFAULT: tm1)
utils::port_up_terminals -pins (Port up terminals of these pins.  This overrides -cells and -layer options.)
utils::port_up_terminals -snap_to_boundary_edge 
utils::print_header -comment_char 
utils::print_header -file_name (path/filename to print in the header)
utils::print_header -msg (Message to include in header)
utils::print_header -runtime (Elapse time (seconds) for generating this file)
utils::print_histogram -count_label (Label for the value)
utils::print_histogram -key_label (Label for the key)
utils::print_histogram -lower_bound (Lower bound of histogram's range)
utils::print_histogram -max_star_length 
utils::print_histogram -percentage (Prints stars proportional to percentage (default value))
utils::print_histogram -title (Title of the histogram)
utils::print_histogram -type (Type of data (default based on step_incr format): 
utils::print_histogram -unit (Unit name)
utils::print_histogram -upper_bound (Upper bound of histogram's range)
utils::snap_terminals_to_boundary_edge -edge (Snap terminals to boundary edge: 
utils::snap_terminals_to_boundary_edge -terminals (Collection of terminal objects.)
utils::trace_driver_pin -pin (pin|port)
utils::trace_net_topology -pins (pins|ports)
utils::trace_net_topology -return_all (also return repeater/inverter pins; DEFAULT: return hierarchical pins only.)
via_ladder::add_via_ladder -allow_drcs (Allow the router to work in dirty mode or not.)
via_ladder::add_via_ladder -cells (List of instance to insert or reinsert via ladders.)
via_ladder::add_via_ladder -constraints_only (Set constraints only)
via_ladder::add_via_ladder -incremental (NOT SUPPORTED YET.  Ignore the detailed routes. Could handle incremental or eco mode to insert via ladder on routed design)
via_ladder::add_via_ladder -nets (List of net)
via_ladder::add_via_ladder -report_tag (Report stage tag.)
via_ladder::add_via_ladder -via_ladder_constraint 
via_ladder::assign_via_ladder_constraints -cells (List of cells to insert or reinsert via ladders.)
via_ladder::assign_via_ladder_constraints -nets (List of net)
via_ladder::assign_via_ladder_constraints -pin_name (Specify the pin name to set via ladder constraint)
via_ladder::assign_via_ladder_constraints -report_tag (Report stage tag.)
via_ladder::assign_via_ladder_constraints -via_ladder_constraint 
via_ladder::remove_via_ladder -cells (Specify the cells to remove the via ladder)
via_ladder::remove_via_ladder -dont_remove_constraint 
via_ladder::remove_via_ladder -nets (Specify the nets to remove the via ladder)
via_ladder::set_via_ladder_rule -config_file 
via_ladder::update_techfile_for_via_ladder_rule -outfile (Output techfile)
via_ladder::update_techfile_for_via_ladder_rule -rule_file (Via ladder rule file)
via_ladder::update_techfile_for_via_ladder_rule -techfile (Input techfile)
vs::vector_swap -bbox (Bounding box for the pair search)
vs::vector_swap -check_only (Performs all calculations but doesn't do any replacement. Default false)
vs::vector_swap -cmax_percent_cluster 
vs::vector_swap -merge_lces (Enable merging of lces. Default false)
vs::vector_swap -swap (Pair or cell types to be swapped)
zndp::add_new_module -cells (List of cells to add new module and instances within. Default Selected/Top)
zndp::add_new_module -instances (List of new instance names)
zndp::add_new_module -no_save (Do not save. Default Save)
zndp::add_new_module -reference (New module reference name)
zndp::connect -net_type (Create connected net as this net-type (power, ground, tie_high, or tie_low). Default Signal)
zndp::connect -netbus (Bus net pattern or name)
zndp::connect -pinbus (Bus port/pin pattern or name)
zndp::create_bbox_library -lib (New NDM library name)
zndp::create_bbox_topblock -block (New top-block name)
zndp::create_bbox_topblock -boundary (Boundary bbox or points)
zndp::create_boundaries_file -filename (boundaries file name)
zndp::create_interface -busname (Bus interface pattern or name)
zndp::create_interface -cells (List of cells to create interfaces within. Default Selected/Top)
zndp::create_interface -direction (Direction of bus or port (in, inout, or out))
zndp::create_interface -net_type (Create connected net as this net-type (power, ground, tie_high, tie_low, or signal). Default Signal)
zndp::disconnect -all (Disconnect all ports or pins)
zndp::disconnect -netbus (Bus net pattern or name)
zndp::disconnect -pinbus (Bus port/pin pattern or name)
zndp::floorplan_block -cells (List of cells to run floorplan within. Default Selected/Top)
zndp::floorplan_block -no_backoff (Use zero back-off: Default G_BACKOFFs)
zndp::floorplan_block -no_tracks_under_rails 
zndp::floorplan_block -top (Floorplan current-block top only and disregard selected. Default Selected/Top)
zndp::remove_interface -busname (Bus interface pattern or name)
zndp::remove_interface -cells (List of cells to create interfaces within. Default Selected/Top)
zndp::snap_terminal2selectedshapes -objects (Boundary objects to create terminals for)
