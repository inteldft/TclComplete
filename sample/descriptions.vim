let description = {}
let description["CmdSpec"] = ""
let description["LoadBLT"] = ""
let description["LoadLib"] = ""
let description["LoadLib_high"] = ""
let description["LoadNewFlowManagerBuilder"] = ""
let description["NflTclFindTheFullPath"] = ""
let description["POST_all_steps"] = ""
let description["P_all_inputs_minus_clocks"] = "# Returns a collection of all input ports except the clock ports"
let description["P_apply_scon"] = ""
let description["P_astro_upsize_script"] = "# Create a TDB clocks file based on Synopsys clocks reports"
let description["P_back2back"] = "# Outputs a back2back sequential cell report for the design"
let description["P_cell_usage"] = "# Outputs a cell_usage report for the design"
let description["P_connect_net_to_pin_of_cell"] = "# Connect net in a design to the pin of a cell"
let description["P_continue"] = "# Continues the calling script/proc after P_interrupt or takes a snapshot of current script/procedure"
let description["P_create_port"] = "# Create a port on current design if it doesnt exists"
let description["P_create_unique_object_name"] = "# Returns a unique net/port/cell name with given basename and integer as '$basename$integer'.  Returns an empty string if reaches '-max_integer' limit"
let description["P_debug"] = ""
let description["P_drv_cell"] = ""
let description["P_echo"] = ""
let description["P_elapsed_time"] = "# Echos elapsed time between tasks"
let description["P_error"] = ""
let description["P_fatal"] = ""
let description["P_find_common_collection"] = "# Returns common elements between 2 collections"
let description["P_find_file_ext"] = "# Looks for the given file with specified extensions (default: .stcl)"
let description["P_find_proc"] = "# Looks for the given procedure/command"
let description["P_get_best_driver"] = "# Returns best possible driver in same ref family for a given load"
let description["P_get_cells"] = ""
let description["P_get_children"] = ""
let description["P_get_clock_pins"] = ""
let description["P_get_clockgate_clock_pins"] = ""
let description["P_get_clockgate_enable_pins"] = ""
let description["P_get_clockgate_output_pins"] = ""
let description["P_get_clocks"] = ""
let description["P_get_data_pins"] = ""
let description["P_get_design_name"] = "# Gets the design name and puts it in global variable \"G_DESIGN_NAME\""
let description["P_get_enable_pins"] = ""
let description["P_get_hier_scon"] = ""
let description["P_get_lib"] = ""
let description["P_get_libcells"] = ""
let description["P_get_libpins"] = ""
let description["P_get_license"] = "#  Procedure to get a license"
let description["P_get_makevars"] = "# Return a global array with all make variables defined by = from input_file"
let description["P_get_nets"] = ""
let description["P_get_object_pins"] = ""
let description["P_get_objects"] = ""
let description["P_get_output_pins"] = ""
let description["P_get_pins"] = ""
let description["P_get_ports"] = "# Utility procedure -  Correclty retrieves port objects in current instance."
let description["P_get_preset_pins"] = ""
let description["P_get_ref_name"] = ""
let description["P_get_reset_pins"] = ""
let description["P_get_scon_from_rtl"] = "# Copy SCON files from RTL"
let description["P_get_scr_proc_name"] = ""
let description["P_get_si_pins"] = ""
let description["P_get_so_pins"] = ""
let description["P_get_variable_val"] = "# Checks the existance of the given variable. Returns default or null value if specified"
let description["P_hookup_port"] = "# Hooks up a port to a pin of the cell"
let description["P_info"] = ""
let description["P_interrupt"] = "# Interrupts the MAIN"
let description["P_is_DC"] = "# Returns 1 if current Synopsys tool is specified version (optional) of Design-Compiler/Design-Vision/Design-Analyzer, 0 otherwise"
let description["P_is_ENCOUNTER"] = ""
let description["P_is_FE"] = ""
let description["P_is_ICC"] = "# Returns 1 if current Synopsys tool is specified version (optional) of IC-Compiler, 0 otherwise"
let description["P_is_ICC2"] = "# Returns 1 if current Synopsys tool is specified version (optional) of IC-Compiler , 0 otherwise"
let description["P_is_MAGMA"] = ""
let description["P_is_MG"] = ""
let description["P_is_PC"] = ""
let description["P_is_PSYN"] = "# Returns 1 if current Synopsys tool is specified version (optional) of Physical-Compiler, 0 otherwise"
let description["P_is_PT"] = "# Returns 1 if current Synopsys tool is specified version (optional) of PrimeTime, 0 otherwise"
let description["P_is_SNPS"] = ""
let description["P_is_collection"] = "# Return 1 if input is a collection, 0 otherwise"
let description["P_is_synopsys_tool"] = "# Returns 1 if procedure was executed within the given Synopsys tool & version, 0 otherwise"
let description["P_lminus"] = ""
let description["P_process_high_fanout_signal"] = "# Puts dont_touch_netowrk on high fanout port/pins or dont_touch and ideal_net on nets. The list of high fanout signals(ports, pins, nets) is defined in variable G_HIGH_FANOUT_SIGNAL_LIST"
let description["P_process_synchronizer_cells"] = "# Processes synchronizer cells"
let description["P_proj_analyze"] = "# Procedure to analyze vhdl/verilog/mcl/bc"
let description["P_proj_change_names"] = "# Changes names in a design hierarchically"
let description["P_put_scan_attributes"] = "# Put scan attributes on design objects"
let description["P_read_lib_db"] = "# Procedure to read library db file"
let description["P_rename_soft_macro"] = "# Renames the soft macro design name"
let description["P_report_logic_levels"] = ""
let description["P_rpt_unmapped"] = "# Creates a report that has unmapped cells in the design"
let description["P_run_cmd"] = ""
let description["P_save_tmp_db"] = ""
let description["P_seal_cmd"] = ""
let description["P_set_disable"] = ""
let description["P_set_fix_multiple_port_nets"] = "# Puts the 'set_fix_multiple_port_nets' attribute on designs hierarchically"
let description["P_set_fp"] = ""
let description["P_set_maxdelay"] = ""
let description["P_set_mcp"] = "# Wrapper around Muticycle Path Cmd"
let description["P_set_mindelay"] = ""
let description["P_sid"] = ""
let description["P_sod"] = ""
let description["P_source_proj_setup"] = "# Sources the project setup for the Synopsys tool user is working on"
let description["P_split"] = "# Splits a string on any character at a specific occurance of that characher"
let description["P_store_syn_vars"] = "# Stores the Synopsys variable in the given group"
let description["P_swap_srflop"] = "# Swap a State Retentive flop with Non State Retentive flop"
let description["P_timestamp"] = "# Echos a timestamp and stores in it array G_TIMESTAMP_HISTORY"
let description["P_true"] = ""
let description["P_unloaded_regs"] = "# Reports unconnected outputs of seq. cells "
let description["P_warning"] = ""
let description["T_absName"] = ""
let description["T_check_vars"] = ""
let description["T_chmod"] = ""
let description["T_closeLog"] = ""
let description["T_cp"] = ""
let description["T_debug"] = ""
let description["T_debugF"] = ""
let description["T_debugS"] = ""
let description["T_diff"] = ""
let description["T_dumpState"] = ""
let description["T_error"] = ""
let description["T_errorF"] = ""
let description["T_eval"] = ""
let description["T_existSet"] = ""
let description["T_fatal"] = ""
let description["T_fatalF"] = ""
let description["T_fileCheck"] = ""
let description["T_fileCheckP"] = ""
let description["T_fstring"] = ""
let description["T_fstring_add_index"] = ""
let description["T_fstring_det_range"] = ""
let description["T_getLineCount"] = ""
let description["T_getScrDir"] = ""
let description["T_getScrName"] = ""
let description["T_getSubName"] = ""
let description["T_gets"] = ""
let description["T_info"] = ""
let description["T_isNumber"] = ""
let description["T_lcommon"] = ""
let description["T_lminus"] = ""
let description["T_ln"] = ""
let description["T_lreverse"] = ""
let description["T_lsearch"] = ""
let description["T_lunique"] = ""
let description["T_mkdir"] = ""
let description["T_mputs"] = ""
let description["T_openLog"] = ""
let description["T_parseArgs"] = ""
let description["T_parseStatus"] = ""
let description["T_printUsage"] = ""
let description["T_printVar"] = ""
let description["T_printVarDebug"] = ""
let description["T_puts"] = ""
let description["T_readWriteStatus"] = ""
let description["T_remove_start_end_spaces"] = ""
let description["T_reset_T_Quiet"] = ""
let description["T_rm"] = ""
let description["T_sel2list"] = ""
let description["T_set_T_Quiet"] = ""
let description["T_setarr"] = ""
let description["T_singleList"] = ""
let description["T_spin"] = ""
let description["T_split"] = ""
let description["T_touch"] = ""
let description["T_true"] = ""
let description["T_unset"] = ""
let description["T_unsetIndex"] = ""
let description["T_warning"] = ""
let description["T_warningF"] = ""
let description["__h2t_create_shape_icc2"] = ""
let description["__h2t_create_trunk_snps"] = ""
let description["__h2t_get_pin_port_layer_width"] = ""
let description["__h2t_get_port_pin_layer_width"] = ""
let description["__h2t_process_layerless_pin_port"] = ""
let description["__h2t_set_custom_attr"] = ""
let description["_h2t_apply_nets_order"] = ""
let description["_h2t_format_bbox"] = ""
let description["_h2t_process_opts"] = ""
let description["_load_Oratcl"] = ""
let description["_load_tclreadline"] = ""
let description["aH"] = ""
let description["aV"] = ""
let description["add_attachment"] = "# Attaches a file as user attachment to a lib or design."
let description["add_attribute"] = ""
let description["add_buffer"] = "# Add buffer cell or inverter-pair"
let description["add_buffer_on_route"] = "# Adds buffers along the route of the specified nets"
let description["add_eco_repeater"] = "# Add repeater"
let description["add_exception_clm_from_fifoentry"] = ""
let description["add_exception_on_gasket_flops"] = ""
let description["add_exception_on_lane_in_flops"] = ""
let description["add_exception_on_stepdown_flops"] = ""
let description["add_feedthrough_buffers"] = "# Buffer all feedthroughs"
let description["add_pins_to_virtual_connection"] = "# Add pins to the virtual connection"
let description["add_port_protection_diodes"] = "# Add diodes around the specified ports for the protection"
let description["add_port_state"] = "# add_port_state"
let description["add_post_stage"] = ""
let description["add_post_step"] = ""
let description["add_power_state"] = "# add power state(s) to an object"
let description["add_pre_stage"] = ""
let description["add_pre_step"] = ""
let description["add_pst_state"] = "# add_pst_state"
let description["add_redundant_vias"] = "# Perform redundant via insertion"
let description["add_set_sense_to_bypass_mux"] = ""
let description["add_shield_association"] = "# Associate shielding shapes and vias to shielded nets"
let description["add_spare_cells"] = "# Adds spare cells to the design"
let description["add_tie_cells"] = "# Add tie cells to drive constant pins"
let description["add_to_bound"] = "# Assigns cells and ports to a bound"
let description["add_to_bundle"] = "# Add a object to the given bundle"
let description["add_to_collection"] = "# Add object(s) to a collection. Result is new collection"
let description["add_to_edit_group"] = "# Add objects to an edit group in the current design"
let description["add_to_group"] = "# Add objects to a group in the current design"
let description["add_to_io_guide"] = "# Add pads to an io_guide in the current design"
let description["add_to_io_ring"] = "# Adds guides to an io_ring in the current design"
let description["add_to_matching_type"] = "# Adds objects to the matching type"
let description["add_to_multisource_clock_sink_group"] = "# Adds clock sinks to an existing group of sinks used by tap assignment"
let description["add_to_must_join_ports"] = "# Combine ports into a new or existing must-join port group"
let description["add_to_net"] = "# Add shapes and vias to a net"
let description["add_to_net_bus"] = "# add Net to the existing net bus"
let description["add_to_pin_blockage"] = "# Add pins, nets, or ports to a pin blockage"
let description["add_to_pin_guide"] = "# Add pins, nets, or ports to a pin guide"
let description["add_to_port_bus"] = "# add Port to the existing port bus"
let description["add_to_routing_corridor"] = "# Add objects to a routing corridor"
let description["add_to_rp_group"] = "# add cell/blockage/rp_group to relative placement group"
let description["add_via_mapping"] = "# Add via mapping"
let description["after"] = "# Builtin"
let description["alias"] = "# Create a command which expands to words."
let description["align_objects"] = "# Align specified objects"
let description["align_pins"] = "# Align specified pins"
let description["all_clocks"] = "# Create a collection of all clocks in a mode"
let description["all_connected"] = "# Create a collection of objects connected to another"
let description["all_corners"] = "# Create a collection of all corners in a design"
let description["all_exceptions"] = "# Create a collection of exceptions in a mode"
let description["all_fanin"] = "# Create a collection of pins/ports or cells in the fanin of specified sinks"
let description["all_fanout"] = "# Create a collection of pins/ports or cells in the fanout of specified sources"
let description["all_high_transitive_fanout"] = "# Returns all high fanout objects"
let description["all_inputs"] = "# Create a collection of all input ports in design"
let description["all_modes"] = "# Create a collection of all modes in a design"
let description["all_outputs"] = "# Create a collection of all output ports in design"
let description["all_registers"] = "# Create a collection of register cells or pins"
let description["all_scenarios"] = "# Create a collection of all scenarios in the design"
let description["all_transitive_fanin"] = "# Create a collection of pins/ports or cells in the fanin of specified sinks"
let description["all_transitive_fanout"] = "# Create a collection of pins/ports or cells in the fanout of specified sources"
let description["als_add_to_last_command"] = "# "
let description["als_change_highlight"] = "# Change Highlight"
let description["als_get_highlight"] = "# Get Highlight"
let description["als_history_grep"] = "# Return commands from your history that contain string/regexp"
let description["als_list_attributes_grep"] = "# Returns class attributes that match a string/regexp"
let description["als_load_aliases"] = ""
let description["als_pop_from_cell"] = ""
let description["als_print_all_connected"] = ""
let description["als_print_collection"] = "# Print collection"
let description["als_print_list"] = "# Print list"
let description["als_push_to_cell"] = ""
let description["als_stages"] = ""
let description["als_steps"] = ""
let description["analyze_design_violations"] = "# analyze the violations in the design"
let description["analyze_lib_cell_placement"] = "# Analyze the given library cells in the current design for placeability."
let description["analyze_power_plan"] = "# Perform power network analysis in design planning"
let description["analyze_subcircuit"] = "# Invoke SPICE simulation/annotation on a clock network"
let description["analyze_timing_correlation"] = "# analyze timing correlation between ICC2 and PT"
let description["append"] = "# Builtin"
let description["append_to_collection"] = "# Add object(s) to a collection. Modifies variable "
let description["append_var"] = "# Append to a parameter value"
let description["apply"] = "# Builtin"
let description["apr_define_user_attributes"] = "# Consolidated proc to define all user attributes in the flow"
let description["apr_duplicate_slos_return_hfn"] = ""
let description["apr_gen_latest_nlib_manifest"] = ""
let description["apr_get_aocvm_voltage_for_corner"] = "# Returns voltage value associated with the given corner, used to find appropriate AOCVM files"
let description["apr_icc_ctsizer_run_flow"] = ""
let description["apr_icc_lr_run_flow"] = ""
let description["apr_icc_lrdp_run_flow"] = ""
let description["apr_lr_check_env_vars"] = ""
let description["apr_lr_overrride_tool_versions"] = ""
let description["apr_lr_ovr_tools"] = ""
let description["apr_lr_restore_saved_vars_and_tool_versions"] = ""
let description["apr_lr_setup_run_dir"] = ""
let description["apr_netlist"] = ""
let description["apr_pt_ctsizer_run_flow"] = ""
let description["apr_pt_lr_run_flow"] = ""
let description["apr_pt_lrdp_run_flow"] = ""
let description["apr_read_aocvm"] = "# Calls read_aocvm command for given table, with given corner and with distance row if G var is on"
let description["apr_reports"] = "# Apr report procedure"
let description["apr_run_rumba_flow"] = ""
let description["apr_save_stage"] = ""
let description["apropos"] = "# Search command database for a pattern."
let description["array"] = "# Builtin"
let description["assign_3d_interchip_nets"] = "# Connect flip chip drivers and bumps with total minimal manhattan distance"
let description["assign_track_in_bin"] = ""
let description["associate_mv_cells"] = "# associate isolation or level shifter cells in design"
let description["associate_supply_set"] = "# Associate a supply set or supply set ref to a supply set handle"
let description["attach_drc_error_data"] = "# Attach error data"
let description["audit_scripts"] = "# Audit application options and variables in a script"
let description["auto_execok"] = ""
let description["auto_import"] = ""
let description["auto_load"] = ""
let description["auto_load_index"] = ""
let description["auto_mkindex"] = ""
let description["auto_mkindex_old"] = ""
let description["auto_proc"] = ""
let description["auto_qualify"] = ""
let description["auto_reset"] = ""
let description["bab_create_new_mw_cell"] = ""
let description["balance_clock_groups"] = "# balance clock groups delays"
let description["binary"] = "# Builtin"
let description["block_grid"] = ""
let description["bound_to_lego"] = ""
let description["break"] = "# Builtin"
let description["build_trunking_bboxes_for_fivr_dt62_right_fp"] = ""
let description["cP"] = ""
let description["cPx"] = ""
let description["cPy"] = ""
let description["calc_area"] = ""
let description["calculate_tracks"] = ""
let description["case"] = "# Builtin"
let description["catch"] = "# Builtin"
let description["cd"] = "# Change working directory"
let description["chan"] = "# Builtin"
let description["change_abstract"] = "# Change the bound view of an abstract and update constraints"
let description["change_link"] = "# Changes the reference to which a cell is linked"
let description["change_names"] = "# Changes name of instances, ports and nets."
let description["change_reference"] = "# Creates new reference for cells"
let description["change_selection"] = "# Change current selection"
let description["change_view"] = "# Change the bound view"
let description["characterize_block_pg"] = "# Characterize block PG constraints for blocks"
let description["check_3d_design"] = "# check a 3dic design"
let description["check_boundary_cells"] = "# Check the violations of boundary cell placement"
let description["check_bufferability"] = "# check bufferability"
let description["check_busplan_constraints"] = "# Validate busplan constraints"
let description["check_clock_trees"] = "# Check clock trees"
let description["check_consistency_settings"] = "# check_consistency_settings"
let description["check_design"] = "# Check design for problems"
let description["check_duplicates"] = "# Report duplicates"
let description["check_feedthroughs"] = "# check feedthroughs"
let description["check_finfet_grid"] = "# Check objects' violations to FinFET grid"
let description["check_freeze_silicon"] = "# Perform feasibility analysis on eco cells to spare cell mapping"
let description["check_hier_design"] = "# Perform various checks on physical hierarchy from top level"
let description["check_host_options"] = "# Check one set of distributed processing options"
let description["check_io_placement"] = "# checks IO placment"
let description["check_legality"] = "# Check the legality of a placement."
let description["check_license"] = "# Checks the license feature"
let description["check_lvs"] = "# Check LVS"
let description["check_mib_alignment"] = "# Check if MIB instances are aligned the same way with respect to top level"
let description["check_mib_for_pin_placement"] = "# check mib pin placement"
let description["check_mv_design"] = "# Check multi-voltage related violations of the design"
let description["check_netlist"] = "# Perform various checks on design netlist and issue warnings"
let description["check_objects_for_push_down"] = "# check that there are no issues for push-down of physical objects"
let description["check_pg_connectivity"] = "# Check PG network connectivity"
let description["check_pg_drc"] = "# Checks whether design satisfies technology rules"
let description["check_pg_missing_vias"] = "# check PG network missing vias"
let description["check_physical_constraints"] = "# Perform sanity checks on the physical constraints"
let description["check_pin_placement"] = "# Performs pin placement checking"
let description["check_placement_constraints"] = "# Check if there are any issues with placement constraints"
let description["check_pre_pin_placement"] = "# check pre pin placement"
let description["check_routability"] = "# Perform check routability"
let description["check_routes"] = "# Perform verify route"
let description["check_routing_corridors"] = "# Check a routing corridor"
let description["check_rp_constraints"] = "# Checks the pre-placement constraint failures for the RP Group"
let description["check_sadp_tracks"] = "# Check the tracks created based on SADP track rules"
let description["check_scan_chain"] = "# check scan chain connection consistency between netlist and scandef stored in database "
let description["check_supply_equivalence"] = "# Check equivalence of the supply nets"
let description["check_tcd_cells"] = "# check TCD cells"
let description["check_timing"] = "# Check possible timing problems in check_design flow"
let description["check_wires_for_pushdown"] = "# Check wires for push down"
let description["checkerboard_horizontal"] = ""
let description["checkerboard_vertical"] = ""
let description["cips_source"] = ""
let description["clean_floorplan"] = ""
let description["clock"] = ""
let description["clock_opt"] = "# clock-opt Optimization"
let description["close"] = "# Builtin"
let description["close_blocks"] = "# Close a block"
let description["close_drc_error_data"] = "# Closes an error data file"
let description["close_ems_databases"] = "# Closes the EMS database(s)."
let description["close_lib"] = "# Close a library"
let description["clp"] = ""
let description["col_release_data"] = ""
let description["collection_to_list"] = "# format collection contents as a Tcl list"
let description["color_macro_pins"] = "# Color Macro Pins by launching ICV with colored runset"
let description["commit_blackbox_timing"] = "# Commit the BBT information and update abstract view for the current block"
let description["commit_block"] = "# Commits a logical hierarchical cell"
let description["commit_upf"] = "# Commit the UPF constraints of the design"
let description["compare_checksum"] = "# Compare Checksums"
let description["compare_collections"] = "# Return 0 if two collections contain the same objects"
let description["compare_floorplans"] = "# Compare floorplans"
let description["compile_boundary_cells"] = "# Creates and places lib cells along boundaries"
let description["compile_pg"] = "# Create power ground network"
let description["compute_area"] = "# Calculates the area of a collection of polygons"
let description["compute_budget_constraints"] = "# Automatically compute new constraints for budgeting"
let description["compute_clock_latency"] = "# Compute clock latency"
let description["compute_dff_connections"] = "# Compute Connections between Macros/Ports/Blocks/Module Boundaries"
let description["compute_polygons"] = "# Computes a new geo_mask using a boolean operation on two sets of polygons"
let description["concat"] = "# Builtin"
let description["connect_freeze_silicon_tie_cells"] = "# Connect tie cells in freeze silicon mode"
let description["connect_logic_net"] = "# connect_logic_net"
let description["connect_net"] = "# Connect pins, ports or port_buses to a net/net_bus"
let description["connect_pg_net"] = "# Connect pins or ports to a PG net"
let description["connect_pins"] = "# Connect pins across hierarchy"
let description["connect_power_switch"] = "# Connect Power Switches"
let description["connect_supply_net"] = "# Connect a supply net to supply ports and leaf pins"
let description["continue"] = "# Builtin"
let description["convert_aocv_pocv"] = "# Convert AOCV tables to POCV tables"
let description["convert_nets_for_swizzle"] = ""
let description["copy_block"] = "# Copy to a new block in the same or different library in memory"
let description["copy_collection"] = "# Make a copy of a collection. Result is new collection"
let description["copy_lib"] = "# copy a library"
let description["copy_objects"] = "# Copy specified objects"
let description["copy_relative_placement"] = "# Copy relative placement from one group of cells to another"
let description["copy_to_layer"] = "# Copies geometrical shapes into a layer"
let description["coroutine"] = "# Builtin"
let description["cp_block"] = ""
let description["cputime"] = "# Synonym for 'get_cputime'"
let description["cr_align_repeaters_to_trunks"] = "# Moves repeater cells in between trunks on layer 'layer'"
let description["cr_boolean"] = ""
let description["cr_check_ports"] = ""
let description["cr_check_terminals"] = ""
let description["cr_checkerboard_repeaters"] = "# Checkerboards repeaters after they are placed on trunks"
let description["cr_complete_nets_detail"] = "# Complete routing on trunked nets"
let description["cr_complete_track_region"] = "# Fills track region with trunks squared off to prevent DRCs"
let description["cr_create_boundary_route_guide"] = ""
let description["cr_create_cover_routing_blockage"] = ""
let description["cr_create_finish_metal"] = "# Creates iccpp polygons on the layer suplied with or without passed bbox"
let description["cr_create_ladders"] = "# Creates via ladders based on user input. To collect them use -filter iccpp_trunk=~iccpp_ladder_(netName)"
let description["cr_create_terminals"] = "# Creates a terminal based specified arguments, can be boundary or floating.  Edges are numbered clockwise starting at lower left"
let description["cr_create_track_region"] = "# Creates a region and applies a track pattern to it"
let description["cr_create_track_shared_trunks"] = "# Creates track shared trunks off of reference objects or on a specified track"
let description["cr_create_tracks_region"] = "# Creates a tracks region"
let description["cr_create_trunk"] = "# Creates a trunk based specified arguments, can be with graviy or track number, gravity applies to net bbox"
let description["cr_create_trunk_from_here_to_there"] = "# Creates trunk(s) based on topology description"
let description["cr_create_trunk_on_track"] = "# Creates trunk(s) on track(s) or x,y coord(s) (to be snapped to tracks)"
let description["cr_create_trunk_straps_for_pins"] = "# Creates trunks off of pins to point or micron value with the options of finishing with zroute"
let description["cr_create_trunks_from_pin_to_pin"] = "# Creates trunks off of one pin to another pin, net with single fanout "
let description["cr_create_trunks_from_pins_to_point"] = "# Creates trunks off of pins to point or micron value with the options of finishing with zroute"
let description["cr_create_trunks_from_pins_to_trunk"] = "# Creates trunks off of pins to existing iccpp trunk with the options of finishing with zroute"
let description["cr_create_trunks_from_ports"] = "# Creates trunks off of port terminals with the options of finishing with zroute"
let description["cr_create_trunks_from_ports_to_trunk"] = "# Creates trunks off of ports to existing iccpp trunk"
let description["cr_create_vias_for_custom_shields"] = "# Creates vias on given shield nets when custom shielding was performed by iTAR"
let description["cr_create_vias_for_preroutes"] = "# Creates vias on given nets"
let description["cr_create_wire_on_track"] = "# Creates a wire on a track"
let description["cr_delete_track_region"] = "# Deletes a region and bounds associated with it"
let description["cr_extract_track_shared_trunks"] = "# Extracts track shared shapes on 'layer_from' of width 'width_from' and writes out iTAR commands to create a trunk on 'layer_to' of width 'width_to'."
let description["cr_get_agressor_locations"] = "# Gets open tracks for agressor with or without passed bbox"
let description["cr_is_odd"] = ""
let description["cr_place_repeaters"] = "# Creates repeaters on a net trunk"
let description["cr_report_failed_trunks"] = "# Return a list of nets for which trunking failed. Usefull to promote/demote failed nets to different layers"
let description["cr_restore_itar_attributes_on_nets"] = "# restore itar attributes nets if they were lost due to add_buffer_on_route or some route_group command etc."
let description["cr_trim_antennas"] = "# trim back antennas on nets"
let description["cr_trunk_flopped_nets_p2p"] = "# "
let description["create_3d_mirror_bumps"] = "# Mirror bumps from source chip to target chip in virtual top level"
let description["create_abstract"] = "# Create an abstract"
let description["create_abut_rules"] = "# Creates automatic abutment rules"
let description["create_backend_tcd_cells"] = "# Insert backend TCD cells"
let description["create_blackbox"] = "# Creates new reference for cells"
let description["create_blackbox_clock_network_delay"] = "# Insert clock network delay in BBT"
let description["create_blackbox_constraint"] = "# Create constraint path in BBT"
let description["create_blackbox_delay"] = "# Create delay path in BBT"
let description["create_blackbox_drive_type"] = "# Create a named output drive type in BBT"
let description["create_blackbox_load_type"] = "# Create a named input load type in BBT"
let description["create_block"] = "# create a new block"
let description["create_bound"] = "# Create bound"
let description["create_bound_shape"] = "# Create a bound shape"
let description["create_boundary_cells"] = "# Creates and places lib_cells along boundaries"
let description["create_bs_upf"] = "# create budget shell upf"
let description["create_budget_busplan"] = "# Create a busplan to define the timing of budget segments"
let description["create_buffer_trees"] = "# create buffer trees"
let description["create_bump_array"] = "# create an array of bumps"
let description["create_bundle"] = "# Create a new bundle"
let description["create_bundles_from_patterns"] = "# Automatically create bundles from patterns"
let description["create_bus_routing_style"] = "# Create a bus_style intent"
let description["create_busplans"] = "# Find and return pipline register planning buses"
let description["create_cell"] = "# Create one or more new cell instances of the given reference module"
let description["create_cell_pin_fingers"] = ""
let description["create_channel_congestion_map"] = "# Create global route based congestion map in channel area"
let description["create_check_design_strategy"] = "# creates user-defined checks"
let description["create_clock"] = "# Create a clock object"
let description["create_clock_balance_group"] = "# create a clock balance group"
let description["create_clock_buffer"] = "# Insert a buffer in the clock tree"
let description["create_clock_drivers"] = "# Create multisource clock drivers or taps"
let description["create_clock_rp_groups"] = "# create relative placement group for leaf level clock cells"
let description["create_clock_skew_group"] = "# Create a group of balance points for skew minimization"
let description["create_clock_straps"] = "# Create clock meshes or spines"
let description["create_command_group"] = "# Create a command group"
let description["create_constraint_file_header"] = ""
let description["create_corner"] = "# Create a new corner"
let description["create_ctp_block_constraints"] = ""
let description["create_custom_shields"] = "# Create custom shield"
let description["create_density_rule"] = "# Create a density_rule"
let description["create_dff_trace_filters"] = "# Add filter pattern(s) to the DFF filter list"
let description["create_differential_group"] = "# Create a differential pair or group intent"
let description["create_diodes"] = "# Create diodes to fix user specified antenna violations"
let description["create_drc_error"] = "# Creates an error"
let description["create_drc_error_data"] = "# Creates an error data file"
let description["create_drc_error_shapes"] = "# Create shapes with associated layers"
let description["create_drc_error_type"] = "# Creates an error type"
let description["create_eco_bus_buffer_pattern"] = "# create eco_bus_buffer_pattern"
let description["create_edit_group"] = "# Create an edit group in the current design"
let description["create_ems_database"] = "# Creates a new EMS database."
let description["create_ems_message"] = "# Creates an EMS message in current database."
let description["create_ems_rule"] = "# Creates a new EMS rule."
let description["create_fib_con_vias"] = ""
let description["create_frame"] = "# Create a new frame view"
let description["create_freeze_silicon_leq_change_list"] = "# Create LEQ (alternative spare cell) change list"
let description["create_frontend_tcd_cells"] = "# Insert frontend TCD cells"
let description["create_generated_clock"] = "# Create a generated clock object"
let description["create_geo_mask"] = "# Creates a new geo_mask with the specified geometry"
let description["create_gigfig_from_ply"] = ""
let description["create_grid"] = "# Create the grid"
let description["create_group"] = "# Create an  group in the current design"
let description["create_icovl_cells"] = "# Insert icovl cells"
let description["create_io_break_cells"] = "# insert IO break cells"
let description["create_io_corner_cell"] = "# insert an IO corner cell"
let description["create_io_filler_cells"] = "# insert IO filler cells"
let description["create_io_guide"] = "# Create an io_guide in the current design"
let description["create_io_ring"] = "# Create an io_ring in the current design"
let description["create_keepout_margin"] = "# Creates design and cell keepout margins"
let description["create_layer"] = "# creates a layer in the given tech"
let description["create_left_right_filler_cells"] = "# Create left right filler cells for the specified lib cells"
let description["create_length_limit"] = "# Create a length_limit intent"
let description["create_lib"] = "# Create a library"
let description["create_logic_net"] = "# create_logic_net"
let description["create_logic_port"] = "# create_logic_port"
let description["create_macro_array"] = "# Arrange macros into an array"
let description["create_macro_relative_location_placement"] = "# This command will do macro relative location placement based on the constraints "
let description["create_marker_around"] = "# Create markers around selected objects"
let description["create_marker_layers"] = "# Create marker layers"
let description["create_mask_constraint_routing_blockages"] = "# Create double pattern routing blockages in design planning."
let description["create_matching_type"] = "# Create matching type"
let description["create_mim_capacitor_array"] = "# insert MIM capacitor cells"
let description["create_mismatch_config"] = "# Creates a new mismatch config"
let description["create_mode"] = "# Create a new mode"
let description["create_module"] = "# Create one or more new modules in a design"
let description["create_multibit"] = "# merge cells into multibit cell"
let description["create_multisource_clock_sink_group"] = "# Create group of sinks to be assigned to predefined tap driver during tap assignment"
let description["create_mv_cells"] = "# MVCells isolation or level shifter cells in design"
let description["create_net"] = "# Create one or more nets"
let description["create_net_bus"] = "# Create one net bus"
let description["create_net_priority"] = "# Create a net_priority intent"
let description["create_net_shielding"] = "# Create a shielding intent"
let description["create_offgrid_tracks_for_hip_pin"] = ""
let description["create_pad_rings"] = "# Create pad rings"
let description["create_partition_tcon"] = ""
let description["create_pg_composite_pattern"] = "# Create PG composite pattern"
let description["create_pg_macro_conn_pattern"] = "# Create PG macro connection pattern"
let description["create_pg_mesh_pattern"] = "# Mega command to create one PG mesh pattern."
let description["create_pg_region"] = "# Create PG region"
let description["create_pg_ring_pattern"] = "# Create PG ring pattern"
let description["create_pg_special_pattern"] = "# Create PG special pattern"
let description["create_pg_stapling_vias"] = "# Create PG stapling vias"
let description["create_pg_std_cell_conn_pattern"] = "# Create PG standard cell rail pattern"
let description["create_pg_strap"] = "# Create one PG strap and associated vias"
let description["create_pg_vias"] = "# Create PG vias"
let description["create_pg_wire_pattern"] = "# Create PG wire pattern"
let description["create_pin"] = "# Create one or more pins of the given direction"
let description["create_pin_blockage"] = "# Create a pin blockage in the current design"
let description["create_pin_guide"] = "# Create a pin guide in the current design"
let description["create_placement"] = "# Create a coarse placement"
let description["create_placement_blockage"] = "# Create placement blockage"
let description["create_poly_rect"] = "# Creates poly_rects from a collection of bboxes or polygons"
let description["create_port"] = "# Create one or more ports of the given direction"
let description["create_port_bus"] = "# Create one port bus"
let description["create_power_domain"] = "# Create a new power domain or update an existing power domain"
let description["create_power_state_group"] = "# Create power state group"
let description["create_power_switch"] = "# Create a power switch in the specified power domain"
let description["create_power_switch_array"] = "# Insert power switch to current physical design in array style"
let description["create_power_switch_ring"] = "# Insert power switch to current physical design with ring style"
let description["create_pr_rule"] = "# Create a pr_rule"
let description["create_pst"] = "# Create a power state table"
let description["create_purpose"] = "# Create a tech_purpose"
let description["create_qor_snapshot"] = "# create qor snapshot"
let description["create_rdl_power_extension"] = "# create RDL power extension"
let description["create_rdl_shields"] = "# create RDL shields"
let description["create_routing_blockage"] = "# Create routing blockage"
let description["create_routing_corridor"] = "# Create a routing corridor"
let description["create_routing_corridor_shape"] = "# Create a routing corridor shape"
let description["create_routing_guide"] = "# Create routing guide"
let description["create_routing_rule"] = "# Create routing rule"
let description["create_rp_group"] = "# create relative placement group"
let description["create_sadp_track_rule"] = "# Create a track rule"
let description["create_scenario"] = "# Create a new scenario"
let description["create_shape"] = "# Create shape"
let description["create_shaping_blockage"] = "# Create shaping blockage"
let description["create_shields"] = "# Create shields"
let description["create_site_array"] = "# Create an array of site rows"
let description["create_site_def"] = "# Create a site_def"
let description["create_site_row"] = "# Create a site row"
let description["create_stdcell_fillers"] = "# Insert filler cells in empty spaces"
let description["create_supernet"] = "# Create a supernet"
let description["create_supply_net"] = "# Create a supply net"
let description["create_supply_port"] = "# create_supply_port"
let description["create_supply_set"] = "# Create a supply set"
let description["create_tap_cells"] = "# Creates tap cells in a pattern"
let description["create_taps"] = "# Create taps"
let description["create_tech"] = "# creates the technology in the given library"
let description["create_terminal"] = "# Creates a terminal on a port"
let description["create_topological_constraint"] = "# Create a Topological Pin Feedthrough constraint"
let description["create_topology_edge"] = "# Create a topology_edge on a net"
let description["create_topology_node"] = "# Create a topology_node on a net"
let description["create_track"] = "# Creates routing tracks for a layer"
let description["create_undo_marker"] = "# Create a user-defined undo marker"
let description["create_utilization_configuration"] = "# Create the configuration for utilization reporting"
let description["create_via"] = "# Create a simple, simple array, or custom via"
let description["create_via_def"] = "# Create a simple or custom via_def"
let description["create_via_region"] = "# Create a via region associated with a terminal"
let description["create_via_rule"] = "# Create a via_rule"
let description["create_virtual_connection"] = "# create virtual connection"
let description["create_voltage_area"] = "# Create a voltage_area in the current design"
let description["create_voltage_area_rule"] = "# Creates a voltage_area_rule"
let description["create_voltage_area_shape"] = "# Create a voltage_area_shape"
let description["create_vtcell_fillers"] = "# create vt cell filler cells"
let description["create_wire_matching"] = "# Create a wire_matching intent"
let description["crfm"] = ""
let description["cs"] = ""
let description["cul"] = ""
let description["current_block"] = "# Set or get the current block"
let description["current_corner"] = "# Set the current corner"
let description["current_design"] = "# Set or get the current design"
let description["current_instance"] = "# Set or get the current instance"
let description["current_lib"] = "# Set or get the current library"
let description["current_mode"] = "# Set the current mode"
let description["current_scenario"] = "# Set current scenario"
let description["cut_rows"] = "# Cuts rows from the current design"
let description["date"] = "# Return the date as a string"
let description["decode_snps_version"] = ""
let description["define_antenna_accumulation_mode"] = "# Defines an antenna accumulation mode route rule"
let description["define_antenna_area_rule"] = "# Defines antenna area rule for the specified mode"
let description["define_antenna_layer_ratio_scale"] = "# Creates an antenna layer ratio route rule"
let description["define_antenna_layer_rule"] = "# Defines an advanced antenna rule for the specified layer"
let description["define_antenna_rule"] = "# Set the antenna rule for the library"
let description["define_name_rules"] = "# Define name rules."
let description["define_proc_attributes"] = "# Add extensions to a procedure"
let description["define_user_attribute"] = "# Define a new attribute"
let description["delete_dice_diff_record_iter"] = ""
let description["delete_dice_key_iter"] = ""
let description["delite_save_stage"] = ""
let description["derive_cell_snap_data"] = "# Constructs data for snapping multi height standard cells"
let description["derive_clock_balance_constraints"] = "# derive clock balance constraints"
let description["derive_clock_balance_points"] = "# Derive clock balance points from ideal latency based arrival time at clock sinks"
let description["derive_clock_cell_references"] = "# derive clock cell references"
let description["derive_hier_antenna_property"] = "# extract hierarchical antenna property"
let description["derive_macro_relative_location"] = "# Derive the commands to call set_macro_relative_location"
let description["derive_mask_constraint"] = "# Derive mask constraint"
let description["derive_pg_mask_constraint"] = "# Derive PG shape mask constraints"
let description["derive_placement_blockages"] = "# Create placement blockages for implementation placement"
let description["derive_preferred_macro_locations"] = "# Take the current macro locations and convert them into preferred location constraints."
let description["derive_route_connection"] = "# derive connection of dangling routes"
let description["diceTclLoadHelper"] = ""
let description["dice_annotation_get_allowed_values"] = ""
let description["dice_annotation_get_category"] = ""
let description["dice_annotation_get_changed_time_from_file"] = ""
let description["dice_annotation_get_choice_info"] = ""
let description["dice_annotation_get_choice_label"] = ""
let description["dice_annotation_get_default_sub_value"] = ""
let description["dice_annotation_get_default_value"] = ""
let description["dice_annotation_get_description"] = ""
let description["dice_annotation_get_html_description"] = ""
let description["dice_annotation_get_keys"] = ""
let description["dice_annotation_get_keys_with_value"] = ""
let description["dice_annotation_get_label"] = ""
let description["dice_annotation_get_last_changed_time"] = ""
let description["dice_annotation_get_name"] = ""
let description["dice_annotation_get_previous_value"] = ""
let description["dice_annotation_get_sub_value"] = ""
let description["dice_annotation_get_sub_value_allowed_values"] = ""
let description["dice_annotation_get_sub_value_data_type"] = ""
let description["dice_annotation_get_sub_value_info"] = ""
let description["dice_annotation_get_sub_value_label"] = ""
let description["dice_annotation_get_sub_value_tags"] = ""
let description["dice_annotation_get_type"] = ""
let description["dice_annotation_get_value"] = ""
let description["dice_annotation_get_value_from_file"] = ""
let description["dice_annotation_get_value_source"] = ""
let description["dice_annotation_get_value_source_from_file"] = ""
let description["dice_annotation_has_restricted_values"] = ""
let description["dice_annotation_has_strict_value_enforcement"] = ""
let description["dice_annotation_has_value"] = ""
let description["dice_annotation_has_value_from_file"] = ""
let description["dice_annotation_last_result_was_local"] = ""
let description["dice_annotation_remove_data"] = ""
let description["dice_annotation_revert_to_file"] = ""
let description["dice_annotation_set_default_value"] = ""
let description["dice_annotation_set_sub_value"] = ""
let description["dice_annotation_set_value"] = ""
let description["dice_clone_key"] = ""
let description["dice_constraint_get_allowed_values"] = ""
let description["dice_constraint_get_category"] = ""
let description["dice_constraint_get_changed_time_from_file"] = ""
let description["dice_constraint_get_choice_info"] = ""
let description["dice_constraint_get_choice_label"] = ""
let description["dice_constraint_get_default_sub_value"] = ""
let description["dice_constraint_get_default_value"] = ""
let description["dice_constraint_get_description"] = ""
let description["dice_constraint_get_html_description"] = ""
let description["dice_constraint_get_keys"] = ""
let description["dice_constraint_get_keys_with_value"] = ""
let description["dice_constraint_get_label"] = ""
let description["dice_constraint_get_last_changed_time"] = ""
let description["dice_constraint_get_name"] = ""
let description["dice_constraint_get_previous_value"] = ""
let description["dice_constraint_get_sub_value"] = ""
let description["dice_constraint_get_sub_value_allowed_values"] = ""
let description["dice_constraint_get_sub_value_data_type"] = ""
let description["dice_constraint_get_sub_value_info"] = ""
let description["dice_constraint_get_sub_value_label"] = ""
let description["dice_constraint_get_sub_value_tags"] = ""
let description["dice_constraint_get_type"] = ""
let description["dice_constraint_get_value"] = ""
let description["dice_constraint_get_value_from_file"] = ""
let description["dice_constraint_get_value_source"] = ""
let description["dice_constraint_get_value_source_from_file"] = ""
let description["dice_constraint_has_restricted_values"] = ""
let description["dice_constraint_has_strict_value_enforcement"] = ""
let description["dice_constraint_has_value"] = ""
let description["dice_constraint_has_value_from_file"] = ""
let description["dice_constraint_last_result_was_local"] = ""
let description["dice_constraint_remove_data"] = ""
let description["dice_constraint_revert_to_file"] = ""
let description["dice_constraint_set_default_value"] = ""
let description["dice_constraint_set_sub_value"] = ""
let description["dice_constraint_set_value"] = ""
let description["dice_data_type_get"] = ""
let description["dice_data_type_get_compressed_value"] = ""
let description["dice_data_type_get_name"] = ""
let description["dice_data_type_get_uncompressed_value"] = ""
let description["dice_data_type_is_valid_format"] = ""
let description["dice_data_type_is_valid_value"] = ""
let description["dice_diff_record_accept_candidate_info"] = ""
let description["dice_diff_record_accept_file_info"] = ""
let description["dice_diff_record_do_comparison"] = ""
let description["dice_diff_record_finish_comparison"] = ""
let description["dice_diff_record_get_annotation"] = ""
let description["dice_diff_record_get_constraint"] = ""
let description["dice_diff_record_get_diff_records"] = ""
let description["dice_diff_record_get_diff_records_iter"] = ""
let description["dice_diff_record_get_key"] = ""
let description["dice_diff_record_get_new_change_time"] = ""
let description["dice_diff_record_get_new_user_name"] = ""
let description["dice_diff_record_get_new_value"] = ""
let description["dice_diff_record_get_new_value_source"] = ""
let description["dice_diff_record_get_old_change_time"] = ""
let description["dice_diff_record_get_old_user_name"] = ""
let description["dice_diff_record_get_old_value"] = ""
let description["dice_diff_record_get_old_value_source"] = ""
let description["dice_diff_record_get_type"] = ""
let description["dice_diff_record_iter_add_filter_to_include_record"] = ""
let description["dice_diff_record_iter_clear_filters"] = ""
let description["dice_diff_record_iter_count"] = ""
let description["dice_diff_record_iter_empty"] = ""
let description["dice_diff_record_iter_get_next"] = ""
let description["dice_diff_record_iter_reset"] = ""
let description["dice_discard_cell"] = ""
let description["dice_get_annotation"] = ""
let description["dice_get_annotations"] = ""
let description["dice_get_configuration"] = ""
let description["dice_get_configurations"] = ""
let description["dice_get_constraint"] = ""
let description["dice_get_constraints"] = ""
let description["dice_get_data_type"] = ""
let description["dice_get_key"] = ""
let description["dice_get_key_types"] = ""
let description["dice_get_records"] = ""
let description["dice_key_add_key"] = ""
let description["dice_key_add_to_group"] = ""
let description["dice_key_attach_configuration"] = ""
let description["dice_key_clear_configuration"] = ""
let description["dice_key_get_alias"] = ""
let description["dice_key_get_all_keys"] = ""
let description["dice_key_get_attached_configuration"] = ""
let description["dice_key_get_attached_configuration_from_file"] = ""
let description["dice_key_get_cell_name"] = ""
let description["dice_key_get_configuration_name"] = ""
let description["dice_key_get_description"] = ""
let description["dice_key_get_file_keys_in_group"] = ""
let description["dice_key_get_groups"] = ""
let description["dice_key_get_keys_in_group"] = ""
let description["dice_key_get_keys_in_group_iter"] = ""
let description["dice_key_get_name"] = ""
let description["dice_key_get_type"] = ""
let description["dice_key_group_get_keys"] = ""
let description["dice_key_group_get_keys_of_type"] = ""
let description["dice_key_group_get_types"] = ""
let description["dice_key_group_has_type"] = ""
let description["dice_key_isa_key_group"] = ""
let description["dice_key_iter_count"] = ""
let description["dice_key_iter_empty"] = ""
let description["dice_key_iter_get_next"] = ""
let description["dice_key_iter_reset"] = ""
let description["dice_key_remove_all_keys"] = ""
let description["dice_key_remove_from_group"] = ""
let description["dice_key_remove_key"] = ""
let description["dice_key_set_alias"] = ""
let description["dice_key_set_configuration"] = ""
let description["dice_key_set_description"] = ""
let description["dice_key_set_name"] = ""
let description["dice_needs_to_save"] = ""
let description["dice_read_file"] = ""
let description["dice_record_get_allowed_values"] = ""
let description["dice_record_get_category"] = ""
let description["dice_record_get_changed_time_from_file"] = ""
let description["dice_record_get_choice_info"] = ""
let description["dice_record_get_choice_label"] = ""
let description["dice_record_get_default_sub_value"] = ""
let description["dice_record_get_default_value"] = ""
let description["dice_record_get_description"] = ""
let description["dice_record_get_html_description"] = ""
let description["dice_record_get_keys"] = ""
let description["dice_record_get_keys_with_value"] = ""
let description["dice_record_get_label"] = ""
let description["dice_record_get_last_changed_time"] = ""
let description["dice_record_get_name"] = ""
let description["dice_record_get_previous_value"] = ""
let description["dice_record_get_sub_value"] = ""
let description["dice_record_get_sub_value_allowed_values"] = ""
let description["dice_record_get_sub_value_data_type"] = ""
let description["dice_record_get_sub_value_info"] = ""
let description["dice_record_get_sub_value_label"] = ""
let description["dice_record_get_sub_value_tags"] = ""
let description["dice_record_get_type"] = ""
let description["dice_record_get_value"] = ""
let description["dice_record_get_value_from_file"] = ""
let description["dice_record_get_value_source"] = ""
let description["dice_record_get_value_source_from_file"] = ""
let description["dice_record_has_restricted_values"] = ""
let description["dice_record_has_strict_value_enforcement"] = ""
let description["dice_record_has_value"] = ""
let description["dice_record_has_value_from_file"] = ""
let description["dice_record_isa_annotation"] = ""
let description["dice_record_isa_constraint"] = ""
let description["dice_record_last_result_was_local"] = ""
let description["dice_record_remove_data"] = ""
let description["dice_record_revert_to_file"] = ""
let description["dice_record_set_default_value"] = ""
let description["dice_record_set_sub_value"] = ""
let description["dice_record_set_type"] = ""
let description["dice_record_set_value"] = ""
let description["dice_revert_to_file"] = ""
let description["dice_save_file"] = ""
let description["dice_write_copy_of_file"] = ""
let description["dice_write_file"] = ""
let description["dice_write_local_settings"] = ""
let description["dict"] = "# Builtin"
let description["disable_debug_msg"] = ""
let description["disconnect_3d_bumps"] = "# Disconnect logical net connection according to physical contact relationship"
let description["disconnect_net"] = "# Disconnect (given or all) ports , port_buses and pins from their net/net_bus"
let description["distribute_objects"] = "# Distribute specified objects"
let description["does_it_collide"] = ""
let description["dp_fn_eco_create_net_shape"] = ""
let description["dp_fn_eco_create_rename_eco_file"] = ""
let description["dp_fn_eco_create_terminal"] = ""
let description["dp_reports"] = "# Report procedure"
let description["dp_save_stage"] = ""
let description["dump_floorplan"] = ""
let description["duplicate_blockages_from_hard_type_to_hard_macro_type"] = ""
let description["eB"] = ""
let description["eL"] = ""
let description["eR"] = ""
let description["eT"] = ""
let description["ebb_bbox_poly"] = ""
let description["echo"] = "# Echo arguments to standard output."
let description["eco_netlist"] = "# Compare netlist and generate differences"
let description["eco_update_supply_net"] = "# eco update supply net"
let description["edit_block"] = "# Modify current block"
let description["edit_ems_rule"] = "# Edits a user defined EMS rule which is not frozen."
let description["edit_module"] = "# Modify a module in a design with port/net/cell creation"
let description["edm"] = ""
let description["enable_debug_msg"] = ""
let description["encoding"] = "# Builtin"
let description["ensemble"] = ""
let description["eof"] = "# Builtin"
let description["error"] = "# Builtin"
let description["error_info"] = "# Print extended info on errors from last command."
let description["estimate_timing"] = "# Run virtual optimization flow"
let description["eval"] = "# Builtin"
let description["eval_with_undo"] = "# Execute commands with undo settings applied"
let description["even_or_odd"] = ""
let description["exec"] = "# Builtin"
let description["exec_cp"] = ""
let description["exit"] = "# Terminate the application"
let description["expand_bus"] = ""
let description["expand_if_gvar_is_array"] = ""
let description["expand_objects"] = "# expand specified objects"
let description["expand_outline"] = "# Expand an outline design from a Verilog file"
let description["explore_logic_hierarchy"] = "# Exploring logic hierarchies"
let description["export_advanced_technology_rules"] = "# Export advanced technology rules to file"
let description["expr"] = "# Builtin"
let description["exprs"] = ""
let description["extract_post"] = ""
let description["extract_pre"] = ""
let description["extract_star"] = ""
let description["fblocked"] = "# Builtin"
let description["fclego"] = ""
let description["fclego_hier"] = ""
let description["fcommand"] = ""
let description["fconfigure"] = "# Builtin"
let description["fcopy"] = "# Builtin"
let description["file"] = "# Builtin"
let description["fileevent"] = "# Builtin"
let description["filter_collection"] = "# Filter a collection, resulting in new collection"
let description["find_clock_name_and_frequency"] = ""
let description["find_objects"] = "# find_objects"
let description["fix_bs_nlib"] = ""
let description["fix_min_libraries"] = ""
let description["fix_module_name"] = ""
let description["fix_placement_color_mask"] = "# Fix placement color mask"
let description["fix_signal_em"] = "# Fix signal EM violations"
let description["flatLappend"] = ""
let description["flatLinsert"] = ""
let description["flip_objects"] = "# Flip specified objects"
let description["flow_checker"] = ""
let description["flow_lib_setup"] = ""
let description["flush"] = "# Builtin"
let description["for"] = "# Builtin"
let description["foreach"] = "# Builtin"
let description["foreach_in_collection"] = "# Iterate over a collection"
let description["format"] = "# Builtin"
let description["fs"] = ""
let description["fusion_reports"] = "# FUSION report procedure"
let description["fusion_save_stage"] = ""
let description["ga"] = ""
let description["generate_net_pattern"] = "# generate net pattern command"
let description["generate_sadp_tracks"] = "# Create a tracks based on SADP track rules"
let description["generate_structural_raw_rpt"] = ""
let description["generate_structural_raw_rpt_for_unit"] = ""
let description["getTerminatedProcess"] = ""
let description["get_abstract_type"] = "# Get type of an abstract view design"
let description["get_abutted_clock_nets"] = ""
let description["get_antenna_rule_names"] = "# Get the antenna rule names for the library"
let description["get_app_option_value"] = "# Get application option value or info"
let description["get_app_options"] = "# Get list of valid application options"
let description["get_app_var"] = "# Get the value of an application variable"
let description["get_attribute"] = "# Get attribute values of the specified objects"
let description["get_block_objects"] = "# Queries a collection of physical objects in the given block's context"
let description["get_blocks"] = "# Create a collection of blocks"
let description["get_bound_shapes"] = "# Creates a collection of bound shapes"
let description["get_bounds"] = "# Creates a collection of bounds"
let description["get_budgets"] = "# Get specified budget objects"
let description["get_bundles"] = "# Create a collection of bundles"
let description["get_busplans"] = "# Find and return busplans"
let description["get_cell"] = "# Synonym for 'get_cells'"
let description["get_cells"] = "# Create a collection of cells"
let description["get_cells_of_scan_chain"] = "# Get scan cell collection of the named scan chain"
let description["get_clock_balance_groups"] = "# get clock balance groups"
let description["get_clock_boundary_cell"] = ""
let description["get_clock_driving_cell"] = ""
let description["get_clock_group_groups"] = "# Create a collection of clock_group groups"
let description["get_clock_groups"] = "# Create a collection of clock groups"
let description["get_clock_skew_groups"] = "# Create a collection of skew_groups"
let description["get_clock_tree_pins"] = "# get clock tree pins by various criteria"
let description["get_clocks"] = "# Create a collection of clocks"
let description["get_command_option_values"] = "# get command option values"
let description["get_constraint_file_by_keyword"] = ""
let description["get_constraint_groups"] = "# Creates a collection of constraint groups"
let description["get_core_area"] = "# Creates a collection of core area"
let description["get_corners"] = "# Create a collection of corners"
let description["get_cputime"] = "# get cpu usage in seconds"
let description["get_current_ems_database"] = "# Returns collection containing current EMS database."
let description["get_current_mismatch_config"] = "# Gets the current mismatch config"
let description["get_date"] = "# Synonym for 'date'"
let description["get_defined_attributes"] = "# Get information on the defined attributes and classes"
let description["get_defined_commands"] = "# Get information on defined commands and groups"
let description["get_density_rules"] = "# Creates a collection of tech density_rules"
let description["get_description_from_help"] = ""
let description["get_design_checks"] = "# Create a collection of existing design checks"
let description["get_design_rules"] = "# Creates a collection of design rules"
let description["get_designs"] = "# Create a collection of designs"
let description["get_die_area"] = ""
let description["get_die_area2"] = ""
let description["get_domain_elements"] = "# Create a collection of elements of power domains"
let description["get_drc_error_data"] = "# Creates a collection of error data"
let description["get_drc_error_types"] = "# Creates a collection of error types"
let description["get_drc_errors"] = "# Creates a collection of errors"
let description["get_eco_bus_buffer_patterns"] = "# get eco bus buffer patterns"
let description["get_edit_groups"] = "# Creates a collection of edit groups from the current design"
let description["get_edit_setting"] = "# Get common edit settings"
let description["get_edrc_setting"] = "# get gui edit drc settings"
let description["get_ems_databases"] = "# Creates a collection of EMS databases"
let description["get_ems_rules"] = "# Returns a collection of EMS rules."
let description["get_estimated_wirelength"] = "# get virtual-router estimated wirelength"
let description["get_exception_groups"] = "# Create a collection of exception groups"
let description["get_exceptions"] = "# Create a collection of timing exceptions"
let description["get_fill_cells"] = "# Create a collection of fill_cells"
let description["get_filler_cell_from_icv_def"] = ""
let description["get_flat_cells"] = "# Create a collection of leaf cells"
let description["get_flat_nets"] = "# Create a collection of nets"
let description["get_flat_pins"] = "# Create a collection of pins on leaf cells"
let description["get_generated_clock"] = "# Synonym for 'get_generated_clocks'"
let description["get_generated_clocks"] = "# Create a collection of generated clocks"
let description["get_grids"] = "# Creates a collection of grids"
let description["get_groups"] = "# Create a collection of groups"
let description["get_hier"] = ""
let description["get_info"] = ""
let description["get_input_delays"] = "# Create a collection of input delays"
let description["get_io_guides"] = "# Creates a collection of io_guides from the current design"
let description["get_io_rings"] = "# Creates a collection of io_rings from the current design"
let description["get_keepout_margins"] = "# Creates a collection of keepouts"
let description["get_latch_loop_groups"] = "# Get a list of collections of pins representing latch loop groups of the design"
let description["get_layers"] = "# Create a collection of layers"
let description["get_leaf"] = ""
let description["get_lib"] = "# Synonym for 'get_libs'"
let description["get_lib_cell"] = "# Synonym for 'get_lib_cells'"
let description["get_lib_cells"] = "# Create a collection of lib_cells"
let description["get_lib_pin"] = "# Synonym for 'get_lib_pins'"
let description["get_lib_pins"] = "# Create a collection of lib_pins"
let description["get_lib_timing_arcs"] = "# Create a collection of library timing arcs"
let description["get_libs"] = "# Create a collection of libs"
let description["get_license"] = "# Synonym for 'get_licenses'"
let description["get_licenses"] = "# Obtain license for a feature"
let description["get_matching_types"] = "# Creates a collection of matching_types"
let description["get_mem"] = "# Show main process memory usage"
let description["get_message_ids"] = "# Get application message ids"
let description["get_message_info"] = "# Return information about messages"
let description["get_mib_objects"] = "# get associated mib objects of specified pins and/or cells"
let description["get_mismatch_objects"] = "# Get mismatch object collection"
let description["get_mismatch_types"] = "# Get mismatch type user object named mismatch type"
let description["get_modes"] = "# Create a collection of modes"
let description["get_modules"] = "# Create a collection of modules"
let description["get_multisource_clock_sink_groups"] = "# Returns all available sink groups used by tap assignment"
let description["get_net"] = "# Synonym for 'get_nets'"
let description["get_net_buses"] = "# Create a collection of net buses"
let description["get_net_estimation_rules"] = "# Get the created net estimation rules"
let description["get_nets"] = "# Create a collection of nets"
let description["get_non_abutted_clock_pins"] = ""
let description["get_object_name"] = "# Get the name of the objects in a collection"
let description["get_object_occurrences"] = "# Queries collection of physical objects in all mib instances given a handle to a physical object"
let description["get_objects_by_location"] = "# Queries a collection of physical objects based on a physical search criteria."
let description["get_options_from_help"] = ""
let description["get_options_from_man"] = ""
let description["get_output_delays"] = "# Create a collection of output delays"
let description["get_overlap_blockages"] = "# Creates a collection of overlap blockages"
let description["get_parasitic_techs"] = "# Create a collection of parasitic techs"
let description["get_path_group"] = "# Synonym for 'get_path_groups'"
let description["get_path_groups"] = "# Create a collection of path_groups"
let description["get_pg_regions"] = "# Creates a collection of PG regions"
let description["get_pin"] = "# Synonym for 'get_pins'"
let description["get_pin_blockages"] = "# Creates a collection of pin_blockages from the current design"
let description["get_pin_guides"] = "# Creates a collection of pin_guides from the current design"
let description["get_pins"] = "# Create a collection of pins"
let description["get_placement_blockages"] = "# Creates a collection of placement blockages"
let description["get_port"] = "# Synonym for 'get_ports'"
let description["get_port_antenna_property"] = "# Get the antenna prop values for a specified port"
let description["get_port_buses"] = "# Create a collection of port buses"
let description["get_ports"] = "# Create a collection of ports"
let description["get_power_clock_scaling"] = "# Get clock frequency scaling"
let description["get_power_derate"] = "# Get power derate on objects"
let description["get_power_domain_elements"] = ""
let description["get_power_domains"] = "# Create a collection of power domains"
let description["get_power_group"] = "# returns list of all power groups cell is in"
let description["get_power_group_objects"] = "# Get cells for the specified power groups"
let description["get_power_strategies"] = "# get power strategies of a power domain"
let description["get_power_switch_patterns"] = "# Get existing power switch patterns"
let description["get_pr_rules"] = "# Creates a collection of tech pr_rules"
let description["get_proc_source"] = ""
let description["get_proc_source_history"] = ""
let description["get_purposes"] = "# Creates a collection of tech_purposes"
let description["get_related_supply_nets"] = "# Create a collection of related supply nets of pins or ports"
let description["get_routes_between_objects"] = "# find routes connecting two pins/ports on the same net"
let description["get_routing_blockages"] = "# Creates a collection of routing blockages"
let description["get_routing_corridor_shapes"] = "# Creates a collection of routing corridor shapes"
let description["get_routing_corridors"] = "# Creates a collection of routing corridors"
let description["get_routing_guides"] = "# Creates a collection of routing guides"
let description["get_routing_rules"] = "# Creates a collection of routing rules"
let description["get_rp_blockages"] = "# Creates a collection of RP blockages from the current design"
let description["get_rp_group_objects"] = "# get cells/rp_groups/rp_bockages of RP group"
let description["get_rp_groups"] = "# Creates a collection of RP Groups from the current design"
let description["get_scan_chain_count"] = "# get scan chain number"
let description["get_scenarios"] = "# Create a collection of scenarios"
let description["get_selection"] = "# Get contents of a selection bus"
let description["get_shapes"] = "# Creates a collection of shapes"
let description["get_shaping_blockages"] = "# Creates a collection of shaping blockages"
let description["get_site_arrays"] = "# Creates a collection of site arrays"
let description["get_site_defs"] = "# Creates a collection of site_defs"
let description["get_site_rows"] = "# Creates a collection of site rows"
let description["get_snap_setting"] = "# Get common snapping settings"
let description["get_supernets"] = "# Create a collection of supernets"
let description["get_supply_nets"] = "# Create a collection of supply nets"
let description["get_supply_ports"] = "# Create a collection of supply ports"
let description["get_supply_sets"] = "# Create a collection of supply sets"
let description["get_svf"] = "# Print information about the SVF directory"
let description["get_switching_activity"] = "# Get Switching Activities"
let description["get_techs"] = "# Returns the associated tech object"
let description["get_terminals"] = "# Creates a collection of terminals"
let description["get_timing_arcs"] = "# Create a collection of timing arcs"
let description["get_timing_paths"] = "# get timing paths"
let description["get_tmp_var"] = "# Returns a tmp var"
let description["get_topological_constraints"] = "# Get Topological Pin Feedthrough constraints"
let description["get_topology_edges"] = "# Creates a collection of topology_edges"
let description["get_topology_nodes"] = "# Creates a collection of topology_nodes"
let description["get_track_capacity"] = ""
let description["get_track_capacity_from_100"] = ""
let description["get_tracks"] = "# Creates a collection of tracks"
let description["get_undo_info"] = "# Return information on the undo system"
let description["get_unix_variable"] = "# Synonym for 'getenv'"
let description["get_user_units"] = "# Get one user input or output unit value"
let description["get_utilization_configurations"] = "# Get the configurations defined for utilization reporting"
let description["get_via_defs"] = "# Creates a collection of via_defs"
let description["get_via_regions"] = "# Creates a collection of via_regions"
let description["get_via_rules"] = "# Creates a collection of via rules"
let description["get_vias"] = "# Creates a collection of vias"
let description["get_view_switch_list"] = "# Get the value of the specified view switch list"
let description["get_virtual_connections"] = "# get virtual connections"
let description["get_visa_clock_stamp_pin"] = ""
let description["get_voltage_area_rules"] = "# Creates a collection of voltage_area_rules from the current design"
let description["get_voltage_area_shapes"] = "# Creates a collection of voltage_area_shapes from the current design"
let description["get_voltage_areas"] = "# Creates a collection of voltage_areas from the current design"
let description["get_vsdc"] = "# Print information about the VSDC file"
let description["get_working_design_stack"] = "# Gets current working design stack"
let description["getenv"] = "# Return the value of a system environment variable"
let description["gets"] = "# Builtin"
let description["getsome_buffers"] = ""
let description["getvar"] = "# Returns a parameter value"
let description["gh2"] = ""
let description["gh_cjb"] = ""
let description["glist_search_and_insert"] = ""
let description["glob"] = "# Builtin"
let description["global"] = "# Builtin"
let description["gnb"] = ""
let description["gnnl"] = ""
let description["greph"] = ""
let description["group_cells"] = "# Create a new hierarchy from a group of cells"
let description["group_path"] = "# Groups paths for cost function calculations"
let description["gs"] = ""
let description["gsn"] = ""
let description["gui_add_missing_vias"] = "# Add missing vias"
let description["gui_bin"] = "# Bin a collection"
let description["gui_change_highlight"] = "# Change the global highlight state."
let description["gui_change_layer"] = "# Set the pin layer of object"
let description["gui_change_via_def"] = "# Change the via_def attribute of a via"
let description["gui_change_via_size"] = "# Set the number of rows and columns attributes of a via"
let description["gui_check_drc_errors"] = "# Check for drc errors"
let description["gui_create_attrgroup"] = "# Creates gui attribute group"
let description["gui_create_pref_category"] = "# Create a preference category"
let description["gui_create_pref_key"] = "# Create a preference key-value pair"
let description["gui_create_task"] = "# Create a task with the given name."
let description["gui_create_task_item"] = "# Create an item for a task to invoke a Task Assitant page"
let description["gui_create_tk_palette_type"] = "# Create a type of Tk palette."
let description["gui_create_vm"] = "# Create new Visual Mode"
let description["gui_create_vm_objects"] = "# Create objects to hold annotations in visual modes"
let description["gui_create_vmbucket"] = "# Create new Visual Mode Bucket"
let description["gui_delete_attrgroup"] = "# Deletes gui attribute group"
let description["gui_edit_vmbucket_contents"] = "# Edit contents of a Visual Mode Bucket"
let description["gui_eval_command"] = "# Execute and log a Tcl command"
let description["gui_exist_pref_category"] = "# check for category existence, returns [0|1]"
let description["gui_exist_pref_key"] = "# check for key existence, returns [0|1]"
let description["gui_get_bucket_option"] = "# Get option on a bucket for the specified Visual/Map Mode"
let description["gui_get_bucket_option_list"] = "# Get list of options supported for buckets of the specified Visual/Map Mode"
let description["gui_get_current_task"] = "# Return the name of the current task."
let description["gui_get_highlight"] = "# Get a collection of highlighted objects."
let description["gui_get_highlight_options"] = "# Get highlighting options."
let description["gui_get_layer_widths"] = "# get layer widths"
let description["gui_get_map_list"] = "# Get list of Visual and Map Modes supported"
let description["gui_get_map_option"] = "# Get option of a specified Visual/Map Mode"
let description["gui_get_map_option_list"] = "# Get list of options supported by specified Visual/Map Mode"
let description["gui_get_pref_keys"] = "# get keys in specified categories"
let description["gui_get_pref_value"] = "# Get value for specified key"
let description["gui_get_setting"] = "# "
let description["gui_get_task_list"] = "# Return the list of all tasks."
let description["gui_get_vm"] = "# Get attributes for Visual Mode"
let description["gui_get_vmbucket"] = "# Get attributes for Visual Mode Bucket"
let description["gui_get_window_ids"] = "# Get a list of window ids"
let description["gui_get_window_pref_categories"] = "# Get list of preference categories for object specified by window"
let description["gui_get_window_pref_keys"] = "# Get list of preference categories for object specified by window"
let description["gui_get_window_pref_value"] = "# Get preference value for object specified by window or window type"
let description["gui_get_window_types"] = "# Get a list of window types"
let description["gui_highlight_nets_of_selected"] = "# Highlight nets of selected objects"
let description["gui_list_attrgroups"] = "# List gui attribute groups"
let description["gui_load_cell_density_mm"] = "# create cell density map mode"
let description["gui_load_path_analyzer_flylines"] = "# Create data for timing path analyzer flylines palette"
let description["gui_load_pin_density_mm"] = "# create pin density map mode"
let description["gui_rail_map_options"] = "# Rail map options"
let description["gui_read_timing_paths"] = "# read timing paths"
let description["gui_remove_pref_key"] = "# Remove a preference key"
let description["gui_remove_vm"] = "# Remove Visual Mode"
let description["gui_remove_vmbucket"] = "# Remove Visual Mode Bucket"
let description["gui_report_task"] = "# Write a report on the contents of a task"
let description["gui_select_bounds_of_selected"] = "# Select bounds of selected objects"
let description["gui_select_bundles_of_selected"] = "# Select bundles of selected objects"
let description["gui_select_cells_of_selected"] = "# Select cells of selected objects"
let description["gui_select_connected_net_shapes"] = "# Select connected net shapes"
let description["gui_select_connected_rdl_net_shapes"] = "# Select connected RDL net shapes"
let description["gui_select_connections_of_selected"] = "# Select connections of selected objects"
let description["gui_select_constraint_groups_of_selected"] = "# Select constraint_groups of selected objects"
let description["gui_select_input_connections_of_selected"] = "# Select input_connections of selected objects"
let description["gui_select_macros_of_selected"] = "# Select macros of selected objects or the current block"
let description["gui_select_matching_types_of_selected"] = "# Select matching_types of selected objects"
let description["gui_select_mib_cells_of_selected"] = "# Select MIB cells of selected objects"
let description["gui_select_mib_connections_of_selected"] = "# Select MIB connections of selected objects"
let description["gui_select_net_buses_of_selected"] = "# Select net_buses of selected objects"
let description["gui_select_net_routing_of_selected"] = "# Select net_routing of selected objects"
let description["gui_select_net_shapes_of_selected"] = "# Select net_shapes of selected objects"
let description["gui_select_net_vias_of_selected"] = "# Select net_vias of selected objects"
let description["gui_select_nets_of_selected"] = "# Select nets of selected objects"
let description["gui_select_objects_of_selected_edit_group"] = "# Select objects of selected edit groups"
let description["gui_select_output_connections_of_selected"] = "# Select output_connections of selected objects"
let description["gui_select_port_buses_of_selected"] = "# Select port_buses of selected objects"
let description["gui_select_ports_of_selected_power_supply_nets"] = "# Select ports of the selected supply nets"
let description["gui_select_power_domains_of_selected"] = "# Select power_domains of selected objects"
let description["gui_select_primary_power_supply_nets_of_selected"] = "# Select the primary power supply nets of selected objects"
let description["gui_select_routing_corridors_of_selected"] = "# Select routing_corridors of selected objects"
let description["gui_select_rp_blockages_of_selected"] = "# Select rp_blockages of selected objects"
let description["gui_select_rp_groups_of_selected"] = "# Select rp_groups of selected objects"
let description["gui_select_shapes_of_selected"] = "# Select shapes of selected objects"
let description["gui_select_site_arrays_of_selected"] = "# Select site_arrays of selected objects"
let description["gui_select_site_rows_of_selected"] = "# Select site_rows of selected objects"
let description["gui_select_supernets_of_selected"] = "# Select supernets of selected objects"
let description["gui_select_terminals_of_selected"] = "# Select terminals of selected objects"
let description["gui_select_topology_edges_of_selected"] = "# Select topology_edges of selected objects"
let description["gui_select_topology_nodes_of_selected"] = "# Select topology_nodes of selected objects"
let description["gui_select_topology_of_selected"] = "# Select topology of selected objects"
let description["gui_select_tracks_of_selected"] = "# Select tracks of selected objects"
let description["gui_select_voltage_areas_of_selected"] = "# Select voltage_areas of selected objects"
let description["gui_set_bucket_option"] = "# Set option on a bucket for the specified Visual/Map Mode"
let description["gui_set_current_task"] = "# Set the task with the given name as the current task."
let description["gui_set_highlight_options"] = "# Set highlighting options."
let description["gui_set_layer_widths"] = "# set layer widths"
let description["gui_set_map_option"] = "# Set option on a specified Visual/Map Mode"
let description["gui_set_pref_value"] = "# Set value for specified key"
let description["gui_set_select_menu_adds_to_selection"] = "# enable or disable add to selection mode"
let description["gui_set_setting"] = "# "
let description["gui_set_task_list"] = "# Set the order of visible tasks"
let description["gui_set_vm"] = "# Set Visual Mode attributes"
let description["gui_set_vmbucket"] = "# Set attributes for Visual Mode Bucket"
let description["gui_set_window_pref_key"] = "# Create a preference key owned by a particular window or window type"
let description["gui_show_man_page"] = "# "
let description["gui_show_map"] = "# Show/Hide a specified Visual/Map Mode"
let description["gui_start"] = "# Start GUI"
let description["gui_stop"] = "# Stop GUI"
let description["gui_trim_dangling_wires"] = "# Fix dangling wires"
let description["gui_update_attrgroup"] = "# Updates gui attribute group"
let description["gui_update_pref_file"] = "# Update preference file"
let description["gui_update_vm"] = "# Update Visual Mode"
let description["gui_update_vm_annotations"] = "# Update visual mode annotations"
let description["gui_write_timing_paths"] = "# write timing paths"
let description["h2t"] = "# Creates trunk(s) based on topology description"
let description["heal_bboxes_after_convert_from_polygon"] = ""
let description["help"] = "# Display quick help for one or more commands."
let description["help_app_options"] = "# Display help for application options"
let description["help_attributes"] = "# Display help for attributes and object types"
let description["history"] = "# Get command history"
let description["hlb"] = ""
let description["hnb"] = ""
let description["ib"] = ""
let description["icc2_dump_icc_mcmm_config"] = "# bridge from icc2 settings to mcmm_config.tcl"
let description["iccpp_adjust_bbox_to_min_length"] = ""
let description["iccpp_com_annotate_rule_based_track_info"] = "# Annotate rule based tracks on canvas."
let description["iccpp_com_display_tracks"] = "# display/annotate metal tracks using width (optionally in a bbox)."
let description["iccpp_com_empty_tracks_in_bbox"] = "# Returns the count and the location of empty (unused) metal tracks in a bbox."
let description["iccpp_com_get_rule_based_track_capacity"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info"] = "# Return a list of rule based track info."
let description["iccpp_com_get_rule_based_track_info_flat"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_cntr"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_simple"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_width_h2t"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"] = "# Return flat sorted list of rule based tracks."
let description["iccpp_com_track_num_to_track_info"] = "# Return LIST of track info given a list of track numbers."
let description["iccpp_com_xy_to_track_info"] = "# Returns LIST of track info for a list of {X Y} coords on canvas."
let description["iccpp_cr_create_term_from_bbox"] = "# Creates a term on a track"
let description["iccpp_cr_create_trunk_from_here_to_there"] = "# Creates trunk(s) based on topology description"
let description["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"] = "# Creates trunk(s) based on topology description"
let description["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"] = "# Creates trunk(s) based on topology description"
let description["iccpp_cr_create_trunk_from_here_to_there_with_shielding"] = "# Creates trunk(s) based on topology description"
let description["iccpp_cr_create_trunks_from_pin_to_pin"] = "# Creates trunks from pins of ebb to pins of ebb or micron value"
let description["iccpp_cr_create_trunks_from_pins_to_point"] = "# Creates trunks from pins to point or micron value"
let description["iccpp_cr_create_trunks_from_pins_to_trunk"] = "# Creates trunks from pins to trunk"
let description["iccpp_cr_create_trunks_from_ports"] = "# Creates trunks from ports to pins"
let description["iccpp_cr_create_trunks_from_ports_to_trunk"] = "# Creates trunks from pins to trunk"
let description["iccpp_cr_create_wire_from_net_bbox"] = "# Creates a wire on a track"
let description["iccpp_cr_create_wire_from_net_bbox_h2t"] = "# Creates a wire on a track"
let description["iccpp_cr_create_wire_from_net_bbox_with_track"] = "# Creates a wire on a track"
let description["iccpp_cr_place_flops"] = "# Creates repeaters on a net trunk"
let description["iccpp_cr_remove_user_shape_antennas"] = "# remove antennas on user shapes, iccpp_preroutes"
let description["iccpp_cr_remove_vias_for_preroutes"] = "# Creates vias on given nets"
let description["iccpp_cr_track_shared_trunks"] = "# Creates track shared trunks off of reference objects or on a specified track"
let description["iccpp_cr_trim_antennas"] = "# trim back antennas on nets"
let description["iccpp_cr_zroute_in_window"] = ""
let description["iccpp_create_ladders"] = ""
let description["iccpp_create_straps_snps"] = ""
let description["iccpp_create_zone_from_start_end_zones"] = ""
let description["iccpp_get_bbox_from_zone_type"] = ""
let description["iccpp_get_capacity_snps"] = ""
let description["iccpp_get_max_layer"] = ""
let description["iccpp_get_max_layer_from_layers_width"] = ""
let description["iccpp_get_pins_of_direction_of_cell"] = ""
let description["iccpp_ladders_get_cell_capacities"] = ""
let description["iccpp_launch_gui"] = ""
let description["iccpp_lw_2_l"] = ""
let description["idb"] = ""
let description["identify_channels"] = "# identify channels between objects"
let description["identify_multibit"] = "# identify multibit bank"
let description["if"] = "# Builtin"
let description["incr"] = "# Builtin"
let description["index_collection"] = "# Extract object from collection. Result is new collection"
let description["info"] = "# Builtin"
let description["info_var"] = "# Print variable info"
let description["initDuetEnvVars"] = ""
let description["initialize_floorplan"] = "# Perform initializing floorplan in design planning"
let description["insert_buffer"] = "# Synonym for 'add_buffer'"
let description["insert_clock_boundary_buffer"] = ""
let description["insert_via_ladders"] = "# Perform via ladder insertion"
let description["interleave_bus"] = ""
let description["interp"] = "# Builtin"
let description["is_abutting"] = ""
let description["is_false"] = "# Return 1 if value is 'false' or 0"
let description["is_fully_abutted_cell"] = ""
let description["is_odd"] = ""
let description["is_true"] = "# Return 1 if value is 'true' or 1"
let description["je_get_boundary_edge_coord"] = ""
let description["join"] = "# Builtin"
let description["lappend"] = "# Builtin"
let description["lappend_var"] = "# Append to a parameter value"
let description["lassign"] = "# Builtin"
let description["ldr_order_list"] = ""
let description["legalize_placement"] = "# Legalize a placement."
let description["legalize_rp_groups"] = "# Legalize Relative Placement Groups"
let description["legox"] = ""
let description["legoy"] = ""
let description["libsetup_build_hip_lib_glob"] = ""
let description["libsetup_build_lib_glob"] = ""
let description["libsetup_find_relevant_hip_libs"] = ""
let description["libsetup_max_to_min_lib_regex"] = ""
let description["libsetup_wildcard_hip_voltage"] = ""
let description["libsetup_wildcard_voltage"] = ""
let description["lindex"] = "# Builtin"
let description["link"] = "# Synonym for 'link_block'"
let description["link_block"] = "# Resolve references in a block"
let description["link_design"] = "# Synonym for 'link_block'"
let description["linsert"] = "# Builtin"
let description["list"] = "# Builtin"
let description["list_attributes"] = "# List currently defined attributes"
let description["list_blocks"] = "# List the blocks in the given libraries"
let description["list_commands"] = "# Prints list of all the commands."
let description["list_constraints"] = "# List constraints applied to one object"
let description["list_licenses"] = "# List licenses in use by this process"
let description["list_of_configulate_gvars"] = ""
let description["listcomp"] = ""
let description["llength"] = "# Builtin"
let description["lmap"] = "# Builtin"
let description["lminus"] = "# Remove elements from a list"
let description["lminus_var"] = "# Returns a parameter value"
let description["loadTpr"] = ""
let description["load_block_constraints"] = "# Load constraints for child blocks"
let description["load_busplans"] = "# Read files and create pipline register planning buses"
let description["load_constraints"] = "# Load constraints from disk"
let description["load_duet"] = ""
let description["load_duetX"] = ""
let description["load_duet_gui_pkg"] = ""
let description["load_duet_splash"] = ""
let description["load_duet_tcl"] = ""
let description["load_duettclreadline_package"] = ""
let description["load_metal_pattern_density"] = "# Read the hard macro 's corresponding metal layer, bounding box and density gradient values"
let description["load_ubm"] = ""
let description["load_upf"] = "# Read a Synopsys UPF Constraints format script"
let description["loadvfs"] = ""
let description["lrange"] = "# Builtin"
let description["lremove_var"] = "# Removes an element from a setvar list."
let description["lrepeat"] = "# Builtin"
let description["lreplace"] = "# Builtin"
let description["lreverse"] = "# Builtin"
let description["ls"] = "# List the contents of a directory"
let description["lsearch"] = "# Builtin"
let description["lset"] = "# Builtin"
let description["lsort"] = "# Builtin"
let description["mO"] = ""
let description["magnet_placement"] = "# Run magnet_placement"
let description["man"] = "# Display reference manual pages."
let description["map_freeze_silicon"] = "# manually map freeze silicon"
let description["map_isolation_cell"] = "# Map isolation strategy to library cells"
let description["map_level_shifter_cell"] = "# Map level shifter strategy"
let description["map_power_switch"] = "# Specify power switch cell to be used for the switch instance"
let description["map_retention_cell"] = "# Map retention strategy to library cells"
let description["mark_clock_trees"] = "# Mark clock trees"
let description["match_net_delay_custom"] = ""
let description["mcmm_set_link_target_lib"] = ""
let description["mem"] = "# Synonym for 'get_mem'"
let description["merge_abstract"] = "# Merge abstract to design view"
let description["merge_clock_gates"] = "# Merge ICG cells"
let description["merge_objects"] = "# Merge specified objects"
let description["merge_stream"] = "# Merge stream files to one."
let description["mkdir_fresh"] = ""
let description["modify_busplan"] = "# Modify elements in busplans"
let description["modify_rp_groups"] = "# modifies the structure of RP group"
let description["module_list"] = ""
let description["module_list_0"] = ""
let description["move_block"] = "#  Move one block to the same or different library in memory and on disk"
let description["move_block_origin"] = "# Shifts the block origin to the relative coordinate"
let description["move_lib"] = "# move a library"
let description["move_objects"] = "# Move and rotate selected objects"
let description["my1272fill"] = ""
let description["myevalcmd"] = ""
let description["myevalmsg"] = ""
let description["namespace"] = "# Builtin"
let description["new_win"] = ""
let description["nypd_toolbox"] = ""
let description["open"] = "# Builtin"
let description["open_attachment"] = "# Attaches a file as user attachment to a lib or design."
let description["open_block"] = "# Open a block"
let description["open_drc_error_data"] = "# Opens an error data"
let description["open_ems_database"] = "# Opens an EMS database."
let description["open_lib"] = "# Open a library"
let description["optimize_dft"] = "# optimize scan chains"
let description["optimize_rdl_routes"] = "# Optimize RDL routes"
let description["optimize_routability"] = "# Optimize routability"
let description["optimize_routes"] = "# Optimize wires and vias"
let description["option"] = ""
let description["orderBBOX"] = ""
let description["origin_to_lego"] = ""
let description["pa_create_parade_cmd_file"] = ""
let description["package"] = "# Builtin"
let description["parallel_execute"] = "# Execute given set of read-only commands parallely"
let description["parseOptions"] = ""
let description["parse_proc_arguments"] = "# Parse arguments to a procedure"
let description["part"] = ""
let description["patch_gui_files"] = ""
let description["pdintent2spec"] = "# Compares (bottom-up) PD Intent against SPEC and writes out a comparision report "
let description["pid"] = "# Builtin"
let description["pin_order"] = ""
let description["pin_order_hor"] = ""
let description["pkg_mkIndex"] = ""
let description["place_eco_cells"] = "# Place eco cells"
let description["place_freeze_silicon"] = "# Place eco cells by swapping out the spare cells in the freeze silicon ECO flow"
let description["place_io"] = "# Place IO pads or drivers"
let description["place_opt"] = "# Run placement+optimization flow"
let description["place_pins"] = "# Perform pin placement in design planning"
let description["pop_up_objects"] = "# pop up user specified objects"
let description["pp_gcbb"] = ""
let description["pre_stamp_stepdown_clock"] = ""
let description["print_debug"] = ""
let description["print_error"] = ""
let description["print_fatal"] = ""
let description["print_info"] = ""
let description["print_log"] = ""
let description["print_log_raw"] = ""
let description["print_message_info"] = "# Print information about messages"
let description["print_suppressed_messages"] = "# Display the message ids which are currently suppressed"
let description["print_time"] = "# Prints time stamp header"
let description["print_vars"] = "# Prints all parameter variables"
let description["print_warning"] = ""
let description["printenv"] = "# Print the value of environment variables"
let description["printvar"] = "# Print the value of one or more variables."
let description["proc"] = "# Builtin"
let description["proc_args"] = "# Synonym for 'info args'"
let description["proc_body"] = "# Synonym for 'info body'"
let description["process_ptlr_collaterals"] = ""
let description["promote_clock_data"] = "# promote clock data from a lower level design to the top"
let description["promote_constraints"] = "# promote constraints from a lower level design to the top"
let description["propagate_3d_connections"] = "# Propagate logical net connection according to physical contact relationship"
let description["propagate_3d_matching_types"] = "# propagate matching types from one chip to another chip"
let description["propagate_pin_mask_constraint"] = "# Propagate double pattern pin colors"
let description["propagate_pin_mask_to_via_metal"] = "# Propagate pin mask to via metal surround"
let description["propagate_switching_activity"] = "# Propagates switching activities in a design"
let description["prune_list"] = ""
let description["push_down_clock_trunks"] = "# Push down clock trunk cells"
let description["push_down_objects"] = "# push down user specified objects"
let description["push_rdl_routes"] = "# push RDL routes"
let description["puts"] = "# Builtin"
let description["pv_import_library_attributes"] = ""
let description["pwd"] = "# Display pathname of current working directory"
let description["pwrlite_estimate_power"] = ""
let description["pwrlite_gen_saif_all_units"] = "# Create GLS-based SAIF for all units in design"
let description["pwrlite_gen_unit_testlists"] = "# Create unit testlist"
let description["pwrlite_generate_netattr"] = ""
let description["pwrlite_generate_saif"] = ""
let description["pwrlite_get_active_power"] = ""
let description["pwrlite_get_clock_power"] = ""
let description["pwrlite_open_file"] = ""
let description["pwrlite_process_testlist_file"] = ""
let description["pwrlite_rdt_process_args"] = ""
let description["pwrlite_report_power"] = ""
let description["pwrlite_saif_est_power"] = ""
let description["query_objects"] = "# Display objects in the database"
let description["query_qor_snapshot"] = "# Query the detail information of QoR snapshot"
let description["quit"] = "# Exit the shell."
let description["quit!"] = "# Quit without prompting to save"
let description["rb"] = ""
let description["rdt_add_additional_link_libs"] = ""
let description["rdt_add_env_var_to_result"] = ""
let description["rdt_add_post_stage"] = ""
let description["rdt_add_post_step"] = ""
let description["rdt_add_pre_stage"] = ""
let description["rdt_add_pre_step"] = ""
let description["rdt_add_priority_path"] = ""
let description["rdt_add_priority_path_cleanly"] = ""
let description["rdt_add_stage"] = ""
let description["rdt_add_step"] = ""
let description["rdt_all_steps_done"] = ""
let description["rdt_apr_generate_pv_cmd_file"] = "# rdt_apr_generate_pv_cmd_file - This procedure generates a pv.tcl command file for use in pv."
let description["rdt_call_configulate_local"] = "# Call configulate to parse xml file"
let description["rdt_call_polaris"] = ""
let description["rdt_check_stop_after"] = ""
let description["rdt_constrain_visa_logic"] = "# adds timing constraints for VISA logic"
let description["rdt_continue_on_error"] = ""
let description["rdt_convert_seconds"] = ""
let description["rdt_convert_to_seconds"] = ""
let description["rdt_convert_units"] = "# rdt_convert_units - Converts units of a given metric"
let description["rdt_copy_collateral"] = "# rdt_copy_collateral - Copies output (netlist,spef,upf to a directory and creates manifest "
let description["rdt_custom_procs"] = ""
let description["rdt_done"] = "# default finish stage: run_logscan, mark_step, save_stage, reports"
let description["rdt_dont_use"] = ""
let description["rdt_dump_xml_files"] = ""
let description["rdt_error_handler"] = ""
let description["rdt_fail_on_error"] = ""
let description["rdt_fix_min_lib_nom_process"] = ""
let description["rdt_fix_min_libs_nom_process"] = ""
let description["rdt_format_configulate_lib_result"] = ""
let description["rdt_gen_parallel_rpts"] = "# rdt_gen_parallel_rpts - This procedure generates the reports for the flow stages in parallel to stage execution "
let description["rdt_gen_visa_hier_report"] = "# extract and report VISA logic information"
let description["rdt_generate_rdt_log"] = ""
let description["rdt_get_all_corners"] = "# Reads pvconditions xml file and returns list of all corners"
let description["rdt_get_all_modes"] = "# Reads pvconditions xml file and returns list of all modes"
let description["rdt_get_all_scenarios"] = "# Reads pvconditions xml file and returns list of all scenarios"
let description["rdt_get_analysis_type_from_corner"] = ""
let description["rdt_get_block_data"] = "# Reads block_properties xml file and creates G_BLOCK_DETAILS through it"
let description["rdt_get_block_list"] = "# Reads block_properties xml file and lists all the blocks that match the provided filters"
let description["rdt_get_corner_default_voltage"] = ""
let description["rdt_get_corner_of_scenario"] = ""
let description["rdt_get_current_corner"] = ""
let description["rdt_get_current_mode"] = ""
let description["rdt_get_current_scenario"] = "# returns current scenario or empty string if no scenario."
let description["rdt_get_default_scenario"] = "# returns default scenario name (by spec)"
let description["rdt_get_derate_data"] = "# Returns list derate files based on filters provided"
let description["rdt_get_dont_use_list"] = "# Reads groupfile to return a list of dont_use regexps."
let description["rdt_get_dont_use_reasons"] = "# Reads groupfile to return array of dont_use regex/reason pairs in list format."
let description["rdt_get_file_history"] = ""
let description["rdt_get_flow_status"] = "# rdt_get_flow_status - This procedure returns the status of the flow "
let description["rdt_get_g_corner_details_value"] = ""
let description["rdt_get_global_voltages"] = "# Reads G_CORNER_DETAILS to find the voltage associated with a RAIL."
let description["rdt_get_lib_attribute_data"] = "# Returns list of lib attribute files based on filters provided"
let description["rdt_get_lib_basename"] = ""
let description["rdt_get_lib_data"] = "# Returns list libs based on filters provided"
let description["rdt_get_lib_settings_data"] = "# Returns list libs based on filters provided"
let description["rdt_get_lib_ver_data"] = "# Reads lib_ver.xml file and returns list"
let description["rdt_get_library_list"] = "# Reads lib_ver.xml file and returns list"
let description["rdt_get_license"] = "# Procedure to get a license"
let description["rdt_get_logfile_length"] = "# returns number of lines in the current logfile (sh_output_log_file)"
let description["rdt_get_logscan_pointer"] = "# returns the currently set logscan pointer (NULL string if not set)"
let description["rdt_get_min_max_corners_of"] = ""
let description["rdt_get_mode_of_scenario"] = ""
let description["rdt_get_parallel_rpts_done"] = ""
let description["rdt_get_parallel_rpts_pending"] = ""
let description["rdt_get_parallel_rpts_running"] = ""
let description["rdt_get_pdk_data"] = "# Reads pdk xml file and lists all the files that match that filter"
let description["rdt_get_pdk_settings"] = "# Call configulate local to read pdk.xml to set process GVARS"
let description["rdt_get_pvc"] = "# Reads pvconditions xml file and creates G_CORNER_DETAILS through it"
let description["rdt_get_rail_voltage"] = "# Reads G_CORNER_DETAILS to find the voltage associated with a RAIL."
let description["rdt_get_relevant_scenario_data"] = "# Reads pvconditions xml file and creates G_CORNER_DETAILS through it"
let description["rdt_get_relevant_scenarios"] = "# Reads pvconditions xml file and returns list of all scenarios"
let description["rdt_get_scenario_data"] = "# Reads pvconditions/mcmm xml file and creates G_SCENARIO_DETAILS through it"
let description["rdt_get_scr_proc_name"] = ""
let description["rdt_get_step_metrics"] = ""
let description["rdt_get_subflow_load_stage"] = ""
let description["rdt_icv_polaris"] = ""
let description["rdt_is_parent_stage_complete"] = ""
let description["rdt_is_step_done"] = ""
let description["rdt_is_valid_stage"] = ""
let description["rdt_is_xml_file_empty"] = "# Reads pvconditions xml file and returns list of all modes"
let description["rdt_kill_parallel_rpts"] = ""
let description["rdt_lib_setup"] = ""
let description["rdt_list_flow"] = "# "
let description["rdt_list_signoff_stages"] = ""
let description["rdt_list_stages"] = ""
let description["rdt_list_steps"] = "# "
let description["rdt_logscan_fail"] = ""
let description["rdt_lower_scons_with_hier"] = ""
let description["rdt_map_LV_syn_clock"] = ""
let description["rdt_mark_stage"] = "# get/set rdt step attribute"
let description["rdt_mem_diff"] = ""
let description["rdt_mem_get_stamp"] = ""
let description["rdt_mem_set"] = ""
let description["rdt_mem_to_string"] = ""
let description["rdt_parse_block_setup"] = ""
let description["rdt_print_configulate_calls"] = ""
let description["rdt_print_configulate_gvars"] = ""
let description["rdt_print_error"] = ""
let description["rdt_print_gvar_history"] = ""
let description["rdt_print_info"] = ""
let description["rdt_print_proc_source"] = ""
let description["rdt_print_reports"] = ""
let description["rdt_print_scripts_search_path"] = ""
let description["rdt_print_step_footer"] = ""
let description["rdt_print_step_header"] = ""
let description["rdt_print_warn"] = ""
let description["rdt_printvar"] = ""
let description["rdt_proc_source"] = ""
let description["rdt_record_procs"] = ""
let description["rdt_remove_stage"] = "# Remove a stage from a given flow"
let description["rdt_remove_step"] = "# Remove a step from a given stage in the flow"
let description["rdt_reorder_link_library_with_max_lib_first"] = ""
let description["rdt_replace_cornerdetails"] = ""
let description["rdt_replace_cornerdetails_dotprocess"] = ""
let description["rdt_report_dont_use"] = "# Returns the reason that a cell is in the dont_use list."
let description["rdt_report_stage_status"] = ""
let description["rdt_reset_logscan_pointer"] = "# resets the pointer for start of logscan"
let description["rdt_reset_stage"] = ""
let description["rdt_return_lib_vt_type"] = ""
let description["rdt_run_CheckDiskSpace"] = ""
let description["rdt_run_for_active_scenarios"] = "# foreach active scenario, setting search path and calling given operation with -scenario $scenario."
let description["rdt_run_for_all_scenarios"] = "# foreach scenario, setting search path and calling given operation with -scenario $scenario."
let description["rdt_run_logscan"] = "# run logscan rules"
let description["rdt_run_lv"] = ""
let description["rdt_run_multiple_sessions"] = "# rdt_run_multiple_sessions - This procedure  runs multiple runs "
let description["rdt_run_pending_parallel_rpt"] = ""
let description["rdt_run_signoff"] = ""
let description["rdt_run_step"] = ""
let description["rdt_save_attributes"] = "# get/set rdt step attribute"
let description["rdt_scenario_timing_constraints"] = "# load timing constraints for given scenario"
let description["rdt_sd_scenario_path_care"] = ""
let description["rdt_set_mcmm_config"] = ""
let description["rdt_signoff_status"] = "# Give the status of a signoff run"
let description["rdt_source_if_exists"] = "# source script, if it exists"
let description["rdt_source_if_exists_in_scenario"] = "# source script, if it exists using scenario specific search path"
let description["rdt_source_project_if_exists"] = ""
let description["rdt_split_text_line"] = ""
let description["rdt_start"] = ""
let description["rdt_status"] = "# rdt_status - This procedure displays the status of the flow "
let description["rdt_step_run_status"] = "# get/set rdt step attribute"
let description["rdt_step_search_and_insert"] = ""
let description["rdt_timing_constraints"] = "# Prints percentage of cell/net delays in a path"
let description["rdt_update_pv_search_path"] = ""
let description["rdt_visa_additional_mco"] = ""
let description["rdt_visa_extract_visa_hierarchy"] = ""
let description["rdt_visa_extract_visa_level"] = ""
let description["rdt_visa_get_probe_signal"] = ""
let description["rdt_visa_physical_report"] = "# Report physical infomation of visa cells and nets"
let description["rdt_visa_rtl_check"] = "# Checks VISA version and USE_CLKMUX status"
let description["rdt_visa_trace_check_iso_levelshifter"] = "# Check given instance is ISO/Levelshifter while tracing visa"
let description["rdt_visa_trace_connectivity"] = ""
let description["rdt_visa_trace_connectivity_return_pin"] = ""
let description["rdt_wrap"] = "# Creates a pre or post for a stage or a step to be run"
let description["rdt_xml_2_mcmm_config"] = ""
let description["rdt_zip_files"] = "# rdt_zip_files - This procedure zips logfiles and reports "
let description["read"] = "# Builtin"
let description["read_aif"] = "# Read bump locations and connected nets or ports"
let description["read_cell_expansion"] = "# Read in a file containing cell expansion factors"
let description["read_def"] = "# Read DEF files"
let description["read_drc_error_file"] = "# Convert third party error files into NDM error data."
let description["read_lib_package"] = "# Restores a packed library"
let description["read_name_map"] = "# Define name maps"
let description["read_net_estimation_rules"] = "# Read xml file with net estimation rule settings"
let description["read_ocvm"] = "# Read AOCVM or POCVM tables"
let description["read_parasitic_tech"] = "# Read a parasitic tech file"
let description["read_parasitics"] = "# a block level read parasitics command"
let description["read_pin_constraints"] = "# Read pin/net constraints in design planning"
let description["read_saif"] = "# Read a Switching Activity Interchange Format file"
let description["read_sdc"] = "# Read a Synopsys Design Constraints format script"
let description["read_signal_em_constraints"] = "# Reads the signal electro-migration rules"
let description["read_tech_file"] = "# Read an technology file into the current library"
let description["read_tech_lef"] = "# Read LEF technology data"
let description["read_top_level_netlist"] = "# Create top-level netlist from text files"
let description["read_verilog"] = "# Read a Verilog file"
let description["read_verilog_outline"] = "# Create an outline design from a Verilog file"
let description["read_virtual_pad_file"] = "# Read virtual pad file"
let description["rebind_block"] = "# Rebind references in a block"
let description["reconnect_fishbone_style_power_switch"] = "# blockage aware reconnect fishbone style power switch"
let description["reconstruct_topo"] = ""
let description["record_layout_editing"] = "# record layout editing"
let description["record_signoff_eco_changes"] = "# record signoff eco flow"
let description["recover_rp_placement"] = "# recover the placement information of RP groups"
let description["recycle_programmable_spare_cells"] = "# Recycle the removed eco cells with internal attribute psc_filler marked in the freeze silicon ECO flow and restore them to be PSC fillers"
let description["redirect"] = "# Redirect output of a command to a file"
let description["redo"] = "# Redo one or more commands"
let description["refine_opt"] = "# Refine placed and optimized design further"
let description["refine_placement"] = "# Create an incremental coarse placement"
let description["refresh_performance_via_ladder_constraints"] = "# Refresh Performance Via Ladder Constraints"
let description["refresh_via_ladders"] = "# Refresh via ladders"
let description["regexp"] = "# Builtin"
let description["regsub"] = "# Builtin"
let description["remove_abstract"] = "# Remove the abstract for one design"
let description["remove_annotated_check"] = "# Remove back-annotated check arc values"
let description["remove_annotated_delay"] = "# Remove annotated delay time"
let description["remove_annotated_power"] = "# Remove annotated power dissipation on cells"
let description["remove_annotated_transition"] = "# Remove annotated transition time"
let description["remove_antenna_rules"] = "# Remove the antenna rules from the library"
let description["remove_attachments"] = "# Remove the attachments with the given names from the given library or design."
let description["remove_attributes"] = "# Remove attribute on the specified objects"
let description["remove_blackbox_timing"] = "# Remove BBT data for the current block"
let description["remove_block_pin_constraints"] = "# Remove block pin constraints in design planning"
let description["remove_blocks"] = "# Remove one block from memory and disk"
let description["remove_bound_shapes"] = "# Removes a list of bound shapes"
let description["remove_boundary_cell_rules"] = "# Removes rules for boundary cell creations and placements"
let description["remove_bounds"] = "# Removes a list of bounds"
let description["remove_buffer"] = "# Synonym for 'remove_buffers'"
let description["remove_buffer_trees"] = "# remove buffer trees"
let description["remove_buffers"] = "# Remove one or more buffer cell instances"
let description["remove_bundle_pin_constraints"] = "# Remove pin constraints on bundles of nets for pin assignment"
let description["remove_bundles"] = "# Remove the given bundles"
let description["remove_busplans"] = "# Remove all or part of previously declared busplans"
let description["remove_case_analysis"] = "# Remove case analysis value on ports or pins"
let description["remove_cell"] = "# Synonym for 'remove_cells'"
let description["remove_cells"] = "# Remove one or more cell instances"
let description["remove_clock"] = "# Synonym for 'remove_clocks'"
let description["remove_clock_balance_groups"] = "# remove clock balance groups"
let description["remove_clock_balance_points"] = "# Remove the balance point information set at this pin for clock tree synthesis"
let description["remove_clock_cell_spacings"] = "# Remove clock cell spacings"
let description["remove_clock_drivers"] = "# Remove multisource clock drivers or taps"
let description["remove_clock_gating_check"] = "# Remove clock gating check values"
let description["remove_clock_groups"] = "# Remove exclusive or asynchronous clock groups"
let description["remove_clock_latency"] = "# Remove a clock latency specification"
let description["remove_clock_routing_rules"] = "# Remove clock routing rules"
let description["remove_clock_sense"] = "# Remove clock sense"
let description["remove_clock_skew_groups"] = "# Remove a skew_group object"
let description["remove_clock_transition"] = "# Remove predicted clock transition"
let description["remove_clock_tree_options"] = "# Remove clock tree options"
let description["remove_clock_tree_reference_subset"] = "# Remove clock tree reference"
let description["remove_clock_trees"] = "# Remove clock trees"
let description["remove_clock_trunk_endpoints"] = "# Specify pin or ports as clock trunk end points for clock trunk planning"
let description["remove_clock_uncertainty"] = "# Remove specified clock skew"
let description["remove_clocks"] = "# Remove a clock object"
let description["remove_colors"] = "# Clear the user specified color from cells"
let description["remove_constraint_groups"] = "# Removes constraint groups from the current design"
let description["remove_corners"] = "# Remove corners"
let description["remove_custom_shields"] = "# Remove custom shields"
let description["remove_data_check"] = "# Remove a data to data check"
let description["remove_density_rules"] = "# Remove a density_rule"
let description["remove_dff_trace_filters"] = "# Remove filter pattern(s) from the DFF filter list"
let description["remove_disable_clock_gating_check"] = "# Remove disable of clock gating checks"
let description["remove_disable_timing"] = "# Restore disabled timing arcs"
let description["remove_drc_error_data"] = "# Remove error data"
let description["remove_drc_error_types"] = "# Remove error types"
let description["remove_drc_errors"] = "# Remove errors"
let description["remove_drive_resistance"] = "# Remove port drive resistance"
let description["remove_driving_cell"] = "# Remove port driving cell"
let description["remove_duplicate_timing_contexts"] = "# analyzes and then removes duplicate scenarios, modes and corners across all scenarios"
let description["remove_eco_bus_buffer_patterns"] = "# remove eco bus buffer patterns"
let description["remove_eco_repeater"] = "# Remove one repeater"
let description["remove_edit_groups"] = "# Removes edit groups from the current design"
let description["remove_ems_rules"] = "# Removes user-defined EMS rules."
let description["remove_feedthroughs"] = "# remove feedthroughs"
let description["remove_fill_cells"] = "# Remove the given fill_cells"
let description["remove_floorplan_rules"] = "# Removes floorplan rules"
let description["remove_from_bound"] = "# Unassigns cells and ports from a bound"
let description["remove_from_bundle"] = "# Remove the given object from the given bundle"
let description["remove_from_collection"] = "# Remove object(s) from a collection. Result is new collection"
let description["remove_from_edit_group"] = "# Remove objects from an edit group in the current design"
let description["remove_from_group"] = "# Remove objects from group in the current design"
let description["remove_from_io_guide"] = "# Remove pad cells from an io_guide in the current design"
let description["remove_from_io_ring"] = "# Removes guides from an io_ring in the current design"
let description["remove_from_matching_type"] = "# Removes objects from the matching type"
let description["remove_from_multisource_clock_sink_group"] = "# Removes clock sinks from an existing group of sinks used by tap assignment"
let description["remove_from_net"] = "# Remove shapes and vias from a net"
let description["remove_from_net_bus"] = "# Remove Net from the existing net bus"
let description["remove_from_pin_blockage"] = "# Remove pins, nets, or ports from a pin blockage"
let description["remove_from_pin_guide"] = "# Remove pins, nets, or ports from a pin guide"
let description["remove_from_port_bus"] = "# Remove Port from the existing port bus"
let description["remove_from_routing_corridor"] = "# Remove objects from a routing corridor"
let description["remove_from_rp_group"] = "# remove cell/blockage/rp_group from relative placement group"
let description["remove_generated_clock"] = "# Synonym for 'remove_generated_clocks'"
let description["remove_generated_clocks"] = "# Remove a generated_clock object"
let description["remove_grids"] = "# Remove the grid"
let description["remove_groups"] = "# Removes groups from the current design"
let description["remove_host_options"] = "# Remove parameters for multi-threaded / distributed processing"
let description["remove_ideal_latency"] = "# Remove ideal latency"
let description["remove_ideal_network"] = "# Remove an ideal network"
let description["remove_ideal_transition"] = "# Remove ideal transition"
let description["remove_ignored_layers"] = "# Remove ignored layers"
let description["remove_individual_pin_constraints"] = "# Remove pin constraints on individual nets or pins for pin assignment"
let description["remove_input_delay"] = "# Remove input delay on ports or pins"
let description["remove_io_guides"] = "# Removes io_guides from the current design"
let description["remove_io_rings"] = "# Removes io_rings from the current design"
let description["remove_keepout_margins"] = "# Removes keepout margins"
let description["remove_layer_map_file"] = "# Remove layer mapping file"
let description["remove_license"] = "# Synonym for 'remove_licenses'"
let description["remove_licenses"] = "# Removes the license feature"
let description["remove_macro_constraints"] = "# Remove various macro constraints"
let description["remove_macro_relative_location"] = "# Removes macro relative location constraint for shaping and placement"
let description["remove_matching_types"] = "# Removes a list of matching types"
let description["remove_max_capacitance"] = "# Remove maximum capacitance for ports or designs"
let description["remove_max_fanout"] = "# Remove maximum fanout for ports or designs"
let description["remove_max_lvth_percentages"] = "# Removes low-Vth percentage limit from the current design"
let description["remove_max_time_borrow"] = "# Remove time borrow limit for latches"
let description["remove_max_transition"] = "# Remove maximum transition for ports or designs"
let description["remove_min_capacitance"] = "# Remove minimum capacitance for ports or designs"
let description["remove_min_pulse_width"] = "# Set or remove a minimum pulse width constraint for specified design objects"
let description["remove_modes"] = "# Remove modes"
let description["remove_modules"] = "# Remove one or more modules from an unlinked design"
let description["remove_multisource_clock_sink_groups"] = "# Remove group of sinks for tap assignment"
let description["remove_multisource_clock_subtree_constraints"] = "# Set constraints on cells/pins for the multisource clock subtrees"
let description["remove_multisource_clock_subtree_options"] = "# Remove options for multisource clock subtrees"
let description["remove_multisource_clock_tap_options"] = "# Remove options for multisource clock tap assignment"
let description["remove_multisource_global_clock_trees"] = "# Multi-source clock global tree removal"
let description["remove_net"] = "# Synonym for 'remove_nets'"
let description["remove_net_buses"] = "# Remove one or more net buses"
let description["remove_net_estimation_rules"] = "# Remove net estimation rules"
let description["remove_net_weight_effort"] = "# Remove net weight efforts for coarse placement."
let description["remove_nets"] = "# Remove one or more nets"
let description["remove_objects"] = "# Remove one or more data objects"
let description["remove_ocvm"] = "# Removes OCVM information"
let description["remove_output_delay"] = "# Remove output delay on ports or pins"
let description["remove_path_group"] = "# Synonym for 'remove_path_groups'"
let description["remove_path_groups"] = "# Remove one or more path groups"
let description["remove_pg_mask_constraints"] = "# Remove PG Mask Constraint"
let description["remove_pg_patterns"] = "# Remove PG pattern"
let description["remove_pg_regions"] = "# Remove PG region"
let description["remove_pg_strategies"] = "# Remove PG strategy"
let description["remove_pg_strategy_via_rules"] = "# Remove PG strategy via rule"
let description["remove_pg_via_master_rules"] = "# Remove PG via rule"
let description["remove_physical_objects"] = "# Remove specified physical objects"
let description["remove_pin_blockages"] = "# Removes a list of pin blockages"
let description["remove_pin_guides"] = "# Removes a list of pin guides"
let description["remove_pins"] = "# Remove one or more cell pins"
let description["remove_pins_from_virtual_connection"] = "# remove pins from virtual connection"
let description["remove_placement_blockages"] = "# Removes a list of placement blockages"
let description["remove_placement_spacing_rules"] = "# Remove placement spacing rules"
let description["remove_pop_up_object_options"] = "# reset pop up object options to default values"
let description["remove_port_buses"] = "# Remove one or more port buses"
let description["remove_ports"] = "# Remove one or more ports"
let description["remove_post_route_filler"] = "# remove post route fillers"
let description["remove_power_io_constraints"] = "# remove io constraints for power and ground of IO guides"
let description["remove_pr_rules"] = "# Remove a pr_rule"
let description["remove_pre_stamp_stepdown_clock"] = ""
let description["remove_programmable_spare_cell_mapping_rule"] = "# remove psc mapping rule"
let description["remove_propagated_clock"] = "# Synonym for 'remove_propagated_clocks'"
let description["remove_propagated_clocks"] = "# Remove a propagated clock specification"
let description["remove_push_down_object_options"] = "# reset push down object options to default values"
let description["remove_qor_snapshot"] = "# Remove QoR snapshots"
let description["remove_rail_integrity_strategy"] = "# Removes specific strategies in the PrimeRail Gen II rail integrity analysis flow as defined by the In-Design setup command 'set_rail_integrity_strategy'"
let description["remove_redundant_shapes"] = "# Remove redundant shapes"
let description["remove_route_aware_estimation"] = "# Setup the design for routing by removing preroute-only min-max layers"
let description["remove_routes"] = "# remove route"
let description["remove_routing_blockages"] = "# Removes a list of routing blockages"
let description["remove_routing_corridor_shapes"] = "# Removes routing_corridor_shapes from the current design"
let description["remove_routing_corridors"] = "# Removes routing_corridors from the current design"
let description["remove_routing_guides"] = "# Removes a collection of routing guides"
let description["remove_routing_rules"] = "# Remove non-default routing rules"
let description["remove_rp_group_options"] = "# remove RP group placement constraints"
let description["remove_rp_groups"] = "# remove RP groups"
let description["remove_sadp_track_rule"] = "# Remove track rule"
let description["remove_scan_def"] = "# remove scan chain data in database"
let description["remove_scenarios"] = "# Remove scenarios"
let description["remove_sdc"] = "# Remove SDC constraints from modes, corners, or scenarios"
let description["remove_sense"] = "# Remove sense"
let description["remove_shapes"] = "# Removes a list of shapes"
let description["remove_shapes_over_cell"] = ""
let description["remove_shaping_blockages"] = "# Removes a list of shaping blockages"
let description["remove_shield_association"] = "# Disassociate shielding shapes and vias from shielded nets"
let description["remove_si_delay_analysis"] = "# Removes the effect of the set_si_delay_analysis command"
let description["remove_signal_io_constraints"] = "# remove signal io constraints for IO guides"
let description["remove_site_arrays"] = "# Removes site arrays from the current design"
let description["remove_site_defs"] = "# Remove site defs from the tech"
let description["remove_site_rows"] = "# Removes site rows from the current design"
let description["remove_stdcell_fillers_with_violation"] = "# Delete filler cells that have routing violations"
let description["remove_supernet_exceptions"] = "# Removes supernet transparent pins"
let description["remove_supernets"] = "# Remove one or more supernets"
let description["remove_taps"] = "# Remove taps currently defined"
let description["remove_target_library_subset"] = "# Remove target library subset"
let description["remove_tech"] = "# Removes the associated tech object"
let description["remove_terminals"] = "# Remove a list of terminals"
let description["remove_tie_cells"] = "# Remove tie cells that drive constant pins"
let description["remove_timing_paths_disabled_blocks"] = "# remove timing paths disabled blocks"
let description["remove_topological_constraints"] = "# Remove Topological Pin Feedthrough constraints"
let description["remove_topology_edges"] = "# Remove one or more topology_edges"
let description["remove_topology_nodes"] = "# Remove one or more topology_nodes"
let description["remove_track_constraint"] = "# Unset a track constraint"
let description["remove_tracks"] = "# Removes the routing tracks"
let description["remove_unambiguous_pins"] = ""
let description["remove_utilization_configurations"] = "# Remove the configuration defined for utilization reporting"
let description["remove_via_defs"] = "# Remove via_defs from a block or tech"
let description["remove_via_ladder_constraints"] = "# Remove via ladder constraints"
let description["remove_via_ladder_rules"] = "# Remove via ladder rules"
let description["remove_via_ladders"] = "# Remove via ladders"
let description["remove_via_mappings"] = "# Remove via mappings"
let description["remove_via_regions"] = "# Remove via_regions from a block"
let description["remove_via_rules"] = "# Remove a via_rule"
let description["remove_vias"] = "# Removes a list of vias"
let description["remove_virtual_connections"] = "# remove virtual connections"
let description["remove_virtual_pads"] = "# Remove virtual power/ground pads"
let description["remove_voltage_area_rules"] = "# Removes voltage_area_rules"
let description["remove_voltage_area_shapes"] = "# Removes voltage_area_shapes from the current design"
let description["remove_voltage_areas"] = "# Removes voltage_areas from the current design"
let description["rename"] = "# Rename a command"
let description["rename_block"] = "# Rename to a new block in memory"
let description["reopen_block"] = "# Changes the open-mode of an already open block"
let description["replace_fillers_by_rules"] = "# replace constrained filler cells with unconstrained ones where needed"
let description["report_3d_chip_placement"] = "# report chips' infomation"
let description["report_abstracts"] = "# report details of abstract view designs"
let description["report_active_debug_codes"] = ""
let description["report_activity"] = "# Report Switching Activity"
let description["report_annotated_check"] = "# Report annotated check info"
let description["report_annotated_delay"] = "# Report annotated delay info"
let description["report_annotated_power"] = "# Report annotated power dissipation on cells"
let description["report_annotated_transition"] = "# Report annotated transition info"
let description["report_antenna_rules"] = "# Report the antenna rules for the library"
let description["report_app_options"] = "# Report application options"
let description["report_app_var"] = "# Show application variables"
let description["report_attachments"] = "# Report the attachments with the given names from the given library or design."
let description["report_attribute"] = "# Synonym for 'report_attributes'"
let description["report_attributes"] = "# Report the attributes on one or more objects"
let description["report_block_pin_constraints"] = "# Report block pin constraints in design planning"
let description["report_block_shaping"] = "# Report on block shaping result"
let description["report_block_to_top_map"] = "# Report the mapping between objects in a top and contained block"
let description["report_boundary_cell_rules"] = "# Reports rules for boundary cell creations and placements"
let description["report_bounds"] = "# Report bound information"
let description["report_budget"] = "# Report details about a timing budget"
let description["report_buffer_trees"] = "# report buffer trees"
let description["report_bundle_pin_constraints"] = "# Report pin constraints on bundles of nets for pin assignment"
let description["report_bundles"] = "# Report information about the given bundles"
let description["report_busplan_constraints"] = "# Give details about busplan constraints"
let description["report_busplans"] = "# Give details about busplan buses"
let description["report_case_analysis"] = "# Report case analysis on ports and pins"
let description["report_cell"] = "# Synonym for 'report_cells'"
let description["report_cell_em"] = "# Analyze and report cell EM"
let description["report_cell_modes"] = "# Report the modes of cell instances"
let description["report_cells"] = "# Report cell info"
let description["report_check_design_strategy"] = "# reports information related to user-defined checks"
let description["report_clock"] = "# Synonym for 'report_clocks'"
let description["report_clock_balance_groups"] = "# report clock balance groups"
let description["report_clock_balance_points"] = "# Report clock balance points info"
let description["report_clock_cell_spacings"] = "# Report clock cell spacings"
let description["report_clock_gating_check"] = "# Synonym for 'report_clock_gating_checks'"
let description["report_clock_gating_checks"] = "# Report clock gating check"
let description["report_clock_power"] = "# Report clock power"
let description["report_clock_qor"] = "# Report clock qor information"
let description["report_clock_routing_rules"] = "# Report clock routing rules"
let description["report_clock_settings"] = "# Report clock settings"
let description["report_clock_skew_groups"] = "# Report skew group info"
let description["report_clock_timing"] = "# Report clock timing info"
let description["report_clock_tree_options"] = "# Report clock tree options"
let description["report_clock_tree_reference_subset"] = "# Report clock tree reference"
let description["report_clock_trunk_endpoints"] = "# Specify pin or ports as clock trunk end points for clock trunk planning"
let description["report_clock_trunk_qor"] = "# Generate timing information of design for QOR evaluation of Clock Trunk Planning"
let description["report_clocks"] = "# Report clock info"
let description["report_congestion"] = "# Report Congestion"
let description["report_constraint"] = "# Synonym for 'report_constraints'"
let description["report_constraint_groups"] = "# Report constraint groups in a design"
let description["report_constraint_mapping_file"] = "# Report constraint file information for blocks"
let description["report_constraints"] = "# Report Constaint information"
let description["report_corners"] = "# report corners"
let description["report_crpr"] = "# Report CRP Calculation info"
let description["report_custom_power_data"] = "# Procedure to report cell usage and other heuristics for top level and power domain hierarchies, to feed into power estimation work."
let description["report_delay_calculation"] = "# Report cell/net arc delay calculation"
let description["report_density_gradient_options"] = "# Report options for report_placement -hard_macro_density_gradient_violations command"
let description["report_design"] = "# Report design information"
let description["report_design_mismatch"] = "# Reports mismatches in named or current design"
let description["report_design_rules"] = "# Report design rules in the current design"
let description["report_disable_timing"] = "# Report disabled timing arcs"
let description["report_dont_touch"] = "# Report dont_touch"
let description["report_eco_bus_buffer_patterns"] = "# report eco bus buffer patterns"
let description["report_eco_physical_changes"] = "# Report physical changes caused by eco"
let description["report_eco_placement_net_weight"] = "# report weight of nets"
let description["report_edit_groups"] = "# Report edit groups in the current design"
let description["report_ems_database"] = "# Reports messages in EMS database."
let description["report_ems_rules"] = "# Reports user-defined EMS rule/s."
let description["report_exceptions"] = "# Report timing exceptions"
let description["report_extraction_options"] = "# report_extraction_options"
let description["report_feedthroughs"] = "# report feedthroughs"
let description["report_floorplan_rules"] = "# Reports about floorplan rules"
let description["report_frame_properties"] = "# Report properties from frame view"
let description["report_freeze_ports"] = "# Report freeze_ports"
let description["report_grids"] = "# Report the grid"
let description["report_groups"] = "# Report groups in the current design"
let description["report_hierarchical_z"] = "# Report hierarchical Z data for a design/cell."
let description["report_hierarchy"] = "# Report the reference hierarchy for the current block"
let description["report_hierarchy_options"] = "# report top level design options for planning"
let description["report_host_options"] = "# Report parameters for multi-threaded / distributed processing"
let description["report_ignored_layers"] = "# Report routing/estimation min/max/ignored layers"
let description["report_incomplete_upf"] = "# report incomplete_upf"
let description["report_individual_pin_constraints"] = "# Report pin constraints on individual nets or pins"
let description["report_io_guides"] = "# Report io_guides in the current design"
let description["report_io_rings"] = "# Reports io_rings in the current design"
let description["report_isolate_ports"] = "# Report isolate_ports"
let description["report_keepout_margins"] = "# Reports design and cell keepout margins"
let description["report_latch_loop_groups"] = "# Reports d pins of latch loop groups of the design"
let description["report_lib"] = "# Report library information"
let description["report_lib_cells"] = "# Report lib_cell information"
let description["report_lib_pins"] = "# Report lib_pin information"
let description["report_lib_timing_arcs"] = "# Report lib_timing_arc information"
let description["report_macro_constraints"] = "# Report macro constraints setting"
let description["report_macro_relative_location"] = "# Reports macro relative location constraint for shaping and placement"
let description["report_matching_types"] = "# Report matching type information"
let description["report_mibs"] = "# Reports MIB information"
let description["report_min_pulse_width"] = "# Analyze and report min pulse width"
let description["report_mismatch_configs"] = "# Reports the available mismatch configs"
let description["report_modes"] = "# Report modes"
let description["report_multibit"] = "# Report Multibit Command"
let description["report_multisource_clock_sink_groups"] = "# Report group of sinks for tap assignment"
let description["report_multisource_clock_subtree_constraints"] = "# Report constraints on cells/pins for the multisource clock subtrees"
let description["report_multisource_clock_subtree_options"] = "# Report options for multisource clock subtrees"
let description["report_multisource_clock_tap_options"] = "# Report options for multisource clock tap assignment"
let description["report_mv_lib_cells"] = "# Show mv-related library cell information"
let description["report_mv_path"] = "# MV path analysis in detail with all MV constraints"
let description["report_name_rules"] = "# Reports the name rules."
let description["report_names"] = "# Reports the potential name changes."
let description["report_net"] = "# Synonym for 'report_nets'"
let description["report_net_buses"] = "# Report net buses in the current design"
let description["report_net_estimation_rules"] = "# Give details about net estimation rules"
let description["report_net_fanout"] = "# Report net fanout information"
let description["report_net_weight_effort"] = "# Report net weight efforts for coarse placement."
let description["report_nets"] = "# Report net information"
let description["report_ocvm"] = "# Report Ocvm"
let description["report_parasitic_parameters"] = "# report_parasitic_parameters"
let description["report_parasitics"] = "# Report parasitics information"
let description["report_path_group"] = "# Synonym for 'report_path_groups'"
let description["report_path_groups"] = "# Report path groups info"
let description["report_pg_mask_constraints"] = "# Report PG mask constraints"
let description["report_pg_patterns"] = "# Report PG pattern"
let description["report_pg_regions"] = "# Report PG region"
let description["report_pg_strategies"] = "# Report PG strategy"
let description["report_pg_strategy_via_rules"] = "# Report PG strategy via rule"
let description["report_pg_via_master_rules"] = "# Report PG via rule"
let description["report_pin_blockages"] = "# Report pin blockages in the current design"
let description["report_pin_guides"] = "# Report pin guides in the current design"
let description["report_pin_placement"] = "# Reports pin placement"
let description["report_placement"] = "# Report placement"
let description["report_placement_spacing_rules"] = "# Report placement spacing rules"
let description["report_pop_up_object_options"] = "# report pop up object options"
let description["report_port"] = "# Synonym for 'report_ports'"
let description["report_port_buses"] = "# Report port buses in the current design"
let description["report_port_protection_diodes"] = "# Report the port protection diodes statistic"
let description["report_ports"] = "# Report port information"
let description["report_power"] = "# Report Power"
let description["report_power_calculation"] = "# Report Detailed Power Calculation"
let description["report_power_clock_scaling"] = "# Report clock frequency scaling"
let description["report_power_derate"] = "# Report power derate information"
let description["report_power_domain"] = "# Synonym for 'report_power_domains'"
let description["report_power_domains"] = "# Report power domain information"
let description["report_power_groups"] = "# Report power groups information"
let description["report_power_io_constraints"] = "# report io constraints for power and ground of IO guides"
let description["report_power_scopes"] = "# Report power scope information"
let description["report_power_switch_patterns"] = "# Report power switch pattern information"
let description["report_power_switch_placement_patterns"] = "# Report power switch placement patterns"
let description["report_pr_rules"] = "# Report pr rules in the current design"
let description["report_programmable_spare_cell_mapping_rule"] = "# report psc mapping rule"
let description["report_pst"] = "# Report power state table information"
let description["report_push_down_object_options"] = "# report push down object options"
let description["report_pvt"] = "# Report PVT information"
let description["report_qor"] = "# Report QoR information"
let description["report_qor_snapshot"] = "# report QoR snapshot"
let description["report_rail_integrity_strategy"] = "# Reports specific strategies in the PrimeRail Gen II rail integrity analysis flow as defined by the In-Design setup command 'set_rail_integrity_strategy'"
let description["report_rdl_routes"] = "# Report RDL routes"
let description["report_ref_libs"] = "# Report reference libraries"
let description["report_reference"] = "# Synonym for 'report_references'"
let description["report_references"] = "# Report the references in current_instance/design"
let description["report_routing_corridors"] = "# Report routing_corridors in the current design"
let description["report_routing_guides"] = "# Get Access Preference Routing Guides"
let description["report_routing_rules"] = "# Report non-default routing rules"
let description["report_rp_groups"] = "# Report status of RP group placement"
let description["report_sadp_track_rule"] = "# Report track rule"
let description["report_scan_chains"] = "# report scan chains"
let description["report_scenarios"] = "# report scenarios"
let description["report_shaping_options"] = "# Report the current shaping options used in design planning"
let description["report_shields"] = "# Report shields"
let description["report_si_calculation"] = "# Report si calculation"
let description["report_si_delay_analysis"] = "# Report crosstalk delay information on nets"
let description["report_signal_em"] = "# Analyze and report signal EM"
let description["report_signal_io_constraints"] = "# report signal io constraints for IO guides"
let description["report_site_defs"] = "# Report the site_defs in a tech"
let description["report_size_only"] = "# Report size_only"
let description["report_stage"] = "# Report stage delay calculation"
let description["report_supernet_exceptions"] = "# Report supernet transparent pins"
let description["report_supply_net"] = "# Synonym for 'report_supply_nets'"
let description["report_supply_nets"] = "# Report supply net information"
let description["report_supply_ports"] = "# Report supply port information"
let description["report_supply_sets"] = "# Report supply net information"
let description["report_switching_activity"] = "# Report Switching Activity"
let description["report_taps"] = "# Report taps currently defined"
let description["report_target_library_subset"] = "# Report target library subset"
let description["report_threshold_voltage_group"] = "# Synonym for 'report_threshold_voltage_groups'"
let description["report_threshold_voltage_groups"] = "# Report Vt group information"
let description["report_timing"] = "# Report timing"
let description["report_timing_derate"] = "# Report timing derate info"
let description["report_topological_constraints"] = "# Report Topological Pin Feedthrough constraints"
let description["report_topology_edges"] = "# Report topology_edge information"
let description["report_topology_nodes"] = "# Report topology_node information"
let description["report_track_constraints"] = "# Display information on the track constraints in the current block"
let description["report_tracks"] = "# Report track information"
let description["report_transitive_fanin"] = "# Create a collection of pins/ports or cells in the fanin of specified sinks"
let description["report_transitive_fanout"] = "# Create a collection of pins/ports or cells in the fanout of specified sources"
let description["report_unbound"] = "# Report unbound objects information"
let description["report_units"] = "# Synonym for 'report_user_units'"
let description["report_user_units"] = "# Report unit information"
let description["report_utilization"] = "# Report utilization of objects in the block"
let description["report_versions"] = "# Report release versions supported by save_lib"
let description["report_via_defs"] = "# Report the via_defs in a block or tech"
let description["report_via_ladder_constraints"] = "# Report via ladder constraints"
let description["report_via_ladder_rules"] = "# Report via ladder rules"
let description["report_via_mapping"] = "# Report via mapping"
let description["report_via_regions"] = "# Report the via_regions in a block"
let description["report_via_rules"] = "# Report via rules in the current design"
let description["report_virtual_pads"] = "# Report existing virtual pads"
let description["report_visa_clocks"] = ""
let description["report_voltage_area_rules"] = "# Report voltage_area_rules"
let description["report_voltage_areas"] = "# Report voltage_areas in the current design"
let description["reset_app_options"] = "# Reset application options"
let description["reset_cell_mode"] = "# Reset the cell mode on cell instances"
let description["reset_design"] = "# Remove user-specified info from design"
let description["reset_origin"] = ""
let description["reset_origin_move_block"] = ""
let description["reset_origin_top"] = ""
let description["reset_path"] = "# Synonym for 'reset_paths'"
let description["reset_paths"] = "# Resets specified paths to single cycle timing"
let description["reset_placement"] = "# Unplace all cells."
let description["reset_power_clock_scaling"] = "# Reset clock frequency scaling"
let description["reset_power_derate"] = "# reset power derate numbers"
let description["reset_power_group"] = "# reset power group on cells"
let description["reset_pvt"] = "# Reset all PVT and timing derate settings"
let description["reset_switching_activity"] = "# Reset Switching Activities"
let description["reset_timing_derate"] = "# Reset cell/net delay derating factors"
let description["reset_upf"] = "# Reset the UPF constraints of the design"
let description["reshape_objects"] = "# Reshape the boundary of specified objects"
let description["resize_objects"] = "# Resize specified objects"
let description["resize_polygons"] = "# Adjusts the boundaries of polygons outward by the specified distance"
let description["resolve_pg_nets"] = "# Fix existing PG connections based on power intention"
let description["restore_correlation_status"] = ""
let description["return"] = "# Builtin"
let description["return_proc_source"] = ""
let description["revert_blocks"] = "# Revert local blocks of sparse library from disk to go back to the version in base library"
let description["revert_cell_sizing"] = "# Revert sized cells"
let description["rhz_fill_power_domains"] = ""
let description["rhz_fill_stdcells_data"] = ""
let description["rhz_generate_reports"] = ""
let description["rhz_get_cells_at_depth"] = ""
let description["rhz_vectorian_add"] = ""
let description["rhz_vectorian_mult"] = ""
let description["rls_table"] = "# Prints out a list of lists in a text table"
let description["rls_table_echo"] = ""
let description["rotate_objects"] = "# Rotate selected objects"
let description["roundto"] = ""
let description["routePins"] = ""
let description["routeTerm"] = ""
let description["route_auto"] = "# Perform auto route"
let description["route_busplans"] = "# Route and plan the specified busplan buses"
let description["route_clock_straps"] = "# Route clock net that has prerouted shapes"
let description["route_custom"] = "# Execute Custom Router"
let description["route_detail"] = "# Perform detail route"
let description["route_eco"] = "# Perform eco route"
let description["route_fishbone"] = "# Fishbone routing of individual nets"
let description["route_global"] = "# Perform global routing"
let description["route_group"] = "# Perform group route"
let description["route_opt"] = "# Post-Route Optimization"
let description["route_rdl_differential"] = "# match RDL route length"
let description["route_rdl_flip_chip"] = "# route flip chip nets"
let description["route_track"] = "# Perform track assignment"
let description["runRDT"] = "# Command that runs the RDT flow.  This also provides control in interactive use modes, such as stepping through flow stages, start from existing saved sessions, and running standalone flows.  Status information can be obtained from related commands like rdt_list_stages, rdt_list_steps and rdt_report_stage_status"
let description["run_block_compile_pg"] = "# Run distributed power ground network creation"
let description["run_block_script"] = "# Run a script on inputed blocks"
let description["run_monitor_gui"] = "# Start the distributed monitor GUI"
let description["run_rdtpv"] = ""
let description["sL"] = ""
let description["sN"] = ""
let description["sW"] = ""
let description["saif_map"] = "# Processes the name mapping information"
let description["save_block"] = "# Save a block"
let description["save_correlation_status"] = ""
let description["save_drc_error_data"] = "# Saves an error data file"
let description["save_ems_database"] = "# Saves the EMS database."
let description["save_lib"] = "# Save a library"
let description["save_upf"] = "# save_upf"
let description["sb"] = ""
let description["scan"] = "# Builtin"
let description["sd_abstract_to_design"] = ""
let description["sd_abstract_to_frame"] = ""
let description["sd_add_diffcheck"] = "# add diffcheck layer to a design"
let description["sd_add_dop_diode"] = "# Add diode cells for every DOP shape"
let description["sd_add_halo_metals"] = "# Add boundary transition shapes, boundary pg, and track based boundary route_guides"
let description["sd_add_polycheck"] = "# add polycheck layer to a design"
let description["sd_add_routing_blockage_for_boundary"] = "# create route_guides for to block boundary metal & for create strap "
let description["sd_add_routing_blockage_for_macro"] = "# create routing blockage around the macros using G_PWR_MACRO_SPACE and  also additional blockages"
let description["sd_add_routing_blockage_for_va"] = "# create route_guides for voltage areas "
let description["sd_aon_pg_hookup"] = "# Insert via ladder on aon power pin"
let description["sd_aon_pg_route"] = "# Route aon pg hookup via ladder to power grid"
let description["sd_append_uin_parameters"] = ""
let description["sd_apply_hip_pdn"] = ""
let description["sd_base_layer_fill"] = ""
let description["sd_base_layer_fill_step"] = ""
let description["sd_base_layer_populate_lib"] = ""
let description["sd_base_layer_populate_templates"] = ""
let description["sd_base_layer_remove"] = ""
let description["sd_base_layer_update_templates"] = ""
let description["sd_block_clock_opt"] = ""
let description["sd_block_place_opt"] = ""
let description["sd_block_priority_route"] = "# Runs Distributed Priority Routing"
let description["sd_block_route"] = ""
let description["sd_block_user_priority_route"] = "# Runs priority route from user reccipe for MLPH children blocks"
let description["sd_bottom_up_run_parallel_job"] = "# manages __BOTTOM_UP__ parallel job for DP flows - this is a helper proc"
let description["sd_boundary_fiducial_cells"] = ""
let description["sd_calculate_gridpattern"] = ""
let description["sd_call_diamond"] = ""
let description["sd_change_names"] = ""
let description["sd_channel_add_buffer_on_route"] = "# Channel Add-Buffer-On-Route"
let description["sd_channel_block_recipe"] = "# Channel Block Recipe"
let description["sd_channel_blocks"] = "# Runs Distributed Channel Block Recipe"
let description["sd_channel_get_nets"] = ""
let description["sd_channel_place_cells"] = "# Place Channel Cells (Port-to-Port) Equally Spaced"
let description["sd_channel_place_cells_based_on_route"] = "# Place Sequential repeaters based on routing"
let description["sd_channel_priority_route"] = "# Channel Cells Priority Routing"
let description["sd_channel_remove_repeaters"] = "# Remove Repeaters on a supernet"
let description["sd_channel_snap_cell_plc_at_coord"] = ""
let description["sd_checkProcess"] = ""
let description["sd_check_block_abutment"] = ""
let description["sd_check_cell_area"] = ""
let description["sd_check_fib_con"] = ""
let description["sd_check_pin_placement"] = ""
let description["sd_check_stitch_xmim"] = ""
let description["sd_check_terminals"] = ""
let description["sd_clean_up_block_level_power_hookup"] = ""
let description["sd_clean_up_routing_blockage_groups"] = ""
let description["sd_clk_load"] = ""
let description["sd_clk_ndr_shielding"] = ""
let description["sd_clk_push"] = ""
let description["sd_clk_route"] = ""
let description["sd_clk_shielding"] = ""
let description["sd_clock_cleanup"] = ""
let description["sd_commit_blocks"] = "# Commits blocks for hierarchical design (default: separate libraries)"
let description["sd_commit_blocks_same_lib"] = ""
let description["sd_connect_ackport"] = "# Connect drv_pin to rev_pin pin"
let description["sd_connect_aon_supply_pins"] = "# Connect back_up power pin of given cells to aon net in the power domain"
let description["sd_connect_ebb_enables"] = "# Connects EBB's in daisy chain fashion"
let description["sd_connect_pg_net"] = "# Connect PG based on UPF constraints"
let description["sd_connect_power_switch_enables"] = ""
let description["sd_constraints"] = ""
let description["sd_consume_io_constraints"] = ""
let description["sd_create_aabb_region"] = ""
let description["sd_create_analog_pg_template"] = "# Creates analog template"
let description["sd_create_analog_power_strap"] = "# Creates analog grid for pg regions, default it will read from G_ANALOG_PG_REGIONS"
let description["sd_create_and_place_slos_logic"] = ""
let description["sd_create_and_swap_abstracts"] = ""
let description["sd_create_backoff_layer_blockage"] = ""
let description["sd_create_backoff_layer_blockage_per_block"] = ""
let description["sd_create_bbox_analog_power_strategies"] = "# Creates analog grid strategies for the specified bbox"
let description["sd_create_black_box"] = ""
let description["sd_create_black_box_by_default"] = ""
let description["sd_create_black_box_pins"] = ""
let description["sd_create_boundary_power_blockage"] = ""
let description["sd_create_compl_pgr_blockage"] = ""
let description["sd_create_custom_grid_vars"] = "# Set G_ vars for custom power grid synthesis"
let description["sd_create_custom_power_strap"] = "# Creates interleave grid"
let description["sd_create_diffcheck"] = ""
let description["sd_create_dir"] = "# Creates a temporary directory in local area, given dir name - this is helper proc"
let description["sd_create_dr_blockage_around_object"] = ""
let description["sd_create_gas_station_wrapper"] = ""
let description["sd_create_halo_id"] = ""
let description["sd_create_hierarchical_power_strap"] = ""
let description["sd_create_m0_power_straps_fill"] = ""
let description["sd_create_macro_on_boundary_blockage"] = ""
let description["sd_create_path_groups"] = "# create path_groups to categorize INPUT, OUTPUT, FEED_THROUGH groups"
let description["sd_create_patterns"] = "# Create GCR patterns file"
let description["sd_create_physical_only_modules"] = "# create physical only module"
let description["sd_create_pin_pairings"] = "# Create and push down pin pairing user shapes"
let description["sd_create_pins_for_power_continuity"] = ""
let description["sd_create_placement_abstracts"] = ""
let description["sd_create_polycheck"] = ""
let description["sd_create_port_polygon_for_terminals"] = ""
let description["sd_create_power"] = ""
let description["sd_create_power_straps"] = "# Generate power straps"
let description["sd_create_power_straps_m0"] = "# "
let description["sd_create_prBoundary"] = ""
let description["sd_create_pwr_blkg_from_objs"] = ""
let description["sd_create_region_id"] = ""
let description["sd_create_region_tracks"] = ""
let description["sd_create_stdcell_fillers"] = ""
let description["sd_create_stub_upf"] = "# load the netlist and create stub_upf"
let description["sd_create_timing_abstracts"] = ""
let description["sd_create_timing_arcs_on_unconstrained_pins"] = ""
let description["sd_create_top_va_pg_blockage"] = "# sd_create_top_va_pg_blockage"
let description["sd_create_trackfill_config"] = "# Automatically create configuration file for ICC track fill"
let description["sd_create_tracks"] = "# Creates routing tracks"
let description["sd_create_tracks_for_hip_pins"] = "# creates tracks for offgrid pins inside HIPS"
let description["sd_create_tracks_for_offgrid_pins"] = "# Create tracks for offgrid macro pins or specified cells in G_FP_CELL_PATTERN_FOR_OFFGRID_PIN_TRACK"
let description["sd_create_twire_corner_blockage"] = ""
let description["sd_create_uin"] = "# Automatically create uin files for adr and icv/qea run"
let description["sd_create_uin_gridpattern"] = ""
let description["sd_create_uin_icv"] = ""
let description["sd_create_uin_layers"] = ""
let description["sd_create_uin_parameters"] = ""
let description["sd_create_uin_v_layers"] = ""
let description["sd_create_va_pg_blockage"] = ""
let description["sd_create_visa_bound"] = ""
let description["sd_create_xmim_lib"] = ""
let description["sd_ctm_bumesh"] = ""
let description["sd_ctm_clone_clock_gadget"] = ""
let description["sd_ctm_create_dop_clocks"] = ""
let description["sd_ctm_create_dops"] = ""
let description["sd_ctm_detail_route"] = ""
let description["sd_ctm_dop_enable_scan_repeater_duplication"] = ""
let description["sd_ctm_dop_enable_split"] = ""
let description["sd_ctm_enable_buffering"] = ""
let description["sd_ctm_fishbone_route"] = ""
let description["sd_ctm_initialize"] = ""
let description["sd_ctm_level_balance"] = ""
let description["sd_ctm_merge"] = ""
let description["sd_ctm_optimize"] = ""
let description["sd_ctm_post_setup"] = ""
let description["sd_ctm_postroute_sizing"] = ""
let description["sd_ctm_remove_dop_clocks"] = ""
let description["sd_ctm_reports"] = ""
let description["sd_ctm_route_dops"] = "# Get the available tracks across the bounding box ignore shielding"
let description["sd_ctm_set_clock_latency"] = ""
let description["sd_ctm_set_visa_exceptions"] = ""
let description["sd_ctm_sizing"] = ""
let description["sd_ctp_create_clock_pins_at_block_center"] = ""
let description["sd_cts"] = ""
let description["sd_cts_ccd"] = ""
let description["sd_cts_exceptions_for_icc"] = ""
let description["sd_cts_params"] = ""
let description["sd_cts_rename_cts_punch_port"] = ""
let description["sd_cts_route_options"] = ""
let description["sd_cts_setup"] = ""
let description["sd_cts_store_hier_clk_pin_drivers"] = ""
let description["sd_cts_trace_fain_to_first_ctech"] = ""
let description["sd_customize_budgets"] = ""
let description["sd_ddh"] = ""
let description["sd_define_icc_wrappers"] = ""
let description["sd_define_user_attributes"] = "# Consolidated proc to define all user attributes in the flow"
let description["sd_design_to_abstract"] = ""
let description["sd_detect_netlist_ecos"] = "# Create netlist diff files between nlib and verilog file"
let description["sd_dont_use"] = ""
let description["sd_dop_cts"] = ""
let description["sd_drc_bnd_spc_kor"] = ""
let description["sd_dump_pdfx_power_connections"] = ""
let description["sd_duplicate_slos"] = ""
let description["sd_eco_apply_changelist"] = "# Sources the ECO changelist"
let description["sd_eco_boundary_cells"] = "# Update the Boundary cells in eco mode"
let description["sd_eco_clk_repair"] = "# Chooses nearest physical clock for ECO sequential logical clock connections (logic ECO)"
let description["sd_eco_connect_assignbuf_ceco"] = "# Connects a buffer between pin and net to avoid assign statements in final netlist"
let description["sd_eco_connect_net_ceco"] = "#  Creates net if it doesnt exist and connects it to pin with same name as net. Disconnects the given pin from pwr/gnd if connected. Connects given net and pin."
let description["sd_eco_create_port_ceco"] = "# Wrapper to create port to work around conformal issue. If create port fails due to existing bus ports, undefines and redefines bus ports."
let description["sd_eco_gen_changelist"] = "# "
let description["sd_eco_legalize"] = "# Legalizes placement of cells that were modified or added by the ECO change"
let description["sd_eco_optimize"] = "# Performs a targeted, ICC2-based optimization on the ECO logic cone changed (logic ECO)"
let description["sd_eco_place_pins"] = "# Place pins in incremental mode"
let description["sd_eco_place_unplaced_cells"] = "# Creates an initial placement for unplaced ECO cells added (logic ECO)"
let description["sd_eco_rc_to_icc2_changelist"] = "#   Convert RC changelist to a ICC changelist file"
let description["sd_eco_remove_dfm"] = "# Removes stdcell fill (full-layer ECO only) and metal fill from the design"
let description["sd_eco_reset_dfm_stages"] = "# Reset the ECO stage in RDT so that it ECO runs can be applied in succession"
let description["sd_eco_route"] = "# ECO route of the ECO change"
let description["sd_eco_save_pre_eco_state"] = "# Records initial cell locations prior to the ECO change"
let description["sd_eco_scan_repair"] = "# Repairs broken scan chains and stitches new sequentials from the ECO change (logic ECO)"
let description["sd_eco_tieoff"] = "# Connect to logic zero or one"
let description["sd_enable_abstract_cmds"] = ""
let description["sd_enable_hold_fixing"] = ""
let description["sd_endcap_cells"] = "# Insert endcap cell at design left and right boundary"
let description["sd_estimate_timing"] = ""
let description["sd_estimate_timing_pre_checks"] = ""
let description["sd_expand_all_mi_block_pg_blockages"] = ""
let description["sd_extend_macro_pins_on_boundary"] = ""
let description["sd_extract_collaterals_for_capr_sapr"] = ""
let description["sd_extraction_options_setup"] = "# Does extraction option setup"
let description["sd_fdr_constraints"] = "# generates and appplies FDR exceptions"
let description["sd_fdr_get_physical_clock"] = ""
let description["sd_fdr_map_all_clocked_fdrs"] = ""
let description["sd_fdr_read_attributes_file"] = ""
let description["sd_fdr_read_clock_sources"] = ""
let description["sd_fdr_set_attributes"] = ""
let description["sd_fdr_write_vrlg_attr"] = "# generates FDR attributes file"
let description["sd_fib_cells"] = ""
let description["sd_fib_con"] = ""
let description["sd_fill"] = ""
let description["sd_fill_get_keepout_cells_list"] = ""
let description["sd_fill_mark_hv_nets"] = ""
let description["sd_fill_post_process"] = ""
let description["sd_fill_run_calibre"] = ""
let description["sd_fill_run_dfm"] = ""
let description["sd_fill_run_icc"] = ""
let description["sd_fill_run_icv"] = ""
let description["sd_fill_run_qea"] = ""
let description["sd_find_accessible_tap"] = "# Finds accessible tap cells within specified max spacing"
let description["sd_find_closest_cell"] = "# Finds the closest cell of specified ref_name/instance_name to a specifed cell"
let description["sd_find_unique_bound_name"] = ""
let description["sd_fix_ipb"] = ""
let description["sd_floorplan_design"] = ""
let description["sd_fn_assign_srsn_per_net_groups"] = ""
let description["sd_fn_cache_constraint_mapping_file"] = ""
let description["sd_fn_calculate_track_region"] = "# Recalculate track creation region for lower level block"
let description["sd_fn_check_fix_illegal_name"] = ""
let description["sd_fn_convert_ps_pg_grid"] = ""
let description["sd_fn_create_black_box"] = ""
let description["sd_fn_create_black_box_abstract"] = ""
let description["sd_fn_create_black_box_initialize_and_hollow"] = ""
let description["sd_fn_create_black_box_pin_constraints"] = ""
let description["sd_fn_create_black_box_source_pdintent"] = ""
let description["sd_fn_create_black_box_timing"] = ""
let description["sd_fn_create_block_host_options"] = ""
let description["sd_fn_create_feedthru_supplies"] = ""
let description["sd_fn_create_gas_station_wrapper"] = ""
let description["sd_fn_create_keepout_margin"] = ""
let description["sd_fn_create_partition_bbox_abstract"] = ""
let description["sd_fn_create_stub_upf"] = "# load the netlist and create stub_upf"
let description["sd_fn_create_track_check_edge"] = "# Creates routing tracks"
let description["sd_fn_create_wire_on_power_track"] = ""
let description["sd_fn_duplicate_terminal"] = "# Creates duplicate terminal at the current level"
let description["sd_fn_eco_concat_verilog_file"] = "# Concat list of verilog files into one file"
let description["sd_fn_eco_count_sequence_diff"] = ""
let description["sd_fn_eco_create_bus"] = ""
let description["sd_fn_eco_data_analysis_max_string_match"] = ""
let description["sd_fn_eco_data_analysis_string_match"] = ""
let description["sd_fn_eco_dump_net_shape"] = ""
let description["sd_fn_eco_dump_terminals"] = ""
let description["sd_fn_eco_get_ignore_modules"] = ""
let description["sd_fn_eco_get_latters_diff"] = ""
let description["sd_fn_eco_get_pin_nets"] = ""
let description["sd_fn_eco_get_string_match"] = ""
let description["sd_fn_eco_rename_advisory"] = ""
let description["sd_fn_eco_write_ref_data"] = ""
let description["sd_fn_execute_run_block_script"] = ""
let description["sd_fn_find_dangling_partition_pins"] = ""
let description["sd_fn_find_excluded_nets_for_place_pins"] = ""
let description["sd_fn_fix_upf_for_icc"] = ""
let description["sd_fn_found_input_upf_files"] = ""
let description["sd_fn_gas_station_unwrap_hier"] = ""
let description["sd_fn_gen_budgets"] = ""
let description["sd_fn_get_custom_polygons"] = ""
let description["sd_fn_get_io_connected_cells"] = "# Get driver or receiver cells of a net for set io constraints check"
let description["sd_fn_get_pg_geo_of_pgr_va"] = ""
let description["sd_fn_get_ref_libs"] = "# Return current reference library list"
let description["sd_fn_hack_split_constraints_upf"] = ""
let description["sd_fn_hier_commit_upf"] = "# Hierarchically commit UPF through MLPH design"
let description["sd_fn_ideal_network"] = ""
let description["sd_fn_insert_level_shifter"] = "# insert level shifter"
let description["sd_fn_load_black_box_upf"] = ""
let description["sd_fn_load_incremental_upf"] = ""
let description["sd_fn_parse_log_file_to_find_out_failed_jobs"] = ""
let description["sd_fn_pg_calculate_alt_pwrgrid_config"] = ""
let description["sd_fn_place"] = ""
let description["sd_fn_place_cell"] = ""
let description["sd_fn_place_global_dic_cells"] = "# Utility to place global DIC(cd/reg) cells in ICC2 db"
let description["sd_fn_place_global_fid_cells"] = "# Utility to place global FID cells in ICC2 db"
let description["sd_fn_propagate_driver_supply"] = ""
let description["sd_fn_propagate_soft_macro_pg_terminal"] = ""
let description["sd_fn_ps_connect_top_pg"] = "# Hookup to the connection layer of power rail"
let description["sd_fn_ps_create_rb_on_pg"] = "# Insert via ladder on power switch cells."
let description["sd_fn_pvt_setup"] = "# Set pvt for the corner "
let description["sd_fn_read_block_tcl_files"] = ""
let description["sd_fn_read_pspec"] = ""
let description["sd_fn_remove_extract_layer_constraints"] = ""
let description["sd_fn_remove_twire_shorts"] = ""
let description["sd_fn_remove_wiretracks_and_power_straps"] = ""
let description["sd_fn_reports_pspec"] = ""
let description["sd_fn_restore_srsn"] = ""
let description["sd_fn_run_a_command_on_blocks"] = "# run the specified TCL command on every blocks in the design"
let description["sd_fn_run_block_script"] = ""
let description["sd_fn_run_parallel_set_of_commands_on_block"] = "# run the specified TCL command on every blocks in the design"
let description["sd_fn_run_step"] = ""
let description["sd_fn_save_srsn"] = ""
let description["sd_fn_save_user_attributes"] = "# Saves user attributes for ICC "
let description["sd_fn_set_td_type_for_tsvs"] = ""
let description["sd_fn_setup_ctp_config"] = ""
let description["sd_fn_source_icc_file"] = "# Translates an ICC routing file to ICC2 commands"
let description["sd_fn_synthesize_clock_trunks"] = ""
let description["sd_fn_template_based_partition_bbt"] = "# Creates blackbox timing model for a list of blocks and clocks"
let description["sd_fn_update_block_netlist"] = ""
let description["sd_for_each_block_fib_cells"] = ""
let description["sd_for_each_block_local_fiducial_cells"] = ""
let description["sd_for_each_block_tap_cells"] = ""
let description["sd_fp_boundary_size_check"] = ""
let description["sd_frame_to_abstract"] = ""
let description["sd_gcr_create_commands"] = "# Create GCR Command File"
let description["sd_gcr_create_patterns"] = "# Setup for GCR pattern file creation"
let description["sd_gcr_dump_bus_constraints"] = "# Dump GCR bus constraint info"
let description["sd_gcr_pin_analysis_debug"] = "# GCR Pin Analysis Debug Reporting"
let description["sd_gcr_routing_summary"] = "# GCR Routing Summary"
let description["sd_gen_budgets"] = ""
let description["sd_gen_mw_from_icc2"] = ""
let description["sd_gen_spef"] = "# Generates SPEF for a design"
let description["sd_generate_critical_nets"] = "# Generate critical nets from timing report or use [getvar G_QEA_FILL_CRITICAL_NET_FILE]. All clock nets are automatically marked as critical even if G_QEA_FILL_CRITICAL_NET_FILE is used. If used, G_QEA_FILL_CRITICAL_NET_FILE contains one net name per line."
let description["sd_generate_icv_netlist"] = ""
let description["sd_generate_pg_template"] = "# Generate power grid template"
let description["sd_get_boundary_cells_from_gvar"] = "# Utility proc helps to expand to the boundary cell GVAR"
let description["sd_get_bus_layers_widths"] = "# Get bus trunk layers and bundle widths"
let description["sd_get_fill_layers"] = ""
let description["sd_get_gvars"] = ""
let description["sd_get_keepout_cells_list"] = ""
let description["sd_get_macro_metal_layers"] = "# Get highest level metal for macro and store info in -macro_info argument"
let description["sd_get_normalized_pattern"] = "# Get normalized pattern to the modular grid"
let description["sd_get_pattern_from_track_def"] = "# Get pattern definition from track pattern definition"
let description["sd_get_process_dot_num"] = ""
let description["sd_get_trackfill_process"] = ""
let description["sd_get_twire_config"] = "# Get transition wire config"
let description["sd_get_twire_edge_polygons"] = "# Get transition-wire edge polygons"
let description["sd_gridpattern_period"] = ""
let description["sd_hier_apply_netlist_ecos"] = "# Apply ECO tcl file "
let description["sd_hier_insert_boundary_cells"] = ""
let description["sd_hier_insert_ps_cells"] = ""
let description["sd_hier_macro_pin_expose_to_block"] = ""
let description["sd_hier_place"] = ""
let description["sd_hier_ps_stitching"] = ""
let description["sd_hier_push_down_pg"] = ""
let description["sd_hier_push_pg_blockage"] = ""
let description["sd_hier_set_up_rows"] = ""
let description["sd_hierarchy_owner_wrapper"] = ""
let description["sd_ideal_network"] = ""
let description["sd_import_def"] = ""
let description["sd_import_die_file"] = ""
let description["sd_import_vars"] = ""
let description["sd_incr_stdcell_power_hookup"] = "# run incremental stdcell power hookup in the defined area"
let description["sd_init_place"] = ""
let description["sd_init_rpd"] = ""
let description["sd_input_port_diode"] = ""
let description["sd_insert_boundary_cells"] = ""
let description["sd_insert_decaps"] = ""
let description["sd_insert_fillers"] = ""
let description["sd_insert_level_shifter"] = ""
let description["sd_insert_ps_cells"] = ""
let description["sd_insert_ps_cells_around_macro"] = "# Inserts PS cells around macros"
let description["sd_insert_ps_delay_cell"] = ""
let description["sd_insert_top_block_dic_cells"] = ""
let description["sd_insert_top_block_global_fid_cells"] = ""
let description["sd_io_placement"] = ""
let description["sd_iss_verify"] = ""
let description["sd_iss_verify_check"] = ""
let description["sd_iwsdb_close_tmp_lib"] = ""
let description["sd_iwsdb_open_tmp_lib_and_block"] = ""
let description["sd_iwsdb_recalc_offset_for_uin_gridpattern"] = ""
let description["sd_iwsdb_return_parallel_libs"] = ""
let description["sd_lbist_constraints"] = "# Apply LogicVision lbist Constraints"
let description["sd_legalize_placement"] = ""
let description["sd_limit_template_layers"] = "# exclude the layers from G_PWRGRID_CONFIG"
let description["sd_load_aocvm"] = "# Enables AOCVM and loads AOCVM files if they exist, also calls report_ocvm for type AOCVM"
let description["sd_load_aocvm_gcd"] = "# Finds relevant AOCVM files based on G_CORNER_DETAILS(corner+MAX|MIN_AOCVM(DEPTH)), then calls apr_read_aocvm command "
let description["sd_load_aocvm_legacy"] = "# Finds relevant AOCVM files based on corner, voltage and VT list with legacy method, then calls apr_read_aocvm command "
let description["sd_load_app_option_info"] = ""
let description["sd_load_base_db_for_eco"] = "# Load n-1 database for ECO"
let description["sd_load_block_timing"] = ""
let description["sd_load_incremental_srsn"] = "# Load incremental SRSN for all blocks"
let description["sd_load_incremental_upf"] = "# Load incremental UPF for blocks and top level"
let description["sd_load_io_placement"] = ""
let description["sd_load_macro_placement"] = ""
let description["sd_load_ocvm"] = "# Wrapper proc to call aocvm or pocvm loading procedure based no G var set by user"
let description["sd_load_pg_grid"] = ""
let description["sd_load_pocvm"] = "# Turns on POCVM, loads POCVM guardband, coeff scale factors and OCVM files if needed, also calls reort_ocvm for POCVM type "
let description["sd_load_post_split_constraints"] = ""
let description["sd_load_pre_defined_shapes_for_blocks"] = ""
let description["sd_load_routing_blockage_groups"] = "# Remove routing blockage inside any blockage groups"
let description["sd_load_td_routes"] = ""
let description["sd_load_tm"] = ""
let description["sd_load_tracks"] = ""
let description["sd_load_upf"] = "# Load Split UPF in blocks"
let description["sd_local_fiducial_cells"] = ""
let description["sd_lr_check_env_vars"] = ""
let description["sd_lr_overrride_tool_versions"] = ""
let description["sd_lr_ovr_tools"] = ""
let description["sd_lr_restore_saved_vars_and_tool_versions"] = ""
let description["sd_lr_setup_run_dir"] = ""
let description["sd_macro_pin_expose_to_block"] = ""
let description["sd_macro_placement"] = ""
let description["sd_macropowerswitchorder"] = "# Return ordered  macros list"
let description["sd_man_page"] = "# Show man page for sd variables or procedures"
let description["sd_mark_critical_nets_for_qea_fill"] = "# Mark critical nets so that qea fill has option to not place active fill on them."
let description["sd_mbist_constraints"] = "# Apply LogicVision MBIST Constraints"
let description["sd_mcmm_analyze_existing_labels"] = ""
let description["sd_mcmm_corners_setup"] = "# create corner related settings: process labels and numbers, voltage, parasitic parameters, timing derates, ocvm and extraction options."
let description["sd_mcmm_create_scenarios_and_status"] = "# create scenarios, set_scenario_status."
let description["sd_mcmm_get_corner_default_voltage"] = ""
let description["sd_mcmm_get_corner_of_scenario"] = ""
let description["sd_mcmm_get_corner_priority_search_path"] = ""
let description["sd_mcmm_get_corners_from_map"] = ""
let description["sd_mcmm_get_default_scenario"] = ""
let description["sd_mcmm_get_mode_of_scenario"] = ""
let description["sd_mcmm_get_mode_priority_search_path"] = ""
let description["sd_mcmm_get_process_label"] = ""
let description["sd_mcmm_get_process_number"] = ""
let description["sd_mcmm_get_scenario_constraint_files"] = ""
let description["sd_mcmm_get_scenario_from_corner"] = ""
let description["sd_mcmm_get_scenario_priority_search_path"] = ""
let description["sd_mcmm_is_compatible_mode"] = ""
let description["sd_mcmm_match_ebb_label"] = ""
let description["sd_mcmm_match_ebb_label_from_dror"] = ""
let description["sd_mcmm_match_library_labels_to_spec"] = ""
let description["sd_mcmm_match_stdlib_label"] = ""
let description["sd_mcmm_match_stdlib_label_from_dror"] = ""
let description["sd_mcmm_post_setup_source"] = ""
let description["sd_mcmm_report_and_verify_pvt"] = "# calls report_pvt and reports errors on any mismatches between labels and libraries per corner"
let description["sd_mcmm_set_corner_constraints"] = "# Reading design constraints for list of corners"
let description["sd_mcmm_set_max_transition"] = ""
let description["sd_mcmm_set_mode_constraints"] = "# Reading design constraints for list of modes"
let description["sd_mcmm_set_parasitics_parameters"] = "# call set_parasitics_parameters for requested corners"
let description["sd_mcmm_set_process_labels_numbers"] = "# sets process labels and numbers for given corners (or all)"
let description["sd_mcmm_set_scenario_constraints"] = "# Reading SDC, lbist, mbist, visa design constraints for list of scenarios"
let description["sd_mcmm_set_temperature"] = "# sets temperature for given corners (or all)"
let description["sd_mcmm_set_voltage"] = "# set_voltage for given corners (or all)"
let description["sd_mcmm_set_voltage_by_source"] = "# set_voltage for given corners (or all)"
let description["sd_mcmm_setup"] = "# setup MCMM environment according to G variables setup."
let description["sd_mcmm_setup_from_file"] = ""
let description["sd_mcmm_source_constraints_file"] = "# Sourcing constraints file, with or without log."
let description["sd_mcmm_source_translated_icc_sdc_file"] = ""
let description["sd_mcmm_timing_constraints"] = "# Reading design constraints"
let description["sd_mcmm_verify_corner_name_type"] = ""
let description["sd_merge_layout_files"] = "# sd_merge_layout_files - procedure to merge stream files."
let description["sd_metal_pre_fill"] = ""
let description["sd_module_placement"] = ""
let description["sd_n_site_cycling"] = ""
let description["sd_need_m0cid_remapping"] = ""
let description["sd_open_block"] = ""
let description["sd_open_library"] = "# Opens a MW design"
let description["sd_opportunistic_lfid_cells"] = ""
let description["sd_outputs"] = ""
let description["sd_outputs_aon_pg_net"] = ""
let description["sd_outputs_box_file"] = "# Returns a box file to be used for teh extraction flow"
let description["sd_outputs_create_abstract"] = ""
let description["sd_outputs_data_for_extraction"] = "# Creates MIM,TM9/M9 layers for extraction"
let description["sd_outputs_def"] = ""
let description["sd_outputs_def_dct"] = ""
let description["sd_outputs_def_redhawk"] = ""
let description["sd_outputs_fdr_write_vrlg_attr"] = ""
let description["sd_outputs_floorplan_tcl"] = ""
let description["sd_outputs_frame"] = "# Generates frame for design"
let description["sd_outputs_gds"] = ""
let description["sd_outputs_icv_netlist"] = ""
let description["sd_outputs_iwsdb_write_donut"] = ""
let description["sd_outputs_lef"] = ""
let description["sd_outputs_macro_floorplan"] = ""
let description["sd_outputs_oas"] = ""
let description["sd_outputs_outputs_for_icc"] = ""
let description["sd_outputs_pb_floorplan"] = ""
let description["sd_outputs_saif"] = ""
let description["sd_outputs_scandef"] = ""
let description["sd_outputs_sdc"] = ""
let description["sd_outputs_spef"] = ""
let description["sd_outputs_upf_etm"] = ""
let description["sd_outputs_upf_out"] = ""
let description["sd_outputs_verilog"] = ""
let description["sd_outputs_verilog_w_power"] = ""
let description["sd_outputs_xyv"] = ""
let description["sd_pg_calculate_blockage"] = "# Custom power grid generation for FPS"
let description["sd_pg_calculate_custom_grid_blockage"] = "# Custom power grid blockage generation"
let description["sd_pg_regions"] = ""
let description["sd_pg_set_strategy"] = "# Set power plan strategy"
let description["sd_pg_via0_via1_insertion"] = "# create VIA0 & VIA1 in design for std power hookup"
let description["sd_place"] = ""
let description["sd_place_custom_2pass"] = ""
let description["sd_place_exploration"] = ""
let description["sd_place_hier_pins"] = ""
let description["sd_place_pins"] = "# Does automatic pin placement"
let description["sd_place_refine"] = ""
let description["sd_placement_blockage"] = ""
let description["sd_polaris_call"] = ""
let description["sd_post_cts_opt"] = ""
let description["sd_post_cts_setup"] = ""
let description["sd_post_priority_route_report"] = "# Post Priority Route Reporting"
let description["sd_post_pushdown_clean_up"] = ""
let description["sd_postplace_spare_cells"] = ""
let description["sd_postprocss_verilog_netlist"] = ""
let description["sd_postroute_tap_insertion"] = "# Finds cells that require additional taps and adds them if possible"
let description["sd_power_hookup_search_repair"] = "# Run std cell power hookup, route search repair"
let description["sd_power_switching_activity"] = ""
let description["sd_pre_clock_route"] = ""
let description["sd_pre_priority_route_report"] = "# Pre Priority Route Reporting"
let description["sd_prep_collateral_for_pt"] = "# Prepares collateral for running PT"
let description["sd_preroute"] = ""
let description["sd_priority_create_shields"] = "# Priority Create-Shields"
let description["sd_priority_place_hier_pins"] = ""
let description["sd_priority_route"] = "# Runs Group-Route - Priority Routing for constrained/critical nets"
let description["sd_priority_route_group"] = "# Priority Route-Group"
let description["sd_process_dcszo_cells"] = ""
let description["sd_process_ptlr_collaterals"] = ""
let description["sd_propagate_driver_supply"] = ""
let description["sd_propagate_pg_terminal"] = ""
let description["sd_ps_handle_dangling_ack_net"] = "# Connects the given drv_pin to the dangling ps_ack_port_net"
let description["sd_ps_pg_hookup"] = "# Insert via ladder on power switch cells."
let description["sd_ps_pg_hookup_use_cfg"] = "# Connects AON power to PS cells"
let description["sd_ps_remove_hookup"] = "# Remove power switch hookup objects"
let description["sd_ps_report_chain_info"] = ""
let description["sd_ps_snap_placement"] = ""
let description["sd_ps_stitching"] = ""
let description["sd_pt_ctsizer_run_flow"] = ""
let description["sd_pt_lr_run_flow"] = ""
let description["sd_pt_lrdp_run_flow"] = ""
let description["sd_pteco_apr_eco_setting"] = ""
let description["sd_pteco_fixer"] = "# Runs PT ECO which generates icc tcl changelist containing minfixing buffers"
let description["sd_push_down_pg"] = ""
let description["sd_pushdown"] = ""
let description["sd_pushdown_pv_voltage_map"] = "# Pushdown pv voltage map"
let description["sd_pwr_hookup_interity_check"] = "# run icv to check for power hookup missing over cells"
let description["sd_qea_fill_critical_net_flow"] = "# Find critical nets and mark them so that qea fill has option to not place active fill on them."
let description["sd_read_design"] = "# Creates a design by reading a verilog"
let description["sd_read_design_for_delite"] = ""
let description["sd_read_design_for_planning"] = ""
let description["sd_read_design_for_split_constraints"] = ""
let description["sd_read_layout_file"] = "# Read fill oasis file to ndm"
let description["sd_read_netspec"] = "# Read netspec constraints and reprots them"
let description["sd_read_pin_constraints_in_tcl_format"] = ""
let description["sd_read_pin_constraints_in_topo_format"] = ""
let description["sd_read_pspec"] = "# Reads PSPEC constraints, reports, and loads them"
let description["sd_read_pushdown_cells"] = ""
let description["sd_read_pushdown_content"] = ""
let description["sd_read_pushdown_routes_and_blockages"] = ""
let description["sd_read_pv_voltage_mapfile"] = "# Read pv voltage mapfile"
let description["sd_read_tspec"] = ""
let description["sd_read_upf"] = "# Read (hierarchical) UPF"
let description["sd_read_user_collateral"] = "# Reads USER collateral (User Pre-Routes, etc)"
let description["sd_read_voltage_tcl_file"] = "# Read voltage TCL file to define voltage value for supplies"
let description["sd_reconcile_tintent"] = ""
let description["sd_regen_budgets"] = ""
let description["sd_remove_aon_pg_hookup"] = "# Remove aon pg hookup"
let description["sd_remove_critical_nets_for_qea_fill"] = "# Remove critical net marker shapes."
let description["sd_remove_donut"] = ""
let description["sd_remove_icc_wrappers"] = ""
let description["sd_remove_level_shifter"] = ""
let description["sd_remove_pg_pins_based_on_user_input"] = ""
let description["sd_remove_priority_routes"] = "# Remove Priority Routes"
let description["sd_remove_top_gas_station_wrapper"] = ""
let description["sd_replace_module_netlist"] = ""
let description["sd_report_pin_constraints"] = ""
let description["sd_report_pin_placement_qor"] = ""
let description["sd_reports_app_options"] = ""
let description["sd_reports_area"] = ""
let description["sd_reports_check_legality"] = ""
let description["sd_reports_check_mv_design"] = ""
let description["sd_reports_check_pin_placement"] = ""
let description["sd_reports_check_routes"] = ""
let description["sd_reports_clk_cap_histogram"] = ""
let description["sd_reports_clk_latency"] = ""
let description["sd_reports_clk_local_skew"] = ""
let description["sd_reports_clk_local_skew_histogram"] = ""
let description["sd_reports_clk_skew"] = ""
let description["sd_reports_clk_structure"] = ""
let description["sd_reports_clk_transition"] = ""
let description["sd_reports_clock"] = ""
let description["sd_reports_clock_drc_violators"] = ""
let description["sd_reports_clock_tree_summary"] = ""
let description["sd_reports_config_vars"] = ""
let description["sd_reports_design_check"] = ""
let description["sd_reports_design_qor"] = "# Design qor report procedure"
let description["sd_reports_design_report"] = ""
let description["sd_reports_macro_data"] = ""
let description["sd_reports_max_fanout_vio"] = ""
let description["sd_reports_pdfx_content"] = ""
let description["sd_reports_pdfx_power_connections"] = ""
let description["sd_reports_pg_connectivity"] = ""
let description["sd_reports_pg_drc"] = ""
let description["sd_reports_pin_placement_qor"] = ""
let description["sd_reports_ps_chain_info"] = ""
let description["sd_reports_pspec"] = ""
let description["sd_reports_qor"] = ""
let description["sd_reports_secondary_power_bounds"] = ""
let description["sd_reports_threshold_voltage_group"] = ""
let description["sd_reports_vio_all"] = ""
let description["sd_reports_vio_max_no_clock_expanded_nworst_100"] = ""
let description["sd_reports_vio_max_nworst_100"] = ""
let description["sd_reports_vio_min_no_clock_expanded_nworst_100"] = ""
let description["sd_reports_vio_min_nworst_100"] = ""
let description["sd_reports_zeroRC_timing"] = ""
let description["sd_reset_library"] = ""
let description["sd_restore_input_port_diode_connections"] = ""
let description["sd_restore_pre_abstract_cmds"] = ""
let description["sd_restore_user_default_app_options"] = ""
let description["sd_route"] = ""
let description["sd_route_add_via_ladders"] = "# Add via ladders on feedtrough and output drivers of the partition if G_ENABLE_VL is set to 1"
let description["sd_route_global"] = "# Runs global route for pin-assignment"
let description["sd_route_opt"] = "# Fix setup, hold & max transition violations after route"
let description["sd_rpd_post_place"] = ""
let description["sd_run_adr"] = ""
let description["sd_run_conformal_check"] = "# Runs Conformal based functional equivalence check"
let description["sd_run_health_check"] = "# Runs health checks for a stage"
let description["sd_run_parallel_job"] = "# manages parallel job for DP flows - this is a helper proc"
let description["sd_run_rumba_flow"] = ""
let description["sd_save_input_port_diode_connections"] = ""
let description["sd_save_user_default_app_options"] = ""
let description["sd_seq_chain_alignment"] = "# Script for sequential chain alignment"
let description["sd_ser_insertion"] = ""
let description["sd_set_antenna_rules"] = ""
let description["sd_set_attributes"] = ""
let description["sd_set_boundary_for_logical_black_box"] = ""
let description["sd_set_boundary_insertion_variables"] = ""
let description["sd_set_detail_route_shape_use_and_physical_status"] = "# Set Detailed-Route Shape-Use and Physical-Status"
let description["sd_set_freeze_port_constraints"] = "# sets freeze port setting on hier names in gvar G_FREEZE_PORT_HIER_NAMES"
let description["sd_set_gvars_from_array"] = ""
let description["sd_set_hierarchy_owner"] = ""
let description["sd_set_host_options"] = ""
let description["sd_set_io_preroute_constraints"] = "# Set the layer constraints and ndr rule for input or output ports defined from FC"
let description["sd_set_is_ft_noconn"] = ""
let description["sd_set_is_ft_noconn_for_block"] = ""
let description["sd_set_is_td"] = ""
let description["sd_set_layer_costs"] = "# Set Layer Costs"
let description["sd_set_min_max_ignored_layers"] = ""
let description["sd_set_multi_vtlibs"] = ""
let description["sd_set_parent_bbox"] = ""
let description["sd_set_pg_td_true"] = ""
let description["sd_set_pocvm_coeff_scale_factor"] = "# Parses the G var G_POCVM_COEFF_SCALE_FACTOR to pass the corresponding options to set_timing_derate -pocvm_coefficient_scale_factor"
let description["sd_set_pocvm_guardband"] = "# Parses the G var G_POCVM_GUARDBAND to pass the corresponding options to set_timing_derate -pocvm_guardband"
let description["sd_set_preroute_constraints"] = ""
let description["sd_set_priority_route_options"] = "# Set Priority Route Options"
let description["sd_set_routing_direction"] = ""
let description["sd_set_tile_symmetry"] = ""
let description["sd_set_vt_groups"] = ""
let description["sd_set_wiretracks"] = ""
let description["sd_setup_ctp_config"] = ""
let description["sd_setup_macro_placement_constraints"] = ""
let description["sd_setup_parasitic_tech"] = "# Sets up parasitic tech for NDM library, reads TLU+ max and min library along with layer map"
let description["sd_setup_placement_constraints"] = ""
let description["sd_setup_xmim"] = ""
let description["sd_shape_blocks"] = ""
let description["sd_shell_budgets"] = ""
let description["sd_skew_groups_for_icc"] = ""
let description["sd_snap_macro_placement"] = "# Snap macros to grid based on G_PLACE_CHECK_GRID"
let description["sd_source_caliber_cbc_files"] = ""
let description["sd_spare_cells"] = ""
let description["sd_split_constraints"] = ""
let description["sd_split_ps_chain"] = "# Split the ps chain into multiple chains if the number of PS cells exceed the threshold"
let description["sd_stdcell_power_hookup"] = ""
let description["sd_stitch_from_mapfile"] = ""
let description["sd_stitch_physically_shorted_pins"] = ""
let description["sd_stitch_xmim"] = ""
let description["sd_swap_design_and_remove_abstract"] = ""
let description["sd_swap_macrohalos_heml4"] = "# Swap the m5 halos to m4 halos for specific ebbs"
let description["sd_switch_to_donut"] = ""
let description["sd_synthesize_clock_trunks"] = ""
let description["sd_tap_cells"] = "# pre-place tap cells in a design"
let description["sd_td_handler"] = ""
let description["sd_test_budgets"] = ""
let description["sd_tho_off"] = ""
let description["sd_tho_on"] = ""
let description["sd_tho_place"] = ""
let description["sd_time_derate_setup"] = "# Sets timing derate for all corners in case G_TIMING_DERATE equal 1"
let description["sd_tm_attach_attribute"] = ""
let description["sd_tm_create_terminal_blockage_on_boundary"] = ""
let description["sd_tm_get_boundary"] = ""
let description["sd_tm_popup"] = "# Proc to consume bottom-up bu_tm files"
let description["sd_tm_route_terminal_blockage_on_boundary"] = "# creates boundary terminals on interface and boundary blockages on non-interface objects"
let description["sd_tm_write_collateral"] = "# Runs TMS script, Separates top metal from nlib into .tcl/.def file"
let description["sd_undo_pteco_apr_eco_setting"] = ""
let description["sd_update_local_config_for_mcmm_run"] = ""
let description["sd_update_uin_keepout_cells"] = ""
let description["sd_upf_setup"] = ""
let description["sd_uv_fill"] = ""
let description["sd_vcx250_fill"] = ""
let description["sd_vector_swap"] = ""
let description["sd_via1_size"] = ""
let description["sd_via_color"] = ""
let description["sd_visa_set_clock_exceptions"] = ""
let description["sd_visa_trace_connectivity"] = ""
let description["sd_voltage_areas"] = ""
let description["sd_waitForICVComplete"] = ""
let description["sd_write_collateral"] = ""
let description["sd_write_collateral_for_block"] = "# Write collateral for a block; it will make the path if it does not exist"
let description["sd_write_dp2apr_hand_shaking_ndm"] = "# Save dp to apr hand shaking database"
let description["sd_write_evr_collateral"] = "# Write top metal EVR collaterals"
let description["sd_write_evr_collateral_for_one_cell"] = "# Write top metal EVR collaterals for one specified cell"
let description["sd_write_icv_netlist"] = ""
let description["sd_write_iss_cmdfile"] = ""
let description["sd_write_layout_file"] = "# sd_write_layout_file - procedure to write gds/oas layout files."
let description["sd_write_macro_spice"] = ""
let description["sd_write_oas2ndm"] = "# Write oasis file back to ndm using icv"
let description["sd_write_verilog_netlist"] = ""
let description["sd_zt_brb_on_cell_pin_ends"] = "# Removes brb routing blockage on ends of specified cells added by sd_zt_brb_on_cell_pin_ends"
let description["sd_zt_brb_on_pin_ends"] = "# Add brb routing blockage on ends of specified std cell pin on top layer of pin."
let description["sd_zt_create_brb_around_macro"] = "# Creates boundary route blockage around macro for proper EK router e2e checks."
let description["sd_zt_create_fkp_over_macros"] = "# create fill keepout on specified layers over macros"
let description["sd_zt_create_staggered_pin_triplets"] = "# In EK/ZT mode, need to create staggered triplet pattern on boundary pins to help track fill. This is done by neighboring isolated pins with dummy terms and creating staggered triplet pattern with neighboring pins.  For each layer that you need boundary pins to have staggered triplet pattern, you must specify G_ZT_PIN_STAGGER_LENGTH1($layer), G_ZT_PIN_STAGGER_LENGTH2($layer) and G_ZT_PIN_STAGGER_LENGTH3($layer) to specify the length of each pin in the staggered pattern.  Only m3, m4 and m5 are needed to be staggered fo 10nm/14nm ZT routing."
let description["sd_zt_extend_power_staples_neighbors"] = "# Extend terminals neighboring staples closest to boundaries and any terminals of longest stagger length thath neighbor the neighbor so that they match the length of the staples. Used in combination with ZT mode routing.  Staples need to already have been extended towards boundaries with sd_zt_extend_power_staples_to_boundary "
let description["sd_zt_extend_power_staples_to_boundary"] = "# Extend power staples closest to boundary on specified layers to match backoff for pwr grid set by G_BOUNDARY_ROUTE_GUIDE_SPACING, if violate end-to-end forbidden gap spacing"
let description["sd_zt_extend_power_staples_to_macros"] = "# Extend power staples closest to macro boundaries on specified layers to match backoff for pwr grid set by G_BOUNDARY_ROUTE_GUIDE_SPACING, if violate end-to-end forbidden gap spacing. Uses staple layers from G_STAPLE_LAYERS_OVERHANGS unless -layers option is set."
let description["sd_zt_get_dbbrg_layer_spacing"] = "# Returns proper spacing for dbbrg creation at boundary. Calculation is based off of G_BOUNDARY_ROUTE_GUIDE_SPACING."
let description["sd_zt_neighbor_isolated_pins"] = "# Make sure isolated pins on boundary have neighbors on adjacent tracks by adding dummy terminals. Use in combination with ZT mode routing. "
let description["sd_zt_pull_back_boundary_terms"] = "# Pull-back terminals that touch boundary."
let description["sd_zt_query_term_neighbor"] = "# Find neigbhor of specified terminal in specified direction and determine if it is a terminal, shape, strap or staple. Used in combination with ZT mode routing."
let description["sd_zt_remove_brb_on_cell_pin_ends"] = ""
let description["sd_zt_stagger_pin_triplets"] = "# In EK/ZT mode, need to make sure boundary pin ends are not aligned in order to help track fill. This is done by creating staggered pattern with neighboring pins"
let description["seed_pspecs"] = ""
let description["seek"] = "# Builtin"
let description["send_status"] = "# Send a status message to master process"
let description["set"] = "# Builtin"
let description["setDuetUser"] = ""
let description["set_3d_chip_placement"] = "# Set single chip's corresponding information in top"
let description["set_annotated_check"] = "# Back-annotate check arc values"
let description["set_annotated_delay"] = "# Back-annotate arc delays"
let description["set_annotated_power"] = "# Annotate power dissipation on cells"
let description["set_annotated_transition"] = "# Back-annotate transition times"
let description["set_aocvm_coefficient"] = "# Set AOCVM random coefficient"
let description["set_app_options"] = "# Set application options"
let description["set_app_var"] = "# Set the value of an application variable"
let description["set_attribute"] = "# Set attribute values on the specified objects"
let description["set_base_lib"] = "# Update the base library location on a sparse library"
let description["set_blackbox_clock_port"] = "# Mark ports as a clock port for BBT"
let description["set_blackbox_port_drive"] = "# Set a port's drive in BBT"
let description["set_blackbox_port_load"] = "# Set a port's load in BBT"
let description["set_block_grid_references"] = "# Set up block grid for a block design reference"
let description["set_block_pin_constraints"] = "# Set block pin constraints in design planning"
let description["set_block_to_top_map"] = "# Set a mapping between objects in a top and contained block"
let description["set_boundary_budget_constraints"] = "# Set up boundary constraints for a budgeted pin"
let description["set_boundary_cell_rules"] = "# Sets rules for boundary cell creations and placements"
let description["set_budget_margins"] = "# Define timing margins to be used in budgets"
let description["set_budget_options"] = "# Set up budgeting commands"
let description["set_budget_shell_latencies"] = "# Set internal clock delays to be used when creating budget shells"
let description["set_bundle_pin_constraints"] = "# Set pin constraints on bundles of nets for pin assignment"
let description["set_busplan_constraints"] = "# Create constraints for busplan"
let description["set_case_analysis"] = "# Specify case analysis value on ports or pins"
let description["set_cell_hierarchy_type"] = "# Change the cell hierarchy type"
let description["set_cell_location"] = "# Sets the location on cells"
let description["set_cell_mode"] = "# Selects the mode of an instance"
let description["set_cell_site"] = "# Set cell site based on height/width"
let description["set_cell_vt_type"] = "# create vt cell filler cells"
let description["set_clock_balance_points"] = "# Specify the balance point information to be set at this pin for clock tree synthesis"
let description["set_clock_cell_spacing"] = "# Set clock cell spacing"
let description["set_clock_gating_check"] = "# Specify clock gating check values"
let description["set_clock_groups"] = "# Set exclusive or asynchronous clock groups"
let description["set_clock_latency"] = "# Capture actual or predicted clock latency"
let description["set_clock_routing_rules"] = "# Set clock routing rules"
let description["set_clock_sense"] = "# Set clock sense"
let description["set_clock_transition"] = "# Capture predicted clock transition"
let description["set_clock_tree_options"] = "# Set clock tree options"
let description["set_clock_tree_reference_subset"] = "# Set clock tree reference"
let description["set_clock_trunk_endpoints"] = "# Specify pin or ports as clock trunk end points for clock trunk planning"
let description["set_clock_uncertainty"] = "# Capture actual or predicted clock skew"
let description["set_colors"] = "# Set the user specified color for cells by hierarchy"
let description["set_command_option_value"] = "# set command option default or current value"
let description["set_consistency_settings_options"] = "# set_consistency_settings_options"
let description["set_constraint_mapping_file"] = "# Load file that contains UPF/ETM_UPF/SDC/BUDGET/CLKNET/DEF/PG_CONSTRAINT/COMPILE_PG/CTS_CONSTRAINT/BTM/FLOORPLAN file information for blocks"
let description["set_corner_status"] = "# Setup mode/corner combinations for setup, hold, etc. analysis"
let description["set_current_command_mode"] = "# set current command mode"
let description["set_current_ems_database"] = "# Sets current EMS database."
let description["set_current_mismatch_config"] = "# Sets the current mismatch config"
let description["set_data_check"] = "# Create a data to data check"
let description["set_db_file_mapping"] = "# Create a mapping between original input DB file and current DB file name"
let description["set_density_gradient_options"] = "# Set options for report_placement -hard_macro_density_gradient_violations command"
let description["set_design_attributes"] = "# set_design_attributes"
let description["set_disable_clock_gating_check"] = "# Disable clock gating checks"
let description["set_disable_timing"] = "# Disable timing arcs"
let description["set_domain_supply_net"] = "# Set default supply nets for a power domain"
let description["set_dont_touch"] = "# Set dont_touch"
let description["set_dont_touch_network"] = "# Set dont_touch_network"
let description["set_drive"] = "# Set port drive resistance"
let description["set_drive_resistance"] = "# Synonym for 'set_drive'"
let description["set_driving_cell"] = "# Set port driving cell"
let description["set_eco_placement_net_weight"] = "# set weight of nets"
let description["set_eco_power_intention"] = "# set eco power intention"
let description["set_edit_setting"] = "# Set common edit settings"
let description["set_edrc_setting"] = "# Set gui drc settings"
let description["set_equivalent"] = "# Declare that supply nets or supply sets are equivalent"
let description["set_extraction_options"] = "# set_extraction_options"
let description["set_false_path"] = "# Define a false path"
let description["set_fanout_load"] = "# Set fanout load for ports"
let description["set_fixed_objects"] = "# Setting fixed state for specified objects"
let description["set_floorplan_area_rules"] = "# Create a floorplan area rule"
let description["set_floorplan_enclosure_rules"] = "# Create a floorplan enclosure rule"
let description["set_floorplan_halo_rules"] = "# Create a floorplan halo rule"
let description["set_floorplan_spacing_rules"] = "# Create a floorplan spacing rule"
let description["set_floorplan_width_rules"] = "# Create a floorplan width rule"
let description["set_freeze_ports"] = "# Set freeze ports"
let description["set_grid"] = "# Change options for the given grid"
let description["set_hidden_app_var"] = ""
let description["set_hierarchy_options"] = "# Sets  the top-level design options for planning of the blocks."
let description["set_host_options"] = "# Set parameters for multi-threaded / distributed processing"
let description["set_ideal_latency"] = "# Specifies ideal latency"
let description["set_ideal_network"] = "# Set an ideal network"
let description["set_ideal_transition"] = "# Specifies ideal transition"
let description["set_ignored_layers"] = "# Set ignored layers"
let description["set_individual_pin_constraints"] = "# Set pin constraints on individual nets or pins for pin assignment"
let description["set_info_var"] = "# Sets a configuration parameter value"
let description["set_input_delay"] = "# Set input delay on ports or pins"
let description["set_input_transition"] = "# Set port transition time"
let description["set_interfaces"] = "# Clean up the interfaces of bound designs, in the current block"
let description["set_isolate_ports"] = "# Set isolate ports"
let description["set_isolation"] = "# Specify isolation strategy for a power domain"
let description["set_isolation_control"] = "# Specify a isolation control"
let description["set_latch_loop_breaker"] = "# Splits this pin to break loops in feedthrough latch paths"
let description["set_latency_adjustment_options"] = "# latency adjustment options"
let description["set_latency_budget_constraints"] = "# Define treatment of clocks during budgeting"
let description["set_layer_map_file"] = "# Set layer mapping file"
let description["set_level_shifter"] = "# Specify level shifter strategy for a power domain"
let description["set_lib_cell_purpose"] = "# Define purposes for lib_cells"
let description["set_load"] = "# Set capacitance on ports and nets"
let description["set_locked_objects"] = "# Setting locked state for specified objects"
let description["set_m14_pg_config_by_direction"] = ""
let description["set_macro_constraints"] = "# Set various macro options"
let description["set_macro_relative_location"] = "# Sets macro relative location constraint for shaping and placement"
let description["set_max_capacitance"] = "# Set maximum capacitance for ports or designs"
let description["set_max_delay"] = "# Specify maximum delay for timing paths"
let description["set_max_fanout"] = "# Set maximum fanout for ports or designs"
let description["set_max_lvth_percentage"] = "# Limits the percentage of low-Vth cells for optimization"
let description["set_max_time_borrow"] = "# Limit time borrowing for latches"
let description["set_max_transition"] = "# Set maximum transition for ports or designs"
let description["set_message_info"] = "# Control message generation"
let description["set_min_capacitance"] = "# Set minimum capacitance for ports or designs"
let description["set_min_delay"] = "# Specify minimum delay for timing paths"
let description["set_min_pulse_width"] = "# Set or remove a minimum pulse width constraint for specified design objects"
let description["set_multicycle_path"] = "# Define a multicyle path"
let description["set_multisource_clock_subtree_constraints"] = "# Set constraints on cells/pins for the multisource clock subtrees"
let description["set_multisource_clock_subtree_options"] = "# Set options for multisource clock subtrees"
let description["set_multisource_clock_tap_options"] = "# Set options for multisource clock tap assignment"
let description["set_net_estimation_rule"] = "# Set rules for estimating timing on a net"
let description["set_net_weight_effort"] = "# Set net weight effort for coarse placement."
let description["set_object_layer"] = "# Set the layer for objects"
let description["set_object_shape"] = "# Set shape of an object"
let description["set_operating_conditions"] = "# Set process, temperature, and voltage (for backwards compatibility)"
let description["set_output_delay"] = "# Set output delay on ports or pins"
let description["set_parasitic_parameters"] = "# Set various parameters for parasitic estimation"
let description["set_parasitics_parameters"] = "# Synonym for 'set_parasitic_parameters'"
let description["set_partial_on_translation"] = "# set_partial_on_translation"
let description["set_path_margin"] = "# Specify margin value for timing paths"
let description["set_pg_mask_constraint"] = "# Set PG mask constraint"
let description["set_pg_strategy"] = "# Set PG strategy for power network creation"
let description["set_pg_strategy_via_rule"] = "# Set PG via rule between strategies and existing shapes"
let description["set_pg_via_master_rule"] = "# Set PG via rule"
let description["set_pin_budget_constraints"] = "# Set budget constraints on block pins"
let description["set_placement_spacing_label"] = "# Set placement spacing label on lib cells"
let description["set_placement_spacing_rule"] = "# Set placement spacing rule between labels"
let description["set_placement_status"] = "# Set the placement status on objects"
let description["set_pocvm_corner_sigma"] = "# Set the standard deviation to be used for POCVM"
let description["set_pop_up_object_options"] = "# set pop up options for different object types"
let description["set_port_antenna_property"] = "# Set the antenna prop values for a specified port"
let description["set_port_attributes"] = "# set_port_attributes"
let description["set_power_clock_scaling"] = "# Specify clock frequency scaling"
let description["set_power_derate"] = "# Set power derate on objects"
let description["set_power_group"] = "# Set user specified power groups on cells"
let description["set_power_io_constraints"] = "# set io constraints for power and ground"
let description["set_power_strategy_attribute"] = "# set power strategy on power cells"
let description["set_power_switch_placement_pattern"] = "# Process power switch pattern"
let description["set_process_label"] = "# Set design/cell process label"
let description["set_process_number"] = "# Set design/cell process number"
let description["set_programmable_spare_cell_mapping_rule"] = "# set psc mapping rule"
let description["set_propagated_clock"] = "# Specify propagated clock latency"
let description["set_push_down_object_options"] = "# set push down options for different object types"
let description["set_pvt_configuration"] = "# Create rules to set allowable PVTs for this session"
let description["set_rail_integrity_strategy"] = "# Setup specific options for the PrimeRail rail integrity analysis flow based on the In-Design command 'verify_rail_integrity'"
let description["set_ref_libs"] = "# Set reference libraries"
let description["set_reference"] = "# Changes cells to a new reference"
let description["set_related_supply_net"] = "# Set related supply net"
let description["set_report_configuration"] = "# Set the default configuration for a report"
let description["set_retention"] = "# Specify retention strategy for a power domain"
let description["set_retention_control"] = "# Specify a retention control"
let description["set_retention_elements"] = "# Specify a retention element list"
let description["set_route_opt_target_endpoints"] = "# Setting Target Endpoints"
let description["set_routing_rule"] = "# Set the routing layers and net assignments"
let description["set_rp_group_options"] = "# set RP group placement constraints"
let description["set_scenario_status"] = "# Setup scenario for setup, hold, etc. analysis"
let description["set_scope"] = "# Set the active UPF scope"
let description["set_segment_budget_constraints"] = "# Set user-defined delays for segments of a budget"
let description["set_sense"] = "# Set sense"
let description["set_shaping_options"] = "# Set shaping options in design planning"
let description["set_si_delay_analysis"] = "# Specifies SI delay analysis"
let description["set_signal_io_constraints"] = "# set io constraints for signals"
let description["set_site_array_stack_order"] = "# Set the stack order of a site array"
let description["set_size_only"] = "# Set size_only"
let description["set_snap_setting"] = "# Set common snapping settings"
let description["set_ssc_clock"] = "# command to auto apply overrides for clock lane of source sync interface"
let description["set_ssc_data_read"] = "# command to auto apply read path overrides for data lane of source sync interface"
let description["set_ssc_data_write"] = "# command to auto apply write path overrides for data lane of source sync interface"
let description["set_ssc_top_get_par_name"] = ""
let description["set_ssc_top_get_unit_name"] = ""
let description["set_ssc_top_get_unit_par_names"] = ""
let description["set_starrc_in_design"] = "# set_starrc_in_design"
let description["set_supernet_exceptions"] = "# Mark supernet transparent pins"
let description["set_svf"] = "# Set directory for writing Formality guidance"
let description["set_switching_activity"] = "# Set Switching Activities"
let description["set_target_library_subset"] = "# Set target library subset"
let description["set_technology"] = "# Apply node specific application settings"
let description["set_temperature"] = "# Set design/cell temperature"
let description["set_threshold_voltage_group_type"] = "# Specifies the type for Vth groups"
let description["set_timing_derate"] = "# Set cell/net delay derating factors"
let description["set_timing_paths_disabled_blocks"] = "# set timing paths disabled blocks"
let description["set_tmp_var"] = "# Sets a tmp var"
let description["set_track_constraint"] = "# Set a track constraint"
let description["set_unix_variable"] = "# Synonym for 'setenv'"
let description["set_user_units"] = "# Specify units for user input or output"
let description["set_via_def"] = "# Change via def"
let description["set_via_ladder_constraints"] = "# Set via ladder constraints for specified pins"
let description["set_via_ladder_rules"] = "# Set via ladder rules for the block"
let description["set_via_ladder_spacing"] = "# Set spacing constraint on cells to accomodate via ladders"
let description["set_view_switch_list"] = "# Set the value of the specified view switch list"
let description["set_virtual_pad"] = "# Create virtual power/ground pads for power network analysis"
let description["set_voltage"] = "# Set design/cell/supply_net voltage"
let description["set_voltage_area"] = "# Update a voltage_area"
let description["set_voltage_area_shape"] = "# Update a voltage_area_shape"
let description["set_vsdc"] = "# Set file for writing guidance for formal verification"
let description["set_vt_filler_rule"] = "# create vt cell filler cells"
let description["set_working_design"] = "# Sets current working design by push or pop"
let description["set_working_design_stack"] = "# Sets current working design stack"
let description["setenv"] = "# Set the value of a system environment variable"
let description["setvar"] = "# Sets a configuration parameter value"
let description["setvar_array"] = "# Sets a parameter array"
let description["setvar_array_copy_partial"] = "# Copy the array values to another index"
let description["sh"] = "# Execute a command in a child process"
let description["shape_blocks"] = "# Perform shaping in design planning"
let description["shell_debug"] = ""
let description["signoff_calculate_hier_antenna_property"] = "# Extract hierarchical antenna properties by launching ICV with antenna runset"
let description["signoff_check_design"] = "# Command to check physical connections, short with metal fill etc"
let description["signoff_check_drc"] = "# Detect DRC violations by launching IC Validator with foundry runset"
let description["signoff_create_metal_fill"] = "# Fill dummy metal by launching IC Validator with foundry runset"
let description["signoff_fix_drc"] = "# Automatic DRC fixing"
let description["signoff_fix_isolated_via"] = "# Fix isolated vias in the design by launching ICV internally."
let description["signoff_report_metal_density"] = "# Command to report metal density"
let description["size_cell"] = "# Size a leaf cell by rebinding it to a new library cell"
let description["sizeof_collection"] = "# Get the number of objects in collection"
let description["snap_cells_to_block_grid"] = "# Move cells to be on block grid"
let description["snap_object_shapes"] = "# Snap the edges of specified objects"
let description["snap_objects"] = "# Snap specified objects"
let description["snps_version_at_least"] = ""
let description["snps_version_prior_to"] = ""
let description["snps_version_within"] = ""
let description["socket"] = "# Builtin"
let description["sort_bboxes_y_x_increasing"] = ""
let description["sort_collection"] = "# Create a sorted copy of the collection"
let description["source"] = "# Read a file and execute it as a script"
let description["source_pkg_file"] = ""
let description["split"] = "# Builtin"
let description["split_bins"] = ""
let description["split_clock_cells"] = "# Splitting of clock cells to fix DRC constraint violations"
let description["split_constraints"] = "# Split up and write partial constraints"
let description["split_fanout"] = "# Buffer a user specified set of pin/ports in different logical hierarchy"
let description["split_multibit"] = "# Split multibit cell"
let description["split_objects"] = "# Split specified objects"
let description["split_polygons"] = "# Decompose polygons into rectangles."
let description["split_rdl_routes"] = "# split RDL route length"
let description["spread_objects"] = "# Spread specified objects"
let description["spread_spare_cells"] = "# Spread spare cells"
let description["spread_wires"] = "# Spread wires"
let description["ss_remove_net_routing"] = ""
let description["start_busplan_gui"] = "# Open and initialze the register planning GUI"
let description["start_gui"] = "# Synonym for 'gui_start'"
let description["stop_gui"] = "# Synonym for 'gui_stop'"
let description["string"] = "# Builtin"
let description["subst"] = "# Builtin"
let description["suppress_message"] = "# Suppress printing of messages"
let description["swap_objects"] = "# Swap specified objects"
let description["switch"] = "# Builtin"
let description["synthesize_clock_trees"] = "# Synthesize clock trees"
let description["synthesize_clock_trunk_endpoints"] = "# Run block level clock trunk planning"
let description["synthesize_clock_trunks"] = "# Plan clock trunk"
let description["synthesize_multisource_clock_subtrees"] = "# Multi-source clock tree synthesis of structured local trees"
let description["synthesize_multisource_clock_taps"] = "# Multi-source clock tree tap assignment"
let description["synthesize_multisource_global_clock_trees"] = "# Multi-source clock global tree synthesis"
let description["tailcall"] = "# Builtin"
let description["tclLog"] = ""
let description["tclPkgSetup"] = ""
let description["tclPkgUnknown"] = ""
let description["tcl_findLibrary"] = ""
let description["tell"] = "# Builtin"
let description["termWire"] = ""
let description["test_rst"] = ""
let description["throw"] = "# Builtin"
let description["time"] = "# Builtin"
let description["tkerror"] = ""
let description["tm_container"] = ""
let description["trace"] = "# Builtin"
let description["transform_polygons"] = "# Computes a new geo_mask from a set of polygons with modified position and orientation"
let description["trim_pg_mesh"] = "# Trim PG mesh"
let description["try"] = "# Builtin"
let description["unalias"] = "# Remove one or more aliases."
let description["uncommit_block"] = "# Uncommits a block"
let description["undo"] = "# Undo one or more commands"
let description["ungroup_cells"] = "# Ungroup hierarchy of cell instances"
let description["uniquify"] = "# Creates new reference for cells"
let description["uniquify_block"] = "# Creates new reference block for cells"
let description["unknown"] = ""
let description["unset"] = "# Builtin"
let description["unset_tmp_var"] = "# Unsets a temp var"
let description["unsetenv"] = "# Unset the value of a system environment variable"
let description["unsetvar"] = "# Unsets a parameter value"
let description["unsuppress_message"] = "# Re-establish printing of messages"
let description["update"] = "# Builtin"
let description["update_constraint_mapping_file"] = "# Update file that contains UPF/ETM_UPF/SDC/BUDGET/CLKNET/DEF/PG_CONSTRAINT/COMPILE_PG/CTS_CONSTRAINT/BTM/FLOORPLAN file information for blocks"
let description["update_local_config_for_mcmm_run"] = ""
let description["update_timing"] = "# Update timing"
let description["upf_version"] = "# upf_version"
let description["uplevel"] = "# Builtin"
let description["upvar"] = "# Builtin"
let description["v_mod_list"] = ""
let description["variable"] = "# Builtin"
let description["verify_rail_integrity"] = "# Executes specific strategies in batch processing mode for the PrimeRail Gen II rail integrity analysis flow based on the In-Design setup command 'set_rail_integrity_strategy'"
let description["verify_via_ladders"] = "# Verify via ladders"
let description["visa_clocks_in_path_groups"] = ""
let description["visa_constraints"] = ""
let description["visa_create_clock_and_constraints"] = ""
let description["visa_filter_clocks"] = ""
let description["visa_find_outlane_number"] = ""
let description["visa_get_unit_name"] = ""
let description["visa_setup_tool"] = ""
let description["visa_uncertainty"] = ""
let description["visa_uncertainty_post_cts"] = ""
let description["visa_uncertainty_post_process"] = ""
let description["visa_unset_tool"] = ""
let description["visa_write_need_visa_report"] = ""
let description["vwait"] = "# Builtin"
let description["which"] = "# Locate a file, and display its pathname."
let description["while"] = "# Builtin"
let description["widen_wires"] = "# Widen wires"
let description["win_select_objects"] = "# Select objects"
let description["win_set_filter"] = "# Set object selection filter"
let description["win_set_select_class"] = "# Set classes to allow selection of"
let description["write_aif"] = "# Write bump locations and connected nets or ports"
let description["write_app_var"] = "# Write a script to set current variable values"
let description["write_blackbox_timing_script"] = "# Write out file(s) that contain BBT information of the current block"
let description["write_bound"] = ""
let description["write_budgets"] = "# Write io constraints for blocks based on the current budget constraints"
let description["write_busplans"] = "# Write out files and/or scripts related to busplan"
let description["write_cell_expansion"] = "# Write out a file containing cell expansion factors for use by other tools"
let description["write_checksum"] = "# Writes checksum of design"
let description["write_clock_trunks"] = "# Write a TCL script which regenerates the current clock trunk solution"
let description["write_create_clock_for_feedthroughs"] = ""
let description["write_def"] = "# Write a DEF file from the current design"
let description["write_default_pg_pattern"] = "# Write default PG patterns"
let description["write_dff_trace_filters"] = "# Write DFF filter pattern(s) to a file"
let description["write_dim"] = ""
let description["write_drc_error_data"] = "# Write error data to a file"
let description["write_ems_rules"] = "# Writes commands to create user-defined EMS rule/s into file."
let description["write_floorplan"] = "# Write floorplan"
let description["write_frame_options"] = "# Write frame view created options"
let description["write_gds"] = "# Write a Given Design in a library into a Gds file."
let description["write_hidden_app_var"] = ""
let description["write_inc_srsn_for_eco"] = "# write out srsn for all the blocks/list of blocks"
let description["write_io_constraints"] = "# write io constraints into a file based on the existing io driver placement data"
let description["write_lef"] = "# Write LEF file"
let description["write_lib_package"] = "# Creates an archive file for a library with all dependencies"
let description["write_macro_relative_location"] = "# Writes macro relative location constraint for shaping and placement"
let description["write_matching_types"] = "# write_matching_types"
let description["write_name_map"] = "# Write a name map file from the design"
let description["write_net_estimation_rules"] = "# Write script to recreate net estimation rules"
let description["write_oasis"] = "# Write a Given Design in a library into a Oasis file."
let description["write_parasitics"] = "# a block level write parasitics command"
let description["write_pin_constraints"] = "# Write pin/net constraints in design planning"
let description["write_placement"] = ""
let description["write_pt_checksum"] = "# Writes checksum for PT"
let description["write_rail_integrity_strategy"] = "# Write specific strategies defined by the setup command 'set_rail_integrity_strategy' to file"
let description["write_routes"] = "# Write Routes"
let description["write_rp_groups"] = "# write RP Group constraints"
let description["write_saif"] = "# write a Switching Activity Interchange Format file"
let description["write_sanity_check_point"] = "# Write sanity check point of a design"
let description["write_script"] = "# Write Tcl scripts for current design"
let description["write_sdc"] = "# Write constraints in Synopsys Design Constraints format"
let description["write_shadow_eco"] = "# write out script to duplicate the shadow objects on the original design"
let description["write_taps"] = "# Write taps currently defined to a file"
let description["write_tech_file"] = "# Write technology file"
let description["write_verilog"] = "# Write a Verilog file from the current design"
let description["write_virtual_pad_file"] = "# Output all existing virtual pads to a file"
let description["yield"] = "# Builtin"
let description["yieldto"] = "# Builtin"
let description["zlib"] = "# Builtin"
let description["ATC_UTILS::change_mode"] = ""
let description["ATC_UTILS::check_write_correlation_files_status"] = ""
let description["ATC_UTILS::collect_endpoints_reports"] = ""
let description["ATC_UTILS::decode_pt_executable_version"] = ""
let description["ATC_UTILS::execute_cmd"] = ""
let description["ATC_UTILS::find_slew_collector_script"] = ""
let description["ATC_UTILS::generate_diagnose_endpoints_cmd"] = ""
let description["ATC_UTILS::get_most_critical_slack_endpoints"] = ""
let description["ATC_UTILS::get_significant_digits"] = ""
let description["ATC_UTILS::make_named_file"] = ""
let description["ATC_UTILS::parse_diagnose_options"] = ""
let description["ATC_UTILS::print_file"] = ""
let description["ATC_UTILS::process_diagnose_tasks"] = ""
let description["CLOCK_PLANNING_GUI::clean_data"] = ""
let description["CLOCK_PLANNING_GUI::cluster_terms"] = ""
let description["CLOCK_PLANNING_GUI::compute_color"] = ""
let description["CLOCK_PLANNING_GUI::compute_min_max_metric_values"] = ""
let description["CLOCK_PLANNING_GUI::compute_ocv_slack_degradation"] = ""
let description["CLOCK_PLANNING_GUI::compute_uncached_clocks"] = ""
let description["CLOCK_PLANNING_GUI::create_menu"] = ""
let description["CLOCK_PLANNING_GUI::create_single_menu"] = ""
let description["CLOCK_PLANNING_GUI::create_tk_clock_trunk_planning_manual_planning"] = ""
let description["CLOCK_PLANNING_GUI::do_fix_violations"] = ""
let description["CLOCK_PLANNING_GUI::do_trunk_buffering"] = ""
let description["CLOCK_PLANNING_GUI::find_cyclic_path"] = ""
let description["CLOCK_PLANNING_GUI::fix_violations"] = ""
let description["CLOCK_PLANNING_GUI::get_bucket"] = ""
let description["CLOCK_PLANNING_GUI::get_clock_trunk_cells"] = ""
let description["CLOCK_PLANNING_GUI::get_constraint_mappings"] = ""
let description["CLOCK_PLANNING_GUI::get_endpoint_latency"] = ""
let description["CLOCK_PLANNING_GUI::get_grandmaster_clock"] = ""
let description["CLOCK_PLANNING_GUI::get_interesting_clocks"] = ""
let description["CLOCK_PLANNING_GUI::get_pin_or_port"] = ""
let description["CLOCK_PLANNING_GUI::get_position_or_object"] = ""
let description["CLOCK_PLANNING_GUI::get_selected_clock_pins"] = ""
let description["CLOCK_PLANNING_GUI::get_test_info"] = ""
let description["CLOCK_PLANNING_GUI::get_trunk_command"] = ""
let description["CLOCK_PLANNING_GUI::get_vm_object"] = ""
let description["CLOCK_PLANNING_GUI::get_vm_object_hi"] = ""
let description["CLOCK_PLANNING_GUI::gui_add_clock_trunk_buffer"] = ""
let description["CLOCK_PLANNING_GUI::gui_synthesize_clock_trunk"] = ""
let description["CLOCK_PLANNING_GUI::has_selected_clock_pins"] = ""
let description["CLOCK_PLANNING_GUI::has_violations"] = ""
let description["CLOCK_PLANNING_GUI::is_buffer"] = ""
let description["CLOCK_PLANNING_GUI::is_clock_enabled"] = ""
let description["CLOCK_PLANNING_GUI::is_in_block"] = ""
let description["CLOCK_PLANNING_GUI::is_inf"] = ""
let description["CLOCK_PLANNING_GUI::is_repeater"] = ""
let description["CLOCK_PLANNING_GUI::map"] = ""
let description["CLOCK_PLANNING_GUI::mark_fanin"] = ""
let description["CLOCK_PLANNING_GUI::mark_fanout"] = ""
let description["CLOCK_PLANNING_GUI::num_format"] = ""
let description["CLOCK_PLANNING_GUI::print_columns"] = ""
let description["CLOCK_PLANNING_GUI::print_underlined"] = ""
let description["CLOCK_PLANNING_GUI::reload_clock_trunk_vm"] = ""
let description["CLOCK_PLANNING_GUI::safe_add"] = ""
let description["CLOCK_PLANNING_GUI::switch_to_clock"] = ""
let description["CLOCK_PLANNING_GUI::synthesize_clock_trunks_for_blocks"] = ""
let description["CLOCK_PLANNING_GUI::update_min_max"] = ""
let description["CLOCK_PLANNING_GUI::update_ocv_slack_degradation"] = ""
let description["CLOCK_PLANNING_GUI::write_clock_trunks"] = ""
let description["CORR::Stats"] = ""
let description["CORR::addInfo"] = ""
let description["CORR::computeStats"] = ""
let description["CORR::correl_histogram"] = ""
let description["CORR::doCorrel"] = ""
let description["CORR::get_args"] = ""
let description["CORR::mergeFile"] = ""
let description["CORR::preprocess"] = ""
let description["CORR::printDash"] = ""
let description["CORR::printHeader"] = ""
let description["CORR::printMetric"] = ""
let description["CORR::printQorHeader"] = ""
let description["CORR::printQorMetric"] = ""
let description["CORR::printShortMetric"] = ""
let description["CORR::showDetails"] = ""
let description["CORR::showShortSummary"] = ""
let description["CORR::showSummary"] = ""
let description["CORR::showSummaryNew"] = ""
let description["CORR::splitFile"] = ""
let description["CORR::splitMergeFile"] = ""
let description["Customize::CleanupBrowser"] = ""
let description["Customize::HierBrowserSelChangedCB"] = ""
let description["Customize::addContextOptions"] = ""
let description["Customize::addSlctTargetsOptions"] = ""
let description["Customize::begin_group_op"] = ""
let description["Customize::begin_group_up"] = ""
let description["Customize::end_group_op"] = ""
let description["Customize::end_group_up"] = ""
let description["Customize::find_executable"] = ""
let description["Customize::get_all_nets"] = ""
let description["Customize::get_attribute"] = ""
let description["Customize::get_attribute_slct"] = ""
let description["Customize::get_hier_browser_class"] = ""
let description["Customize::get_path_groups"] = ""
let description["Customize::get_timing_paths"] = ""
let description["Customize::get_user_hier_list"] = ""
let description["Customize::gui_get_float_attribute"] = ""
let description["Customize::netscape_is_running"] = ""
let description["Customize::openDesignList"] = ""
let description["Customize::parse_url"] = ""
let description["Customize::read_files_callback"] = ""
let description["Customize::recover_user_locale"] = ""
let description["Customize::source_tcl_file"] = ""
let description["DP_UTIL::all_block_cells"] = ""
let description["DP_UTIL::all_io_pads"] = ""
let description["DP_UTIL::all_macro_cells"] = ""
let description["DP_UTIL::captureWindow"] = ""
let description["DP_UTIL::captureWindowSub"] = ""
let description["DP_UTIL::delClass"] = ""
let description["DP_UTIL::delObject"] = ""
let description["DP_UTIL::destroyChildren"] = ""
let description["DP_UTIL::disableWidgets"] = ""
let description["DP_UTIL::enableWidgets"] = ""
let description["DP_UTIL::errPopup"] = ""
let description["DP_UTIL::getAbstractCells"] = ""
let description["DP_UTIL::getAbstracts"] = ""
let description["DP_UTIL::getAllAbstractCells"] = ""
let description["DP_UTIL::getAllBlockInsts"] = ""
let description["DP_UTIL::getHierBoundGroups"] = ""
let description["DP_UTIL::getIOCellsOfPorts"] = ""
let description["DP_UTIL::getLoadFile"] = ""
let description["DP_UTIL::getPinOrPort"] = ""
let description["DP_UTIL::getPortsOfCells"] = ""
let description["DP_UTIL::getSaveFile"] = ""
let description["DP_UTIL::getSelBlocks"] = ""
let description["DP_UTIL::getSelCells"] = ""
let description["DP_UTIL::getSelDataPins"] = ""
let description["DP_UTIL::getSelHierBoundGroups"] = ""
let description["DP_UTIL::getSelIOCells"] = ""
let description["DP_UTIL::getSelMacros"] = ""
let description["DP_UTIL::getSelPorts"] = ""
let description["DP_UTIL::getSystemIcon"] = ""
let description["DP_UTIL::getWattrSettings"] = ""
let description["DP_UTIL::guiDesignCheck"] = ""
let description["DP_UTIL::hidePalette"] = ""
let description["DP_UTIL::invokePalette"] = ""
let description["DP_UTIL::isEnabled"] = ""
let description["DP_UTIL::isPaletteVisible"] = ""
let description["DP_UTIL::msgPopup"] = ""
let description["DP_UTIL::okCancel"] = ""
let description["DP_UTIL::raiseWin"] = ""
let description["DP_UTIL::removeFromList"] = ""
let description["DP_UTIL::setBalloonHelp"] = ""
let description["DP_UTIL::showBalloonHelp"] = ""
let description["DP_UTIL::showStack"] = ""
let description["DP_UTIL::sourceDebFile"] = ""
let description["DP_UTIL::utilPopup"] = ""
let description["DP_UTIL::vbind"] = ""
let description["DP_UTIL::vbindAll"] = ""
let description["DP_UTIL::vdel"] = ""
let description["DP_UTIL::vdump"] = ""
let description["DP_UTIL::vgen"] = ""
let description["DP_UTIL::warnPopup"] = ""
let description["EMS::actLOW"] = ""
let description["EMS::mergeColl"] = ""
let description["EMS::rptTim"] = ""
let description["EMS::rptWindow"] = ""
let description["EVR::convert_evr_tcl_to_icc"] = "# Converts EVR tcl code for ICC2 to ICC format."
let description["EVR::cut_wires_cell"] = "# Gets the wires inside the cell and saves/cuts/removes the wires."
let description["EVR::find_all_cell_locations"] = "# Returns list of all cells (full depth) in design with hierarchy, ref_name, origin, orientation, and optional boundary (string)"
let description["EVR::find_cell_hier"] = "# Returns list of all the matching cells with hierarchy, ref_name, origin, orientation, and optional boundary"
let description["EVR::find_cells"] = "# Returns list of all the matching cells with hierarchy, ref_name, origin, orientation, and optional boundary"
let description["EVR::find_inst"] = "# Returns list of all the matching cell instances with hierarchy, ref_name, origin, orientation, and optional boundary"
let description["EVR::get_cell_info"] = "# Returns the matching cell's info (hierarchy, ref_name, origin, orientation, boundary), otherwise 0 if not found"
let description["EVR::get_cell_poly"] = "# Returns polygon (geo_mask) of cell(s) provided. If multiple cells are listed, the polygons are combined (OR)"
let description["EVR::parse_netlist"] = "# Reads in a verilog (.v) netlist to map lower level nets to upper level nets. Requires array to store result"
let description["EVR::parse_pinlist"] = "# Takes in a pinlist (csv with boolean (0,1) in column 0, C4TM1 pad in column 1 and HIP net in column 2) and stores results in arrays. Boolean is a 1 to include line, otherwise line is ignored."
let description["EVR::place_cell"] = "# Places a cell that is in the current library into the current design"
let description["EVR::place_cell_auto"] = "# Places a cell.frame into the design. Finds existing cell in floorplan to determine coordinates"
let description["EVR::source_to"] = "# Sources a file and modifies coordinates of wires to specified cell or coordinates"
let description["GCR_DELAY_MATCH::additional_loop"] = ""
let description["GCR_DELAY_MATCH::calculate_formula"] = ""
let description["GCR_DELAY_MATCH::check_and_report_pass_result"] = ""
let description["GCR_DELAY_MATCH::cleanup"] = ""
let description["GCR_DELAY_MATCH::cleanup_data"] = ""
let description["GCR_DELAY_MATCH::clear_timing_start_points"] = ""
let description["GCR_DELAY_MATCH::delta_delay"] = ""
let description["GCR_DELAY_MATCH::delta_delay_length"] = ""
let description["GCR_DELAY_MATCH::do_ddr_lengthing_routing"] = ""
let description["GCR_DELAY_MATCH::do_delta_ddr_lengthing_routing"] = ""
let description["GCR_DELAY_MATCH::do_nets_timing_converge"] = ""
let description["GCR_DELAY_MATCH::do_unlen"] = ""
let description["GCR_DELAY_MATCH::enable_log"] = ""
let description["GCR_DELAY_MATCH::export_timing_start_points"] = ""
let description["GCR_DELAY_MATCH::get_a_and_b"] = ""
let description["GCR_DELAY_MATCH::get_achieve_pct"] = ""
let description["GCR_DELAY_MATCH::get_all_receiver_pins"] = ""
let description["GCR_DELAY_MATCH::get_avg_net_init_delay_length_value"] = ""
let description["GCR_DELAY_MATCH::get_corners"] = ""
let description["GCR_DELAY_MATCH::get_current_pass"] = ""
let description["GCR_DELAY_MATCH::get_detail_route_length"] = ""
let description["GCR_DELAY_MATCH::get_detail_route_length_gcr"] = ""
let description["GCR_DELAY_MATCH::get_detail_route_length_gcr_internal"] = ""
let description["GCR_DELAY_MATCH::get_lengthen_layer"] = ""
let description["GCR_DELAY_MATCH::get_log_file"] = ""
let description["GCR_DELAY_MATCH::get_match_bbox"] = ""
let description["GCR_DELAY_MATCH::get_net_init_delay_length_value"] = ""
let description["GCR_DELAY_MATCH::get_net_init_length_value"] = ""
let description["GCR_DELAY_MATCH::get_nets_beyond_pct"] = ""
let description["GCR_DELAY_MATCH::get_nets_delay_values"] = ""
let description["GCR_DELAY_MATCH::get_nets_for_lengthing"] = ""
let description["GCR_DELAY_MATCH::get_nets_highest_delay_delta_pct"] = ""
let description["GCR_DELAY_MATCH::get_real_target_pct"] = ""
let description["GCR_DELAY_MATCH::get_start_point_export_file"] = ""
let description["GCR_DELAY_MATCH::get_target_pct"] = ""
let description["GCR_DELAY_MATCH::get_timing_log_file"] = ""
let description["GCR_DELAY_MATCH::get_timing_report_file"] = ""
let description["GCR_DELAY_MATCH::get_timing_start_points"] = ""
let description["GCR_DELAY_MATCH::get_tmp_dir"] = ""
let description["GCR_DELAY_MATCH::get_working_nets"] = ""
let description["GCR_DELAY_MATCH::incr_match_index"] = ""
let description["GCR_DELAY_MATCH::init_formula"] = ""
let description["GCR_DELAY_MATCH::init_match_bbox"] = ""
let description["GCR_DELAY_MATCH::init_tmp_dir"] = ""
let description["GCR_DELAY_MATCH::lmax"] = ""
let description["GCR_DELAY_MATCH::lmin"] = ""
let description["GCR_DELAY_MATCH::match_index"] = ""
let description["GCR_DELAY_MATCH::max_string_length"] = ""
let description["GCR_DELAY_MATCH::puts_log"] = ""
let description["GCR_DELAY_MATCH::record_net_init_delay_length_values"] = ""
let description["GCR_DELAY_MATCH::report_nets_timing_result"] = ""
let description["GCR_DELAY_MATCH::report_pass_result"] = ""
let description["GCR_DELAY_MATCH::report_user_result"] = ""
let description["GCR_DELAY_MATCH::retrieve_nets_timing_result"] = ""
let description["GCR_DELAY_MATCH::set_achieve_pct"] = ""
let description["GCR_DELAY_MATCH::set_corners"] = ""
let description["GCR_DELAY_MATCH::set_current_pass"] = ""
let description["GCR_DELAY_MATCH::set_lengthen_layer"] = ""
let description["GCR_DELAY_MATCH::set_nets_delay_values"] = ""
let description["GCR_DELAY_MATCH::set_target_pct"] = ""
let description["GCR_DELAY_MATCH::set_timing_start_points"] = ""
let description["GCR_DELAY_MATCH::set_ur_uc"] = ""
let description["GCR_DELAY_MATCH::set_working_nets"] = ""
let description["GCR_DELAY_MATCH::start_nets_delay_match"] = ""
let description["GCR_DELAY_MATCH::update_delay_value_on_fly"] = ""
let description["GCR_DELAY_MATCH::update_formula"] = ""
let description["GCR_DELAY_MATCH::update_formula_by_pass"] = ""
let description["ICC2_CLOCK_TUNING::insert_clock_tuning_cells"] = ""
let description["InputConstChecker::write_checksum_internal"] = ""
let description["Misc::appendArgToCmd"] = ""
let description["Misc::appendArgsAndEval"] = ""
let description["Misc::appendArgsFromArray"] = ""
let description["Misc::appendBoolArgsFromArray"] = ""
let description["Misc::asClct"] = ""
let description["Misc::asSlctList"] = ""
let description["Misc::clearTransactionCache"] = ""
let description["Misc::computeChangeOptionInfo"] = ""
let description["Misc::copyNetlists"] = ""
let description["Misc::create_timing_path_clct"] = ""
let description["Misc::getSetTransactionCache"] = ""
let description["Misc::getTransactionCache"] = ""
let description["Misc::hasDesign"] = ""
let description["Misc::identity"] = ""
let description["Misc::init_window"] = ""
let description["Misc::isClct"] = ""
let description["Misc::normalize_bool"] = ""
let description["Misc::removeNetlists"] = ""
let description["Misc::reportSelection"] = ""
let description["Misc::setTransactionCache"] = ""
let description["Misc::setTransactionCallback"] = ""
let description["Misc::silence"] = ""
let description["Misc::trace1"] = ""
let description["Misc::traceIn"] = ""
let description["NYPD::CheckLegality"] = ""
let description["NYPD::DrawGridMap"] = ""
let description["NYPD::ECOLegalization"] = ""
let description["NYPD::GetUserDefineBBox"] = ""
let description["NYPD::GuiBrowseAppOptions"] = ""
let description["NYPD::GuiCheckRules"] = ""
let description["NYPD::GuiDefineExtBBox"] = ""
let description["NYPD::GuiRemoveAnnoations"] = ""
let description["NYPD::GuiSetAppOption"] = ""
let description["NYPD::GuiShowEditAppOptions"] = ""
let description["NYPD::GuiShowGridMap"] = ""
let description["NYPD::GuiShowMapIndex"] = ""
let description["NYPD::GuiToggleUseFullChip"] = ""
let description["NYPD::Toolbox"] = ""
let description["PGR::get_comp_pattern_commands"] = ""
let description["PGR::get_wire_pat_name_list"] = ""
let description["PGR::get_wire_pattern_commands"] = ""
let description["PGR::process_wire_pat_dir_layer"] = ""
let description["PGR::process_wire_pat_para"] = ""
let description["PGR::process_wire_pat_setting"] = ""
let description["PGR::test_multiple_layer"] = ""
let description["PTEP::dump_groupTbl"] = ""
let description["PTEP::parse_args"] = ""
let description["PTEP::parse_correl_file"] = ""
let description["PTEP::parse_file"] = ""
let description["PTEP::summarize_groups"] = ""
let description["PTEP::summarize_one_group"] = ""
let description["PTEP::wns_percentage"] = ""
let description["Qtcl::adjustCreateDialogOptions"] = ""
let description["Qtcl::createExpander"] = ""
let description["Qtcl::createHExpander"] = ""
let description["Qtcl::createVExpander"] = ""
let description["Qtcl::executeWithStandardCursor"] = ""
let description["Qtcl::filter_copy_paste"] = ""
let description["Qtcl::keycode"] = ""
let description["Qtcl::pretty_dump_print"] = ""
let description["above_fc::above_fc"] = "# Flow to create Above FC hierarchy"
let description["above_fc::build_hier"] = "# Build Above FC hierarchy"
let description["above_fc::c4info_to_die_file_entry"] = ""
let description["above_fc::calc_dimensions"] = "# Calculate Top hier design, EDM, Etch rings, shim dimensions based on SoC data"
let description["above_fc::create_edm"] = "# Create edm"
let description["above_fc::create_shim"] = "# Create shim"
let description["above_fc::fill_shim"] = "# Fill shim with cells"
let description["above_fc::insert_dic_cells"] = "# Insert DIC cells"
let description["above_fc::process_die_file"] = "# Takes a die file and returns a list of bumps with attributes from file. Also takes translation and rotation inputs. Saves results in arrays c4Info: x y \"N\" net grouping groupingType probe via color type netExt netInt pi_siu tsv psb layer_type"
let description["above_fc::propagate_bumps"] = "# Propagate bumps"
let description["above_fc::read_die_file_cells"] = "# Reads in a die file and places the bumps as cells into the specified cell."
let description["auto_mkindex_parser::cleanup"] = ""
let description["auto_mkindex_parser::command"] = ""
let description["auto_mkindex_parser::commandInit"] = ""
let description["auto_mkindex_parser::fullname"] = ""
let description["auto_mkindex_parser::hook"] = ""
let description["auto_mkindex_parser::indexEntry"] = ""
let description["auto_mkindex_parser::init"] = ""
let description["auto_mkindex_parser::mkindex"] = ""
let description["auto_mkindex_parser::slavehook"] = ""
let description["boo::EOUT"] = ""
let description["boo::IOUT"] = ""
let description["c4bump::connect_hierarchical_pins"] = "# Create ports/pins down the hierarchy as needed and connect them."
let description["c4bump::generate_c4_bump_files"] = "# Write out C4 bump files."
let description["c4bump::hier_connect_net_to_pin"] = "# Make hierachical connection between net and leaf pins.  Hierarchical ports are punched as needed."
let description["c4bump::write_c4_bumps"] = ""
let description["c4bump::write_loc_for_field"] = "# write loc file from open ICC CEL"
let description["cleanup::change_wire_owner_net_to_match_shorted"] = "# Changes Wire Owner-Net to match Wire that it is Shorted to"
let description["cleanup::change_wire_via_owner_net_to_match_shorted"] = "# Changes Wire/Via Owner-Net to match Wire/Via that it is Shorted to"
let description["cleanup::convert_rectangles_to_wires"] = "# Converts Rectangle Shapes to Wire Path-Type"
let description["cleanup::convert_wires_to_routing_corridors"] = "# Converts Wires to Routing Corridors"
let description["cleanup::create_terminals_matching_child_terminals"] = "# Creates Terminals matching Child Terminals"
let description["cleanup::create_terminals_matching_pins"] = "# Creates Terminals matching Pins"
let description["cleanup::create_terminals_matching_wires"] = "# Creates Terminals matching Wires"
let description["cleanup::remove_duplicate_vias"] = "# Merges vias by net or by selection, assuming complete selected set "
let description["cleanup::remove_null_shape_objects"] = "# Remove NULL Shape Interconnect Objects"
let description["clk_bu::bbox_is_overlapping"] = "# Returns the overlap between a bbox1 and bbox2. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh} "
let description["clk_bu::bbox_of_objects"] = "# Returns the box of a collection of pins/ports/cells"
let description["clk_bu::check_glbdrv_legs"] = "# Check if glbdrv are in M5 site rows"
let description["clk_bu::clksrc_type"] = ""
let description["clk_bu::closest_site"] = ""
let description["clk_bu::common_cells"] = ""
let description["clk_bu::find_closest_site"] = ""
let description["clk_bu::get_bu_cells"] = ""
let description["clk_bu::get_cell_bbox"] = ""
let description["clk_bu::get_cells_info"] = ""
let description["clk_bu::get_cells_not_on_site"] = ""
let description["clk_bu::get_clk_bu_cells"] = ""
let description["clk_bu::get_clk_bu_pins"] = ""
let description["clk_bu::get_glbdrv_bu"] = "# Return bottom up DOP for ctmesh and cts cells"
let description["clk_bu::get_hierarchical_pin"] = ""
let description["clk_bu::get_overlapped_cells"] = ""
let description["clk_bu::get_overlapped_hips"] = ""
let description["clk_bu::glbdrv_driver"] = ""
let description["clk_bu::glbdrv_receivers"] = ""
let description["clk_bu::is_cell_bbox_in_die"] = "# Check if the bbox is inside design boundary"
let description["clk_bu::is_clock_cell"] = ""
let description["clk_bu::is_glbdrv_on_site"] = ""
let description["clk_bu::is_skipped_hier"] = ""
let description["clk_bu::legalize_hard_macros"] = "# Legalize hard macros"
let description["clk_bu::parse_unit_per_partition"] = ""
let description["clk_bu::print_clk_bu_feedback"] = "# Print glbdrv bottom up feedback file"
let description["clk_bu::print_clk_bu_spec_file"] = "# Print current bottom up spec"
let description["clk_bu::print_file_header"] = ""
let description["clk_bu::separate_cells"] = ""
let description["clk_bu::skip_std_cells"] = ""
let description["clk_bu::support_upf"] = ""
let description["clk_bu::wrip_off_pushdown_hier"] = ""
let description["clkpush::bbox_get_center"] = ""
let description["clkpush::break_assign_statements_for_pushdown"] = ""
let description["clkpush::cleanup_connectivity"] = ""
let description["clkpush::clk_decode_snps_version"] = ""
let description["clkpush::clk_getvar"] = ""
let description["clkpush::clk_load"] = ""
let description["clkpush::clk_print_msg"] = ""
let description["clkpush::clk_push"] = ""
let description["clkpush::clk_push_one_level"] = ""
let description["clkpush::clk_push_rename_nets"] = ""
let description["clkpush::clk_remove_pushdown_suffixes"] = ""
let description["clkpush::clk_snps_version_at_least"] = ""
let description["clkpush::clock_port_get_rtl_port_name"] = ""
let description["clkpush::create_clock_units"] = ""
let description["clkpush::create_clock_units_for_block"] = ""
let description["clkpush::create_clock_units_recursive"] = ""
let description["clkpush::cut_clock_routing_over_slaves"] = ""
let description["clkpush::disconnect_unrouted_clk_shadow_nets"] = ""
let description["clkpush::filter_pushdown_nets"] = ""
let description["clkpush::find_clock_inputs_for_remapping"] = ""
let description["clkpush::find_in_order_blocks"] = ""
let description["clkpush::find_outthrough_clock_routing"] = ""
let description["clkpush::fix_ls_verilog_violations"] = ""
let description["clkpush::force_pin_direction"] = ""
let description["clkpush::get_assign_mappings"] = ""
let description["clkpush::get_clk_dop_wrappers"] = ""
let description["clkpush::get_clk_unit_hiers_for_block"] = ""
let description["clkpush::get_clk_unit_rtl_port_name"] = ""
let description["clkpush::get_clock_cell_mi_mappings"] = ""
let description["clkpush::get_master_slaves_for_clocks"] = ""
let description["clkpush::get_partition_from_point"] = ""
let description["clkpush::get_point_in_hier"] = ""
let description["clkpush::load_data"] = ""
let description["clkpush::map_clock_inputs"] = ""
let description["clkpush::mark_clock_ports"] = ""
let description["clkpush::mark_dops_with_clock_type"] = ""
let description["clkpush::merge_clk_unit"] = ""
let description["clkpush::merge_clk_units_recursive"] = ""
let description["clkpush::print_clk_unit_info_for_block"] = ""
let description["clkpush::pushdown_clock_network"] = "# Push down clock network"
let description["clkpush::reconnect_and_port_preserve_pins"] = ""
let description["clkpush::reconnect_and_port_unrouted_clk_shadow_nets"] = ""
let description["clkpush::reconnect_clk_in_partition"] = ""
let description["clkpush::reconnect_mi_merged"] = ""
let description["clkpush::remove_clock_data"] = ""
let description["clkpush::remove_clock_units_from_block"] = ""
let description["clkpush::remove_syn_iso_cell"] = ""
let description["clkpush::remove_syn_iso_from_cb2_ls"] = ""
let description["clkpush::rename_clock_unit_nets"] = ""
let description["clkpush::update_clkbuilder_upf_data"] = ""
let description["clkpush::update_clkbuilder_upf_data_for_block"] = ""
let description["clkpush::update_connectivity"] = ""
let description["clkpush::write_and_create_units"] = ""
let description["clock::check_clock_cells"] = "# Returns the clock cells"
let description["clock::fix_clock_cell_vt"] = "# Swaps the clock cells to the vt defined by G_VT_SP_PREFIX"
let description["clock::get_clock_cells"] = "# Returns the clock cells"
let description["clock::replace_nonclock_cells"] = "# Swaps the non clock cells with clock cells"
let description["clock::resize_cells_to_valid_size"] = "# Swaps the dont_use clock cells with clock cells"
let description["coll::collection_to_list"] = ""
let description["coll::get_and_collection"] = "# Returns the logical AND of 2 or more collections."
let description["coll::get_and_not_collection"] = "# Returns the logical AND NOT of a collection with 1 or more collections."
let description["coll::get_or_collection"] = "# Returns the logical OR of 2 or more collections."
let description["coll::is_a_collection"] = "# Returns whether the object is a collection type."
let description["coll::is_in_collection"] = "# Returns whether a given object is in a collection."
let description["coll::is_same_collection"] = "# Returns whether 2 collections contain the same elements."
let description["collgen::add_net"] = "# adds net if it does not already exist in the database"
let description["collgen::add_port"] = "# adds port if does not already exist"
let description["collgen::add_port_and_net"] = "# adds port and net if either does not already exist and connects them"
let description["collgen::cell_is_supernet_transparent"] = ""
let description["collgen::cgn_connect_net"] = "# connects pin to net after disconnecting current connection (if any)"
let description["collgen::check_cell_type"] = ""
let description["collgen::clean_out_buffer"] = ""
let description["collgen::cleanup_port"] = "# Clean out the connections and restitch."
let description["collgen::cleanup_port_recursive_trace"] = ""
let description["collgen::connect_port"] = "# Hookup the new repeaters and connectivity."
let description["collgen::connect_port_recursive_trace"] = ""
let description["collgen::copy_lib_and_refs"] = "# Copy Current Lib to Empty Lib with references"
let description["collgen::disconnect_lower_block_tie_off_ports"] = ""
let description["collgen::dump_floorplan"] = "# Wrapper proc around write_floorplan command."
let description["collgen::dump_pin_constraints_for_selected"] = "# Writes Topological Pin Constraints for selected"
let description["collgen::dump_routes"] = "# Wrapper for Writing Routes in ICC2 or ICC1 format"
let description["collgen::dump_terminals_per_block"] = "# Dump out terminals per block from the hierarchy of current design."
let description["collgen::exec_command"] = ""
let description["collgen::extract_modules_from_verilog_file"] = ""
let description["collgen::generate_formality_do_file"] = "# Generate formality do file for equivalence-checking between input/ouput netlists"
let description["collgen::generate_ft_driver_collateral"] = ""
let description["collgen::generate_lec_commands_per_block"] = ""
let description["collgen::generate_pushdown_hip_list"] = ""
let description["collgen::get_net_segments"] = ""
let description["collgen::get_tail_connectivity"] = "# Trace the ports, pins, and nets of topology down the hierarchy for given port(s)."
let description["collgen::get_tail_connectivity_recursive"] = ""
let description["collgen::is_abutted"] = ""
let description["collgen::read_wrapper_shadow_eco"] = "# read_shadow_eco parser for list of nets"
let description["collgen::reconnect_lower_block_tie_off_ports"] = ""
let description["collgen::reorder_port_order_for_lec_"] = ""
let description["collgen::set_ft_driver_attributes"] = ""
let description["collgen::set_td_type"] = "# Mark/Unmark td_type on all the ports, pins, and nets of topology down the hierarchy for given port(s)."
let description["collgen::set_td_type_recursive"] = ""
let description["collgen::split_blocks"] = "# Split Blocks into a Copied Library"
let description["collgen::trace_between"] = ""
let description["collgen::trace_from"] = ""
let description["collgen::trace_ft_driver_for_all_pins"] = ""
let description["collgen::trace_ft_driver_for_cell"] = ""
let description["collgen::trace_ft_driver_for_pinnames_"] = ""
let description["collgen::trace_ft_driver_for_pins_"] = ""
let description["collgen::write_clock_types_file"] = ""
let description["collgen::write_clock_types_file_from_attr_file"] = ""
let description["collgen::write_die_file_info"] = ""
let description["collgen::write_dop_map_file"] = ""
let description["collgen::write_feedthru_ports"] = ""
let description["collgen::write_ft_driver"] = ""
let description["collgen::write_ft_port_pair_"] = ""
let description["collgen::write_generic_dont_touch"] = ""
let description["collgen::write_hier_pg_def"] = "# Write HIERARCHICAL DEF for RedHawk Analysis"
let description["collgen::write_logical_ports"] = ""
let description["collgen::write_macro_shell_verilog"] = "# generates shell (interface) verilog for macros in the design"
let description["collgen::write_pg_def_for_block"] = "# Write PG DEF for block in a directory"
let description["collgen::write_pg_ports"] = ""
let description["collgen::write_shell_verilog"] = ""
let description["collgen::write_shell_verilog_for_design_library"] = ""
let description["collgen::write_syndp_inputs"] = "# Generate SYNDP inputs from ICC2-DP database"
let description["collgen::write_td_subset_cells"] = "# Write subset of TD cell placements in ICC2."
let description["collgen::write_td_subset_connectivity"] = "# Write out subset collateral for ICC2."
let description["collgen::write_td_subset_routes"] = "# Write out subset collateral routes in ICC2."
let description["collgen::write_track_region_config"] = ""
let description["collgen::write_wrapper_shadow_eco"] = "# write_shadow_eco parser for list of nets"
let description["common::check_error_counter"] = "# Checks error counter and prints the message and fails if counter > 0"
let description["common::close_log"] = ""
let description["common::disable_error_counter"] = ""
let description["common::enable_error_counter"] = ""
let description["common::format_msg"] = ""
let description["common::get_caller"] = ""
let description["common::open_log"] = ""
let description["common::print"] = ""
let description["comp::remove_icc_cmds_from_sdc_file"] = "# Translates an ICC sdc file to ICC2 commands - removing sdc commands not supported by icc2 sdc reading"
let description["comp::translate_icc2_orientations"] = "# Translates ICC2 orientations to ICC format"
let description["comp::translate_icc2_vias_file"] = "# Translates an ICC routing file to ICC2 commands"
let description["comp::translate_icc_dc_dont_touch_cells_file"] = "# Translates dc_dont_touch_cells file to ICC2 commands"
let description["comp::translate_icc_place_file"] = "# Translates an ICC placement file to ICC2 commands"
let description["comp::translate_icc_route_file"] = "# Translates an ICC routing file to ICC2 commands"
let description["comp::translate_icc_sdc_file"] = "# Translates an ICC sdc file to ICC2 commands - removing sdc commands not supported by icc2 sdc reading"
let description["comp::translate_icc_track_file"] = "# Translates an ICC track file to ICC2 commands"
let description["ctm::balance_levels"] = "# Returns clock cells of all the levels from clk net or port"
let description["ctm::check_lib_constraints"] = "# Setting library constraints"
let description["ctm::clone_clock_gadget"] = "# clone the logic inside a hierarchical cell"
let description["ctm::ctmesh_save_step"] = ""
let description["ctm::disable_multi_clocks"] = "# Returns clock cells of all the levels from clk net or port"
let description["ctm::duplicate_flop_chain"] = "# "
let description["ctm::duplicate_instance"] = "# Duplicates an instance; need to be enhanced for multiple outputs"
let description["ctm::get_clock_cells"] = "# Returns the clock cells of a ctmesh clock or group"
let description["ctm::get_clock_leaf_pins"] = "# Returns the clock receiver pins of a ctmesh clock or group"
let description["ctm::get_clock_leaves"] = "# Returns the clock receiver cells of a ctmesh clock or group"
let description["ctm::get_clock_nets"] = "# Returns the nets of a ctmesh clock or group"
let description["ctm::get_clock_var"] = "# Returns the value for a setvar: clock specific if defined else global"
let description["ctm::get_exceptions"] = "# Returns ctmesh stopping cells/nets/pins collection"
let description["ctm::get_grid_nets"] = "# Returns all grid nets for a specific clock"
let description["ctm::get_gridclk"] = "# Gets the clocks using clk_utils and returns the string"
let description["ctm::get_non_buffer_driver"] = "# Returns the driver pin, skipping the buffer tree, for a given pin-name"
let description["ctm::nominalize_clock_cells"] = "# prints ideal latency vs real latency table"
let description["ctm::remove_dangling_clock_cells"] = "# prints ideal latency vs real latency table"
let description["ctm::report_clock_levels"] = "# Sorts the clock tree and set ctm_level"
let description["ctm::set_exceptions"] = "# Set exceptions for ctmesh clocks"
let description["ctm::set_ideal_latency"] = "# Calculate the ideal latency and save it as a property"
let description["ctm::set_lib_constraints"] = "# Setting library constraints"
let description["ctm::set_spine_net_timing"] = "# prints ideal latency vs real latency table"
let description["ctm::set_stop_pins"] = "# Set stopping pins"
let description["ctm::stamp_gridnet_delays"] = "# prints ideal latency vs real latency table"
let description["ctm::write_cell_delay_report"] = "# Get CTMESH stopping pins"
let description["ctm::write_latency_diff_report"] = "# prints ideal latency vs real latency table"
let description["ctm::write_latency_expanded_report"] = "# prints ideal latency vs real latency table"
let description["ctm::write_net_delay_report"] = "# Get CTMESH stopping pins"
let description["ctm::write_transition_report"] = "# prints ideal latency vs real latency table"
let description["cts::add_cell_spacing_rule"] = ""
let description["cts::compute_partition_latency_targets"] = "# Computes the latency targets for partitions at the FC level and writes out <parition_name>_latency_target.tcl"
let description["cts::create_par_latency_template"] = "# Create partition latency template files with latency numbers "
let description["cts::expand_refs"] = "# Expands the clock references"
let description["cts::generate_latency_target_reports"] = "# Computes the latency targets for partitions at the FC level and writes out <parition_name>_latency_target.tcl"
let description["cts::get_clk_delay_per_par"] = "# Returns clock delay per partition"
let description["cts::get_par_spec_latency"] = "# Returns the spec latency for the specified clock and partition"
let description["cts::remove_cell_spacing_rule"] = ""
let description["cts::set_constrainted_clock_max_transition"] = "# "
let description["dfm::get_lib_base_paths"] = ""
let description["dfm::get_runset_from_env"] = ""
let description["dfm::get_runset_path_from_env"] = ""
let description["dfm::print_tool_vars"] = ""
let description["dfm::restore_icv"] = ""
let description["dfm::restore_icwbev"] = ""
let description["dfm::restore_tool"] = ""
let description["dfm::save_run_files"] = ""
let description["dfm::setup_icv"] = ""
let description["dfm::setup_icwbev"] = ""
let description["dfm::setup_rundir"] = ""
let description["dfm::setup_tmpdir"] = ""
let description["dfm::setup_tool"] = ""
let description["dfm::setup_workdir"] = ""
let description["dmm::create_ddh_config"] = "# Creates DDH mismatch config"
let description["dmm::report_ddh"] = "# Reports DDH in design"
let description["dmm::set_ddh_config"] = "# Set a DDH mismatch config"
let description["dnd::_load"] = ""
let description["dop::create_dop_strips_and_trunks"] = "# Create dop strips and trunks."
let description["dop::create_new_dops"] = "# Inserts DOPs in the design. "
let description["dop::get_dop_clocks"] = "# Returns the dop clocks"
let description["dop::get_dop_output_nets"] = "# Returns the dop cells for a clock based on G_CLOCK_TYPE"
let description["dop::get_dops"] = "# Returns the dop cells for a clock based on G_CLOCK_TYPE"
let description["dop::get_groups_of_clock"] = "# Returns the DOP groups of a DOP clk"
let description["dop::get_master_dop_pin"] = "# Returns the master dop pin"
let description["dop::get_ref_clock"] = "# Returns the reference clock of a DOP group"
let description["dop::insert_dop_via_ladder"] = "# Get the available tracks across the bounding box ignore shielding"
let description["dop::legalize_dops"] = "# Legalize the DOP cells"
let description["dop::read_clock_types"] = "# Reads the clock_types.tcl file and sets the design attributes"
let description["dop::reconnect_dop_taps"] = "# Reconnects the dop taps to the closest dop"
let description["dop::shield_dop_nets"] = "# Shields the dop nets"
let description["dop::snap_dops_to_m5_pg_grid"] = "# snaps edges of the DOPS to the PG grid so that m5 pins are on track."
let description["dop::sort_by_location"] = "# Sorts the dops by location"
let description["dop::update_dop_outnet_names"] = "# updates design attribute which has DOP out net names based on DOP pins"
let description["dp_notifier::attach"] = ""
let description["dp_notifier::detach"] = ""
let description["dp_notifier::notify"] = ""
let description["draw::add_text"] = "# Add text annotation"
let description["draw::clear"] = "# Clear the gui drawings"
let description["draw::draw_alignment_edge"] = "# Draw edge alignment for specified layer "
let description["draw::draw_bbox"] = "# Draw a rectangular bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["draw::draw_edge"] = "# draw edge info"
let description["draw::draw_line"] = "# Draw a line between 2 points. The points format is {{x1 y1} {x2 y2}}"
let description["draw::draw_polygon"] = "# Draw a polygon. The points format is {{xl yl} {x2 y2} ... {x1 y1}}"
let description["draw::draw_routing_track"] = "# draw routing tracks"
let description["draw::draw_voltage_area"] = "# Draw voltage area"
let description["dtDfm::V0_328_vss_fixing"] = "# ::dtDfm::V0_328_vss_fixing"
let description["dtDfm::V0_328_vss_fixing_writeuin"] = ""
let description["dtDfm::copyFromSTMToTop"] = ""
let description["dtDfm::create_fill_vias"] = ""
let description["dtDfm::delete_all_fill"] = ""
let description["dtDfm::dummy__"] = ""
let description["dtDfm::fill_base_layer"] = "# ::dtDfm::fill_base_layer -layer poly "
let description["dtDfm::fill_base_layer_writeuin"] = ""
let description["dtDfm::fill_metal_icv"] = "# ::dtDfm::fill_metal_icv -cellname abc -viewname -lnf -techname 1272.0 -layer metal2 -offset 0.012 -pattern VSS_DUMMY:0.028B:0.024:VSS_DUMMY:0.038C"
let description["dtDfm::fill_metal_icv_checkcell"] = ""
let description["dtDfm::fill_metal_icv_end"] = ""
let description["dtDfm::fill_metal_icv_get_tech"] = ""
let description["dtDfm::fill_metal_icv_init"] = "# ::dtDfm::fill_metal_icv -cellname abc"
let description["dtDfm::fill_metal_icv_print_error"] = ""
let description["dtDfm::fill_metal_icv_print_info"] = ""
let description["dtDfm::fill_metal_icv_readresults"] = ""
let description["dtDfm::fill_metal_icv_run_streamlined"] = "# ::dtDfm::fill_metal_icv -layer {metal1 metal2 metal3 ...} "
let description["dtDfm::fill_metal_icv_runflow"] = ""
let description["dtDfm::fill_metal_icv_saveas"] = ""
let description["dtDfm::fill_metal_icv_streamlined_writeuin"] = ""
let description["dtDfm::fill_metal_icv_write_break_pattern_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_cells_list_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_density_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_kor_options_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_kors_to_uin_whitebox_mode"] = ""
let description["dtDfm::fill_metal_icv_write_output_options_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_pattern_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_region_grids_option_value_pair_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_region_grids_to_uin"] = ""
let description["dtDfm::fill_metal_icv_write_transition_pattern_to_uin"] = ""
let description["dtDfm::fill_metal_icv_writeuin"] = ""
let description["dtDfm::fill_via_icv"] = "# ::dtDfm::fill_via_icv -layer via2"
let description["dtDfm::fill_via_icv_get_net_name_list"] = ""
let description["dtDfm::fill_via_icv_old"] = "# ::dtDfm::fill_via_icv_old -cellname abc -viewname -lnf techname 1272.0 -layer via2"
let description["dtDfm::fill_via_icv_runflow"] = ""
let description["dtDfm::fill_via_icv_write_hookup_regions_to_uin"] = ""
let description["dtDfm::fill_via_icv_writeuin"] = ""
let description["dtDfm::fill_via_icv_writeuin_vfill_layers"] = ""
let description["dtDfm::fix_v0pax_dfmg"] = "# ::dtDfm::fix_v0pax_dfmg -layer via1"
let description["dtDfm::fix_v0pax_dfmg_writeuin"] = ""
let description["dtDfm::fix_vcx250"] = "# ::dtDfm::fix_vcx250 -layer via1"
let description["dtDfm::fix_vcx250_writeuin"] = ""
let description["dtDfm::getPeriodFromPattern"] = ""
let description["dtDfm::get_cist_cmd_info"] = ""
let description["dtDfm::get_pxl_ply"] = ""
let description["dtDfm::interrupted"] = ""
let description["dtDfm::is_dg_layer"] = ""
let description["dtDfm::is_run_mode"] = ""
let description["dtDfm::is_via_layer"] = ""
let description["dtDfm::is_via_layer_by_name"] = ""
let description["dtDfm::keylexist"] = ""
let description["dtDfm::keylget"] = ""
let description["dtDfm::keylset"] = ""
let description["dtDfm::lremove"] = ""
let description["dtDfm::powerhookup"] = "# ::dtDfm::powerhookup"
let description["dtDfm::powerhookup_writeuin"] = ""
let description["dtDfm::powervia12dg"] = "# ::dtDfm::powervia12dg"
let description["dtDfm::powervia12dg_writeuin"] = ""
let description["dtDfm::read_stm"] = "# ::dtDfm::read_stm -from_cell test_fill -to_cell test -layers {metal1 metal2 metal3} ... "
let description["dtDfm::rename_nets"] = "# ::dtDfm::rename_mw_nets "
let description["dtDfm::rename_nets_writeuin"] = ""
let description["dtDfm::reset_metal_fill_defaults_icv"] = ""
let description["dtDfm::reset_via_fill_defaults_icv"] = ""
let description["dtDfm::runFillFlow"] = ""
let description["dtDfm::set_metal_fill_defaults_icv"] = "# ::dtDfm::set_metal_fill_defaults_icv -layers {metal1 meta2}"
let description["dtDfm::set_via_fill_defaults_icv"] = "# ::dtDfm::set_via_fill_defaults_icv -layers {via1 via2 ...} "
let description["dtDfm::upsz_via"] = "# ::dtDfm::upsz_via -layer via1"
let description["dtDfm::upsz_via_writeuin"] = ""
let description["dtDfm::wait_on_pds_job"] = ""
let description["dtDfm::writeKORsToUIN"] = ""
let description["dtDfm::writeRegionGrids"] = ""
let description["dtDfm::write_plys_to_uin"] = ""
let description["eco::backup_changelist"] = "# Performs a backup of the ECO change for reference"
let description["eco::backup_preeco_nlib"] = "# Performs a backup the nlib prior to applying the ECO change"
let description["eco::capture_cell_changes"] = "# Capture newly added or moved cells from the ECO change"
let description["eco::checkpoint_save_and_report"] = "# Peforms incremental saves and report generation during ECO flow steps"
let description["eco::connect_ps_cells"] = ""
let description["eco::find_nearest_ps_cell"] = ""
let description["eco::get_added_cells"] = "# Returns the collection of cells added by the ECO"
let description["eco::get_added_or_modified_cells"] = "# Returns the collection of cells added or modified by the ECO"
let description["eco::get_modified_cells"] = "# Returns the collection of cells modified by the ECO"
let description["eco::get_variant_cells"] = "# Returns the collection of cells with variant changes during ECO"
let description["eco::insert_power_switches"] = "# Proc to add ps cells in boundary"
let description["eco::insert_ps_around_rp"] = "# Proc to add ps cells around RP groups"
let description["eco::reset_flow"] = "# Resets all the stages of the ECO flow."
let description["eco::reset_identify_eco_attributes"] = "# Resets all ECO-related attributes from prior ECO (or PTLR) runs"
let description["eco::set_run_tag"] = "# Initializes the unique run tag for the current ECO run"
let description["eco::write_history_file"] = "# Writes the ECO run progression history showing all previous ECO runs applied"
let description["fcde_dm::NflTclFindTheFullPath"] = ""
let description["fcde_dm::load_udmpp_connan_tcl_files"] = ""
let description["fcde_dm::load_udmpp_libs"] = ""
let description["fcde_dm::load_udmpp_predecessors"] = ""
let description["fcde_dm::load_udmpp_regression_libs"] = ""
let description["fcde_dm::load_udmpp_tcl_files"] = ""
let description["fevcheck::generate_lec_do_file"] = "# Generate formality do file for equivalence-checking between input/ouput netlists/upf"
let description["file::append"] = ""
let description["file::cmp_mtime"] = ""
let description["file::cp_files"] = ""
let description["file::create_icc_cmd_file"] = "# ::file::create_icc_cmd_file - Framework to create an ICC command file"
let description["file::create_icc_setup_cmd_file"] = "# ::file::create_icc_setup_cmd_file - Create an ICC setup file"
let description["file::diff"] = ""
let description["file::dir_diff"] = ""
let description["file::is_line_comment"] = ""
let description["file::read_file"] = ""
let description["file::sort_files"] = ""
let description["file::touch_file"] = ""
let description["file::write_file"] = ""
let description["foveros::align_bump_objects_to_tsv"] = ""
let description["foveros::align_tsv_to_pd_intent"] = ""
let description["foveros::check_bump_objects_consistency"] = ""
let description["foveros::get_net"] = ""
let description["foveros::import_die_file"] = "# Import bump design from die file and instantiate bump design objects."
let description["foveros::load_pd_intent"] = "# Read in bottom up macro placement intent and update TSV placement."
let description["foveros::point_from_other_die"] = ""
let description["foveros::point_to_other_die"] = ""
let description["fp::backup_remove_hard_placement_blockages"] = "# Backups all the hard placement blockages in to scratch/sprspxcc..placement_blockage.tcl and remove them"
let description["fp::check_terminal_offgrid"] = "# Check the terminal offgrid and fix to snap terminal on grid"
let description["fp::check_terminal_width"] = "# Check the terminal width and allow to fix to the closest width"
let description["fp::check_voltage_area"] = "# Checked the legality of the voltage area"
let description["fp::create_ps_pg_grid"] = "# Create power grid on PS cells"
let description["fp::create_routing_blockage_around_polygons"] = "# Create route guides around polygon shapes"
let description["fp::create_routing_blockage_for_macro"] = "# Creating routing blockage around macros"
let description["fp::create_row"] = "# Create site row for specific tile"
let description["fp::create_rows_for_bonus"] = "# Create site row for bonus cells"
let description["fp::create_rows_for_core"] = "# Create site row for bonus cells"
let description["fp::create_ubump_driver"] = "# Generate ubump driver"
let description["fp::define_custom_pg_config"] = "# Proc to define custom secondary power grid region"
let description["fp::extend_terminals"] = "# Extend terminal to min length"
let description["fp::fix_voltage_area"] = "# Create voltage area polygon for halo region check. Do not fix disjoint voltage area for voltage area created on ebb."
let description["fp::get_track_location"] = "# Return a list of track location for specify layer"
let description["fp::get_tracks_cross_bbox"] = "# Get the available tracks across the bounding box"
let description["fp::is_boundary_terminal_layer"] = "# returns 1 if boundary has terminals, otherwise returns 0"
let description["fp::propagate_macro_pins_to_terminals"] = "# Create terminals above macro pins if ports are directly connected to them"
let description["fp::pull_back_terminal_from_boundary"] = "# Pull back terminal from boundary"
let description["fp::pushdown_cells"] = "# Pushes down the cells without PD to the right PD based on physical location"
let description["fp::remove_overlapping_ps_cells"] = "# Workaround script to remove overlapping power switch cells with other cells."
let description["fp::restore_hard_placement_blockages"] = "# Restores the hard placement blockages from scratch/sprspxcc..placement_blockage.tcl"
let description["fp::write_voltage_area"] = "# Generate file with voltage area infomration"
let description["fp_edit::align_pins_from_selected"] = "# Aligns selected pin/port pairs"
let description["fp_edit::align_shape_pins_from_selected"] = "# Aligns selected shape and pin/port"
let description["fp_edit::calc_channel_width"] = "# Calculate the width of the channel to place specified number of route on a specified pattern "
let description["fp_edit::calc_path_width"] = "# Calculate middle points and width, and return tcl list"
let description["fp_edit::calc_per_block_polygons"] = "# Calculate polygons relative to each overlapping block origin"
let description["fp_edit::change_width"] = "# Change width of a pin, shape or a terminal. Snap to nearest legal width by default."
let description["fp_edit::check_shapes_match_pattern"] = "# Check that all shapes inside a polygon match specified track pattern. Optionally, snap mismatching shapes to the correct pattern. The function will return the collection of mismatching shapes. "
let description["fp_edit::construct_new_bbox_from_matching_pin_bbox_and_edge_and_direction"] = ""
let description["fp_edit::copy_mi_routing"] = "# Copies selected routing from master cell to same relative location of target cells"
let description["fp_edit::copy_shape_bbox"] = "# Creates copy of shape with new bbox"
let description["fp_edit::count_routing_tracks"] = "# Count number of routing tracks of the specified pattern in the provided range "
let description["fp_edit::create_abutted_pins"] = "# Create pins abutted to selected pins"
let description["fp_edit::create_block_grids"] = "# Creates block grid based on G_MD_GRID and G_PLACE_CHECK_GRID"
let description["fp_edit::create_boundary_terminals_from_shapes"] = "# Create boundary terminals based on provided net shapes"
let description["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"] = "# creates pin guides with 'distance' and 'direction' from collection of pins"
let description["fp_edit::create_pins_under_terminals"] = "# Create pins under terminals"
let description["fp_edit::create_port_terminal"] = "# Create a terminal on track for a given port"
let description["fp_edit::create_projected_top_level_terminal_for_port"] = ""
let description["fp_edit::create_region_tracks"] = "# Create exclusive region tracks inside power gutters according to the specified ratio "
let description["fp_edit::create_region_tracks_based_on_pins"] = "# Create exclusive region tracks inside power gutters according to the pin width and location "
let description["fp_edit::create_td_pin_shape"] = "# Bottom up pin shapes based on top routing shapes"
let description["fp_edit::create_td_pins_on_dangling_wires"] = "# Create bottom up pin shapes on dangling ends of the top level routing"
let description["fp_edit::create_terminals_from_bbox"] = "# Creates Terminals from BBox"
let description["fp_edit::create_terminals_from_shapes"] = "# Create terminals based on provided net shapes inside the specified bbox"
let description["fp_edit::create_top_level_terminal"] = "# Create top level terminal for a hierarchical net"
let description["fp_edit::cut_shapes_by_bbox"] = "# Create new shapes with the same attributes but with geometry fitting in the specified bbox"
let description["fp_edit::dump_block_boundaries"] = "# Dumps boundary.tcl commateral for specified or selected blocks "
let description["fp_edit::extend_pins_to_side_and_preroute"] = "# Pre-routes nets from specified pins in the same layer and creates terminals on the top level boundary"
let description["fp_edit::extend_shapes_to_boundary"] = "# Extends selected shapes to specified design boundary"
let description["fp_edit::extend_shapes_to_point"] = "# Extends closest shape edge to given point in proper layer direction"
let description["fp_edit::find_combined_bbox_of_objects"] = ""
let description["fp_edit::find_edge_on_boundary_closest_to_point_in_a_direction"] = ""
let description["fp_edit::find_nearest_elem"] = ""
let description["fp_edit::find_pattern"] = "# Prints patterns according to layer and width provided by the user "
let description["fp_edit::focus_on_net"] = "# Highlights net and its driver and receiver cells"
let description["fp_edit::get_legal_widths"] = ""
let description["fp_edit::get_relative_rotation"] = ""
let description["fp_edit::highlight_region_tracks"] = ""
let description["fp_edit::identify_pattern"] = "# Identify patterns based on the list of width and layer "
let description["fp_edit::identify_track_pattern_based_on_pins"] = "# Identify track patterns based on the pin width and location "
let description["fp_edit::initialize_crt_legal_widths"] = ""
let description["fp_edit::is_gui_enabled"] = ""
let description["fp_edit::match_pattern"] = "# Find matching routing patterns based on the list of widths and spacings"
let description["fp_edit::over_bump_routing"] = "# Create via-ladder-like routing in specified bbox. Used for routing over EBB bumps"
let description["fp_edit::port_up_shapes"] = "# Replace provided shapes with terminals"
let description["fp_edit::project_pins_to_top_boundary"] = "# Take collection of pins and direction and project them to boundary"
let description["fp_edit::push_down_pins"] = "# Create pins based on selected nets or shapes"
let description["fp_edit::remove_shield_routes"] = ""
let description["fp_edit::remove_signal_routes"] = ""
let description["fp_edit::report_track_patterns"] = "# Prints available track patterns"
let description["fp_edit::resize_shape"] = ""
let description["fp_edit::return_phys_connected_shapes_and_vias"] = ""
let description["fp_edit::route_aligned_ft_terminals"] = "# Create Wire Connecting Aligned FT Terminals"
let description["fp_edit::route_from_pins_given_direction_and_distance"] = "# The procedure uses CRT to route from pins given direction and distance"
let description["fp_edit::route_shape_by_shape"] = "# Create net shapes based on user specifications"
let description["fp_edit::route_signals_push_pins"] = "# The procedure uses CRT to route signals and push down pins"
let description["fp_edit::route_simple_topology"] = "# The procedure uses CRT to route I, L, or Z topology based on pin locations and pin layers"
let description["fp_edit::set_cells_grid"] = "# Sets default block grid for all cells"
let description["fp_edit::snap_pins"] = "# Aligns pins/ports to their wires"
let description["fp_edit::snap_poly_to_zero"] = "# Snapping a polygon to 0,0 coordinate system "
let description["fp_edit::sort_nets_based_on_pin_location"] = "# Returns ordered collection of nets based on physical pin shape location"
let description["fp_edit::un_port_terminals"] = "# Replace provided terminals with shapes"
let description["fp_edit::update_to_min_length"] = "# Update terminal of shape length to the minLength"
let description["fp_gcr::calc_all_pins_bbox"] = ""
let description["fp_gcr::gcr_group_routing"] = "# Group Routing for many Individual Nets based on GCR"
let description["fp_gcr::gcr_swizzle_routing"] = "# Implement swizzle style routing for a collection of nets"
let description["fp_rpt::break_one_shape_and_reassign"] = "# Break a wire and re-assign shapes and vias after the break to another net "
let description["fp_rpt::break_wire_rename_net"] = "# Break wires and re-name nets based on repeater placement "
let description["fp_rpt::calc_one_rpt_grid"] = ""
let description["fp_rpt::crawl_a_shape"] = ""
let description["fp_rpt::get_checker_coord"] = ""
let description["fp_rpt::get_timing_based_rpt_coord"] = "# Calculate repeater location on routed net based on specified delay "
let description["fp_rpt::get_unique_cell_name_ind"] = ""
let description["fp_rpt::get_unique_net_name_ind"] = ""
let description["fp_rpt::get_unique_net_name_rpt_ind"] = ""
let description["fp_rpt::hc_check_cell_cbc_locations"] = ""
let description["fp_rpt::init_checker_rpt_grid"] = ""
let description["fp_rpt::insert_place_one_repeater"] = "# Insert one repeater based on user specified input controls"
let description["fp_rpt::is_odd_ind"] = ""
let description["fp_rpt::rpt_legalize_and_route_tails"] = "# Legalize repeaters and route tails"
let description["fp_rpt::rpt_pwr_hookup"] = "# Hook up repeater cells to specified supply net "
let description["fp_rpt::sd_insert_rpt_bboxes"] = "# Insert repeaters in bbox repeater stations"
let description["fp_rpt::sd_insert_rpt_distance"] = "# Insert repeaters based on distance for each layer"
let description["fp_rpt::sd_place_existing_rpt"] = "# Places existing (sequential) repeaters in provided bbox in checker board fashion"
let description["fp_rpt::sd_place_existing_rpt_based_on_routes"] = "# Places existing (sequential) repeaters in provided bbox in checker board fashion aligned to routes (terminals or shapes)"
let description["fp_rpt::sd_remove_inv"] = "# Replaces each of the specified inverter cells with a buffer and removed buffers if option is set"
let description["fp_rpt::sd_replace_buf_with_inv"] = "# Replaces each of the specified buffer cells with an inverter"
let description["fp_rpt::set_deterministic_cell_net_names"] = ""
let description["fp_rpt::snap_coord_to_plc_grid"] = ""
let description["geo::bbox_bloat_side"] = "# Bloats a bbox's edge by the provided args in microns. Format returned is \"{xl yl} {xh yh}\""
let description["geo::bbox_get_center"] = "# Find the center of the bbox."
let description["geo::bbox_get_height"] = "# Query the height of bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_ll"] = "# Query the lower left point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_ur"] = "# Query the upper right point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_width"] = "# Query the width of bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_xh"] = "# Query the xh point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_xl"] = "# Query the xl point from bbox. The bbox format can be {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_yh"] = "# Query the yh point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_get_yl"] = "# Query the yl point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["geo::bbox_is_containing_pt"] = "# Check if one bbox (bbox) contains a point. Return 1 if true. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh} "
let description["geo::bbox_resize"] = ""
let description["geo::bbox_translate"] = "# Translates a bbox by the provided args in microns. Format returned is \"{xl yl} {xh yh}\""
let description["geo::center_of_gravity"] = "# Calculate the center of gravity of a collection of cells, pins or ports"
let description["geo::convert_bbox_to_polygon"] = "# Transform a bbox to a polygon. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh} "
let description["geo::convert_list_to_bbox"] = "# Return bbox in bbox format"
let description["geo::convert_polygon_to_bbox"] = "# Transform a polygon to polygon/bboxes."
let description["geo::create_windows"] = "# Return a list of windows for the CTS enable flow"
let description["geo::do_bboxes_intersect"] = "# Check if two bboxes intersect each other. Return 1 if true. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh} "
let description["geo::get_boundary_edges"] = "# Return a list of left, right, top, or bottom edge coordinates {{x0 y0} {x1 y1}} given a list of boundary points."
let description["geo::get_distance"] = "# Get absolute distance between 2 points"
let description["geo::get_intersect_edge"] = ""
let description["geo::is_point_in_polygon"] = ""
let description["geo::path_orientation"] = ""
let description["geo::pin_is_on_boundary"] = ""
let description["geo::point_get_points_xy_distance"] = ""
let description["geo::point_resize_to_bbox"] = ""
let description["geo::polygon_get_bbox"] = "# Returns the bounding box of the polygon. Format for bbox returned is \"{xl yl} {xh yh}\""
let description["geo::rect_2_bbox"] = "# convert rectangle {xl yl xh yh} to bbox {{xl yl} {xh yh}}"
let description["gui::highlight_nets"] = "# Highlight the nets or terminal "
let description["gui::select_cell"] = "# Select cell(s)"
let description["gui::select_lib_cell"] = "# Select terminal(s)"
let description["gui::select_net"] = "# Select net(s)"
let description["gui::select_port"] = "# Select port(s)"
let description["gui::select_terminal"] = "# Select terminal(s)"
let description["gui::zoom"] = "# Zoom to specified point, points or rect x1 x2 y1 y2 ; or zoom to selection"
let description["hc::check_bad_nets_for_pin_placement"] = ""
let description["hc::check_nets_which_cannot_be_pushed_down"] = "# Checks nets for push-down, these are BAD nets"
let description["hc::create_xor2spec_err_file"] = "# Converts signature file to error file"
let description["hc::distributed_health_checks"] = "# Distributed Health Checks"
let description["hc::distributed_health_checks_for_all_blocks"] = "# Distributed Health Checks"
let description["hc::runtime"] = "# Runtime Probe Utility"
let description["hc_cbc::check_cbc_boundary"] = "# Check that the boundary is correct according to cbc_rules"
let description["hc_cbc::check_cbc_multiple_boundary"] = "# Check that the boundary of each module is correct according to cbc_rules"
let description["hc_cbc::check_cbc_placement"] = "# Check that the placement and shape of child macros is correct according to cbc_rules"
let description["hc_cbc::check_cbc_rule"] = "# Check that particular coordinate meets given cbc rule, else suggest closest acceptable coordinates"
let description["hc_cbc::check_clock_cells_cbc_placement"] = "# Check global clock distribution cells placement CBC"
let description["hc_cbc::check_custom_cells_cbc_placement"] = "# Check custom cells placement(origin) compliant to specific reference lego"
let description["hc_cbc::check_fp_grid_size"] = "# Check that the boundary is correct according GRID rule"
let description["hc_cbc::check_hard_macro_minsize"] = "# Check that each hard macro in design is atleast greater than minimum size"
let description["hc_collateral::check_clock_collgen_attributes"] = "# checks for is_td attribute on clock objects"
let description["hc_collateral::check_clockbuilder_objects_exist"] = "# Checks if clock objects created by clockbuilder exist"
let description["hc_collateral::check_output_collateral_sanity"] = "# Check for output files' existence in right areas for defined collateral type"
let description["hc_connectivity::check_cell_dangling_inputs"] = "# returns dangling cell inputs"
let description["hc_connectivity::check_cell_names"] = "# Check that the cell name is legal"
let description["hc_connectivity::check_clock_connection_vs_pinlocation"] = "# Connection check between current design after break vs. original RTL connection for clock source design."
let description["hc_connectivity::check_clock_p2p_length"] = "# Report out wire length of each metal layer for clock source from driver to receiver."
let description["hc_connectivity::check_clock_p2p_polarity"] = "# Polarity check for clock source from drv to each rcv."
let description["hc_connectivity::check_dangling_ports"] = "# Check for dangling ports of current design"
let description["hc_connectivity::check_dangling_ports_pins"] = "# Check for dangling ports of current design and pins of first level children"
let description["hc_connectivity::check_feedthru_net_names_match_ports"] = "# check for and report feedthru nets with names not matching any of the connected ports"
let description["hc_connectivity::check_illegal_net_names"] = "# check and flag illegal net names - unclosed braces, Logic0/1 in net name"
let description["hc_connectivity::check_multiple_drivers"] = "# Check for nets that has multiple drivers"
let description["hc_connectivity::check_port_net_names"] = "# Check that port names match net names"
let description["hc_connectivity::check_ports_with_illegal_direction"] = "# Check for ports having illegal direction attribute in the design"
let description["hc_connectivity::check_spec_fev"] = "# Run SOC(blackbox) mode FEV on DP output netlist versus input, report mismatches if any"
let description["hc_connectivity::clock_clksrcnet_based_check_connection"] = ""
let description["hc_connectivity::clock_clksrcnet_based_check_p2p_length"] = ""
let description["hc_connectivity::clock_clksrcnet_based_check_p2p_polarity"] = ""
let description["hc_connectivity::clock_connection_net_traverse"] = ""
let description["hc_connectivity::clock_p2p_length_branch_tracing"] = ""
let description["hc_connectivity::clock_p2p_length_get_branch_search_area"] = ""
let description["hc_connectivity::clock_p2p_length_get_longest_net_shape"] = ""
let description["hc_connectivity::clock_p2p_length_get_net_shape_intersect"] = ""
let description["hc_connectivity::clock_p2p_length_get_pin_shape_intersect"] = ""
let description["hc_connectivity::clock_p2p_length_get_routing_length"] = ""
let description["hc_connectivity::clock_p2p_length_get_terminal_intersect"] = ""
let description["hc_connectivity::clock_p2p_length_is_antenna"] = ""
let description["hc_connectivity::clock_p2p_length_is_physically_connected"] = ""
let description["hc_connectivity::clock_p2p_length_net_traverse"] = ""
let description["hc_connectivity::clock_p2p_length_physical_conn_traverse"] = ""
let description["hc_connectivity::clock_p2p_polarity_net_traverse"] = ""
let description["hc_connectivity::report_ports_with_inout_direction"] = "# Check for ports having inout direction in the design"
let description["hc_connectivity::report_unconnected_pins"] = "# Check for unconnected pins in the design"
let description["hc_dfm::check_cell_area"] = ""
let description["hc_drc::check_opens"] = "# Report out Open nets in current block"
let description["hc_drc::check_route_drcs"] = "# checks for DRC violations in routing in the design"
let description["hc_drc::check_shorts"] = "# Report out Shorting nets in current block"
let description["hc_extraction::check_vias_in_frams"] = "# Check HIP FRAMs for vias"
let description["hc_extraction::fram_checker"] = ""
let description["hc_floorplan::check_block_at_origin"] = ""
let description["hc_floorplan::check_block_overlaps"] = "# check for block overlaps in the design"
let description["hc_floorplan::check_ebb_size_is_lego"] = "# Checks for size of ebb is integer multiple of lego"
let description["hc_floorplan::check_hip_spacing"] = "# Check HIP to HIP spacing"
let description["hc_floorplan::check_min_channel"] = "# Checks that all channels are wide enought so that they will eventually have power switches"
let description["hc_floorplan::check_minspace_for_ports"] = ""
let description["hc_floorplan::check_no_default_va"] = "# Check that no area is covered by DEFAULT_VA alone"
let description["hc_floorplan::check_port_supply_net"] = "# generates list of ports that aren't near enough to a PD with primary or secondary power that matches their related supply net"
let description["hc_floorplan::check_port_tie_offs"] = "# Check that ports are not tied off to ground or power"
let description["hc_floorplan::check_ports_of_single_poly"] = ""
let description["hc_floorplan::check_power_over_va_and_bounds"] = ""
let description["hc_floorplan::check_power_up_cells"] = ""
let description["hc_floorplan::check_ps_service_area"] = "# Checks that the design has enough PS cells."
let description["hc_floorplan::check_same_power_aon_cells"] = "# Checks for AON cells connected to same power net"
let description["hc_floorplan::check_std_cell_power_hookup"] = "# Check that standard cells are hooked up to the primary power supply"
let description["hc_floorplan::check_terminals_oob"] = "# Checks for terminals out of boundary"
let description["hc_floorplan::check_terminals_shorts"] = "# Checks for shorted terminals"
let description["hc_floorplan::check_top_layer_hip_power_pins_exposed"] = "# This checker verifies that hip pins of the specified layers are exposed to the block"
let description["hc_floorplan::check_va_boundaries_abutted"] = "# Checks that all VAs are abutted"
let description["hc_floorplan::check_va_dimensions"] = "# Checks that VAs are wider than the width specified in G_HC_MIN_VA_WIDTH_*"
let description["hc_floorplan::check_xor_voltage_and_bounding_areas"] = "# Checks that the voltage areas and bounds currently present in the design match the one in the PDN config file"
let description["hc_floorplan::get_all_bounds"] = ""
let description["hc_floorplan::is_ungated_power_domain"] = ""
let description["hc_floorplan::rect_to_poly"] = ""
let description["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"] = "# Checks that Hard Layer-Mode Constraints match pin-layers"
let description["hc_gcr::check_missing_terminals_on_priority_net_routing"] = "# Checks for Missing terminals on Priority Net Routing"
let description["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"] = "# Checks Pins for Offgrid and Access issues using GCR and Patterns"
let description["hc_gcr::check_route_boundary_pin_enclosure"] = "# Checks that Hard Layer-Mode Constraints match pin-layers"
let description["hc_gcr::check_unplaced_cells_on_priority_net_routing"] = "# Checks for Unplaced Cells on Priority Net Routing"
let description["hc_general::check_lib_versions"] = "# Check that design is using latest standard library and HIP versions"
let description["hc_general::check_missing_library"] = "# Check for missing libraries based on unresolved references after forced link. Flags error and displays unresolved references"
let description["hc_general::check_modification_time"] = "# Check that the library was modified less than a week from now"
let description["hc_netspec::check_all_are_staples"] = ""
let description["hc_netspec::check_allowed_layers_constraints"] = "# Checks Allowed-Layers Constraints"
let description["hc_netspec::check_attrxml_netspecs"] = "# Attribute-XML NETSPEC Health Check wrapper calling checkers with tuned options by default"
let description["hc_netspec::check_database_netspecs"] = "# DATABASE NETSPEC Health Check wrapper calling checkers with tuned options by default"
let description["hc_netspec::check_dont_touch_constraints"] = "# Checks for Repeaters inserted"
let description["hc_netspec::check_length_limit_constraints"] = "# Checks Length-Limit (Min-Length) Constraints"
let description["hc_netspec::check_length_match_constraints"] = "# Checks Length Match Constraints"
let description["hc_netspec::check_multiple_shield_constraints"] = "# Checks shield Constraints depending upon the layers specified "
let description["hc_netspec::check_shield_constraints"] = "# Checks Shield Constraints"
let description["hc_netspec::check_width_per_layer_constraints"] = "# Checks Width-Per-Layer Constraints"
let description["hc_pin::check_critical_pin_placement_errors"] = "# Checks for common buckets of pin placement errors in design - short/missing/tracks/single_pin"
let description["hc_pin::check_disallowed_layer_terminals"] = "# Check for port terminals in disallowed metal layers"
let description["hc_pin::check_ebb_pin_placement_errors"] = "# Checks for pin placement errors of EBBs in current design"
let description["hc_pin::check_edge_terminals_below_spec_layer"] = "# Flag edge(touching block edge) terminals below specified metal layer"
let description["hc_pin::check_nonedge_terminals_above_heml"] = "# Flag all non-edge terminals below current block HEML, these are illegal"
let description["hc_pin::check_nonedge_terminals_minlength"] = "# Check that non edge terminals have length >= expected minlength value"
let description["hc_pin::check_pg_pin_placement_errors"] = "# Checks for PG pin placement errors in design"
let description["hc_pin::check_pin_placement_errors"] = "# Checks for pin placement errors in design"
let description["hc_pin::check_pin_spacing_errors"] = "# checks for pin spacing violations in pin placement"
let description["hc_pin::check_ports_missing_terminal"] = "# Check if ports do not have terminals associated with them"
let description["hc_pin::check_ports_with_multi_terms"] = "# Check that each logical port has a single terminal/shape associated to it"
let description["hc_pin::check_terminal_widths_match_track_ref"] = "# Check that terminal widths match available tracks based widths in design"
let description["hc_pin::check_terminals_longer_than_threshold"] = "#  Flag terminals in current block with length greater than particular threshold"
let description["hc_pin::check_terminals_minlength"] = "# Check that all terminals have length >= expected minlength value"
let description["hc_pin::check_terminals_not_on_track"] = "# Check terminals not on track"
let description["hc_pin::check_terminals_within_hsml"] = "# Check for port terminals within HSML of current block"
let description["hc_pin::check_weave_ft_connections"] = "# detect weaving feedthrough connections - pins getting cut across same block boundary more than once"
let description["hc_placement::check_block_abutment"] = "# Checks MLPH for Partition Gaps and Overlaps"
let description["hc_placement::check_block_abutment_helper"] = ""
let description["hc_placement::check_cells_outside_block_boundary"] = "# Checks MLPH for cells placed outside of their block boundary"
let description["hc_placement::check_cells_within_voltage_area"] = "# check that cells in current design are within their voltage area boundary"
let description["hc_placement::check_clk_hip_spacing"] = "# check clockbuilder cells meet cell-cell spacing requirements"
let description["hc_placement::check_global_cell_relative_dist_adherence"] = "# Check that relative distance b/w global cells of particular template is less than max threshold"
let description["hc_placement::check_global_clock_cell_attr"] = "# check that all clock template cells in design have attribute clkbuilder==true"
let description["hc_placement::check_hip_bound_for_logic_cells"] = "# flag any logic cells placed too closely to HIP boundaries"
let description["hc_placement::check_hip_to_parent_boundary"] = "# Flag HIP boundaries that come too close to partition boundary"
let description["hc_placement::check_negative_boundary_coordinates"] = "# Check and report negative boundary coordinates in the design"
let description["hc_placement::check_no_ebbs_touching_parent_boundary"] = "# Check for EBBs touching parent/current block boundary"
let description["hc_placement::check_odi_vdm_placement"] = "# Checks for ODI-VDM relative and absolute distance from parent boundary"
let description["hc_placement::check_overlaps"] = ""
let description["hc_placement::check_partition_boundary_halo_cells"] = "# flow will search the boundary for the predefined halo"
let description["hc_placement::check_placement_legality"] = "# Check placement legality"
let description["hc_placement::check_unplaced_cells"] = "# Check cells with physical status unplaced in current block"
let description["hc_placement::check_va_cell_spacing"] = "# Checks that all cells (excluding HIPs and special cells) are adequately spaced from VA boundaries"
let description["hc_placement::check_va_hip_spacing"] = "# Checks that all cells (excluding HIPs and special cells) are adequately spaced from VA boundaries"
let description["hc_placement::format_bbox_for_array"] = ""
let description["hc_placement::partition_abutt_check"] = ""
let description["hc_power::check_no_power_above_hpml"] = "# Check for power/ground physical objects presence above block's HPML"
let description["hc_power::check_pg_connectivity_errors"] = "# Report physical connectivity of Power and Ground Nets in the current block"
let description["hc_power::check_pg_drc_errors"] = "# Report PG DRCs in the current block"
let description["hc_power::check_pg_region_lego_compliance"] = "# Checks PG-regions compliant to CBC LEGO"
let description["hc_power::check_power_domains_missing_voltage_areas"] = "# Check power-domains which do not have voltage areas associated with them"
let description["hc_power::check_power_grid_missing_vias"] = "# Checks PG-Grid for Missing Vias"
let description["hc_power::check_power_supply_ports_correlation"] = "# Checks for correlation between supply ports and PG ports"
let description["hc_power::check_voltage_area_lego_compliance"] = "# Check voltage area compliant to CBC LEGO"
let description["hc_power::check_voltage_value_per_supply_net"] = "# check that each supply net power/ground has a voltage value defined for them"
let description["hc_route::FindPowerLinesInArea"] = "# find all power rails in area"
let description["hc_route::check_floating_vias"] = "# Checks for floating via"
let description["hc_route::check_global_clock_route_widths"] = "# flag global clock distribution routes in m7/8/9/10 not following prescribed wide widths"
let description["hc_route::check_missing_wires"] = "# check for missing preroutes on nets and report those out"
let description["hc_route::check_non_preferred_direction_routes"] = "# check for routes (shape_type=path) in non-preferred routing direction"
let description["hc_route::check_nonpg_missing_vias"] = "# Check for vias missing at valid route intersections"
let description["hc_route::check_null_via_shape_objects"] = "# report out shapes and vias not associated to any owner (null shapes/vias)"
let description["hc_route::check_objects_above_higher_metal_layers"] = "# Check for objects above specified metal layer"
let description["hc_route::check_preroute_block_intersection"] = "# check that preroutes intersect driver receiver blocks for proper pushdown"
let description["hc_route::check_preroute_completion"] = "# Check that preroutes atleast intersecting drv/rcvr block boundaries"
let description["hc_route::check_preroute_width_vs_length"] = "# Check that preroute shapes width<length - necessary for correct interpretation by tool"
let description["hc_route::check_route_hsml_compliance"] = "# Check that routes are compliant to block's HSML"
let description["hc_route::check_route_shape_endcap_values"] = "# flag path shape(wire) endcap values not matching flush or half_width"
let description["hc_route::check_route_shape_type"] = "# Checks for RECT shape type, they are illegal for routes since push down issues"
let description["hc_route::check_route_terminal_intersection"] = "# check for issues between port terminal and associated route"
let description["hc_route::check_signal_wire_shorts"] = "# Checks for signal wire shorts"
let description["hc_route::check_wires_on_track"] = "# Checks for wires on track"
let description["hc_route::check_wires_on_track_cb2_track_lines"] = "# Checks for wires on track"
let description["hc_route::get_duplicate_shapes"] = "# returns duplicate shapes"
let description["hc_route::get_duplicate_vias"] = "# returns duplicate vias"
let description["hc_route::get_track_lines"] = "# return track lines in area"
let description["hc_route::report_clock_pushdown_failures"] = "# clock pushdown failures reported in sd_clk_push - reporting here for user consideration"
let description["hc_route::report_pushdown_failures"] = "# pushdown failures reported in sd_td_handler - reporting here for user consideration"
let description["hc_timing::check_impossible_constraints"] = "# Check impossible constraints set on ports"
let description["hc_timing::check_io_constraints_clock"] = "# Check no/invalid clock constraints on ports"
let description["hc_timing::check_unconstrained_pins"] = "# Check which pins in design are unconstrained"
let description["hc_timing::check_unconstrained_ports"] = "# Check which interface ports are unconstrained"
let description["hc_timing::report_pg_with_clock_latency_set"] = "# flag clock_latency attribute set on PG - this is a fatal violation"
let description["hc_timing::report_pins_with_no_timing_paths"] = "# report out pins that are not timed"
let description["hc_timing::report_tspec_read"] = "# report tspec reading in issues"
let description["hc_timing::report_unclocked_sequentials"] = "# report unclocked sequentials"
let description["hc_tm::check_inputs"] = ""
let description["hc_tm::check_tm_bu_collaterals"] = "# Compares connectivity between BU collateral and design"
let description["hc_tm::check_tsv_bump_alignment"] = "# Check that each TSV has a valid C4 bump aligned"
let description["hc_upf::check_block_srsn"] = ""
let description["hc_upf::check_hier_srsn"] = "# Check srsn consistencies for all hierarchies"
let description["hc_upf::check_isolation"] = "# Check that AON cells ports are driven by AON cells"
let description["hc_upf::check_mv_design_violations"] = "# Check multi-voltage related violations in current design"
let description["hc_upf::check_net_srsn"] = ""
let description["hc_upf::check_srsn"] = "# Check srsn consistencies for current block"
let description["hc_upf::get_fn_pin_srsn"] = ""
let description["hc_utils::add_summary"] = ""
let description["hc_utils::apr_query_pwr_domains"] = ""
let description["hc_utils::bbox_list_to_annotation"] = "# Creates Error Annotations from a bbox list"
let description["hc_utils::bbox_list_to_err_file"] = "# Creates Error File from a bbox list"
let description["hc_utils::extract_runtime_from_health_check_logs"] = "# parses output health check report/log files for runtime aggregation"
let description["hc_utils::find_common_list"] = ""
let description["hc_utils::init_summary"] = "# Initialize summary file"
let description["hc_utils::mark_err_files_based_on_text_waivers"] = "# Utility to use text waiver files to mark ignores in .err files"
let description["hc_utils::parse_text_rpt_waivers"] = "# Use text waiver files derived from .rpt files to created updated pass/fail statistics summary file"
let description["hc_utils::ps_ref"] = ""
let description["hc_utils::runtime"] = "# Runtime Probe Utility"
let description["hc_utils::write_text_waivers_from_err_files"] = "# Utility to write text waiver files based on ignores marked in per check .err files"
let description["hc_utils::write_violation_rpt"] = "# Utility to write out Violation report for a checker"
let description["iccpp_com::append_param"] = ""
let description["iccpp_com::balloon_aux"] = ""
let description["iccpp_com::balloon_close"] = ""
let description["iccpp_com::balloon_help"] = ""
let description["iccpp_com::bbox_to_lo_hi"] = ""
let description["iccpp_com::bootstrap"] = ""
let description["iccpp_com::boundary_to_lo_hi"] = ""
let description["iccpp_com::build_cached_poly"] = ""
let description["iccpp_com::cancel_canvas_user_input"] = ""
let description["iccpp_com::cb"] = ""
let description["iccpp_com::clear_cached_poly"] = ""
let description["iccpp_com::clear_flylines"] = ""
let description["iccpp_com::clear_ideck"] = ""
let description["iccpp_com::compress_nets"] = ""
let description["iccpp_com::convert_from_polygon"] = ""
let description["iccpp_com::dump_to_cmd_window"] = ""
let description["iccpp_com::dump_to_output_window"] = ""
let description["iccpp_com::eval_cmd"] = ""
let description["iccpp_com::file_header"] = ""
let description["iccpp_com::find_unobstructed_track"] = ""
let description["iccpp_com::get_all_net_shapes"] = ""
let description["iccpp_com::get_bbox"] = ""
let description["iccpp_com::get_boundary_of_cell_and_net_shapes"] = ""
let description["iccpp_com::get_first_64_char"] = ""
let description["iccpp_com::get_line"] = ""
let description["iccpp_com::get_metal_layers"] = ""
let description["iccpp_com::get_param"] = ""
let description["iccpp_com::get_param_names"] = ""
let description["iccpp_com::get_point"] = ""
let description["iccpp_com::get_process_name"] = ""
let description["iccpp_com::get_rule_based_track_widths"] = ""
let description["iccpp_com::get_tracks_in_bbox"] = ""
let description["iccpp_com::gui_get_param"] = ""
let description["iccpp_com::gui_set_param"] = ""
let description["iccpp_com::ideck_bbox"] = ""
let description["iccpp_com::ideck_bbox_lo_hi"] = ""
let description["iccpp_com::ideck_line"] = ""
let description["iccpp_com::ideck_poly"] = ""
let description["iccpp_com::ideck_text"] = ""
let description["iccpp_com::init_cached_poly"] = ""
let description["iccpp_com::init_default_episode_recording"] = ""
let description["iccpp_com::init_find_unobstructed_track"] = ""
let description["iccpp_com::intersects_cached_track_info"] = ""
let description["iccpp_com::is_bbox_occupied"] = ""
let description["iccpp_com::is_bbox_occupied_use_cached_poly"] = ""
let description["iccpp_com::is_track_occupied"] = ""
let description["iccpp_com::log_tracer_add"] = ""
let description["iccpp_com::log_tracer_cb"] = ""
let description["iccpp_com::obj_get_defined_attributes"] = "# Return a list of currently defined attributes."
let description["iccpp_com::post_hook_cb"] = ""
let description["iccpp_com::pre_hook_cb"] = ""
let description["iccpp_com::process_canvas_user_input"] = ""
let description["iccpp_com::rdt_source_if_exists"] = ""
let description["iccpp_com::regexp_get_param_names"] = ""
let description["iccpp_com::reset_params"] = ""
let description["iccpp_com::return_canvas_user_input"] = ""
let description["iccpp_com::return_route_guides_not_touching_boundary"] = ""
let description["iccpp_com::set_param"] = ""
let description["iccpp_com::sort_metal_layers"] = ""
let description["iccpp_com::uncompress_nets"] = ""
let description["iccpp_com::unset_param"] = ""
let description["iccpp_com::valid"] = ""
let description["iccpp_com::validate_bbox"] = ""
let description["iccpp_com::zoom"] = ""
let description["iccpp_com::zoom_to_bbox_selection"] = ""
let description["iccpp_cr::add_commands_to_diamond"] = ""
let description["iccpp_cr::add_rect_region"] = ""
let description["iccpp_cr::add_to_track_region_list_cb"] = ""
let description["iccpp_cr::align_repeaters_to_trunks"] = ""
let description["iccpp_cr::and_complete_topology_cb"] = ""
let description["iccpp_cr::apply_track_region_cb"] = ""
let description["iccpp_cr::are_2_bboxes_close_enough"] = ""
let description["iccpp_cr::bbox_to_boundary"] = ""
let description["iccpp_cr::bbox_to_polygon"] = ""
let description["iccpp_cr::bootstrap"] = ""
let description["iccpp_cr::boundary_to_bbox"] = ""
let description["iccpp_cr::break_wire"] = ""
let description["iccpp_cr::build_cr_gui"] = ""
let description["iccpp_cr::build_cr_tab"] = ""
let description["iccpp_cr::chop_bbox_into_2"] = ""
let description["iccpp_cr::clean_use_existing_shape"] = ""
let description["iccpp_cr::clear_bbox_from_drag_cb"] = ""
let description["iccpp_cr::commit_preview_for_wire_create_cb"] = ""
let description["iccpp_cr::complete_prerouted_nets_cb"] = ""
let description["iccpp_cr::compnets"] = ""
let description["iccpp_cr::compnets_for_list"] = ""
let description["iccpp_cr::convert_cutline_to_relative_cutline"] = ""
let description["iccpp_cr::cr_checkerboard_rpt"] = ""
let description["iccpp_cr::cr_click_center_point_of_track_cb"] = ""
let description["iccpp_cr::cr_click_center_point_of_track_no_preview_cb"] = ""
let description["iccpp_cr::cr_enable_track_sharing_cb"] = ""
let description["iccpp_cr::cr_fill_from_tracks"] = ""
let description["iccpp_cr::cr_get_bbox"] = ""
let description["iccpp_cr::cr_get_bbox_cb"] = ""
let description["iccpp_cr::cr_get_cutline_cb"] = ""
let description["iccpp_cr::cr_get_rpt_cells"] = ""
let description["iccpp_cr::cr_route_completion"] = ""
let description["iccpp_cr::cr_route_completion_______OLD"] = ""
let description["iccpp_cr::cr_select_complete_layer_cb"] = ""
let description["iccpp_cr::cr_select_complete_width_cb"] = ""
let description["iccpp_cr::cr_select_track_region_pattern_cb"] = ""
let description["iccpp_cr::cr_select_track_region_snap_cb"] = ""
let description["iccpp_cr::cr_selectlayer_cb"] = ""
let description["iccpp_cr::cr_selectlayer_withlayer_cb"] = ""
let description["iccpp_cr::cr_selectwidth_cb"] = ""
let description["iccpp_cr::cr_turn_on_clustering_cb"] = ""
let description["iccpp_cr::cr_turn_on_shielding_cb"] = ""
let description["iccpp_cr::cr_viewtracks_cb"] = ""
let description["iccpp_cr::create_bounds"] = ""
let description["iccpp_cr::create_bounds_for_track_pattern_regions"] = ""
let description["iccpp_cr::create_dummystore_for_track_pattern_regions"] = ""
let description["iccpp_cr::create_ndr_from_ndr_array"] = ""
let description["iccpp_cr::create_ndr_spec_from_net"] = ""
let description["iccpp_cr::create_net_shape"] = ""
let description["iccpp_cr::create_pin_topology"] = ""
let description["iccpp_cr::create_poly_from_tracks"] = ""
let description["iccpp_cr::create_repeaters_cb"] = ""
let description["iccpp_cr::create_route_track_for_net"] = "# Create tracks for specific nets"
let description["iccpp_cr::create_shapes_from_tracks"] = ""
let description["iccpp_cr::create_term_shape"] = ""
let description["iccpp_cr::create_trunk_vias_cb"] = ""
let description["iccpp_cr::create_trunks_from_pin_to_pin_cb"] = ""
let description["iccpp_cr::create_trunks_from_pins_to_trunk_cb"] = ""
let description["iccpp_cr::create_trunks_from_ports_to_pins_cb"] = ""
let description["iccpp_cr::create_trunks_from_ports_to_pins_complete_cb"] = ""
let description["iccpp_cr::create_trunks_from_ports_to_trunk_cb"] = ""
let description["iccpp_cr::create_trunks_from_what_cb"] = ""
let description["iccpp_cr::create_trunks_track_share"] = ""
let description["iccpp_cr::create_user_grid"] = ""
let description["iccpp_cr::create_zrt_shield"] = ""
let description["iccpp_cr::csv_to_nets_intent"] = ""
let description["iccpp_cr::cut_shapes"] = "# Cut metal shapes out of the given bbox per layer"
let description["iccpp_cr::cut_shapes_on_iccpp_trunks"] = "# Cut metal shapes out of the given bbox per layer on iccpp_trunk"
let description["iccpp_cr::decode_snap_region"] = ""
let description["iccpp_cr::delete_all_track_pattern_regions"] = ""
let description["iccpp_cr::delete_bounds_for_track_pattern_regions"] = ""
let description["iccpp_cr::delete_dummystore_for_track_pattern_regions"] = ""
let description["iccpp_cr::delete_rect_region"] = ""
let description["iccpp_cr::destroy_cr_gui"] = ""
let description["iccpp_cr::develope_assemblies"] = ""
let description["iccpp_cr::display_boundary_edges"] = ""
let description["iccpp_cr::display_layer_gutters_cb"] = ""
let description["iccpp_cr::do_bboxes_abut"] = ""
let description["iccpp_cr::do_bboxes_intesect"] = ""
let description["iccpp_cr::do_lohi_intesect"] = ""
let description["iccpp_cr::does_wirebbox_have_obstructions"] = ""
let description["iccpp_cr::does_wirebbox_have_obstructions_h2t"] = ""
let description["iccpp_cr::drag_for_track_region_bbox"] = ""
let description["iccpp_cr::drag_ideck_cb"] = ""
let description["iccpp_cr::encode_snap_region"] = ""
let description["iccpp_cr::expand_channel"] = ""
let description["iccpp_cr::extend_pins_by_creating_trunks_cb"] = ""
let description["iccpp_cr::extract_track_shared_trunks"] = ""
let description["iccpp_cr::extract_trunks"] = ""
let description["iccpp_cr::filterPathtoMenuAll"] = ""
let description["iccpp_cr::find_hier_net_from_local"] = ""
let description["iccpp_cr::find_net_notsharables"] = ""
let description["iccpp_cr::fix_missed_via_ladders"] = ""
let description["iccpp_cr::fn_get_bbox_of_flopped_chain"] = ""
let description["iccpp_cr::fn_get_start_track_num"] = ""
let description["iccpp_cr::fn_is_cell_location_legal"] = ""
let description["iccpp_cr::fn_move_spread_flops"] = ""
let description["iccpp_cr::fn_short_port_to_last_flopped_output"] = ""
let description["iccpp_cr::fn_trunk_flopped_nets"] = ""
let description["iccpp_cr::get_all_nets"] = ""
let description["iccpp_cr::get_all_nets_old"] = ""
let description["iccpp_cr::get_annotations_on_nets"] = ""
let description["iccpp_cr::get_bbox_from_drag_cb"] = ""
let description["iccpp_cr::get_bbox_from_track"] = ""
let description["iccpp_cr::get_boundary_edge_coord_generic"] = ""
let description["iccpp_cr::get_boundary_edge_lines"] = ""
let description["iccpp_cr::get_boundary_edge_list"] = ""
let description["iccpp_cr::get_boundary_edge_num_generic"] = ""
let description["iccpp_cr::get_boundary_edge_touching_bbox"] = ""
let description["iccpp_cr::get_bounds_for_track_pattern_regions"] = ""
let description["iccpp_cr::get_cached_poly"] = ""
let description["iccpp_cr::get_cell_bbox"] = ""
let description["iccpp_cr::get_cell_bbox_in_bbox"] = ""
let description["iccpp_cr::get_cell_from_click_cb"] = ""
let description["iccpp_cr::get_cell_height"] = ""
let description["iccpp_cr::get_cell_obj_bbox"] = ""
let description["iccpp_cr::get_cell_orientation"] = ""
let description["iccpp_cr::get_cell_pin_connected_to_net_rec"] = ""
let description["iccpp_cr::get_cell_pins_connected_to_net"] = ""
let description["iccpp_cr::get_cell_width"] = ""
let description["iccpp_cr::get_cells"] = ""
let description["iccpp_cr::get_cells_by_bbox"] = ""
let description["iccpp_cr::get_cells_by_location"] = ""
let description["iccpp_cr::get_curent_design"] = ""
let description["iccpp_cr::get_current_cel"] = ""
let description["iccpp_cr::get_cutline_from_drag_cb"] = ""
let description["iccpp_cr::get_die_area_bbox"] = ""
let description["iccpp_cr::get_die_area_boundary"] = ""
let description["iccpp_cr::get_dummystore_for_track_pattern_regions"] = ""
let description["iccpp_cr::get_dummystore_track_region"] = ""
let description["iccpp_cr::get_dummystore_track_region_bbox"] = ""
let description["iccpp_cr::get_dummystore_track_region_pattern"] = ""
let description["iccpp_cr::get_end_pin_of_flopped_net"] = ""
let description["iccpp_cr::get_flat_cells"] = ""
let description["iccpp_cr::get_flat_pins"] = ""
let description["iccpp_cr::get_free_track_poly"] = ""
let description["iccpp_cr::get_full_nets_connected_to_net"] = ""
let description["iccpp_cr::get_full_nets_connected_to_net_rec"] = ""
let description["iccpp_cr::get_hard_ips_and_bboxes"] = ""
let description["iccpp_cr::get_high_and_low_layer_from_tlayers"] = ""
let description["iccpp_cr::get_how_far_to_extend"] = ""
let description["iccpp_cr::get_iccpp_trunk_bbox"] = ""
let description["iccpp_cr::get_iccpp_trunk_bbox_closest_perpendicular"] = ""
let description["iccpp_cr::get_iccpp_trunk_bbox_longest_perpendicular"] = ""
let description["iccpp_cr::get_iccpp_trunk_layer"] = ""
let description["iccpp_cr::get_iccpp_trunk_layer_longest_perpendicular"] = ""
let description["iccpp_cr::get_iccpp_trunk_shapes"] = ""
let description["iccpp_cr::get_layer"] = ""
let description["iccpp_cr::get_layer_dir"] = ""
let description["iccpp_cr::get_layer_min_area"] = ""
let description["iccpp_cr::get_layer_min_spacing"] = ""
let description["iccpp_cr::get_layer_min_width"] = ""
let description["iccpp_cr::get_list_NDRS_cb"] = ""
let description["iccpp_cr::get_lo_hi_to_make_sharable"] = ""
let description["iccpp_cr::get_location_list_from_cutlines"] = ""
let description["iccpp_cr::get_location_list_from_relative_cutlines"] = ""
let description["iccpp_cr::get_locations_to_place_repeaters"] = ""
let description["iccpp_cr::get_ndr_rules_names"] = ""
let description["iccpp_cr::get_net_bbox"] = ""
let description["iccpp_cr::get_net_bbox_ICC2_FAST"] = ""
let description["iccpp_cr::get_net_bbox_on_track"] = ""
let description["iccpp_cr::get_net_bbox_pin_port_to_trunk"] = ""
let description["iccpp_cr::get_net_bbox_pin_to_extention"] = ""
let description["iccpp_cr::get_net_bbox_point_to_extention"] = ""
let description["iccpp_cr::get_net_drv_rcv_bbox"] = ""
let description["iccpp_cr::get_net_groups"] = ""
let description["iccpp_cr::get_net_lo_hi"] = ""
let description["iccpp_cr::get_net_names_list"] = ""
let description["iccpp_cr::get_net_names_list_from_connectivity"] = ""
let description["iccpp_cr::get_net_shapes"] = ""
let description["iccpp_cr::get_net_type"] = ""
let description["iccpp_cr::get_nets"] = ""
let description["iccpp_cr::get_obj_bbox"] = ""
let description["iccpp_cr::get_obj_layer"] = ""
let description["iccpp_cr::get_obstructions_for_wirebbox_in_hard_macros"] = ""
let description["iccpp_cr::get_obstructions_in_hard_macros"] = ""
let description["iccpp_cr::get_pin_bbox_from_pin_collection"] = ""
let description["iccpp_cr::get_pin_boundary_coord"] = ""
let description["iccpp_cr::get_pin_collection_of_cell_edge"] = ""
let description["iccpp_cr::get_pin_shapes"] = ""
let description["iccpp_cr::get_pins"] = ""
let description["iccpp_cr::get_pins_and_nets_on_cell_edge"] = ""
let description["iccpp_cr::get_point_from_edge"] = ""
let description["iccpp_cr::get_port_obstructions_intersecting_bbox"] = ""
let description["iccpp_cr::get_ports"] = ""
let description["iccpp_cr::get_preroute_vias_on_nets"] = ""
let description["iccpp_cr::get_rect_region"] = ""
let description["iccpp_cr::get_repeater_location_cb"] = ""
let description["iccpp_cr::get_routing_blockages_by_location"] = ""
let description["iccpp_cr::get_routing_guides_by_location"] = ""
let description["iccpp_cr::get_shapes_by_location"] = ""
let description["iccpp_cr::get_shapes_of_custom_shields"] = ""
let description["iccpp_cr::get_shapes_on_nets"] = ""
let description["iccpp_cr::get_sharable_nets"] = ""
let description["iccpp_cr::get_site_row_orient"] = ""
let description["iccpp_cr::get_term_extension_direction"] = ""
let description["iccpp_cr::get_term_port_name"] = ""
let description["iccpp_cr::get_tracks_bounding_boxes"] = ""
let description["iccpp_cr::get_tracks_capacity"] = ""
let description["iccpp_cr::get_user_grid"] = ""
let description["iccpp_cr::get_via_by_location"] = ""
let description["iccpp_cr::get_wire_bbox_from_track"] = ""
let description["iccpp_cr::get_wire_bbox_from_track_with_micron_step"] = ""
let description["iccpp_cr::grab_set_NDR_names"] = ""
let description["iccpp_cr::grow_bbox"] = ""
let description["iccpp_cr::gui_get_param"] = ""
let description["iccpp_cr::gui_set_param"] = ""
let description["iccpp_cr::guides_obstructing_wirebbox_in_hard_macros"] = ""
let description["iccpp_cr::h2t_adjust_edge_leg"] = ""
let description["iccpp_cr::h2t_build_cutout_polygon"] = ""
let description["iccpp_cr::h2t_build_cutout_polygon_display"] = ""
let description["iccpp_cr::h2t_build_exclude_bbox"] = ""
let description["iccpp_cr::h2t_build_exclude_bbox_display"] = ""
let description["iccpp_cr::h2t_build_track_array"] = ""
let description["iccpp_cr::h2t_build_track_array_channel"] = ""
let description["iccpp_cr::h2t_display_polygon"] = ""
let description["iccpp_cr::h2t_get_boundary_edge_coord"] = ""
let description["iccpp_cr::h2t_get_boundary_edge_num"] = ""
let description["iccpp_cr::h2t_get_channel_bbox"] = ""
let description["iccpp_cr::h2t_get_channel_coord_width"] = ""
let description["iccpp_cr::h2t_get_channel_key"] = ""
let description["iccpp_cr::h2t_get_channel_orient"] = ""
let description["iccpp_cr::h2t_get_coord"] = ""
let description["iccpp_cr::h2t_get_cutout_pullback"] = ""
let description["iccpp_cr::h2t_get_half_dr_e2e"] = ""
let description["iccpp_cr::h2t_get_hi_track_for_channel"] = ""
let description["iccpp_cr::h2t_get_lo_track_for_channel"] = ""
let description["iccpp_cr::h2t_get_pin_center_coord"] = ""
let description["iccpp_cr::h2t_get_track_from_ref_coord"] = ""
let description["iccpp_cr::h2t_get_user_half_dr_e2e"] = ""
let description["iccpp_cr::h2t_heal_segments"] = ""
let description["iccpp_cr::h2t_is_channel_flipped"] = ""
let description["iccpp_cr::h2t_is_iccpp_special_net"] = ""
let description["iccpp_cr::h2t_transform_coord_from_top_to_channel"] = ""
let description["iccpp_cr::h2t_trim_and_cut_out_net_bbox"] = ""
let description["iccpp_cr::iccpp_display_channels"] = ""
let description["iccpp_cr::initialize"] = ""
let description["iccpp_cr::initialize_1272"] = ""
let description["iccpp_cr::initialize_1273"] = ""
let description["iccpp_cr::initialize_1274"] = ""
let description["iccpp_cr::initialize_generic"] = ""
let description["iccpp_cr::is_cell_location_legal"] = ""
let description["iccpp_cr::is_net_shielded"] = ""
let description["iccpp_cr::is_pin_on_cell_instance_edge"] = ""
let description["iccpp_cr::is_point_inside_cell_boundary"] = ""
let description["iccpp_cr::isa_iccpp_trunk_on_net"] = ""
let description["iccpp_cr::launch_cr_gui"] = ""
let description["iccpp_cr::launch_netspec"] = ""
let description["iccpp_cr::legs_layers_entry_eh"] = ""
let description["iccpp_cr::list_swap"] = ""
let description["iccpp_cr::list_to_array"] = ""
let description["iccpp_cr::load_nets_from_file_cb"] = ""
let description["iccpp_cr::lreverse"] = ""
let description["iccpp_cr::merge_bboxes"] = ""
let description["iccpp_cr::merge_objects"] = ""
let description["iccpp_cr::ndr_array_from_nets_intent"] = ""
let description["iccpp_cr::nets_list_selection_cb"] = ""
let description["iccpp_cr::p2p_build_layers_list"] = ""
let description["iccpp_cr::p2p_build_return_list"] = ""
let description["iccpp_cr::p2p_build_segments_list"] = ""
let description["iccpp_cr::p2p_create_wires_from_segments_list"] = ""
let description["iccpp_cr::p2p_get_2pins_of_net"] = ""
let description["iccpp_cr::p2p_get_2pins_of_net__old"] = ""
let description["iccpp_cr::p2p_get_bbox_centerline"] = ""
let description["iccpp_cr::p2p_get_coord_of_track"] = ""
let description["iccpp_cr::p2p_get_end_of_pin"] = ""
let description["iccpp_cr::p2p_get_layer_dir"] = ""
let description["iccpp_cr::p2p_get_layer_width"] = ""
let description["iccpp_cr::p2p_get_legs_extensions"] = ""
let description["iccpp_cr::p2p_get_net_bbox"] = ""
let description["iccpp_cr::p2p_get_tracks"] = ""
let description["iccpp_cr::p2p_heal_segments_list"] = ""
let description["iccpp_cr::p2p_snap_cntr"] = ""
let description["iccpp_cr::p2p_snap_cntr__oldnew"] = ""
let description["iccpp_cr::p2p_snap_segments_list"] = ""
let description["iccpp_cr::place_repeater"] = ""
let description["iccpp_cr::place_via_ladders"] = ""
let description["iccpp_cr::place_via_ladders__OLD"] = ""
let description["iccpp_cr::place_via_ladders___OLD2"] = ""
let description["iccpp_cr::populate_cr_rep_name"] = ""
let description["iccpp_cr::populate_nets_list"] = ""
let description["iccpp_cr::populate_nets_list___OLD"] = ""
let description["iccpp_cr::populate_track_pattern_list"] = ""
let description["iccpp_cr::populate_track_region_list"] = ""
let description["iccpp_cr::popupNetsMenu"] = ""
let description["iccpp_cr::popup_track_region_menu"] = ""
let description["iccpp_cr::preview_create_net_lo_hi_cb"] = ""
let description["iccpp_cr::prune_pin_collection_for_cloud"] = ""
let description["iccpp_cr::remove_all_trunks_cb"] = ""
let description["iccpp_cr::remove_detailed_routing_on_nets"] = ""
let description["iccpp_cr::remove_iccpp_trunk_on_net"] = ""
let description["iccpp_cr::remove_iccpp_trunk_on_net_h2t"] = ""
let description["iccpp_cr::remove_net_shape"] = ""
let description["iccpp_cr::remove_routing_on_nets_cb"] = ""
let description["iccpp_cr::remove_track_region_cb"] = ""
let description["iccpp_cr::remove_trunk_antenna"] = ""
let description["iccpp_cr::remove_trunk_cb"] = ""
let description["iccpp_cr::remove_trunk_vias_cb"] = ""
let description["iccpp_cr::remove_trunks"] = ""
let description["iccpp_cr::reorder_track"] = ""
let description["iccpp_cr::repeater_addrepeater_location_cb"] = ""
let description["iccpp_cr::repeater_location_ideck_cb"] = ""
let description["iccpp_cr::report_full_NDRs"] = ""
let description["iccpp_cr::report_ladders"] = ""
let description["iccpp_cr::report_opens"] = ""
let description["iccpp_cr::return_bbox"] = ""
let description["iccpp_cr::return_min_max_layer_for_net"] = ""
let description["iccpp_cr::return_net_assemblies"] = ""
let description["iccpp_cr::return_valid_widths"] = ""
let description["iccpp_cr::ri_build_distance_repeater_list"] = ""
let description["iccpp_cr::ri_build_fanout_reconnect_list"] = ""
let description["iccpp_cr::ri_build_flat_repeater_location_list"] = ""
let description["iccpp_cr::ri_build_locations_repeater_list"] = ""
let description["iccpp_cr::ri_build_preview_segments_list"] = ""
let description["iccpp_cr::ri_build_segments_list"] = ""
let description["iccpp_cr::ri_build_xy_repeater_list"] = ""
let description["iccpp_cr::ri_create_repeater_from_repeater_list"] = "# Creates repeaters from repeater list"
let description["iccpp_cr::ri_create_wires_from_segments_list"] = ""
let description["iccpp_cr::ri_get_2pins_of_net"] = ""
let description["iccpp_cr::ri_get_2pins_of_net__OLD"] = ""
let description["iccpp_cr::ri_get_layer_weight"] = ""
let description["iccpp_cr::ri_get_lib_cell_bbox"] = ""
let description["iccpp_cr::ri_get_net_direction"] = ""
let description["iccpp_cr::ri_get_obstructing_cells_to_repeater"] = ""
let description["iccpp_cr::ri_get_out_repeater_net_name"] = ""
let description["iccpp_cr::ri_get_repeater_location_list_for_segment"] = ""
let description["iccpp_cr::ri_get_repeater_location_list_for_segment_from_locations"] = ""
let description["iccpp_cr::ri_get_shape_length"] = ""
let description["iccpp_cr::ri_grow_last_segnemt_of_segments_list"] = ""
let description["iccpp_cr::ri_init_build_repeater_list"] = ""
let description["iccpp_cr::ri_init_build_segments_list"] = ""
let description["iccpp_cr::ri_legalize_repeater_location"] = ""
let description["iccpp_cr::ri_legalize_repeaters"] = ""
let description["iccpp_cr::ri_match_flat_pin_to_pin"] = ""
let description["iccpp_cr::ri_reconnect_fanout_reconnect_list"] = ""
let description["iccpp_cr::ri_remove_original_segments_from_segment_list"] = ""
let description["iccpp_cr::ri_restore_fanout_reconnect_list"] = ""
let description["iccpp_cr::ri_shrink_last_segnemt_of_segments_list"] = ""
let description["iccpp_cr::ri_sort_repeater_location_list"] = ""
let description["iccpp_cr::ri_sort_segments_by_vertex"] = ""
let description["iccpp_cr::ri_sort_segments_list"] = ""
let description["iccpp_cr::ri_split_segment_in_2_for_list"] = ""
let description["iccpp_cr::ri_split_segments_list"] = ""
let description["iccpp_cr::ri_update_segment_list"] = ""
let description["iccpp_cr::route_nets_from_nets_intent"] = ""
let description["iccpp_cr::route_to_existing_trunk"] = ""
let description["iccpp_cr::route_with_ndr_for_nets_cb"] = ""
let description["iccpp_cr::route_zrt_eco"] = ""
let description["iccpp_cr::row_snapping_legal"] = ""
let description["iccpp_cr::selectAll"] = ""
let description["iccpp_cr::select_cr_rep_name"] = ""
let description["iccpp_cr::set_cell_from_click_cb"] = ""
let description["iccpp_cr::set_cell_from_click_filterfrom_cb"] = ""
let description["iccpp_cr::set_cell_from_click_filterto_cb"] = ""
let description["iccpp_cr::set_list_box"] = ""
let description["iccpp_cr::set_object_gui_value_cb"] = ""
let description["iccpp_cr::set_tracks_in_bounding_box"] = ""
let description["iccpp_cr::set_trunking_style_cb"] = ""
let description["iccpp_cr::set_user_grid"] = ""
let description["iccpp_cr::short_port_to_last_flopped_output"] = ""
let description["iccpp_cr::snap_coord_to_site_row"] = ""
let description["iccpp_cr::snap_coord_to_site_row_icc2"] = ""
let description["iccpp_cr::switchedTab"] = ""
let description["iccpp_cr::toggle_power_regiong_gui_cb"] = ""
let description["iccpp_cr::track_region_list_selection_cb"] = ""
let description["iccpp_cr::transform_coordinates_to_top"] = ""
let description["iccpp_cr::trim_antennas_on_nets"] = ""
let description["iccpp_cr::trunk_tab_cb"] = ""
let description["iccpp_cr::update_nets_list"] = ""
let description["iccpp_cr::update_nets_list_cb"] = ""
let description["iccpp_cr::validate_values_for_create_trunk_from_here_to_there"] = ""
let description["iccpp_cr::xy_sort_pin_collection"] = ""
let description["iccpp_cr::xy_to_track_info_ideck_cb"] = ""
let description["iccpp_cr::zoom_and_highlight_cb"] = ""
let description["iccpp_cr::zoom_cb"] = ""
let description["iccpp_hc::bootstrap"] = ""
let description["iccpp_hc::build_hc_gui"] = ""
let description["iccpp_hc::build_hc_tab"] = ""
let description["iccpp_hc::destroy_hc_gui"] = ""
let description["iccpp_hc::generate_res_log"] = ""
let description["iccpp_hc::initialize"] = ""
let description["iccpp_hc::initialize_generic"] = ""
let description["iccpp_hc::initialize_hip_insts"] = ""
let description["iccpp_hc::initialize_hip_masters"] = ""
let description["iccpp_hc::launch_hc_gui"] = ""
let description["iccpp_hc::load_res_log"] = ""
let description["iccpp_hc::run_all_checkers"] = ""
let description["iccpp_hc::run_all_fp_checkers"] = ""
let description["iccpp_hc::run_all_fram_checkers"] = ""
let description["iccpp_hc::run_one_check"] = ""
let description["iccpp_hc::run_selected_checkers"] = ""
let description["iccpp_hc::switchedTab"] = ""
let description["iccpp_hc::toggle_all_floorplan"] = ""
let description["iccpp_hc::toggle_all_fram"] = ""
let description["iccpp_hc::zoom_highlight_inst"] = ""
let description["iccpp_hc::zoom_pt_or_bbox"] = ""
let description["iccpp_iccpp::bootstrap"] = ""
let description["iccpp_iccpp::build_gui"] = ""
let description["iccpp_iccpp::destroy_gui"] = ""
let description["iccpp_iccpp::initialize"] = ""
let description["iccpp_iccpp::initialize_generic"] = ""
let description["iccpp_iccpp::launch_gui"] = ""
let description["iccpp_iccpp::switchedTab"] = ""
let description["iccpp_ns::additem"] = ""
let description["iccpp_ns::apply_cb"] = ""
let description["iccpp_ns::apply_set_cb"] = ""
let description["iccpp_ns::assigndefaultsetting"] = ""
let description["iccpp_ns::bootstrap"] = ""
let description["iccpp_ns::browseCB"] = ""
let description["iccpp_ns::build_ns_gui"] = ""
let description["iccpp_ns::build_ns_tab"] = ""
let description["iccpp_ns::capitalize_first"] = ""
let description["iccpp_ns::cbb_input_to_parent"] = ""
let description["iccpp_ns::clear_table"] = ""
let description["iccpp_ns::clearvalidatecheck"] = ""
let description["iccpp_ns::compnets"] = ""
let description["iccpp_ns::destroy_ns_gui"] = ""
let description["iccpp_ns::dfs_get_net_name"] = ""
let description["iccpp_ns::dumpvalidatereport"] = ""
let description["iccpp_ns::fill_headers"] = ""
let description["iccpp_ns::flushItems"] = ""
let description["iccpp_ns::fpAddNets"] = ""
let description["iccpp_ns::fpChangeSelected"] = ""
let description["iccpp_ns::fpCopyLine"] = ""
let description["iccpp_ns::fpDeleteLine"] = ""
let description["iccpp_ns::fpHelp"] = ""
let description["iccpp_ns::fpLoadInstNetSpec"] = ""
let description["iccpp_ns::fpLoadNetSpec"] = ""
let description["iccpp_ns::fpPasteLine"] = ""
let description["iccpp_ns::fpSaveData"] = ""
let description["iccpp_ns::fpUpdateNettype"] = ""
let description["iccpp_ns::fpUpdateNobjects"] = ""
let description["iccpp_ns::get_width_of_layer"] = ""
let description["iccpp_ns::highlight_cb"] = ""
let description["iccpp_ns::initialize"] = ""
let description["iccpp_ns::initialize_1274"] = ""
let description["iccpp_ns::initialize_generic"] = ""
let description["iccpp_ns::isInRange"] = ""
let description["iccpp_ns::is_horizontal_layer"] = ""
let description["iccpp_ns::is_route"] = ""
let description["iccpp_ns::launch_ns_gui"] = ""
let description["iccpp_ns::lcontain"] = ""
let description["iccpp_ns::loadvalidatereport"] = ""
let description["iccpp_ns::lpOpusChangeLabel"] = ""
let description["iccpp_ns::nets_list_selection_cb"] = ""
let description["iccpp_ns::popupDifMenu"] = ""
let description["iccpp_ns::routeselectednets"] = ""
let description["iccpp_ns::singlecellcheck"] = ""
let description["iccpp_ns::sync2itar"] = ""
let description["iccpp_ns::validate_cell"] = ""
let description["iccpp_ns::validatecheck"] = ""
let description["iccpp_ns::zoom_fix_cb"] = ""
let description["iccpp_pp::bootstrap"] = ""
let description["ism::compare_signatures"] = ""
let description["ism::create_object_signature"] = "# Generate a unique signature for an object"
let description["ism::fn_get_hier_pg_region"] = ""
let description["ism::generate_signatures_for_collection"] = "# Generate an array of signatures from a collection of objects"
let description["ism::get_all_objects"] = ""
let description["ism::get_available_pd_intent_blocks"] = ""
let description["ism::get_blockage_layers"] = ""
let description["ism::get_collgen_filename"] = ""
let description["ism::get_ism_attr_info"] = "# Return info about the attribute from ism attribute master list."
let description["ism::get_power_domain_info"] = ""
let description["ism::init_user_attr_master_index"] = ""
let description["ism::init_user_attr_vars"] = ""
let description["ism::load_pd_intent"] = ""
let description["ism::pd_intent_write_tms_blockages"] = ""
let description["ism::pd_intent_write_tms_ndm_info"] = ""
let description["ism::pd_intent_write_tms_terminals"] = ""
let description["ism::pd_intent_write_tms_via_blockages"] = ""
let description["ism::pdintent_delete_tms_coll"] = ""
let description["ism::pdintent_remove_all"] = "# removes PD intent objects, leaves boundary + terminals intact"
let description["ism::pdintent_write"] = "# writes PD Intent"
let description["ism::pdintent_write_boundary"] = ""
let description["ism::pdintent_write_custom_cells_placement"] = ""
let description["ism::pdintent_write_ebb_blockages"] = ""
let description["ism::pdintent_write_hier_pg_regions"] = ""
let description["ism::pdintent_write_hier_voltage_areas"] = ""
let description["ism::pdintent_write_io_placement"] = ""
let description["ism::pdintent_write_pg_terminal_intent"] = ""
let description["ism::pdintent_write_placement_blockages"] = ""
let description["ism::pdintent_write_routing_blockages"] = ""
let description["ism::pdintent_write_shapes"] = ""
let description["ism::pdintent_write_tintent"] = ""
let description["ism::pdintent_write_tms_coll"] = ""
let description["ism::pdintent_write_va_blockages"] = ""
let description["ism::print_signatures"] = ""
let description["ism::split_pdintent_voltage_areas"] = ""
let description["ism::write_object_signatures_for_diff"] = ""
let description["itcl::delete_helper"] = ""
let description["itcl::local"] = ""
let description["layout_edit::add_gnac"] = "# Function to insert gnac on a net"
let description["layout_edit::get_nearest_legal_coord"] = "# Return nearest legal location for a cell"
let description["layout_edit::get_unique_cell_name"] = ""
let description["list::l_num_format"] = ""
let description["list::lcontain"] = ""
let description["list::lempty"] = ""
let description["list::lintersect3"] = ""
let description["list::list_comm"] = "# Returns elements in both list1 and list2"
let description["list::list_diff"] = "# Returns elements in list1 that are not in list2"
let description["list::list_equal"] = "# Check if the 2 list are equal"
let description["list::lmap"] = ""
let description["list::lmax"] = ""
let description["list::lmin"] = ""
let description["list::lremove"] = ""
let description["list::lrmdups"] = ""
let description["list::lsort_bboxes_xl"] = ""
let description["list::lsort_bboxes_yl"] = ""
let description["list::lsubtract"] = ""
let description["list::lvarcat"] = ""
let description["list::lvardel"] = ""
let description["list::lvarpop"] = ""
let description["list::lvarpush"] = ""
let description["list::numbered_lines_string"] = "# "
let description["lvision::read_mbist_files"] = ""
let description["mcmm::dump_icc_mcmm_compatible_inputs"] = ""
let description["mcmm::dump_icc_mcmm_data"] = ""
let description["mcmm::dump_mcmm_config"] = ""
let description["mcmm::manip_top_tcl"] = ""
let description["mcmm::post_process_files"] = ""
let description["mcmm_qor_cmd::close_files"] = ""
let description["mcmm_qor_cmd::link_to_file_external"] = ""
let description["mcmm_qor_cmd::link_to_file_internal"] = ""
let description["mcmm_qor_cmd::link_to_file_line_external"] = ""
let description["mcmm_qor_cmd::link_to_file_line_internal"] = ""
let description["mcmm_qor_cmd::ss_collect_main_data"] = ""
let description["mcmm_qor_cmd::ss_collect_snapshot_info"] = ""
let description["mcmm_qor_cmd::ss_convert_tim_rpt_to_html"] = ""
let description["mcmm_qor_cmd::ss_create_mcmm_qor_snapshot"] = ""
let description["mcmm_qor_cmd::ss_create_print_footer"] = ""
let description["mcmm_qor_cmd::ss_create_print_header"] = ""
let description["mcmm_qor_cmd::ss_create_print_main"] = ""
let description["mcmm_qor_cmd::ss_create_sum_index"] = ""
let description["mcmm_qor_cmd::ss_generate_report_file"] = ""
let description["mcmm_qor_cmd::ss_get_longest_grp_name"] = ""
let description["mcmm_qor_cmd::ss_mcmm_read_constraint_file"] = ""
let description["mcmm_qor_cmd::ss_mcmm_read_power_file"] = ""
let description["mcmm_qor_cmd::ss_print_histogram"] = ""
let description["mcmm_qor_cmd::ss_print_output"] = ""
let description["mcmm_qor_cmd::ss_print_output_to_extern_html"] = ""
let description["mcmm_qor_cmd::ss_print_output_to_html"] = ""
let description["mcmm_qor_cmd::ss_print_sect_separator"] = ""
let description["mcmm_qor_cmd::ss_print_value"] = ""
let description["mcmm_qor_cmd::ss_print_value_hyperlink"] = ""
let description["mcmm_qor_cmd::ss_print_value_to_html"] = ""
let description["mcmm_qor_cmd::ss_print_value_to_sum"] = ""
let description["mcmm_qor_cmd::ss_print_wns"] = ""
let description["mcmm_qor_cmd::uninit_global_variables"] = ""
let description["misc::collection2file"] = "# Writes a collection of objects into a file line by line"
let description["misc::file2list"] = "# Converts a file or multiple files to a list"
let description["misc::filecolumn2list"] = "# Converts a file column to a list"
let description["misc::filter_collection_direction"] = ""
let description["misc::find_bottom_up_inst_order"] = ""
let description["misc::find_in_order_block_hierarchy"] = ""
let description["misc::find_mlph_order"] = ""
let description["misc::get_user_email"] = "# Gets domain email address (joe.q.blow@intel.com) for a user id from cdislookup"
let description["misc::get_wire_direction"] = ""
let description["misc::is_metal_layer"] = ""
let description["misc::is_via_layer"] = ""
let description["misc::isfloat"] = ""
let description["misc::isinteger"] = ""
let description["misc::isnumber"] = ""
let description["misc::lcm"] = ""
let description["misc::lcm_list"] = ""
let description["misc::list2file"] = "# Writes a list into a file line by line"
let description["misc::lsearch_number"] = ""
let description["misc::man"] = ""
let description["misc::orientation2_to_orientation"] = ""
let description["misc::orientation_to_orientation2"] = ""
let description["misc::randAZazStr"] = "# Given a length, returns a random string"
let description["misc::send_image_by_email"] = "# Emails an image"
let description["misc::take_snapshot"] = "# Takes a snapshot of the current design view and auto-crops it"
let description["misc::time_format"] = ""
let description["mpp::create_feedthru_supplies"] = ""
let description["mpp::get_primary_domain"] = ""
let description["mpp::get_primary_ground_net"] = ""
let description["mpp::get_primary_power_net"] = ""
let description["mpp::get_supply_voltage"] = ""
let description["mpp::pushdown_pv_voltage_map"] = ""
let description["mpp::read_pv_voltage_map"] = "# Read pv voltage map file"
let description["mpp::save_incremental_upf"] = "# save incremental UPF"
let description["mpp::write_voltage_tcl"] = "# Read pv voltage tcl and the pv map file"
let description["msgcat::ConvertLocale"] = ""
let description["msgcat::Init"] = ""
let description["msgcat::mc"] = ""
let description["msgcat::mcflmset"] = ""
let description["msgcat::mcflset"] = ""
let description["msgcat::mcload"] = ""
let description["msgcat::mclocale"] = ""
let description["msgcat::mcmax"] = ""
let description["msgcat::mcmset"] = ""
let description["msgcat::mcpreferences"] = ""
let description["msgcat::mcset"] = ""
let description["msgcat::mcunknown"] = ""
let description["name::cell_hier_compare"] = ""
let description["name::generate_unique_name"] = "# Generate unique cell/net name."
let description["netspec::extract_simulation_netlist"] = "# Runs Extraction and produces Simulation netlist"
let description["netspec::gcr_create_bus_constraint"] = "# Create GCR Bus Constraint"
let description["netspec::gcr_create_diffpair_constraint"] = "# Create GCR Differential Pair Constraint"
let description["netspec::gcr_create_length_limit_constraint"] = "# Create GCR Length Limit Constraint"
let description["netspec::gcr_create_length_match_constraint"] = "# Create GCR Length Match Constraint"
let description["netspec::gcr_create_net_priority_constraint"] = "# Create GCR Net Priority Constraint"
let description["netspec::gcr_create_rv_constraint"] = "# Create GCR RV Constraint"
let description["netspec::gcr_create_shield_constraint"] = "# Create GCR Shield Constraint"
let description["netspec::get_constrained_nets"] = "# Get Constrained Nets"
let description["netspec::get_constraint_value"] = ""
let description["netspec::get_nets_from_dice"] = ""
let description["netspec::get_valid_layer_width"] = ""
let description["netspec::ndr_create_routing_rule_from_rule_name"] = "# Create Routing Rule from NETSPEC Rule-Name"
let description["netspec::ndr_update_net_routing_rule"] = "# Update Net's Routing Rule for basic constraints"
let description["netspec::propagate_down"] = "# Propagate Constraints down to child-blocks"
let description["netspec::propagate_net_constraints"] = "# Propagates Net Constraints Through Repeaters and Hierarchy"
let description["netspec::propagate_netspec"] = "# Propagate NETSPEC Constraints"
let description["netspec::propagate_up"] = "# Propagate Constraints up to current-block"
let description["netspec::read_attribute_xml_format"] = "# Reads Attribute-XML Constraint files"
let description["netspec::read_attribute_xml_format_helper"] = ""
let description["netspec::read_attrxml"] = "# Reads Attribute-XML files"
let description["netspec::read_dice_attrxml_files"] = "# Reads DICE and Attribute-XML files"
let description["netspec::read_dice_format"] = "# Reads DICE files"
let description["netspec::read_netspec"] = "# Reads NETSPEC files"
let description["netspec::remove_constraints_on_nets"] = "# Remove Constraints on Nets"
let description["netspec::report_match_lengths"] = "# Report Match Lengths"
let description["netspec::set_allowed_layers_from_net"] = "# Sets Allowed-Layers Constraint from Net to Target Nets"
let description["netspec::set_ndr_from_net"] = "# Sets NDR Constraint from Net to Target Nets"
let description["netspec::write_constraints_from_attrxml"] = "# Write Constraints from Attribute-XML"
let description["nwshSetup::load_icv_menus"] = ""
let description["nwtnAttrs::layerSet"] = ""
let description["nwtnAttrs::load_xml_setup"] = ""
let description["nwtnAttrs::netSet"] = ""
let description["nwtnSetup::loadShellSetupFile"] = ""
let description["nwtnSetup::loadUserFile"] = ""
let description["nwtnSetup::loadUserPrefs"] = ""
let description["nwtnSetup::loadUserSetupFile"] = ""
let description["nwtnSetup::sameDirectory"] = ""
let description["nwtnSetup::useRecentMouseTool"] = ""
let description["nwtnSetup::useRecentStatusBar"] = ""
let description["nwtnSetup::useSelectByNameStatusBar"] = ""
let description["nwtnTables::setupColumnDefsForObjectClasses"] = ""
let description["nwtnVS::errMsg"] = ""
let description["nwtnVS::hasZoom"] = ""
let description["nwtnVS::warnMsg"] = ""
let description["parseOpt::CmdSpec"] = ""
let description["parseOpt::buildCmd"] = ""
let description["parseOpt::cancelCmd"] = ""
let description["parseOpt::cmdSpec"] = ""
let description["parseOpt::defaultCmd"] = ""
let description["parseOpt::exec_validate_cmd"] = ""
let description["parseOpt::getDefaultValues"] = ""
let description["parseOpt::getOptionType"] = ""
let description["parseOpt::get_one_of_string_list"] = ""
let description["parseOpt::initDefaultValues"] = ""
let description["parseOpt::okCmd"] = ""
let description["parseOpt::open_gui"] = ""
let description["parseOpt::parseOpt"] = ""
let description["parseOpt::parseOpts"] = ""
let description["parseOpt::parseOptsMain"] = ""
let description["parseOpt::previewCmd"] = ""
let description["parseOpt::printHelp"] = ""
let description["parseOpt::redefine_proc_attributes"] = ""
let description["parseOpt::unhide_cmd"] = ""
let description["parseOpt::validate"] = ""
let description["parseOpt::varPop"] = ""
let description["pdn_tcl::hip_transform_pdn_tcl_file"] = ""
let description["pdn_tcl::remove_all_pdn_tcl"] = ""
let description["pdn_tcl::sd_get_pdn_tcl_file_from_noa"] = ""
let description["pdn_tcl::sd_import_hip_pdn"] = ""
let description["pdn_tcl::sd_route_hip_pdn"] = "# "
let description["pdn_tcl::translate_bbox"] = ""
let description["pdn_tcl::translate_create_net_shape"] = ""
let description["pdn_tcl::translate_create_shape"] = ""
let description["pg_util::sd_add_missing_vias_on_ebb_pg_pins"] = ""
let description["pg_util::sd_create_blkg_from_objs"] = ""
let description["pg_util::sd_create_ebb_blanket_blockage"] = "# Create routing blockage over EBB with user specified parameters"
let description["pg_util::sd_pg_repair"] = "# Create power straps to repair power that was pulled back from the boundary"
let description["pg_util::sd_protect_pins_in_pg_region"] = "# Create blockages fro power and ground to enable connection to signal pins in a pg region"
let description["pg_util::sd_pull_back_pg_from_ebb"] = "# Pull back PG shapes from EBBs"
let description["pg_util::sd_rm_straddle_pg_shapes_over_ebb"] = "# Remove straddle PG shapes over EBBs"
let description["pinPairing::cell_get_boundary"] = ""
let description["pinPairing::create_pin_pairing_stubs"] = "# Run pin pairing along boundary of given cells for specific layer"
let description["pinPairing::create_pin_pairing_stubs_acrossing_line"] = ""
let description["pinPairing::extract_rule_based_track_rules"] = ""
let description["pinPairing::extract_rule_based_track_rules_2_"] = ""
let description["pinPairing::get_all_objects_crossing_line"] = ""
let description["pinPairing::get_tracks_crossing_line"] = ""
let description["pinPairing::layer_get_min_width"] = ""
let description["pinPairing::layer_get_routing_direction"] = ""
let description["pinPairing::object_is_of_interest"] = ""
let description["pinPairing::remove_pin_pairing_stubs"] = "# Remove all pin pairing stubs"
let description["pinPairing::track_get_type"] = ""
let description["place::legalize_placement_posthook"] = ""
let description["place::rpd_get_overlapped_cells"] = "# Removes the ps and layout only cells overlaps with RP groups"
let description["place::rpd_process_layout_only_cells"] = "# Save power switches information"
let description["place::rpd_process_ps_cells"] = "# Save power switches information"
let description["place::rpd_restore_cells"] = "# Restore the cells removed for RP placement"
let description["place::rpd_verify_rp"] = "# Verifies RP integrity and dissolves corrupted RP structures"
let description["place::rpd_write_rsh"] = "# Convert syn RPD-Shell command file to icc2 RPD-Shell command file"
let description["place::swap_cell_types"] = "# Align the cells with m1 tracks by swapping type 1 and 2 tracks"
let description["place::write_placement"] = "# Generate placement file for all instances. The subset of the file could be used to replace the instances "
let description["ppp::create_unambiguous_center_pins"] = ""
let description["ppp::create_unambiguous_pins"] = ""
let description["ppp::filter_cells_for_push_down"] = ""
let description["ppp::find_automatic_exclude_nets_for_push_down"] = ""
let description["ppp::pop_tm_terminals"] = "# Pops-Up TM Terminals from Macros"
let description["ppp::post_push_track_info_update"] = ""
let description["ppp::push_blockages"] = ""
let description["ppp::push_cells"] = ""
let description["ppp::push_routes"] = "# Push-Down Routes"
let description["ppp::push_routing_guides"] = ""
let description["ppp::push_rows"] = ""
let description["ppp::push_voltage_areas"] = ""
let description["ppp::re_initialize_floorplan"] = ""
let description["ppp::store_original_track_bbox"] = ""
let description["ps::get_pwr_grid_config"] = "# Gets the pwr strap param values of the mlayer defined in power_grid_config.tcl"
let description["ps::get_pwr_switch_config"] = "# Finds the pwr grid layer pitch and offset numbers for power switch cell insertion, and sets few other settings"
let description["ps::insert_ps_cells_around_macro"] = "# Insert PS cells around macros, scripted solution"
let description["ps::ps_get_hierarchy"] = "# "
let description["ps::pull_point_into_va"] = "# Pull the point into the voltage area"
let description["ps::snap_to_nearest_locn"] = "# Find nearest legal coord to place PS cell"
let description["ps_dfb::add_prespecified_daisy_chains"] = ""
let description["ps_dfb::calculate_single_daisy_start_location"] = ""
let description["ps_dfb::calculate_single_start_location"] = "# calculate_start_location upper/lower_right/left"
let description["ps_dfb::calculate_start_location"] = "# calculate_start_location upper/lower_right/left"
let description["ps_dfb::create_power_switch_array_pattern_wa"] = "# Workaround for icc2 bug on create_power_switch_array command when pattern is specified. All the options' help messages are same as native except when explicity specified"
let description["ps_dfb::disconnect_switch_cell"] = ""
let description["ps_dfb::dont_touch_power_switch_nets"] = ""
let description["ps_dfb::find_select_signals"] = ""
let description["ps_dfb::get_chain_bbox"] = ""
let description["ps_dfb::get_nearby_switch_cells"] = ""
let description["ps_dfb::insert_ps_stitch_hfn"] = "# Power switch insertion for daisy + fishbone + hfn type chain connection. Inserts PS and makes hfn connection"
let description["ps_dfb::max_trans_report"] = ""
let description["ps_dfb::only_daisy_chain"] = ""
let description["ps_dfb::ps_connect_switches"] = ""
let description["ps_dfb::ps_select_daisy_chain_switches"] = ""
let description["ps_dfb::remove_switch_max_delay"] = ""
let description["ps_dfb::replace_fishbone_with_daisy"] = "# reconnect fishbone with daisy "
let description["ps_dfb::report_long_switch_nets"] = "# power switch connection"
let description["ps_dfb::report_switch_transitions"] = ""
let description["ps_dfb::set_switch_max_delay"] = ""
let description["ps_dfb::show_daisy_chain"] = "# highlight power switch connection of daisy chain"
let description["ps_dfb::show_main_chain"] = "# highlight power switch connection of main chain"
let description["ps_dfb::show_power_switch_chain"] = "# highlight power switch connection"
let description["ps_dfb::split_daisy_chain"] = ""
let description["ps_dfb::stitching_daisy_fb"] = "# power switch connection"
let description["ps_dfb::switch_cell_detail_reports"] = ""
let description["pvpd_utils::TclFindTheFullPath"] = ""
let description["pvpd_utils::load_lib"] = ""
let description["pwr::add_missing_via_at_va_edge"] = "# Add missing via at voltage_area corner"
let description["pwr::add_pg_in_polygon"] = "# create pattern and compile pg for custom patterns"
let description["pwr::convert_pwr_shapes_to_terminals"] = "# Convert power shape to terminals. The default layer is max routing layer and above"
let description["pwr::get_power_layers"] = "# Return list of power grid layers"
let description["pwr::remove_dangling_staple_pg"] = "# Remove shorts staples which is less than the staple overhang"
let description["pwr::remove_pg_in_polygon"] = "# Remove pg of layers in polygon"
let description["pwr::remove_pg_terminals"] = "# Remove power grid"
let description["pwr::remove_power_grid"] = "# Remove power grid"
let description["pwr::stdcell_hookup_via1"] = "# Populate via1 connections"
let description["pwr::write_power_grid"] = "# Write out power grid file for reloading"
let description["pwr_hookup::convert_shape_file_to_icc2"] = "# convert user shape file to icc2 format"
let description["pwr_hookup::create_stdcell_powerhookup"] = "# Create power hookup for the current design"
let description["pwr_hookup::find_flexfill_pwr_hookup_options"] = "# find the available flexfill powerhookup options"
let description["pwr_hookup::get_first_gnd_rail"] = "# get information to pass to runset on first gnd rail"
let description["pwr_hookup::get_hookup_layer_vias_and_shapes"] = "# Get all vias and shapes on the hookup layers in the current design"
let description["pwr_hookup::get_hookup_layers"] = "# get a list of power hookup layers"
let description["pwr_hookup::get_process_name"] = "# get process name & return in form for icv hookup"
let description["pwr_hookup::get_pwr_gnd_regions"] = "# get power & ground regions in the current block"
let description["pwr_hookup::get_pwr_hookup_cell_patterns"] = "# get hookup cells pattern"
let description["pwr_hookup::get_pwr_hookup_process_settings"] = "# get runset process defaults & merge with G_var/INTEL_var overrides"
let description["pwr_hookup::get_pwr_hookup_ref_cell_info"] = "# get info on possible ref cells, excludes, and patterns"
let description["pwr_hookup::get_pwr_hookup_via_settings"] = "# Get settings for power hookup vias - master, height/width per layer"
let description["pwr_hookup::hookup_convert_cell_wildcards"] = "# convert ref_name wildcard list to actual cells in design"
let description["pwr_hookup::modify_def_vias_section"] = "# remove VIA section of def file"
let description["pwr_hookup::print_via_shape_summary"] = "# Print a summary of added/removed vias & shapes"
let description["pwr_hookup::remove_stdcell_powerhookup"] = "# Remove power hookup for the current design"
let description["pwr_hookup::set_hookup_via_type"] = "# set via type"
let description["pwr_hookup::tcl_to_icv_list"] = "# convert tcl list to icv style of list"
let description["q::get_cell_coordinates"] = "# Get cell coordinates."
let description["q::get_driver"] = "# Get the driver pin of the hierachical net"
let description["q::get_drivers_of_net"] = "#  Get drivers of a net"
let description["q::get_heml"] = "# Retunrn exclusive layer for the macro/ebb/hip template"
let description["q::get_hier"] = "# Get hierarchical portion of a hierarchical cell name."
let description["q::get_highest_layer"] = "# Generic proc to return highest layer for a given template"
let description["q::get_hpml"] = "# Return power layer for the macro/ebb/hip template"
let description["q::get_hsml"] = "# Retunrn shared layer for the macro/ebb/hip template"
let description["q::get_logic_between_pins"] = "# Get cells between two pins"
let description["q::get_macros"] = "# Get macros in the current design. Filtering logic is ((is_hard_macro==true && is_hierarchical==false) || $G_MACRO_INCLUDE_FILTER_EXPR)) && $opts(-filter) && !$G_MACRO_EXCLUDE_FILTER_EXPR"
let description["q::get_next_size"] = "# Returns next up size master. \"\" is returned if no size available."
let description["q::get_pg_strategy_via_rules"] = ""
let description["q::get_physical_context_power_domains"] = ""
let description["q::get_power_domain_info"] = "# Query power domain related infomation, including power net and voltage_area info"
let description["q::get_prev_size"] = "# Returns prev down size master. \"\" is returned if no size available."
let description["q::get_receiver"] = "# Get the receiver pins of the hierachical net"
let description["q::get_receivers_of_net"] = "# Get all the receivers of the flat net"
let description["q::get_techfile_field_hash"] = "# Create hash from techfile field"
let description["q::get_techfile_info"] = "# Dump & parse contents of techfile of current_lib"
let description["q::get_tf_max_layers"] = "# Get the maximum metal/via mask layers and corresponding techfile layers from tech file"
let description["q::get_visa_xlms"] = "# Get the visa ULM, PLM, and repeater blocks"
let description["q::get_voltage_area_of_cell_location"] = "# Get voltage area of a given cell location."
let description["q::is_buffer_inst"] = "# Check if instance is buffer. Can take a collection as argument"
let description["q::is_buffer_lib_cell"] = "# Check if a lib cell is buffer. Can take a collection as argument"
let description["q::is_covered_by_blocks"] = "# Checking if the currentblock is fully covered by physical hierarchy blocks"
let description["q::is_inverter_inst"] = "# Check if instance is inverter. Can take a collection as qrgument"
let description["q::is_nested_va"] = "# Query whether va is a nested voltage_area. Va contains other voltage area inside. DEFAULT_VA is not check "
let description["q::is_vertical_layer"] = "# Check if the metal layer is vertical layer"
let description["q::strip_techfile_comments"] = ""
let description["rdt_tim_constr_ns::check_save_constraints_log_needs"] = ""
let description["rdt_tim_constr_ns::env4rdt_timing_constraints"] = ""
let description["rdt_tim_constr_ns::get_constraints_ordered_file"] = ""
let description["rdt_tim_constr_ns::no_mcmm_timing_constraints"] = ""
let description["rdt_tim_constr_ns::rdt_pv_timing_constraints"] = ""
let description["rdt_tim_constr_ns::source_constraints_file"] = ""
let description["rdt_xml_2_mcmm_config_ns::get_field"] = ""
let description["rdt_xml_2_mcmm_config_ns::get_unique_search_path"] = ""
let description["reconnectPswNS::buildSwIndexTables"] = ""
let description["reconnectPswNS::buildSwsConnectionGroup"] = ""
let description["reconnectPswNS::calculateCellDistanceToTrunkCell"] = ""
let description["reconnectPswNS::changeCellConnsForMergedGroup"] = ""
let description["reconnectPswNS::checkSwCellHasDiver"] = ""
let description["reconnectPswNS::compareCandidateConns"] = ""
let description["reconnectPswNS::comparePswConnX"] = ""
let description["reconnectPswNS::comparePswConnY"] = ""
let description["reconnectPswNS::connectGroups"] = ""
let description["reconnectPswNS::disconnectPswConnection"] = ""
let description["reconnectPswNS::disconnectPswsAbnormalYConnection"] = ""
let description["reconnectPswNS::findCandidateConnectionWithMinimalDistanceToTrunkCell"] = ""
let description["reconnectPswNS::findTargetConnectionsInGroups"] = ""
let description["reconnectPswNS::findTrunkCells"] = ""
let description["reconnectPswNS::getCellBBox"] = ""
let description["reconnectPswNS::getCellLoadPinCells"] = ""
let description["reconnectPswNS::getConnectionNormalDistance"] = ""
let description["reconnectPswNS::getDriverCell"] = ""
let description["reconnectPswNS::getDriverCellFromGroupOfCells"] = ""
let description["reconnectPswNS::getLoadCellPins"] = ""
let description["reconnectPswNS::getLoadCells"] = ""
let description["reconnectPswNS::getNearestCoordinate"] = ""
let description["reconnectPswNS::getSwCellHasNoDriverIfHave"] = ""
let description["reconnectPswNS::getTrunkCellDirection"] = ""
let description["reconnectPswNS::getTwoCellDistance"] = ""
let description["reconnectPswNS::handlingOutlierGroups"] = ""
let description["reconnectPswNS::mergeTwogroupsForConnectionAndChangeTargetGroupConnIfNecessary"] = ""
let description["reconnectPswNS::traversePswsConnections"] = ""
let description["refresh::dump_for_block_refresh"] = ""
let description["refresh::dump_refresh"] = "# Dump out refresh collaterals per block, or MLPH."
let description["refresh::dump_rptr_connectivity"] = "# Write repeater connectivity in ICC2."
let description["refresh::hier_sort_bottom_up"] = "# Return a bottom-up hierarchically sorted template list given a collection of cells."
let description["refresh::translate_eco_file"] = ""
let description["refresh::write_eco_files"] = "# Write change files to implement changes in pre_golden block."
let description["rolluplib::cleanup"] = ""
let description["rolluplib::copy"] = ""
let description["rolluplib::gen_references"] = ""
let description["rolluplib::main"] = "# Rolls up library for staging purposes"
let description["rolluplib::run_checks"] = ""
let description["route::get_net_wirelength"] = "# Report the wirelength for a net"
let description["route::get_routing_layers"] = "# Get routing layers"
let description["route::reroute_shorts"] = "# Sets user defined layer costs"
let description["route::set_via_color"] = "# Color in power grid"
let description["route::set_via_ladder_rule"] = "# Set via ladder rules on reference cell pins"
let description["rpt::check_qor_report"] = "# Report the TNS and WNS from report_qor"
let description["rpt::clock_information"] = "#  Dump clock report"
let description["rpt::create_run_summary"] = "# Create run summary file for the design QoR check"
let description["rpt::get_total_z"] = "# returns Z of the design based on tg_* library attributes"
let description["rpt::power_domains"] = "# Reports power domains of the (hierarchical) design"
let description["rpt::print_timing_path_summary"] = ""
let description["rpt::pvt"] = "# Reports PVT of the design for given corners"
let description["rpt::qor"] = "# Reports QOR of the design for given corners"
let description["rpt::qor_summary"] = "# Rports QOR -- SUMMARY"
let description["rpt::report_custom_powergrid_info"] = "# Write a report for all custom/secondary power domain bounding boxes."
let description["rpt::route_info_of_paths"] = "# Reports layers information of timing paths"
let description["rpt::route_info_one_path"] = "# Reports layers information of timing paths"
let description["rpt::supply_nets"] = "# Reports supply nets of the (hierarchical) design"
let description["rpt::timing"] = "# Reports timing paths"
let description["rpt::zero_interconnect_timing"] = "# Reports Zero-RC timing report"
let description["ser_utils::filter_seq_by_avf"] = ""
let description["ser_utils::filter_vecseq_fromser"] = ""
let description["ser_utils::get_actual_reference"] = ""
let description["ser_utils::get_next_cell_size_up"] = ""
let description["ser_utils::get_ser_lib_cells"] = ""
let description["ser_utils::insert_rcc"] = ""
let description["ser_utils::insert_rts"] = ""
let description["ser_utils::insert_seut"] = ""
let description["ser_utils::report_registers"] = ""
let description["ser_utils::report_ser_insertion_rate"] = ""
let description["ser_utils::ser_assign_avf_values"] = ""
let description["ser_utils::ser_assign_switching_af"] = ""
let description["ser_utils::ser_assign_switching_af_input"] = ""
let description["ser_utils::ser_set_reference_latch"] = ""
let description["ser_utils::update_vec_scripts"] = ""
let description["snpsBusyCursorSkipList::init"] = ""
let description["snpsCalculateWindowGeometry::topLevel"] = ""
let description["snpsCalculateWindowGeometry::topLevelLayout"] = ""
let description["snpsCommandForm::script_editor_create"] = ""
let description["snpsCommandForm::script_editor_exist"] = ""
let description["snpsCommandForm::script_editor_group"] = ""
let description["snpsCommandForm::script_editor_hide"] = ""
let description["snpsCommandForm::script_editor_should_turn_on"] = ""
let description["snpsCommandForm::script_editor_show"] = ""
let description["snpsCommandForm::script_editor_toggle_on_off"] = ""
let description["snpsCommandForm::set_script_editor_exist"] = ""
let description["snpsCommandForm::set_script_editor_group"] = ""
let description["snpsCurrInst::curInstCmdExists"] = ""
let description["snpsCurrInst::getCurrentInstance"] = ""
let description["snpsCurrInst::restoreCurrentInstance"] = ""
let description["snpsCurrInst::saveCurrentInstance"] = ""
let description["snpsCurrInst::saveCurrentInstanceAndSetCurrentInstanceToTop"] = ""
let description["snpsCurrInst::setCurrentInstance"] = ""
let description["snpsCurrInst::setCurrentInstanceToTop"] = ""
let description["snpsDocBrowser::getAllManPageList"] = ""
let description["snpsDocBrowser::getAproposAsHtml"] = ""
let description["snpsDocBrowser::getErrorPage"] = ""
let description["snpsDocBrowser::getIndexFromAproposOutputFile"] = ""
let description["snpsDocBrowser::getIndexPageForCommandList"] = ""
let description["snpsDocBrowser::getManIndex"] = ""
let description["snpsDocBrowser::getManMessageIndex"] = ""
let description["snpsDocBrowser::getManPageAsHtml"] = ""
let description["snpsDocBrowser::getManPageAsHtml_builtinMan"] = ""
let description["snpsDocBrowser::getManPageAsHtml_unixMan"] = ""
let description["snpsDocBrowser::getManPageHome"] = ""
let description["snpsDocBrowser::getManPageIndex"] = ""
let description["snpsDocBrowser::getManPageList"] = ""
let description["snpsDocBrowser::getManPageListFromDirectory"] = ""
let description["snpsDocBrowser::getManPath"] = ""
let description["snpsDocBrowser::getPerlCmd"] = ""
let description["snpsDocBrowser::handleEmptyPage"] = ""
let description["snpsDocBrowser::listDir"] = ""
let description["snpsDocBrowser::new"] = ""
let description["snpsDocBrowser::quote_url"] = ""
let description["snpsDocBrowser::showManViewerDialog"] = ""
let description["snpsDocBrowser::showUrlInDialog"] = ""
let description["snpsDocBrowser::text2html"] = ""
let description["snpsGuiMenuEnable::current_is_schematic"] = ""
let description["snpsGuiMenuEnable::enable_if_regular_path_schematic"] = ""
let description["snpsGuiMenuEnable::getListViewTypes"] = ""
let description["snpsGuiMenuEnable::has_current_design"] = ""
let description["snpsGuiMenuEnable::has_designs"] = ""
let description["snpsGuiMenuEnable::has_hier_cells_selected"] = ""
let description["snpsGuiSelect::can_get_shapes_of_selected"] = ""
let description["snpsGuiSelect::get_via_defs_of_selected"] = ""
let description["snpsGuiSelect::selectHighlighted"] = ""
let description["snpsMRUPalette::add_mru_hot_keys"] = ""
let description["snpsMRUPalette::show_mru_favorites"] = ""
let description["snpsMRUPalette::show_mru_recent"] = ""
let description["snpsPaletteGroup::addHVPages"] = ""
let description["snpsPaletteGroup::createConsole"] = ""
let description["snpsPaletteGroup::createPalette"] = ""
let description["snpsPaletteGroup::createPaletteGroupPalettes"] = ""
let description["snpsPaletteGroup::createScriptEditor"] = ""
let description["snpsPaletteGroup::debug"] = ""
let description["snpsPaletteGroup::debugVars"] = ""
let description["snpsPaletteGroup::decodeEncodedPage"] = ""
let description["snpsPaletteGroup::filterPages"] = ""
let description["snpsPaletteGroup::getIndexedPaletteValue"] = ""
let description["snpsPaletteGroup::initGroups"] = ""
let description["snpsPaletteGroup::initPageHidden"] = ""
let description["snpsPaletteGroup::isPageInOrder"] = ""
let description["snpsPaletteGroup::isValidPage"] = ""
let description["snpsPaletteGroup::matchPageValues"] = ""
let description["snpsPaletteGroup::setCurrentPage"] = ""
let description["snpsPaletteGroup::setExpandedAndCurrent"] = ""
let description["snpsPaletteGroup::setExpandedAndCurrent1"] = ""
let description["snpsPaletteGroup::stringToInt"] = ""
let description["snpsPaletteGroup::use_palette_group"] = ""
let description["snpsQoRSnapshot::appendOptionBool"] = ""
let description["snpsQoRSnapshot::appendOptionList"] = ""
let description["snpsQoRSnapshot::collectPaths"] = ""
let description["snpsQoRSnapshot::commandHasOption"] = ""
let description["snpsQoRSnapshot::commandNeedsInputValue"] = ""
let description["snpsQoRSnapshot::comparePath"] = ""
let description["snpsQoRSnapshot::createException"] = ""
let description["snpsQoRSnapshot::doModal"] = ""
let description["snpsQoRSnapshot::getFileName"] = ""
let description["snpsQoRSnapshot::jumpToFileLine"] = ""
let description["snpsQoRSnapshot::reEscape"] = ""
let description["snpsQoRSnapshot::regScrollPos"] = ""
let description["snpsQoRSnapshot::resetModal"] = ""
let description["snpsQoRSnapshot::showPath"] = ""
let description["snpsQoRSnapshot::showResults"] = ""
let description["snpsQoRSnapshot::toHtml"] = ""
let description["snpsQoRSnapshot::update3rdHtml"] = ""
let description["snpsQoRSnapshot::updateHtml"] = ""
let description["snpsReadDRC::_breakPolygon"] = ""
let description["snpsReadDRC::_generateDRCTempFileName"] = ""
let description["snpsReadDRC::_renameErrorType"] = ""
let description["snpsTiledView::create_window"] = ""
let description["snpsTiledView::init_window"] = ""
let description["snpsTiledView::post_create_window"] = ""
let description["snpsTiledView::pre_create_window"] = ""
let description["snpsTiledView::use_tiled_view"] = ""
let description["snpsUtils::absolute_path"] = ""
let description["snpsUtils::strip_filename"] = ""
let description["snpsWndFramework::addStandardWindowMenu"] = ""
let description["snpsWndFramework::add_default_view_caption_menu"] = ""
let description["snpsWndFramework::add_next_previous_window_menus"] = ""
let description["snpsWndFramework::add_window_menu_cascade_views"] = ""
let description["snpsWndFramework::add_window_menu_close_all_views"] = ""
let description["snpsWndFramework::add_window_menu_close_all_windows"] = ""
let description["snpsWndFramework::add_window_menu_close_view"] = ""
let description["snpsWndFramework::add_window_menu_close_window"] = ""
let description["snpsWndFramework::add_window_menu_hide_view"] = ""
let description["snpsWndFramework::add_window_menu_maximize_views"] = ""
let description["snpsWndFramework::add_window_menu_next_view"] = ""
let description["snpsWndFramework::add_window_menu_next_window"] = ""
let description["snpsWndFramework::add_window_menu_previous_view"] = ""
let description["snpsWndFramework::add_window_menu_previous_window"] = ""
let description["snpsWndFramework::add_window_menu_tile_views"] = ""
let description["snpsWndFramework::add_window_menu_view_ops_heading"] = ""
let description["snpsWndFramework::add_window_menu_window_ops_heading"] = ""
let description["snpsWndFramework::checkEnableSwitchView"] = ""
let description["snpsWndFramework::close_current_view"] = ""
let description["snpsWndFramework::console_create"] = ""
let description["snpsWndFramework::console_exist"] = ""
let description["snpsWndFramework::console_group"] = ""
let description["snpsWndFramework::console_hide"] = ""
let description["snpsWndFramework::console_should_turn_on"] = ""
let description["snpsWndFramework::console_show"] = ""
let description["snpsWndFramework::console_toggle_on_off"] = ""
let description["snpsWndFramework::create_action"] = ""
let description["snpsWndFramework::early_start_callback"] = ""
let description["snpsWndFramework::get_toplevel_id"] = ""
let description["snpsWndFramework::installDefaultViewCaptionMenu"] = ""
let description["snpsWndFramework::late_start_callback"] = ""
let description["snpsWndFramework::maximize_current_view"] = ""
let description["snpsWndFramework::minimize_current_view"] = ""
let description["snpsWndFramework::normalize_menu_root"] = ""
let description["snpsWndFramework::query_enable_maximize_current_view"] = ""
let description["snpsWndFramework::query_enable_minimize_current_view"] = ""
let description["snpsWndFramework::query_enable_restore_current_view"] = ""
let description["snpsWndFramework::restore_current_view"] = ""
let description["snpsWndFramework::set_console_exist"] = ""
let description["snpsWndFramework::set_console_group"] = ""
let description["snpsWndFramework::tqePaletteButtonPress"] = ""
let description["snpsWndFramework::tqePaletteFocusIn"] = ""
let description["snpsWndFramework::view_is_docked"] = ""
let description["snpsWndFramework::x_cascade_tile_views"] = ""
let description["snpsWndFramework::x_dock_undock_view"] = ""
let description["tcl::CopyDirectory"] = ""
let description["tcl::HistAdd"] = ""
let description["tcl::HistChange"] = ""
let description["tcl::HistClear"] = ""
let description["tcl::HistEvent"] = ""
let description["tcl::HistIndex"] = ""
let description["tcl::HistInfo"] = ""
let description["tcl::HistKeep"] = ""
let description["tcl::HistNextID"] = ""
let description["tcl::HistRedo"] = ""
let description["tcl::Lassign"] = ""
let description["tcl::Lempty"] = ""
let description["tcl::Lget"] = ""
let description["tcl::Lvarincr"] = ""
let description["tcl::Lvarincr1"] = ""
let description["tcl::Lvarpop"] = ""
let description["tcl::Lvarpop1"] = ""
let description["tcl::Lvarset"] = ""
let description["tcl::Lvarset1"] = ""
let description["tcl::Lvarset1nc"] = ""
let description["tcl::MacOSXPkgUnknown"] = ""
let description["tcl::OptAmbigous"] = ""
let description["tcl::OptBadValue"] = ""
let description["tcl::OptCheckType"] = ""
let description["tcl::OptCreateTestProc"] = ""
let description["tcl::OptCurAddr"] = ""
let description["tcl::OptCurDesc"] = ""
let description["tcl::OptCurDescFinal"] = ""
let description["tcl::OptCurSetValue"] = ""
let description["tcl::OptCurState"] = ""
let description["tcl::OptCurrentArg"] = ""
let description["tcl::OptDefaultValue"] = ""
let description["tcl::OptDoAll"] = ""
let description["tcl::OptDoOne"] = ""
let description["tcl::OptError"] = ""
let description["tcl::OptFlagUsage"] = ""
let description["tcl::OptGetPrgCounter"] = ""
let description["tcl::OptGuessType"] = ""
let description["tcl::OptHasBeenSet"] = ""
let description["tcl::OptHelp"] = ""
let description["tcl::OptHits"] = ""
let description["tcl::OptInstr"] = ""
let description["tcl::OptIsCounter"] = ""
let description["tcl::OptIsFlag"] = ""
let description["tcl::OptIsOpt"] = ""
let description["tcl::OptIsPrg"] = ""
let description["tcl::OptKeyDelete"] = ""
let description["tcl::OptKeyError"] = ""
let description["tcl::OptKeyGetDesc"] = ""
let description["tcl::OptKeyParse"] = ""
let description["tcl::OptKeyRegister"] = ""
let description["tcl::OptLengths"] = ""
let description["tcl::OptMissingValue"] = ""
let description["tcl::OptName"] = ""
let description["tcl::OptNeedValue"] = ""
let description["tcl::OptNewInst"] = ""
let description["tcl::OptNextArg"] = ""
let description["tcl::OptNextDesc"] = ""
let description["tcl::OptNormalizeOne"] = ""
let description["tcl::OptOptUsage"] = ""
let description["tcl::OptParamType"] = ""
let description["tcl::OptParse"] = ""
let description["tcl::OptProc"] = ""
let description["tcl::OptProcArgGiven"] = ""
let description["tcl::OptSelection"] = ""
let description["tcl::OptSetPrgCounter"] = ""
let description["tcl::OptState"] = ""
let description["tcl::OptTooManyArgs"] = ""
let description["tcl::OptTree"] = ""
let description["tcl::OptTreeVars"] = ""
let description["tcl::OptType"] = ""
let description["tcl::OptTypeArgs"] = ""
let description["tcl::OptValue"] = ""
let description["tcl::OptVarName"] = ""
let description["tcl::SetMax"] = ""
let description["tcl::SetMin"] = ""
let description["tech::get_techfile_info"] = "# Get a template value from cbc_rules (returns default rule if no template version)"
let description["tech::get_tf_block"] = ""
let description["tech::read_techfile_info"] = "# Get a template value from cbc_rules (returns default rule if no template version)"
let description["tm_custom_scripts::copy_shapes"] = ""
let description["tm_custom_scripts::find_nets_by_mouse_pointer"] = ""
let description["tm_custom_scripts::generate_trim_table"] = ""
let description["tm_custom_scripts::get_trim_row_col_pitch"] = ""
let description["tm_custom_scripts::insert_tv0"] = "# Inserts tv0A vias to all the nets or specified nets"
let description["tm_custom_scripts::is_boundary_completely_inside"] = ""
let description["tm_custom_scripts::parse_trim_table"] = ""
let description["tm_custom_scripts::paste_shapes"] = ""
let description["tm_custom_scripts::rename_shapes"] = "# Renaming of selected shapes"
let description["tmtd::attach_terminal_attributes"] = ""
let description["tmtd::bbox_get_xh"] = "# Query the xh point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["tmtd::bbox_get_xl"] = "# Query the xl point from bbox. The bbox format can be {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["tmtd::bbox_get_yh"] = "# Query the yh point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["tmtd::bbox_get_yl"] = "# Query the yl point from bbox. The bbox format is {{xl yl} {xh yh}} or {xl yl xh yh}"
let description["tmtd::boundary2bbox"] = ""
let description["tmtd::change_ndm_to_design_view"] = "# change ndm view to design view, if not present creates a block from ndm info and instantiates"
let description["tmtd::check_bu_collaterals"] = "# Checkes connectivity between BU collateral with design"
let description["tmtd::check_for_tm_delete"] = ""
let description["tmtd::check_inputs"] = ""
let description["tmtd::check_obj_outside_boundary"] = ""
let description["tmtd::check_object"] = ""
let description["tmtd::cleanup_old_collaterals"] = ""
let description["tmtd::compare_oas_or_gds"] = ""
let description["tmtd::convert_tm1_terminals_into_c4bump"] = ""
let description["tmtd::convert_tms_blockages_to_shape"] = ""
let description["tmtd::create_blockage_via"] = ""
let description["tmtd::create_def"] = "# Generates def file "
let description["tmtd::create_ndm_block"] = ""
let description["tmtd::delete_older_shapes"] = "# Delete older shapes of a given blocks"
let description["tmtd::filter_objects"] = ""
let description["tmtd::find_child_pin_name"] = ""
let description["tmtd::find_new_bbox"] = ""
let description["tmtd::find_other_tm1_or_c4_shapes_connected"] = ""
let description["tmtd::find_via_overhanged_shapes"] = ""
let description["tmtd::generate_object_owner"] = ""
let description["tmtd::generate_td_collateral_for_block"] = ""
let description["tmtd::generate_td_collaterals"] = ""
let description["tmtd::get_TopMetals_fromChildblocks"] = ""
let description["tmtd::get_edge_boundary"] = ""
let description["tmtd::get_ndm_info"] = ""
let description["tmtd::handle_encroached_straddling_objects"] = ""
let description["tmtd::interface_tm_delete"] = ""
let description["tmtd::lempty"] = ""
let description["tmtd::lmax"] = ""
let description["tmtd::lmin"] = ""
let description["tmtd::modify_bbox"] = ""
let description["tmtd::poly_2_bbox"] = "# convert polygon {{xl yl} {xl yh} {xh yh} {xh yl} {xl yl}} to bbox {{xl yl} {xh yh}}"
let description["tmtd::popup_block"] = ""
let description["tmtd::print_process_variables"] = ""
let description["tmtd::process_internal_nets"] = "# Process shapes/net_shapes into blockages"
let description["tmtd::process_owner_attribute"] = "# Processing tm_hierarchy_owner attribute"
let description["tmtd::process_shapes_from_frame"] = ""
let description["tmtd::process_straddling_objs"] = ""
let description["tmtd::rect_2_bbox"] = "# convert rectangle {xl yl xh yh} to bbox {{xl yl} {xh yh}}"
let description["tmtd::separate_pin_with_non_pin"] = ""
let description["tmtd::source_bu_collateral"] = ""
let description["tmtd::source_tm_collateral"] = ""
let description["tmtd::tm_collateral_diff"] = "# XOR between two TM collaterals"
let description["tmtd::tm_consume_td_tm_file"] = "# Consume top down tm file"
let description["tmtd::tm_validate_bu_with_original"] = "# XOR between BU collaterals with original block"
let description["tmtd::tms_write_gds"] = ""
let description["tmtd::tms_write_oasis"] = ""
let description["tmtd::transform_objects_parent_2_child"] = "# transform object from parent to child"
let description["tmtd::transform_points_child_2_parent"] = "# transform points from child to parent"
let description["tmtd::transform_points_parent_2_child"] = "# transform points from parent to child"
let description["tmtd::viaParseICCTechFile"] = ""
let description["tmtd::write_blockages"] = "# appends blockages in a given file"
let description["tmtd::write_mims"] = "# appends mimcap layers in a given file"
let description["tmtd::write_out_tm_td_collaterals"] = ""
let description["tmtd::write_terminals"] = "# appends terminal shapes in a given file"
let description["trace::cmd_trace_aux"] = ""
let description["trace::hook_app_options"] = ""
let description["trace::hook_reset_app_options"] = ""
let description["trace::proc_hook"] = ""
let description["trace::proc_trace_aux"] = ""
let description["trace::source_hook"] = ""
let description["trace::source_hook_leave"] = ""
let description["trace::trace_command_execution"] = ""
let description["trace::trace_errorInfo"] = ""
let description["trace::trace_error_off"] = ""
let description["trace::trace_error_on"] = ""
let description["trace::trace_proc_override"] = ""
let description["tsmc2snps::translate_FloorplanRuleChecker_cmd_tsmc2snps"] = ""
let description["tspec::clipper"] = "# Clipper Algorithm based on Manhattan distance"
let description["tspec::consume_io_constraints"] = ""
let description["tspec::create_bbt"] = "# Reads TSPEC files"
let description["tspec::create_missing_timing_arcs"] = ""
let description["tspec::create_timing_on_unconstrained_pins"] = "# Create timing on unconstrained pins"
let description["tspec::dangling"] = ""
let description["tspec::format_if_num"] = ""
let description["tspec::gen_constraints_for_unbudgeted_pins"] = ""
let description["tspec::generate_budgeted_collateral_for_xmim"] = "# Generates top-down TSPEC file for block"
let description["tspec::generate_budgeted_tspec"] = "# Generates top-down TSPEC file for block"
let description["tspec::get_driver"] = ""
let description["tspec::get_keys"] = ""
let description["tspec::get_receiver"] = ""
let description["tspec::get_subkeys"] = ""
let description["tspec::nets_in_path"] = "# return collection of nets in the given timing path collection"
let description["tspec::read"] = "# Reads TSPEC files"
let description["tspec::reconcile_tintent"] = ""
let description["tspec::report_tspec_count"] = ""
let description["tspec::report_unconstrained_pins"] = "# Report pins with no timing paths"
let description["tspec::report_unconstrained_ports"] = ""
let description["tspec::spec_default"] = ""
let description["tspec::timing_path_analyze"] = "# find no of logic levels and  bad RC nets"
let description["tspec::tspec_async_pins"] = ""
let description["ubm::NflTclFindTheFullPath"] = ""
let description["ubm::load_lib"] = ""
let description["utils::CalcPackageLocations"] = ""
let description["utils::add_header_to_file"] = "# Add a standard header to the beginning of a file"
let description["utils::change_ref_libs_path"] = "# Changes Current Ref-Lib's Path to New Path"
let description["utils::compute_relative_path"] = ""
let description["utils::convert_units"] = "# Converts units of a given metric"
let description["utils::find_package"] = "# Finds the location of a package"
let description["utils::float_eq"] = "# Floating point equal comparison"
let description["utils::get_array_contents_sorted_by_value"] = ""
let description["utils::get_design_info"] = "# Prints the design info"
let description["utils::get_last_stage"] = "# Returns the last stage of the flow"
let description["utils::get_pcnt"] = "# Returns percentage amount returned to the nearest 100th of a percentage"
let description["utils::get_repeaters"] = "# Returns a collection of repeater cells for pins"
let description["utils::get_tmp_dir_name"] = "# Returns a tmp file name"
let description["utils::get_tmp_file_name"] = "# Returns a tmp file name"
let description["utils::get_top_level_port_of_pin"] = ""
let description["utils::get_toplevel_port_of_net"] = ""
let description["utils::is_stage_done"] = "# Checks is a stage has been run"
let description["utils::port_up_terminals"] = "# Port up terminals from hierarchical cells.  It does not remove terminals from the cells. Returns a collection of the ported terminals."
let description["utils::print_header"] = "# Add a standard header to the beginning of a file"
let description["utils::print_histogram"] = "# Prints a histogram"
let description["utils::recursive_trace_net_topology"] = ""
let description["utils::save_design_info"] = ""
let description["utils::shrink_wrap_boundary"] = "# Shrink wrap top-level boundary around child partition edges."
let description["utils::snap_terminals_to_boundary_edge"] = "# Snap terminals orthogonally to left, right, top, or bottom boundary edge of current design."
let description["utils::trace_driver_pin"] = "# Trace connectvitiy backwards for given pin/port and return its driving pin/port."
let description["utils::trace_net_topology"] = "# Trace the given pins/ports and return a list of their topological connectivity.  Repeaters/inverters are transparent."
let description["via_ladder::add_via_ladder"] = "# Insert via ladders"
let description["via_ladder::assign_via_ladder_constraints"] = "# Insert via ladders"
let description["via_ladder::calc_terminal_window_height"] = "# Get absolute distance between 2 points"
let description["via_ladder::calc_terminal_window_min_width"] = "# Get minimum width if a list of terminals are given to the proc"
let description["via_ladder::calc_terminal_window_width"] = "# Get absolute distance between 2 points"
let description["via_ladder::calc_vl_structure"] = "# Get number of fingers per metal layer for VL structure"
let description["via_ladder::gen_vl_pattern_from_tech"] = ""
let description["via_ladder::generate_via_ladder_rules"] = "# Generate via ladder rules needed for auto update for std cells specified in teh via_ladder_rules.tf file"
let description["via_ladder::remove_via_ladder"] = "# Remove via ladder of the whole design or on specific net"
let description["via_ladder::set_via_ladder_rule"] = "# Insert via ladders"
let description["via_ladder::stdcell_vl_profile"] = "# Profile all the stdcells specified by user for setting via ladder rules for auto update"
let description["via_ladder::update_techfile_for_via_ladder_rule"] = "# Update via ladder rules in techfile. Remove original one if they are same or append new one"
let description["vs::fix_scan_def"] = ""
let description["vs::get_main_driver"] = "# Returns the driver pin, skipping the buffer tree, for a given pin-name"
let description["vs::get_reference"] = ""
let description["vs::merge_seq_cells"] = ""
let description["vs::parse_cts_exceptions"] = ""
let description["vs::parse_mco_sdc"] = ""
let description["vs::remove_dont_use"] = "# Removes the dont_use attribute on the vector sequential to allow optimization"
let description["vs::sort_lib_cells"] = ""
let description["vs::vector_swap"] = "# Inserts vector seqs in the design"
let description["vs::vector_swap_snps"] = ""
let description["vs::vector_unique_name"] = ""
let description["vs::vector_write_map_file"] = ""
let description["xmim::get_ft_connected_pins"] = ""
let description["xmim::prepare_synth_net"] = ""
let description["xmim::stitch_and_propagte_pins"] = ""
let description["xmim::swap_in_abstracts"] = ""
let description["xmim::write_interface_track_region_config"] = ""
let description["xml::pkgload"] = ""
let description["zndp::add_new_module"] = "# Adds new modules to current ZNDP design"
let description["zndp::connect"] = "# Utility to connect multiple ports/pins together"
let description["zndp::create_bbox_library"] = "# Creates a new NDM library for ZNDP floorplanning"
let description["zndp::create_bbox_topblock"] = "# Creates a new empty block with specified boundary for ZNDP floorplanning"
let description["zndp::create_boundaries_file"] = "# Create a boundaries file from existing floorplan to be used for DP flow"
let description["zndp::create_boundaries_placement_files"] = ""
let description["zndp::create_interface"] = "# Utility to create logical interface ports/nets and defines busses"
let description["zndp::disconnect"] = "# Disconnect a set of nets from a set of ports and pins"
let description["zndp::expand"] = ""
let description["zndp::floorplan_block"] = "# Floorplans Block (TLU+, routing direction, row-sites, tracks)"
let description["zndp::get_ring"] = ""
let description["zndp::remove_interface"] = "# Utility to create logical interface ports/nets and defines busses"
let description["zndp::snap_terminal2selectedshapes"] = "# Creates Terminals on Boundary"
"" Reassign to a global variable ""
let g:TclComplete#descriptions = description
