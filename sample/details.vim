let details = {}
   let details["add_attachment"]={}
        let details["add_attachment"]["-file_name"] = "(name of the file to be attached)"
        let details["add_attachment"]["-object"] = "(Object that will have this attachment)"
   let details["add_buffer"]={}
        let details["add_buffer"]["-lib_cell"] = ""
        let details["add_buffer"]["-new_net_names"] = ""
        let details["add_buffer"]["-new_cell_names"] = ""
        let details["add_buffer"]["-no_of_cells"] = "(no of buffer to add: "
        let details["add_buffer"]["-inverter_pair"] = "(Add a pair of inverter cells instead of a buffer)"
   let details["add_buffer_on_route"]={}
        let details["add_buffer_on_route"]["-lib_cell"] = ""
        let details["add_buffer_on_route"]["-net_prefix"] = "(Prefix for the new nets (default: eco_net))"
        let details["add_buffer_on_route"]["-cell_prefix"] = ""
        let details["add_buffer_on_route"]["-location"] = "(List of locations of new cells' in the form {X1 Y1 Layer X2 Y2 Layer ... })"
        let details["add_buffer_on_route"]["-user_specified_buffers"] = ""
        let details["add_buffer_on_route"]["-user_specified_bus_buffers"] = ""
        let details["add_buffer_on_route"]["-bus_cell_prefix"] = ""
        let details["add_buffer_on_route"]["-voltage_area_specific_lib_cells"] = ""
        let details["add_buffer_on_route"]["-detect_layer"] = "(Auto detect the layer number)"
        let details["add_buffer_on_route"]["-max_distance_to_route"] = ""
        let details["add_buffer_on_route"]["-repeater_distance"] = ""
        let details["add_buffer_on_route"]["-repeater_distance_length_ratio"] = ""
        let details["add_buffer_on_route"]["-first_distance"] = ""
        let details["add_buffer_on_route"]["-first_distance_length_ratio"] = ""
        let details["add_buffer_on_route"]["-scaled_by_layer"] = ""
        let details["add_buffer_on_route"]["-scaled_by_width"] = "(Using width scaling)"
        let details["add_buffer_on_route"]["-snap_to_sites"] = "(Snap newly added buffers to the nearest sites)"
        let details["add_buffer_on_route"]["-respect_voltage_areas"] = ""
        let details["add_buffer_on_route"]["-allow_physical_feedthrough_buffer"] = ""
        let details["add_buffer_on_route"]["-respect_blockages"] = "(whether respect blockages and macros)"
        let details["add_buffer_on_route"]["-max_distance_for_incomplete_route"] = ""
        let details["add_buffer_on_route"]["-allow_insertion_over_cell"] = ""
        let details["add_buffer_on_route"]["-dont_allow_insertion_over_cell"] = ""
        let details["add_buffer_on_route"]["-only_global_routed_nets"] = ""
        let details["add_buffer_on_route"]["-punch_port"] = "(punch port if necessary)"
        let details["add_buffer_on_route"]["-verbose"] = "(Verbose output)"
        let details["add_buffer_on_route"]["-respect_gas_station"] = ""
        let details["add_buffer_on_route"]["-max_distance_route_to_gas_station"] = ""
        let details["add_buffer_on_route"]["-max_distance_to_spare_cell"] = ""
        let details["add_buffer_on_route"]["-not_spare_cell_aware"] = ""
        let details["add_buffer_on_route"]["-on_top_hierarchy"] = "(Add buffer on highest hierarchical net of the given net)"
   let details["add_eco_repeater"]={}
        let details["add_eco_repeater"]["-cell_name"] = "(name for the new cell)"
        let details["add_eco_repeater"]["-lib_cell"] = ""
        let details["add_eco_repeater"]["-input_net_name"] = "(repeater input net name)"
        let details["add_eco_repeater"]["-output_net_name"] = "(repeater output net name)"
        let details["add_eco_repeater"]["-load"] = "(List of load ports or pins)"
   let details["add_feedthrough_buffers"]={}
        let details["add_feedthrough_buffers"]["-type"] = ""
        let details["add_feedthrough_buffers"]["-buffer_side"] = "(add buffer on input side or output side or both, default is output)"
        let details["add_feedthrough_buffers"]["-user_buffer"] = "(buffer specified for feedthroughs, default nil)"
        let details["add_feedthrough_buffers"]["-nets"] = "(collection of nets)"
        let details["add_feedthrough_buffers"]["-logical"] = "(eliminate logical feedthroughs (that can lead to assign statement) on all blocks default false)"
        let details["add_feedthrough_buffers"]["-verbose"] = "(verbose messages - not supported yet)"
   let details["add_pins_to_virtual_connection"]={}
        let details["add_pins_to_virtual_connection"]["-object"] = ""
        let details["add_pins_to_virtual_connection"]["-pins"] = "(Specify pins/ports to be connected to the virtual connection)"
   let details["add_port_protection_diodes"]={}
        let details["add_port_protection_diodes"]["-ignore_dont_touch"] = "(ignore dont_touch net)"
        let details["add_port_protection_diodes"]["-prefix"] = "(prefix name of the inserted diode)"
        let details["add_port_protection_diodes"]["-diode_lib_cell"] = ""
        let details["add_port_protection_diodes"]["-port"] = "(list of ports)"
   let details["add_port_state"]={}
        let details["add_port_state"]["-state"] = ""
   let details["add_power_state"]={}
   let details["add_pst_state"]={}
        let details["add_pst_state"]["-pst"] = "(Name of the pst)"
        let details["add_pst_state"]["-state"] = "(List of supply net or port states)"
   let details["add_redundant_vias"]={}
        let details["add_redundant_vias"]["-effort"] = "(redundant via effort, default is medium : "
        let details["add_redundant_vias"]["-list_only"] = "(false|true)]"
        let details["add_redundant_vias"]["-timing_preserve_nets"] = ""
        let details["add_redundant_vias"]["-timing_preserve_setup_slack_threshold"] = ""
        let details["add_redundant_vias"]["-timing_preserve_hold_slack_threshold"] = ""
        let details["add_redundant_vias"]["-nets"] = "(the nets for redundant via insertion (default all))"
   let details["add_shield_association"]={}
        let details["add_shield_association"]["-objects"] = ""
        let details["add_shield_association"]["-nets"] = "(Shielded nets to add to shield association)"
   let details["add_spare_cells"]={}
        let details["add_spare_cells"]["-cell_name"] = "(prefix name of spare cell)"
        let details["add_spare_cells"]["-lib_cell"] = "(Library cell or design)"
        let details["add_spare_cells"]["-num_instances"] = ""
        let details["add_spare_cells"]["-num_cells"] = ""
        let details["add_spare_cells"]["-hier_cell"] = ""
        let details["add_spare_cells"]["-boundary"] = "(boundary)"
        let details["add_spare_cells"]["-voltage_areas"] = ""
        let details["add_spare_cells"]["-input_pin_connect_type"] = ""
        let details["add_spare_cells"]["-ignore_blockage_types"] = ""
        let details["add_spare_cells"]["-density_aware_ratio"] = ""
   let details["add_tie_cells"]={}
        let details["add_tie_cells"]["-objects"] = "(Ports, pins, cells or lib_cells for tie-cell insertion)"
        let details["add_tie_cells"]["-tie_high_lib_cells"] = ""
        let details["add_tie_cells"]["-tie_low_lib_cells"] = ""
   let details["add_to_bound"]={}
   let details["add_to_bundle"]={}
        let details["add_to_bundle"]["-bundle"] = ""
        let details["add_to_bundle"]["-prepend"] = "(Add object as the first object in the bundle, default is to append)"
        let details["add_to_bundle"]["-before_object"] = ""
   let details["add_to_collection"]={}
        let details["add_to_collection"]["-unique"] = "(Remove duplicates from the result)"
   let details["add_to_edit_group"]={}
   let details["add_to_group"]={}
   let details["add_to_io_guide"]={}
        let details["add_to_io_guide"]["-before"] = "(Add pad cells before this cell)"
   let details["add_to_io_ring"]={}
   let details["add_to_matching_type"]={}
   let details["add_to_multisource_clock_sink_group"]={}
        let details["add_to_multisource_clock_sink_group"]["-name"] = "(group name of a set of sinks)"
        let details["add_to_multisource_clock_sink_group"]["-sinks"] = "(list of clock sinks to be added)"
   let details["add_to_must_join_ports"]={}
   let details["add_to_net"]={}
   let details["add_to_net_bus"]={}
   let details["add_to_pin_blockage"]={}
   let details["add_to_pin_guide"]={}
   let details["add_to_port_bus"]={}
   let details["add_to_routing_corridor"]={}
   let details["add_to_rp_group"]={}
        let details["add_to_rp_group"]["-allow_overlap"] = "(allow RP blockage to be overlapped with other fixed objects)"
        let details["add_to_rp_group"]["-row"] = "(RP row where element will be added: "
        let details["add_to_rp_group"]["-column"] = ""
        let details["add_to_rp_group"]["-cells"] = "(Cells to be added in RP Group)"
        let details["add_to_rp_group"]["-num_rows"] = ""
        let details["add_to_rp_group"]["-num_columns"] = ""
        let details["add_to_rp_group"]["-pin_name"] = ""
        let details["add_to_rp_group"]["-rp_group"] = ""
        let details["add_to_rp_group"]["-blockage"] = ""
        let details["add_to_rp_group"]["-height"] = ""
        let details["add_to_rp_group"]["-width"] = ""
        let details["add_to_rp_group"]["-orientation"] = ""
        let details["add_to_rp_group"]["-override_alignment"] = ""
        let details["add_to_rp_group"]["-free_placement"] = "(No RP structure wll be maintained for the cells)"
   let details["add_via_mapping"]={}
        let details["add_via_mapping"]["-from"] = "(From via pattern)"
        let details["add_via_mapping"]["-to"] = "(To via pattern)"
        let details["add_via_mapping"]["-weight"] = "(Weight of the mapping, 30 is the highest priority: "
        let details["add_via_mapping"]["-transform"] = ""
        let details["add_via_mapping"]["-force"] = "(overwrite existing via mapping in the via mapping table)"
        let details["add_via_mapping"]["-from_icc_file"] = ""
   let details["alias"]={}
   let details["align_objects"]={}
        let details["align_objects"]["-anchor"] = "(names or collection of anchor objects)"
        let details["align_objects"]["-parent"] = "(align to parent)"
        let details["align_objects"]["-to"] = "(align to point)"
        let details["align_objects"]["-to_box"] = "(align to box)"
        let details["align_objects"]["-side"] = "(align side (default is left): "
        let details["align_objects"]["-anchor_side"] = ""
        let details["align_objects"]["-offset"] = "(align offset)"
        let details["align_objects"]["-group"] = "(align as group)"
        let details["align_objects"]["-margin"] = "(consider keepout margins or guard bands)"
   let details["align_pins"]={}
        let details["align_pins"]["-change_layer_width"] = "(match pins' width and layers with reference pins)"
        let details["align_pins"]["-change_layer_height"] = "(match pins' height and layers with reference pins)"
   let details["all_clocks"]={}
        let details["all_clocks"]["-design"] = "(Top design for finding objects)"
        let details["all_clocks"]["-mode"] = "(Mode for finding objects)"
   let details["all_connected"]={}
        let details["all_connected"]["-leaf"] = "(Get leaf/global pins of nets)"
        let details["all_connected"]["-physical_context"] = "(Search physically; default is logically)"
   let details["all_corners"]={}
        let details["all_corners"]["-design"] = "(Top design for finding objects)"
   let details["all_exceptions"]={}
        let details["all_exceptions"]["-design"] = "(Top design for finding objects)"
        let details["all_exceptions"]["-mode"] = "(Mode for finding objects)"
   let details["all_fanin"]={}
        let details["all_fanin"]["-to"] = "(List of sink ports, pins and/or nets)"
        let details["all_fanin"]["-startpoints_only"] = "(Find only the timing startpoints)"
        let details["all_fanin"]["-only_cells"] = "(Return cells rather than pins)"
        let details["all_fanin"]["-flat"] = "(Hierarchy is ignored)"
        let details["all_fanin"]["-step_into_hierarchy"] = "(Count levels inside sub-hierarchies)"
        let details["all_fanin"]["-levels"] = "(Maximumum number of cell levels to traverse: "
        let details["all_fanin"]["-pin_levels"] = ""
        let details["all_fanin"]["-trace_arcs"] = ""
   let details["all_fanout"]={}
        let details["all_fanout"]["-from"] = "(List of source ports, pins and/or nets)"
        let details["all_fanout"]["-clock_tree"] = "(Return list of clock tree components)"
        let details["all_fanout"]["-endpoints_only"] = "(Find only the timing endpoints)"
        let details["all_fanout"]["-only_cells"] = "(Return cells rather than pins)"
        let details["all_fanout"]["-flat"] = "(Hierarchy is ignored)"
        let details["all_fanout"]["-step_into_hierarchy"] = "(Count levels inside sub-hierarchies)"
        let details["all_fanout"]["-levels"] = "(Maximumum number of cell levels to traverse: "
        let details["all_fanout"]["-pin_levels"] = ""
        let details["all_fanout"]["-trace_arcs"] = ""
   let details["all_high_transitive_fanout"]={}
        let details["all_high_transitive_fanout"]["-nets"] = "(high fanout nets)"
        let details["all_high_transitive_fanout"]["-threshold"] = "(high fanout threshold)"
        let details["all_high_transitive_fanout"]["-through_buf_inv"] = "(treat buffers and inverters as transparent - check for transitive fanout)"
   let details["all_inputs"]={}
        let details["all_inputs"]["-level_sensitive"] = "(Get ports with level-sensitive input delay)"
        let details["all_inputs"]["-edge_triggered"] = "(Get ports with edge-triggered input delay)"
        let details["all_inputs"]["-clock"] = "(Get ports with input delay relative to this clock)"
   let details["all_modes"]={}
        let details["all_modes"]["-design"] = "(Top design for finding objects)"
   let details["all_outputs"]={}
        let details["all_outputs"]["-level_sensitive"] = "(Get ports with level-sensitive output delay)"
        let details["all_outputs"]["-edge_triggered"] = "(Get ports with edge-triggered output delay)"
        let details["all_outputs"]["-clock"] = "(Get ports with output delay relative to this clock)"
   let details["all_registers"]={}
        let details["all_registers"]["-clock"] = "(Consider registers of this clock)"
        let details["all_registers"]["-rise_clock"] = ""
        let details["all_registers"]["-fall_clock"] = ""
        let details["all_registers"]["-cells"] = "(Return collection of cells (default))"
        let details["all_registers"]["-data_pins"] = "(Return collection of register data pins)"
        let details["all_registers"]["-clock_pins"] = "(Return collection of register clock pins)"
        let details["all_registers"]["-slave_clock_pins"] = "(Return collection of register slave clock pins)"
        let details["all_registers"]["-async_pins"] = "(Return collection of register async pins)"
        let details["all_registers"]["-output_pins"] = "(Return collection of register output pins)"
        let details["all_registers"]["-level_sensitive"] = "(Only consider level-sensitive latches)"
        let details["all_registers"]["-edge_triggered"] = "(Only consider edge-triggered flip-flops)"
        let details["all_registers"]["-master_slave"] = "(Only consider master/slave registers)"
        let details["all_registers"]["-no_hierarchy"] = "(Only search the current instance)"
   let details["all_scenarios"]={}
        let details["all_scenarios"]["-design"] = "(Top design for finding objects)"
   let details["all_transitive_fanin"]={}
        let details["all_transitive_fanin"]["-to"] = "(list of sink pins, ports, and/or nets)"
        let details["all_transitive_fanin"]["-startpoints_only"] = "(Find only the fanin startpoints)"
        let details["all_transitive_fanin"]["-only_cells"] = "(Return cells rather than pins/ports)"
        let details["all_transitive_fanin"]["-flat"] = "(Hierarchy is ignored)"
        let details["all_transitive_fanin"]["-levels"] = "(Maximumum number of cell levels to traverse: "
   let details["all_transitive_fanout"]={}
        let details["all_transitive_fanout"]["-from"] = "(List of source ports, pins and/or nets)"
        let details["all_transitive_fanout"]["-endpoints_only"] = "(Find only the timing endpoints)"
        let details["all_transitive_fanout"]["-only_cells"] = "(Return cells rather than pins)"
        let details["all_transitive_fanout"]["-flat"] = "(Hierarchy is ignored)"
        let details["all_transitive_fanout"]["-levels"] = "(Maximumum number of cell levels to traverse: "
   let details["analyze_design_violations"]={}
        let details["analyze_design_violations"]["-stage"] = "(indicate the stage to do the analysis)"
        let details["analyze_design_violations"]["-type"] = "(indicate the violation type for analysis)"
        let details["analyze_design_violations"]["-min_slack"] = "(only analyze the violation greater than min slack: "
        let details["analyze_design_violations"]["-max_slack"] = "(only analyze the violation less than max slack: "
        let details["analyze_design_violations"]["-drc_nets"] = "(a list of nets with violations to be analyzed)"
        let details["analyze_design_violations"]["-endpoints"] = "(a list of endpoints with violations to be analyzed)"
        let details["analyze_design_violations"]["-fanout"] = "(the fanout threshold that the high-fanout is defined, default is 30)"
        let details["analyze_design_violations"]["-slack"] = "(the up bound of the slack which is defined as small violation, default is 5 ps)"
        let details["analyze_design_violations"]["-output"] = "(the file to output the analysis result, default is analyze_design_violations.txt)"
   let details["analyze_lib_cell_placement"]={}
        let details["analyze_lib_cell_placement"]["-lib_cells"] = "(collection of lib cells)"
        let details["analyze_lib_cell_placement"]["-region"] = "(target region)"
        let details["analyze_lib_cell_placement"]["-no"] = "(disable advanced rule checking)"
        let details["analyze_lib_cell_placement"]["-trials"] = ""
        let details["analyze_lib_cell_placement"]["-max_cells"] = ""
        let details["analyze_lib_cell_placement"]["-threshold"] = ""
        let details["analyze_lib_cell_placement"]["-gifs"] = "(produce gifs of legal and illegal sites)"
   let details["analyze_power_plan"]={}
        let details["analyze_power_plan"]["-nets"] = "(List of power or ground nets)"
        let details["analyze_power_plan"]["-power_budget"] = ""
        let details["analyze_power_plan"]["-voltage"] = "(Supply voltage value; unit is Volt (V); default is 1.5V: "
        let details["analyze_power_plan"]["-read_power_file"] = ""
        let details["analyze_power_plan"]["-pad_references"] = ""
        let details["analyze_power_plan"]["-use_terminals_as_pads"] = ""
        let details["analyze_power_plan"]["-report_track_utilization_only"] = ""
   let details["analyze_subcircuit"]={}
        let details["analyze_subcircuit"]["-spice_header_files"] = ""
        let details["analyze_subcircuit"]["-driver_subckt_files"] = ""
        let details["analyze_subcircuit"]["-configuration"] = ""
        let details["analyze_subcircuit"]["-simulator"] = "(SPICE simulator version: "
        let details["analyze_subcircuit"]["-from"] = "(From pin list)"
        let details["analyze_subcircuit"]["-to"] = "(To pin list)"
        let details["analyze_subcircuit"]["-net"] = "(Net name list)"
        let details["analyze_subcircuit"]["-clock"] = "(Clock name)"
        let details["analyze_subcircuit"]["-name"] = "(Subcircuit name)"
        let details["analyze_subcircuit"]["-rc_include_file_suffix"] = ""
        let details["analyze_subcircuit"]["-spef_input_file_suffix"] = ""
        let details["analyze_subcircuit"]["-num_simulation_cycles"] = ""
        let details["analyze_subcircuit"]["-verbose"] = "(Verbose output)"
        let details["analyze_subcircuit"]["-extraction"] = "(Do extraction)"
        let details["analyze_subcircuit"]["-create_spice_deck"] = "(Create SPICE deck)"
        let details["analyze_subcircuit"]["-run_simulation"] = "(Run SPICE)"
        let details["analyze_subcircuit"]["-write_annotation"] = "(Write Tcl annotation files)"
        let details["analyze_subcircuit"]["-apply_annotation"] = "(Source Tcl annotation files)"
   let details["append_to_collection"]={}
        let details["append_to_collection"]["-unique"] = "(Remove duplicates from the result)"
   let details["apropos"]={}
        let details["apropos"]["-symbols_only"] = "(Search command/option names only)"
   let details["assign_3d_interchip_nets"]={}
        let details["assign_3d_interchip_nets"]["-nets"] = ""
        let details["assign_3d_interchip_nets"]["-bumps"] = ""
        let details["assign_3d_interchip_nets"]["-matching_types"] = ""
   let details["associate_mv_cells"]={}
        let details["associate_mv_cells"]["-isolation_cells"] = "(associate isolation cells)"
        let details["associate_mv_cells"]["-level_shifters"] = "(associate level shifter cells)"
        let details["associate_mv_cells"]["-retention_registers"] = "(associate retention cells)"
        let details["associate_mv_cells"]["-power_switches"] = "(associate power switch cells)"
        let details["associate_mv_cells"]["-all"] = "(associate isolation cells, level shifters, retention cells and power switch cells)"
   let details["associate_supply_set"]={}
        let details["associate_supply_set"]["-handle"] = ""
   let details["attach_drc_error_data"]={}
        let details["attach_drc_error_data"]["-name"] = "(Name of the attachment)"
        let details["attach_drc_error_data"]["-keep"] = "(Keep the original exported data)"
   let details["audit_scripts"]={}
        let details["audit_scripts"]["-input"] = "(location of scripts to be audited)"
        let details["audit_scripts"]["-skip_hidden"] = "(skip hidden app_options and tcl commands reporting)"
   let details["balance_clock_groups"]={}
   let details["cd"]={}
   let details["change_abstract"]={}
        let details["change_abstract"]["-view"] = "(New view: "
        let details["change_abstract"]["-label"] = "(Block label or \"\")"
        let details["change_abstract"]["-lib"] = "(Block library)"
        let details["change_abstract"]["-reload"] = "(Reload blocks from disk)"
        let details["change_abstract"]["-force"] = "(Change the reference even if the ports are different)"
        let details["change_abstract"]["-promote_constraints"] = "(Promote constraints from new block to the top)"
        let details["change_abstract"]["-references"] = ""
        let details["change_abstract"]["-cells"] = "(Cells of physical hierarchy)"
   let details["change_link"]={}
        let details["change_link"]["-design"] = "(Top design for finding objects)"
   let details["change_names"]={}
        let details["change_names"]["-rules"] = "(name of the rule)"
        let details["change_names"]["-hierarchy"] = "(Change the names hierarchically within current block only)"
        let details["change_names"]["-include_sub_blocks"] = "(Change names across all hierarchies including different physical hierarchies)"
        let details["change_names"]["-log_changes"] = "(name of the logfile)"
        let details["change_names"]["-verbose"] = "(Print messages while executing the command.)"
        let details["change_names"]["-instance"] = "(Specifies the instance on which to apply the change_names command.)"
        let details["change_names"]["-new_name"] = "(Specifies the new instance name when the -instance option is used.)"
        let details["change_names"]["-dont_touch"] = ""
        let details["change_names"]["-skip_physical_only_cells"] = ""
   let details["change_reference"]={}
        let details["change_reference"]["-verbose"] = "(Show detailed information)"
        let details["change_reference"]["-design"] = ""
        let details["change_reference"]["-module"] = "(Name for the new module)"
   let details["change_selection"]={}
        let details["change_selection"]["-name"] = "(Name of selection bus to change)"
        let details["change_selection"]["-replace"] = "(Replace current selection)"
        let details["change_selection"]["-add"] = "(Add to current selection)"
        let details["change_selection"]["-remove"] = "(Remove from current selection)"
        let details["change_selection"]["-toggle"] = "(Toggle in the current selection)"
        let details["change_selection"]["-type"] = "(Type to filter)"
        let details["change_selection"]["-clock_trees"] = ""
   let details["change_view"]={}
        let details["change_view"]["-view"] = "(New view: "
        let details["change_view"]["-label"] = "(Block label or \"\")"
        let details["change_view"]["-lib"] = "(Block library)"
        let details["change_view"]["-reload"] = "(Reload blocks from disk)"
        let details["change_view"]["-force"] = "(Change the reference even if the ports are different)"
        let details["change_view"]["-references"] = ""
        let details["change_view"]["-cells"] = "(Cells of physical hierarchy)"
   let details["characterize_block_pg"]={}
        let details["characterize_block_pg"]["-output_directory"] = ""
        let details["characterize_block_pg"]["-compile_pg_script"] = ""
   let details["check_3d_design"]={}
        let details["check_3d_design"]["-physical_contact"] = "(bool)"
        let details["check_3d_design"]["-logical_physical_consistency"] = ""
        let details["check_3d_design"]["-chip_placement"] = "(bool)"
        let details["check_3d_design"]["-verbose"] = "(bool)"
        let details["check_3d_design"]["-matching_type"] = "(bool)"
        let details["check_3d_design"]["-bump_cluster"] = "(bool)"
        let details["check_3d_design"]["-physical_design_rule"] = ""
   let details["check_boundary_cells"]={}
        let details["check_boundary_cells"]["-error_view"] = "(Error Browser output is written into this file)"
   let details["check_bufferability"]={}
        let details["check_bufferability"]["-nets"] = "(hierarchical nets)"
        let details["check_bufferability"]["-driver"] = "(driver pin or port)"
        let details["check_bufferability"]["-loads"] = "(load pins or ports)"
        let details["check_bufferability"]["-hierarchy"] = ""
        let details["check_bufferability"]["-voltage_area"] = ""
        let details["check_bufferability"]["-verbose"] = "(verbose mode)"
        let details["check_bufferability"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["check_busplan_constraints"]={}
        let details["check_busplan_constraints"]["-ref_buses"] = "(get referenced buses)"
        let details["check_busplan_constraints"]["-check_ref"] = "(check referenced buses of source buses)"
   let details["check_clock_trees"]={}
        let details["check_clock_trees"]["-clocks"] = "(List of clocks)"
        let details["check_clock_trees"]["-message_limit"] = "(Enable user to set messge limit)"
   let details["check_consistency_settings"]={}
        let details["check_consistency_settings"]["-tool"] = ""
        let details["check_consistency_settings"]["-work_dir"] = ""
        let details["check_consistency_settings"]["-output"] = ""
   let details["check_design"]={}
        let details["check_design"]["-checks"] = "(Takes name of one or more checks as argument)"
        let details["check_design"]["-open_message_browser"] = ""
        let details["check_design"]["-ems_database"] = "(Takes name of ems database file as argument)"
   let details["check_duplicates"]={}
        let details["check_duplicates"]["-blocks"] = ""
        let details["check_duplicates"]["-object_types"] = ""
        let details["check_duplicates"]["-remove"] = "(Removes the duplicate)"
        let details["check_duplicates"]["-verbose"] = "(Gives verbose messages)"
        let details["check_duplicates"]["-return_as_collection"] = ""
   let details["check_feedthroughs"]={}
        let details["check_feedthroughs"]["-cells"] = ""
        let details["check_feedthroughs"]["-unused_feedthroughs"] = "(Checks the feedthroughs that are unused (no top level connections))"
        let details["check_feedthroughs"]["-reused_feedthroughs"] = "(Checks the feedthroughs that are reused across MIB instances)"
        let details["check_feedthroughs"]["-net_constraints"] = "(Checks per net, per block feedthrough constraints)"
        let details["check_feedthroughs"]["-include_original_feedthroughs"] = ""
        let details["check_feedthroughs"]["-include_buffered"] = "(Includes buffered feedthroughs for checking)"
        let details["check_feedthroughs"]["-shape"] = "(Reports feedthroughs by shape. This option cannot be used in conjunction with any other option except for the -cells switch.: "
        let details["check_feedthroughs"]["-feedthrough_length"] = ""
        let details["check_feedthroughs"]["-filter_by_length"] = "(Checks for feed-throughs with nets less than specified length.)"
        let details["check_feedthroughs"]["-close_to_edge"] = "(Checks for feedthrough ports that are all less than specified distance from the edge.)"
        let details["check_feedthroughs"]["-tolerance_distance"] = ""
        let details["check_feedthroughs"]["-pure"] = "(Reports and returns only the pure feedthroughs in the design. Cannot be used with any other switch except for the -cells option.)"
        let details["check_feedthroughs"]["-mixed"] = "(Reports and returns only the mixed feedthroughs in the design. Cannot be used with any other switch except for the -cells option.)"
        let details["check_feedthroughs"]["-redundant"] = "(Reports and returns those output ports that connect back to one or more input ports on the same physical block instance. Cannot be used with any options except for -include_original.)"
        let details["check_feedthroughs"]["-self"] = "(Returns those top level ports that are feed-throughs. Cannot be used with any other switch.)"
        let details["check_feedthroughs"]["-topo_constraints"] = "(Checks per net, topological constraints)"
   let details["check_finfet_grid"]={}
        let details["check_finfet_grid"]["-hierarchical"] = "(Check level-by-level in current design)"
        let details["check_finfet_grid"]["-objects"] = "(List of objects to check)"
   let details["check_freeze_silicon"]={}
   let details["check_hier_design"]={}
        let details["check_hier_design"]["-stage"] = ""
        let details["check_hier_design"]["-references"] = "(Name of design to be checked)"
   let details["check_host_options"]={}
        let details["check_host_options"]["-host_options"] = ""
        let details["check_host_options"]["-work_dir"] = ""
   let details["check_io_placement"]={}
        let details["check_io_placement"]["-overlap"] = "(Checks for overlap among specified elements)"
        let details["check_io_placement"]["-bump_assignment"] = "(Checks the bump to pin assignment)"
        let details["check_io_placement"]["-pad_to_guide_assignment"] = ""
        let details["check_io_placement"]["-signal_constraints"] = "(Check if signal constraints are honoured)"
        let details["check_io_placement"]["-power_constraints"] = "(Check if the power constraints are honoured)"
        let details["check_io_placement"]["-unplaced"] = "(Check for unplaced pads)"
        let details["check_io_placement"]["-min_pitch"] = "(Check if min pitch is honored on I/O guides)"
        let details["check_io_placement"]["-gap"] = "(Check if there's any gap between cells on I/O guides)"
        let details["check_io_placement"]["-flipping"] = "(Check if I/O cells are consistent with the user set flip attribute)"
        let details["check_io_placement"]["-cells"] = ""
        let details["check_io_placement"]["-io_guides"] = ""
        let details["check_io_placement"]["-matching_types"] = ""
        let details["check_io_placement"]["-pad_assignment_file"] = ""
        let details["check_io_placement"]["-filename"] = "(Pad Placement violations are written into this file)"
        let details["check_io_placement"]["-output_directory"] = ""
        let details["check_io_placement"]["-error_view"] = "(Error Browser output is written into this file)"
   let details["check_legality"]={}
        let details["check_legality"]["-verbose"] = "(Print verbose messages.)"
        let details["check_legality"]["-cells"] = "(List of cells to be checked)"
        let details["check_legality"]["-check_distance"] = ""
        let details["check_legality"]["-output_tcl"] = "(Write out a tcl file with all violated cells. This file can be customized and sourced later.)"
   let details["check_license"]={}
   let details["check_lvs"]={}
        let details["check_lvs"]["-nets"] = ""
        let details["check_lvs"]["-checks"] = ""
        let details["check_lvs"]["-open_reporting"] = ""
        let details["check_lvs"]["-max_errors"] = ""
        let details["check_lvs"]["-check_child_cells"] = "(false|true)]"
        let details["check_lvs"]["-exclude_child_cell_types"] = ""
        let details["check_lvs"]["-check_zero_spacing_blockages"] = "(false|true)]"
        let details["check_lvs"]["-check_top_level_blockages"] = "(true|false)]"
        let details["check_lvs"]["-report_floating_pins"] = "(false|true)]"
   let details["check_mib_alignment"]={}
        let details["check_mib_alignment"]["-pg"] = "(Alignment of P/G straps)"
        let details["check_mib_alignment"]["-cell_row"] = "(Alignment of cell rows)"
        let details["check_mib_alignment"]["-wire_tracks"] = "(Alignment of wire tracks)"
        let details["check_mib_alignment"]["-layers"] = "(Check PG straps and/or wire tracks on the specified layers only)"
        let details["check_mib_alignment"]["-verbose"] = "(print error of checking)"
   let details["check_mib_for_pin_placement"]={}
        let details["check_mib_for_pin_placement"]["-cells"] = ""
        let details["check_mib_for_pin_placement"]["-swapped_connections"] = "(Checks for MIB connections that are swapped.)"
        let details["check_mib_for_pin_placement"]["-asymmetric_connections"] = ""
        let details["check_mib_for_pin_placement"]["-top_level_terminal_locations"] = ""
        let details["check_mib_for_pin_placement"]["-nets"] = "(Specifies the collection of nets for mib pin checking.)"
   let details["check_mv_design"]={}
        let details["check_mv_design"]["-max_message_count"] = ""
        let details["check_mv_design"]["-erc_mode"] = "(Electrical rule checking mode)"
        let details["check_mv_design"]["-voltage_threshold"] = ""
        let details["check_mv_design"]["-power_connectivity"] = "(Check power and ground pin connectivity)"
   let details["check_netlist"]={}
        let details["check_netlist"]["-cells"] = "(Check the cells of design)"
        let details["check_netlist"]["-nets"] = "(Check the nets of design)"
        let details["check_netlist"]["-ports"] = "(Check the ports of design)"
        let details["check_netlist"]["-hierarchical"] = "(Report details of all cells and nets in the design)"
   let details["check_objects_for_push_down"]={}
        let details["check_objects_for_push_down"]["-cells"] = ""
   let details["check_pg_connectivity"]={}
        let details["check_pg_connectivity"]["-nets"] = "(List of power or ground nets)"
        let details["check_pg_connectivity"]["-write_connectivity_file"] = ""
        let details["check_pg_connectivity"]["-error_view_name"] = ""
        let details["check_pg_connectivity"]["-check_std_cell_pins"] = ""
        let details["check_pg_connectivity"]["-check_macro_pins"] = ""
        let details["check_pg_connectivity"]["-check_pad_pins"] = ""
        let details["check_pg_connectivity"]["-check_block_pins"] = ""
        let details["check_pg_connectivity"]["-max_floating_cluster_size"] = ""
   let details["check_pg_drc"]={}
        let details["check_pg_drc"]["-nets"] = "(Collection of nets to be checked)"
        let details["check_pg_drc"]["-ignore_clock_nets"] = "(false|true)]"
        let details["check_pg_drc"]["-check_metal_on_track"] = "(false|true)]"
        let details["check_pg_drc"]["-ignore_keepout_margins"] = ""
        let details["check_pg_drc"]["-do_not_check_shapes_in_lib_cells"] = ""
        let details["check_pg_drc"]["-check_min_metal_area_on_pins"] = ""
        let details["check_pg_drc"]["-ignore_std_cells"] = "(Wheather to ignore library cells )"
        let details["check_pg_drc"]["-check_detail_route_shapes"] = ""
        let details["check_pg_drc"]["-load_routing_of_all_nets"] = ""
        let details["check_pg_drc"]["-coordinates"] = ""
        let details["check_pg_drc"]["-bottom_layer"] = "(Name of bottom layer in a range where rules to be checked)"
        let details["check_pg_drc"]["-top_layer"] = "(Name of top layer in a range where rules to be checked)"
        let details["check_pg_drc"]["-no_gui"] = "(Send report to text-file only)"
        let details["check_pg_drc"]["-output"] = "(File for text-report)"
   let details["check_pg_missing_vias"]={}
        let details["check_pg_missing_vias"]["-nets"] = "(List of power or ground nets)"
        let details["check_pg_missing_vias"]["-output_file"] = ""
        let details["check_pg_missing_vias"]["-via_rule_file"] = ""
        let details["check_pg_missing_vias"]["-write_default_via_rule_file"] = ""
        let details["check_pg_missing_vias"]["-ignore_shield_route"] = "(ignore shield route shapes)"
        let details["check_pg_missing_vias"]["-ignore_small_intersections"] = ""
        let details["check_pg_missing_vias"]["-honor_routing_blockage"] = ""
   let details["check_physical_constraints"]={}
   let details["check_pin_placement"]={}
        let details["check_pin_placement"]["-alignment"] = "(false|true)]"
        let details["check_pin_placement"]["-layer_mismatch_only"] = "(false|true)]"
        let details["check_pin_placement"]["-blocked_only"] = "(false|true)]"
        let details["check_pin_placement"]["-alignment_tolerance_distance"] = ""
        let details["check_pin_placement"]["-report_net_details"] = "(false|true)]"
        let details["check_pin_placement"]["-alignment_report_file"] = ""
        let details["check_pin_placement"]["-filename"] = "(Pin placement violation or alignment QoR reports are written into this file)"
        let details["check_pin_placement"]["-output_directory"] = ""
        let details["check_pin_placement"]["-error_view"] = "(Error Browser output is written into this file)"
        let details["check_pin_placement"]["-alignment_histogram"] = "(false|true)]"
        let details["check_pin_placement"]["-exclude_unplaced_objects"] = "(false|true)]"
        let details["check_pin_placement"]["-layers"] = "(false|true)] (Determines if pins are placed on legal metal layer constraints (default false))"
        let details["check_pin_placement"]["-sides"] = "(false|true)]  (Determines if pins are placed on legal sides (default false))"
        let details["check_pin_placement"]["-self"] = "(Specifies the pin placement checking is for current top design)"
        let details["check_pin_placement"]["-missing"] = "(false|true)]"
        let details["check_pin_placement"]["-nets"] = "(Specifies the collection of nets for pin placement checking.)"
        let details["check_pin_placement"]["-pins"] = "(Specifies the collection of pins for pin placement checking.)"
        let details["check_pin_placement"]["-ports"] = "(Specifies the collection of ports (top level terminals) for pin placement checking.)"
        let details["check_pin_placement"]["-net_length"] = ""
        let details["check_pin_placement"]["-off_edge"] = "(false|true)]"
        let details["check_pin_placement"]["-pin_guide"] = "(false|true)]"
        let details["check_pin_placement"]["-routing_corridor"] = "(false|true)]"
        let details["check_pin_placement"]["-pin_blockage"] = "(false|true)]"
        let details["check_pin_placement"]["-pin_spacing"] = "(false|true)]"
        let details["check_pin_placement"]["-pin_size"] = "(false|true)]"
        let details["check_pin_placement"]["-pin_mask_constraint"] = "(false|true)]"
        let details["check_pin_placement"]["-stacking"] = "(false|true)]"
        let details["check_pin_placement"]["-shorts"] = "(false|true)] (Checks for pin shorts (default true))"
        let details["check_pin_placement"]["-pre_route"] = "(false|true)]"
        let details["check_pin_placement"]["-technology_spacing_rules"] = "(false|true)]"
        let details["check_pin_placement"]["-single_pin"] = ""
        let details["check_pin_placement"]["-connection_type"] = ""
        let details["check_pin_placement"]["-cell_type"] = ""
        let details["check_pin_placement"]["-pin_type"] = ""
        let details["check_pin_placement"]["-wire_track"] = "(false|true)]"
        let details["check_pin_placement"]["-wide_track"] = "(false|true)]"
        let details["check_pin_placement"]["-offset"] = "(false|true)] (Determines if pins violate offset constraints (default false))"
        let details["check_pin_placement"]["-synthesized_pins"] = "(false|true)]"
        let details["check_pin_placement"]["-pin_detour"] = "(false|true)]"
        let details["check_pin_placement"]["-detour_tolerance"] = ""
        let details["check_pin_placement"]["-order"] = "(false|true)]  (Determines if pins violate order constraints (default false))"
        let details["check_pin_placement"]["-corner_keep_out"] = "(false|true)]"
   let details["check_placement_constraints"]={}
   let details["check_pre_pin_placement"]={}
   let details["check_routability"]={}
        let details["check_routability"]["-check_standard_cell_blocked_ports"] = "(false|true)]"
        let details["check_routability"]["-check_non_standard_cell_blocked_ports"] = "(false|true)]"
        let details["check_routability"]["-check_pg_blocked_ports"] = "(false|true)]"
        let details["check_routability"]["-check_frozen_net_blocked_ports"] = "(false|true)]"
        let details["check_routability"]["-check_min_grid"] = "(false|true)]"
        let details["check_routability"]["-check_out_of_boundary"] = "(false|true)]"
        let details["check_routability"]["-obey_access_edges"] = "(false|true)]"
        let details["check_routability"]["-access_edge_whole_side"] = "(false|true)]"
        let details["check_routability"]["-report_no_access_edge"] = "(false|true)]"
        let details["check_routability"]["-obey_direction_preference"] = "(false|true)]"
        let details["check_routability"]["-blocked_range"] = "(Number of pitches for same-layer accessibility check of macro and top-level ports. Default is 10)"
        let details["check_routability"]["-blocked_range_via_side"] = ""
        let details["check_routability"]["-standard_cell_search_range"] = ""
        let details["check_routability"]["-allow_via_rotation"] = "(false|true)]"
        let details["check_routability"]["-connect_standard_cells_within_pins"] = "(false|true)]"
        let details["check_routability"]["-check_no_net_pins"] = "(false|true)]"
        let details["check_routability"]["-error_data"] = "(output error data name (default check_routability.err))"
        let details["check_routability"]["-honor_layer_constraints"] = "(false|true)]"
        let details["check_routability"]["-check_shield"] = "(false|true)]"
        let details["check_routability"]["-check_via_cut_blockage"] = "(false|true)]"
        let details["check_routability"]["-check_lib_via_cut_blockage"] = "(false|true)]"
        let details["check_routability"]["-check_routing_track_space"] = "(false|true)]"
        let details["check_routability"]["-check_redundant_pg_shapes"] = "(false|true)]"
        let details["check_routability"]["-check_real_metal_blockage_overlap_pin"] = "(false|true)]"
   let details["check_routes"]={}
        let details["check_routes"]["-open_net"] = "(false|true)]"
        let details["check_routes"]["-report_all_open_nets"] = "(false|true)]"
        let details["check_routes"]["-drc"] = "(false|true)]    (check design rule violations (default true))"
        let details["check_routes"]["-antenna"] = "(false|true)]"
        let details["check_routes"]["-voltage_area"] = "(false|true)]"
        let details["check_routes"]["-nets"] = "(collection of nets to check for opens, antenna rules, voltage area violations)"
        let details["check_routes"]["-check_from_user_shapes"] = "(false|true)]"
        let details["check_routes"]["-check_from_frozen_shapes"] = "(false|true)]"
        let details["check_routes"]["-coordinates"] = ""
   let details["check_routing_corridors"]={}
   let details["check_rp_constraints"]={}
        let details["check_rp_constraints"]["-verbose"] = "(Report failures in detail)"
        let details["check_rp_constraints"]["-analyze_placement"] = "(Perform placement analysis on RP Group)"
        let details["check_rp_constraints"]["-region"] = "(Perform placement analysis within this region)"
        let details["check_rp_constraints"]["-no_pdc"] = "(Do not perform PDC Checks)"
        let details["check_rp_constraints"]["-no_adv"] = "(Do not perform Adv Rules Checks)"
        let details["check_rp_constraints"]["-trials"] = ""
        let details["check_rp_constraints"]["-threshold"] = "(Report RP Groups with pass rate below the threshold: "
        let details["check_rp_constraints"]["-no_rp_constraints"] = "(Do not check the RP constraints while checking if RP Group is placed)"
   let details["check_sadp_tracks"]={}
   let details["check_scan_chain"]={}
        let details["check_scan_chain"]["-chain_name"] = ""
   let details["check_supply_equivalence"]={}
        let details["check_supply_equivalence"]["-functional"] = "(functional equivalence)"
        let details["check_supply_equivalence"]["-pst"] = "(PST equivalence)"
        let details["check_supply_equivalence"]["-verbose"] = "(show detailed information)"
   let details["check_tcd_cells"]={}
        let details["check_tcd_cells"]["-lib_cells"] = "(collection of Tcd lib cells)"
        let details["check_tcd_cells"]["-window_size"] = ""
        let details["check_tcd_cells"]["-window_step"] = ""
        let details["check_tcd_cells"]["-include_small_windows"] = ""
   let details["check_timing"]={}
        let details["check_timing"]["-modes"] = "(check scenarios of these modes (default is all modes))"
        let details["check_timing"]["-corners"] = "(check scenarios of these corners (default is all corners))"
        let details["check_timing"]["-scenarios"] = ""
        let details["check_timing"]["-exclude"] = "(checks)"
        let details["check_timing"]["-include"] = "(checks)"
        let details["check_timing"]["-override_defaults"] = ""
        let details["check_timing"]["-all"] = "(Do all the checks)"
   let details["clock"]={}
   let details["clock_opt"]={}
        let details["clock_opt"]["-list_only"] = "(List sub-steps of clock_opt flow [ build_clock route_clock final_opto ])"
        let details["clock_opt"]["-from"] = "(Run subset of clock_opt flow starting with specified step)"
        let details["clock_opt"]["-to"] = "(Run subset of clock_opt flow ending with specified step)"
   let details["close_blocks"]={}
        let details["close_blocks"]["-save"] = "(Save block before closing it)"
        let details["close_blocks"]["-force"] = "(close block with un-saved data)"
        let details["close_blocks"]["-purge"] = "(purge block from memory)"
   let details["close_drc_error_data"]={}
        let details["close_drc_error_data"]["-save"] = "(Save any pending changes before closing the error data)"
        let details["close_drc_error_data"]["-force"] = "(Close the error data even if there are pending changes)"
   let details["close_ems_databases"]={}
        let details["close_ems_databases"]["-save"] = "(Saves the EMS database(s) onto disk, before closing them.)"
   let details["close_lib"]={}
        let details["close_lib"]["-force"] = "(Force library closed regardless of un-saved data or designs)"
        let details["close_lib"]["-purge"] = "(Purge library from memory regardless of reference count)"
        let details["close_lib"]["-all"] = "(Purge all libraries from memory regardless of reference count)"
        let details["close_lib"]["-save_designs"] = "(Save modified data and designs)"
        let details["close_lib"]["-compress"] = "(Save modified data and designs in comperssed format)"
   let details["collection_to_list"]={}
        let details["collection_to_list"]["-name_only"] = "(do not display type of each object)"
        let details["collection_to_list"]["-no_braces"] = "(do not enclose results in {})"
        let details["collection_to_list"]["-brace_with_quotes"] = "(use \" to enclose results, not {})"
        let details["collection_to_list"]["-newline"] = "(use newlines to separate names in output)"
        let details["collection_to_list"]["-truncate"] = "(Truncate display to n elements)"
        let details["collection_to_list"]["-no_sort"] = "(do not sort the data)"
        let details["collection_to_list"]["-objects"] = "(Collection of object(s) to display)"
   let details["color_macro_pins"]={}
   let details["commit_blackbox_timing"]={}
        let details["commit_blackbox_timing"]["-convert_placement_abstract"] = ""
   let details["commit_block"]={}
        let details["commit_block"]["-verbose"] = "(Show detailed information)"
        let details["commit_block"]["-library"] = "(Library in which the design is to be created)"
   let details["commit_upf"]={}
        let details["commit_upf"]["-infer_supply_from_pg_net"] = ""
        let details["commit_upf"]["-skip_resolve_pg_net"] = "(Skip resolving pg nets)"
   let details["compare_collections"]={}
        let details["compare_collections"]["-order_dependent"] = "(Order of objects matters)"
   let details["compare_floorplans"]={}
        let details["compare_floorplans"]["-input"] = "(Directory for input files; default is ./floorplan)"
        let details["compare_floorplans"]["-verbosity"] = "(Verbose level, default is minimum: "
        let details["compare_floorplans"]["-top_level_only"] = "(Specify to compare top level only)"
   let details["compile_boundary_cells"]={}
        let details["compile_boundary_cells"]["-add_placement_blockage"] = ""
   let details["compile_pg"]={}
        let details["compile_pg"]["-strategies"] = ""
        let details["compile_pg"]["-via_rule"] = "(via rule name for PG strategies)"
        let details["compile_pg"]["-ignore_drc"] = "(ignore DRCs)"
        let details["compile_pg"]["-ignore_via_drc"] = "(ignore via DRCs only)"
        let details["compile_pg"]["-undo"] = "(remove the most recently created PG)"
        let details["compile_pg"]["-tag"] = "(tag for created vias/wires)"
   let details["compute_area"]={}
        let details["compute_area"]["-objects"] = "(Use as input geometry)"
   let details["compute_budget_constraints"]={}
        let details["compute_budget_constraints"]["-setup_delay"] = "(Compute setup delay constraints)"
        let details["compute_budget_constraints"]["-boundary"] = "(Compute boundary constraints)"
        let details["compute_budget_constraints"]["-latency_targets"] = ""
        let details["compute_budget_constraints"]["-busplans"] = "(Recalculate budget segment delays from busplan rules)"
        let details["compute_budget_constraints"]["-modes"] = "(Update budget only in these modes)"
        let details["compute_budget_constraints"]["-estimate_timing"] = "(Delay and boundary constraints are from vipo)"
        let details["compute_budget_constraints"]["-no_estimate_timing"] = "(Delay and boundary constraints are actual)"
        let details["compute_budget_constraints"]["-pins"] = "(Apply only to pins in the list)"
        let details["compute_budget_constraints"]["-input"] = "(Apply only to specified block inputs)"
        let details["compute_budget_constraints"]["-output"] = "(Apply only to specified block outputs)"
        let details["compute_budget_constraints"]["-unspecified"] = "(Apply only where pin budgets that are not yet specified)"
        let details["compute_budget_constraints"]["-feedthrough"] = "(Apply only to pins that participate in block feedthrough paths)"
        let details["compute_budget_constraints"]["-slack"] = "(Apply only to budget pins with less than the given slack)"
        let details["compute_budget_constraints"]["-fanin_cone"] = "(Apply also to pins that fan in to the selected pins)"
        let details["compute_budget_constraints"]["-fanout_cone"] = "(Apply also to pins that fan out of the selected pins)"
        let details["compute_budget_constraints"]["-balance"] = "(Balance clock latencies during update: "
        let details["compute_budget_constraints"]["-ocv_percent"] = "(Minimum percent of latency assumed for early and late clock OCV)"
        let details["compute_budget_constraints"]["-ocv_delay"] = "(Minimum delay assumed for early and late clock OCV)"
   let details["compute_clock_latency"]={}
        let details["compute_clock_latency"]["-verbose"] = "(Display latency information in verbose format)"
   let details["compute_dff_connections"]={}
        let details["compute_dff_connections"]["-max_reg"] = "(maximum number of registers to trace through: "
        let details["compute_dff_connections"]["-max_gate"] = "(maximum number of gates to trace through: "
        let details["compute_dff_connections"]["-max_fanout"] = "(maximum fanout allowed to trace a net: "
        let details["compute_dff_connections"]["-retrace_blocks"] = ""
        let details["compute_dff_connections"]["-include_blocks"] = ""
        let details["compute_dff_connections"]["-host_options"] = ""
        let details["compute_dff_connections"]["-work_dir"] = ""
        let details["compute_dff_connections"]["-dont_include_abstracts"] = ""
   let details["compute_polygons"]={}
        let details["compute_polygons"]["-objects1"] = ""
        let details["compute_polygons"]["-objects2"] = ""
        let details["compute_polygons"]["-operation"] = ""
   let details["connect_freeze_silicon_tie_cells"]={}
        let details["connect_freeze_silicon_tie_cells"]["-cells"] = "(List of cells)"
        let details["connect_freeze_silicon_tie_cells"]["-max_fanout"] = "(max fanout: "
        let details["connect_freeze_silicon_tie_cells"]["-max_wire_length"] = ""
        let details["connect_freeze_silicon_tie_cells"]["-tie_high_lib_cell"] = ""
        let details["connect_freeze_silicon_tie_cells"]["-tie_low_lib_cell"] = ""
   let details["connect_logic_net"]={}
        let details["connect_logic_net"]["-ports"] = "(list of logic ports to be connected)"
        let details["connect_logic_net"]["-reconnect"] = "(reconnect the logic ports)"
   let details["connect_net"]={}
        let details["connect_net"]["-design"] = "(Top design for finding objects)"
        let details["connect_net"]["-net"] = "(Net/net_bus to connect object(s) to)"
   let details["connect_pg_net"]={}
        let details["connect_pg_net"]["-design"] = "(Top design for finding objects)"
        let details["connect_pg_net"]["-automatic"] = "(Automatic PG connection based on power constraints)"
        let details["connect_pg_net"]["-all_blocks"] = "(Traverse all physical blocks during auto PG mode)"
        let details["connect_pg_net"]["-net"] = "(Net to connect object(s) to)"
        let details["connect_pg_net"]["-block"] = "(List of blocks to traverse during auto PG mode)"
        let details["connect_pg_net"]["-verbose"] = "(Verbose output)"
   let details["connect_pins"]={}
        let details["connect_pins"]["-design"] = "(Top design for finding objects)"
        let details["connect_pins"]["-driver"] = "(Driving pin (conn))"
        let details["connect_pins"]["-incremental"] = "(Incremental hierConnect)"
        let details["connect_pins"]["-port_name"] = "(Name of the new ports)"
   let details["connect_power_switch"]={}
        let details["connect_power_switch"]["-source"] = "(driver pin or port)"
        let details["connect_power_switch"]["-ack_out"] = "(ack pin or port)"
        let details["connect_power_switch"]["-mode"] = "(high-fanout, daisy-chained or fishbone connection)"
        let details["connect_power_switch"]["-port_name"] = "(name of new port(s) that might be created for switch pin connections)"
        let details["connect_power_switch"]["-ack_port_name"] = ""
        let details["connect_power_switch"]["-direction"] = ""
        let details["connect_power_switch"]["-start_point"] = ""
        let details["connect_power_switch"]["-ring_direction"] = ""
        let details["connect_power_switch"]["-lib_pin"] = ""
        let details["connect_power_switch"]["-voltage_area"] = ""
        let details["connect_power_switch"]["-object_list"] = ""
        let details["connect_power_switch"]["-keep_order"] = "(keep connection order for the given object list)"
   let details["connect_supply_net"]={}
        let details["connect_supply_net"]["-ports"] = ""
        let details["connect_supply_net"]["-vct"] = "(vct name: "
   let details["convert_aocv_pocv"]={}
        let details["convert_aocv_pocv"]["-depth"] = ""
        let details["convert_aocv_pocv"]["-corners"] = "(List of corners)"
   let details["copy_block"]={}
        let details["copy_block"]["-force"] = "(override a modified destination block)"
        let details["copy_block"]["-from_block"] = "(Source block object or name)"
        let details["copy_block"]["-to_block"] = "(Destination block name [libName:]blockName[/labelName][.viewName])"
   let details["copy_collection"]={}
   let details["copy_lib"]={}
        let details["copy_lib"]["-from_lib"] = "(Name of source library)"
        let details["copy_lib"]["-to_lib"] = "(Name of destination library)"
        let details["copy_lib"]["-merge"] = "(Merge the source library into the destination)"
        let details["copy_lib"]["-force"] = "(Override the destination library even if it is modified)"
        let details["copy_lib"]["-no_designs"] = "(Do not copy any of the designs)"
   let details["copy_objects"]={}
        let details["copy_objects"]["-delta"] = "(delta by which the objects are to be moved)"
        let details["copy_objects"]["-from"] = "(move from point)"
        let details["copy_objects"]["-to"] = "(move to point)"
        let details["copy_objects"]["-rotate_by"] = "(amount to rotate by: "
        let details["copy_objects"]["-group"] = "(rotate as group)"
        let details["copy_objects"]["-x_times"] = "(number of copied in x direction)"
        let details["copy_objects"]["-y_times"] = "(number of copied in y direction)"
        let details["copy_objects"]["-x_pitch"] = "(delta or gap in x direction)"
        let details["copy_objects"]["-y_pitch"] = "(delta or gap in y direction)"
        let details["copy_objects"]["-x_pitch_type"] = ""
        let details["copy_objects"]["-y_pitch_type"] = ""
        let details["copy_objects"]["-net"] = "(set net for the new objects)"
   let details["copy_relative_placement"]={}
        let details["copy_relative_placement"]["-from"] = ""
        let details["copy_relative_placement"]["-to"] = "(list of edit groups to copy the pattern to)"
        let details["copy_relative_placement"]["-to_cells"] = ""
   let details["copy_to_layer"]={}
        let details["copy_to_layer"]["-layer"] = "(Layer on which to copy the shapes)"
        let details["copy_to_layer"]["-geo_masks"] = "(Use as input geometry)"
        let details["copy_to_layer"]["-shape_use"] = "(Usage of the shape: "
        let details["copy_to_layer"]["-net"] = "(Net of the shape)"
   let details["cputime"]={}
        let details["cputime"]["-all"] = "(Get cpu time for this process and children)"
        let details["cputime"]["-verbose"] = "(Report cpu and elapsed time)"
        let details["cputime"]["-format"] = "(Format for returned value)"
   let details["create_3d_mirror_bumps"]={}
        let details["create_3d_mirror_bumps"]["-from"] = ""
        let details["create_3d_mirror_bumps"]["-to"] = ""
        let details["create_3d_mirror_bumps"]["-ref_cell"] = ""
        let details["create_3d_mirror_bumps"]["-bumps"] = ""
        let details["create_3d_mirror_bumps"]["-prefix"] = ""
        let details["create_3d_mirror_bumps"]["-force"] = "(bool)"
   let details["create_abstract"]={}
        let details["create_abstract"]["-placement"] = "(Create abstract for non-timing applications)"
        let details["create_abstract"]["-timing_level"] = "(Control detail of timing abstract: "
        let details["create_abstract"]["-estimate_timing"] = "(Run virtual timing optimization)"
        let details["create_abstract"]["-host_options"] = ""
        let details["create_abstract"]["-work_dir"] = "(Directory to put scripts and log files for child block abstract creation)"
        let details["create_abstract"]["-blocks"] = ""
        let details["create_abstract"]["-all_blocks"] = "(Create abstract view for all child blocks)"
        let details["create_abstract"]["-force_recreate"] = "(Force to re-create block abstract views from the top level)"
        let details["create_abstract"]["-read_only"] = "(Create read-only abstract)"
        let details["create_abstract"]["-include_objects"] = ""
   let details["create_abut_rules"]={}
        let details["create_abut_rules"]["-number_of_references"] = ""
        let details["create_abut_rules"]["-soft_keepout"] = "(Sets soft keepout instead of default spacing rules)"
        let details["create_abut_rules"]["-hard_keepout"] = "(Sets hard keepout instead of default spacing rules)"
        let details["create_abut_rules"]["-keepout_width"] = ""
        let details["create_abut_rules"]["-output"] = "(Name of file)"
        let details["create_abut_rules"]["-use_lib"] = "(Use libraries as references)"
   let details["create_backend_tcd_cells"]={}
        let details["create_backend_tcd_cells"]["-lib_cells"] = ""
        let details["create_backend_tcd_cells"]["-window_size"] = ""
        let details["create_backend_tcd_cells"]["-tcd_spacing"] = ""
        let details["create_backend_tcd_cells"]["-other_cell_spacing"] = ""
        let details["create_backend_tcd_cells"]["-icovl_spacing"] = ""
        let details["create_backend_tcd_cells"]["-stack_with_macro"] = ""
        let details["create_backend_tcd_cells"]["-stack_with_frontend"] = ""
        let details["create_backend_tcd_cells"]["-stack_with_backend"] = ""
        let details["create_backend_tcd_cells"]["-avoid_route_guide"] = ""
        let details["create_backend_tcd_cells"]["-density"] = ""
        let details["create_backend_tcd_cells"]["-orientation"] = ""
        let details["create_backend_tcd_cells"]["-check_only"] = "(check only)"
        let details["create_backend_tcd_cells"]["-bbox"] = "(rectangle for insertion)"
        let details["create_backend_tcd_cells"]["-include_small_windows"] = ""
        let details["create_backend_tcd_cells"]["-snap_to_fin_grid"] = "(snap to fin grid)"
        let details["create_backend_tcd_cells"]["-place_at_window_center"] = ""
        let details["create_backend_tcd_cells"]["-combined_tcd_cells"] = "(combined FE+BE TCD cells)"
        let details["create_backend_tcd_cells"]["-min_tcd_count"] = "(minimum number of tcds)"
        let details["create_backend_tcd_cells"]["-max_tcd_spacing"] = ""
   let details["create_blackbox"]={}
        let details["create_blackbox"]["-new_name"] = "(Name for the new design)"
        let details["create_blackbox"]["-library"] = "(Library in which the design is to be created)"
        let details["create_blackbox"]["-target_boundary_area"] = ""
        let details["create_blackbox"]["-boundary"] = "(Boundary for the blackbox)"
        let details["create_blackbox"]["-type"] = "(Type of this blackbox: "
   let details["create_blackbox_clock_network_delay"]={}
        let details["create_blackbox_clock_network_delay"]["-max"] = "(Specify the value is for max delay only)"
        let details["create_blackbox_clock_network_delay"]["-min"] = "(Specify the value is for min delay only)"
        let details["create_blackbox_clock_network_delay"]["-modes"] = "(Specify the list of mode names this delay is for)"
        let details["create_blackbox_clock_network_delay"]["-corners"] = "(Specify the list of corner names this delay is for)"
        let details["create_blackbox_clock_network_delay"]["-value"] = "(Specify the clock network delay value)"
   let details["create_blackbox_constraint"]={}
        let details["create_blackbox_constraint"]["-from"] = "(Specify the clock ports the paths start from)"
        let details["create_blackbox_constraint"]["-edge"] = "(Specify the clock triggering edge)"
        let details["create_blackbox_constraint"]["-to"] = "(Specify the to ports of the paths)"
        let details["create_blackbox_constraint"]["-rise_to"] = "(Specify the rise to ports of the paths)"
        let details["create_blackbox_constraint"]["-fall_to"] = "(Specify the fall to ports of the paths)"
        let details["create_blackbox_constraint"]["-setup"] = "(Specify the value is for setup constraint only)"
        let details["create_blackbox_constraint"]["-hold"] = "(Specify the value is for hold constraint only)"
        let details["create_blackbox_constraint"]["-modes"] = "(Specify the list of mode names this delay is for)"
        let details["create_blackbox_constraint"]["-corners"] = "(Specify the list of corner names this delay is for)"
        let details["create_blackbox_constraint"]["-clock"] = "(Specify the clock whose period will be used to calculate the path delay)"
        let details["create_blackbox_constraint"]["-value"] = "(Specify the constraint delay value)"
   let details["create_blackbox_delay"]={}
        let details["create_blackbox_delay"]["-from"] = "(Specify the from ports of the paths)"
        let details["create_blackbox_delay"]["-rise_from"] = "(Specify the rise from ports of the paths)"
        let details["create_blackbox_delay"]["-fall_from"] = "(Specify the fall from ports of the paths)"
        let details["create_blackbox_delay"]["-to"] = "(Specify the to ports of the paths)"
        let details["create_blackbox_delay"]["-rise_to"] = "(Specify the rise to ports of the paths)"
        let details["create_blackbox_delay"]["-fall_to"] = "(Specify the fall to ports of the paths)"
        let details["create_blackbox_delay"]["-max"] = "(Specify the value is for max delay only)"
        let details["create_blackbox_delay"]["-min"] = "(Specify the value is for min delay only)"
        let details["create_blackbox_delay"]["-modes"] = "(Specify the list of mode names this delay is for)"
        let details["create_blackbox_delay"]["-corners"] = "(Specify the list of corner names this delay is for)"
        let details["create_blackbox_delay"]["-clock"] = "(Specify the clock whose period will be used to calculate the path delay)"
        let details["create_blackbox_delay"]["-value"] = "(Specify the delay value)"
   let details["create_blackbox_drive_type"]={}
        let details["create_blackbox_drive_type"]["-lib_cell"] = "(Specify the buffer or inverter lib cell)"
        let details["create_blackbox_drive_type"]["-input_transition_rise"] = ""
        let details["create_blackbox_drive_type"]["-input_transition_fall"] = ""
   let details["create_blackbox_load_type"]={}
        let details["create_blackbox_load_type"]["-lib_cell"] = "(Specify the buffer or inverter lib cell)"
   let details["create_block"]={}
        let details["create_block"]["-force"] = "(overwrite existing block in the target library)"
   let details["create_bound"]={}
        let details["create_bound"]["-name"] = "(Name of the bound)"
        let details["create_bound"]["-boundary"] = "(Move bound rectangles and polygons)"
        let details["create_bound"]["-dimensions"] = ""
        let details["create_bound"]["-effort"] = "(Group bound effort level (default is medium): "
        let details["create_bound"]["-diamond"] = ""
        let details["create_bound"]["-type"] = "(Type of the bound (default is soft): "
        let details["create_bound"]["-exclusive"] = "(Sets the move bound as exclusive)"
        let details["create_bound"]["-hierarchical_only"] = "(The move bound can contain only hierBoundary objects)"
        let details["create_bound"]["-design_type"] = ""
        let details["create_bound"]["-cell"] = "(Specifies the physical cell where the bound is to be added)"
   let details["create_bound_shape"]={}
        let details["create_bound_shape"]["-bound"] = "(Name or collection of the owning bound)"
        let details["create_bound_shape"]["-boundary"] = "(Bound shape rectangle or polygon)"
   let details["create_boundary_cells"]={}
        let details["create_boundary_cells"]["-left_boundary_cell"] = ""
        let details["create_boundary_cells"]["-bottom_boundary_cells"] = ""
        let details["create_boundary_cells"]["-right_boundary_cell"] = ""
        let details["create_boundary_cells"]["-top_boundary_cells"] = ""
        let details["create_boundary_cells"]["-bottom_left_outside_corner_cell"] = ""
        let details["create_boundary_cells"]["-bottom_right_outside_corner_cell"] = ""
        let details["create_boundary_cells"]["-top_left_outside_corner_cell"] = ""
        let details["create_boundary_cells"]["-top_right_outside_corner_cell"] = ""
        let details["create_boundary_cells"]["-bottom_left_inside_corner_cells"] = ""
        let details["create_boundary_cells"]["-bottom_right_inside_corner_cells"] = ""
        let details["create_boundary_cells"]["-top_left_inside_corner_cells"] = ""
        let details["create_boundary_cells"]["-top_right_inside_corner_cells"] = ""
        let details["create_boundary_cells"]["-top_tap_cell"] = ""
        let details["create_boundary_cells"]["-bottom_tap_cell"] = ""
        let details["create_boundary_cells"]["-tap_distance"] = ""
        let details["create_boundary_cells"]["-prefix"] = "(end cap inst prefix)"
        let details["create_boundary_cells"]["-separator"] = "(end cap seperator)"
        let details["create_boundary_cells"]["-insert_into_blocks"] = "(Specifies whether end cap cells are inserted into blocks)"
        let details["create_boundary_cells"]["-at_va_boundary"] = "(Specifies whether rows are cut on voltage areas)"
        let details["create_boundary_cells"]["-voltage_area"] = ""
        let details["create_boundary_cells"]["-no_1x"] = "(Specifies that the tool should not insert into a row where the row length equals two times the corner cell width plus one unit tile width.)"
        let details["create_boundary_cells"]["-enable_prerouted_net_check"] = ""
        let details["create_boundary_cells"]["-min_row_width"] = ""
        let details["create_boundary_cells"]["-add_metal_cut_allowed"] = ""
        let details["create_boundary_cells"]["-mirror_left_outside_corner_cell"] = ""
        let details["create_boundary_cells"]["-mirror_right_outside_corner_cell"] = ""
        let details["create_boundary_cells"]["-mirror_left_inside_corner_cell"] = ""
        let details["create_boundary_cells"]["-mirror_right_inside_corner_cell"] = ""
        let details["create_boundary_cells"]["-mirror_left_boundary_cell"] = ""
        let details["create_boundary_cells"]["-mirror_right_boundary_cell"] = ""
        let details["create_boundary_cells"]["-do_not_swap_top_and_bottom_inside_corner_cell"] = ""
   let details["create_budget_busplan"]={}
        let details["create_budget_busplan"]["-name"] = "(Name of created bus)"
        let details["create_budget_busplan"]["-rule"] = "(Create the bus this net wire estimation)"
        let details["create_budget_busplan"]["-from"] = "(Create a bus staring at the given pins or ports)"
        let details["create_budget_busplan"]["-nets"] = "(Create a bus that passes through the given nets)"
        let details["create_budget_busplan"]["-force"] = "(Remove portion of old buses if the ovelap the a new bus)"
   let details["create_buffer_trees"]={}
        let details["create_buffer_trees"]["-no_legalize"] = "(do not legalize placement after buffering)"
        let details["create_buffer_trees"]["-incremental"] = "(Scope is an individual net. Do not modify any pre-existing buffers or inverters)"
        let details["create_buffer_trees"]["-lib_cells"] = "(a list of library cells will be used for buffering)"
        let details["create_buffer_trees"]["-from"] = "(a list of driver pins or nets for which buffer trees are to be created)"
        let details["create_buffer_trees"]["-hfs_fanout_threshold"] = ""
        let details["create_buffer_trees"]["-verbose"] = "(verbose)"
        let details["create_buffer_trees"]["-no_density_abort"] = "(no density abort)"
        let details["create_buffer_trees"]["-optimize_congestion_box"] = ""
        let details["create_buffer_trees"]["-optimize_congestion"] = "(do congestion aware re-buffering)"
        let details["create_buffer_trees"]["-use_imrd"] = "(do IMRD enabled CARB)"
   let details["create_bump_array"]={}
        let details["create_bump_array"]["-name"] = ""
        let details["create_bump_array"]["-lib_cell"] = ""
        let details["create_bump_array"]["-bbox"] = ""
        let details["create_bump_array"]["-boundary"] = "(Specified the boundary polygon of the bump array)"
        let details["create_bump_array"]["-delta"] = ""
        let details["create_bump_array"]["-pattern"] = ""
        let details["create_bump_array"]["-repeat"] = ""
        let details["create_bump_array"]["-origin"] = ""
        let details["create_bump_array"]["-orientation"] = ""
   let details["create_bundle"]={}
        let details["create_bundle"]["-name"] = "(Name of the bundle)"
   let details["create_bundles_from_patterns"]={}
        let details["create_bundles_from_patterns"]["-net_name_prefix"] = ""
        let details["create_bundles_from_patterns"]["-net_order"] = "(Net sorting order (Default is ascending): "
        let details["create_bundles_from_patterns"]["-minimum_nets"] = ""
        let details["create_bundles_from_patterns"]["-maximum_nets"] = ""
        let details["create_bundles_from_patterns"]["-no_braces"] = "(Don't use braces in pattern matching)"
        let details["create_bundles_from_patterns"]["-no_brackets"] = "(Don't use brackets in pattern matching)"
        let details["create_bundles_from_patterns"]["-no_angle_brackets"] = "(Don't use angle brackets in pattern matching)"
        let details["create_bundles_from_patterns"]["-no_underlines"] = "(Don't use underlines in pattern matching)"
        let details["create_bundles_from_patterns"]["-no_colons"] = "(Don't use colons in pattern matching)"
        let details["create_bundles_from_patterns"]["-no_parentheses"] = "(Don't use parentheses in pattern matching)"
        let details["create_bundles_from_patterns"]["-bundle_grouping"] = "(Enable bundle grouping in pattern matching)"
   let details["create_bus_routing_style"]={}
        let details["create_bus_routing_style"]["-for"] = "(Group of net, bundle, and topology_edge objects)"
        let details["create_bus_routing_style"]["-shield_placement"] = ""
        let details["create_bus_routing_style"]["-corner_type"] = ""
        let details["create_bus_routing_style"]["-gap"] = "(Default gap)"
        let details["create_bus_routing_style"]["-valid_layers"] = ""
        let details["create_bus_routing_style"]["-layer_spacings"] = "(List of layer and spacing)"
        let details["create_bus_routing_style"]["-layer_widths"] = "(List of layer and width)"
        let details["create_bus_routing_style"]["-force"] = "(Overwrite existing constraint)"
   let details["create_busplans"]={}
        let details["create_busplans"]["-name"] = "(Name of created bus)"
        let details["create_busplans"]["-auto"] = "(Automatically create remaining buses)"
        let details["create_busplans"]["-rule"] = "(Create the bus or buses with this net wire estimation rule)"
        let details["create_busplans"]["-from"] = "(Create a bus starting at the given pins or ports)"
        let details["create_busplans"]["-to"] = "(Create a bus ending at the given pins or ports)"
        let details["create_busplans"]["-nets"] = "(Create a bus that passes through the given nets)"
        let details["create_busplans"]["-force"] = "(Remove portion of old buses if they overlap the a new bus)"
        let details["create_busplans"]["-add_start_end_cells"] = ""
        let details["create_busplans"]["-reset"] = "(Remove all busplan information from the design)"
        let details["create_busplans"]["-verbose"] = "(Command outputs more information)"
   let details["create_cell"]={}
        let details["create_cell"]["-design"] = "(Top design for finding objects)"
   let details["create_channel_congestion_map"]={}
        let details["create_channel_congestion_map"]["-channel_width_threshold"] = ""
        let details["create_channel_congestion_map"]["-boundary"] = "(areas that users want to check for congestions)"
   let details["create_check_design_strategy"]={}
        let details["create_check_design_strategy"]["-define_check"] = "(create an user-defined atomic-check)"
        let details["create_check_design_strategy"]["-define_group"] = "(create an user-defined mega-check)"
   let details["create_clock"]={}
        let details["create_clock"]["-period"] = "(Clock period: "
        let details["create_clock"]["-name"] = "(Clock name)"
        let details["create_clock"]["-waveform"] = "(Clock edge specification)"
        let details["create_clock"]["-add"] = "(Add to the existing clocks on source_objects)"
        let details["create_clock"]["-comment"] = "(User specified comment)"
   let details["create_clock_balance_group"]={}
        let details["create_clock_balance_group"]["-objects"] = ""
        let details["create_clock_balance_group"]["-name"] = "(Name of the group)"
        let details["create_clock_balance_group"]["-offset_latencies"] = ""
        let details["create_clock_balance_group"]["-corner"] = "(corner for the offset)"
   let details["create_clock_buffer"]={}
        let details["create_clock_buffer"]["-clock"] = "(Clock)"
        let details["create_clock_buffer"]["-sinks"] = "(Pins or ports which are the sinks of the new buffer.)"
        let details["create_clock_buffer"]["-source"] = "(Pins or ports which are the source of the new buffer.)"
        let details["create_clock_buffer"]["-new_net_name"] = "(Net name prefix to use for newly-created nets.)"
        let details["create_clock_buffer"]["-new_cell_name"] = ""
        let details["create_clock_buffer"]["-replace"] = "(Existing cell to replace with a buffer.)"
        let details["create_clock_buffer"]["-location"] = "(target location)"
        let details["create_clock_buffer"]["-snap"] = "(false|true)]   (Snap new buffer away from blocks.)"
   let details["create_clock_drivers"]={}
        let details["create_clock_drivers"]["-boundary"] = "(Boundary of area to be sub-divided (using -boxes))"
        let details["create_clock_drivers"]["-boxes"] = ""
        let details["create_clock_drivers"]["-locations"] = ""
        let details["create_clock_drivers"]["-lib_cells"] = ""
        let details["create_clock_drivers"]["-hierarchy"] = "(Logical hierarchy level for the repeaters)"
        let details["create_clock_drivers"]["-short_outputs"] = "(Short the outputs of the inserted cells)"
        let details["create_clock_drivers"]["-output_net_name"] = ""
        let details["create_clock_drivers"]["-transfer_wires_from"] = ""
        let details["create_clock_drivers"]["-template"] = "(Use clones of the existing driver template cell)"
        let details["create_clock_drivers"]["-input_pin"] = "(lib_cell_pin name of the template cell's clock input)"
        let details["create_clock_drivers"]["-prefix"] = "(Prefix for created instances and nets)"
        let details["create_clock_drivers"]["-keepouts"] = ""
        let details["create_clock_drivers"]["-max_displacement"] = ""
        let details["create_clock_drivers"]["-loads"] = "(A net or a list of pins)"
        let details["create_clock_drivers"]["-configuration"] = ""
   let details["create_clock_rp_groups"]={}
        let details["create_clock_rp_groups"]["-distance"] = ""
        let details["create_clock_rp_groups"]["-max_sinks"] = "(maximum sinks in one RP group: "
        let details["create_clock_rp_groups"]["-min_sinks"] = "(minimum sinks in one RP group: "
        let details["create_clock_rp_groups"]["-auto_shape"] = "(Decide shape of RP groups automatically)"
        let details["create_clock_rp_groups"]["-timing_driven"] = "(Timing aware clustering)"
        let details["create_clock_rp_groups"]["-max_rp_rows"] = ""
        let details["create_clock_rp_groups"]["-cells"] = "(Cells to be clustered)"
   let details["create_clock_skew_group"]={}
        let details["create_clock_skew_group"]["-name"] = "(Name of skew group)"
        let details["create_clock_skew_group"]["-objects"] = "(List of balance point objects)"
        let details["create_clock_skew_group"]["-mode"] = "(Mode for this skew group; default is current mode)"
   let details["create_clock_straps"]={}
        let details["create_clock_straps"]["-nets"] = "(List of nets)"
        let details["create_clock_straps"]["-layers"] = "(List of layers)"
        let details["create_clock_straps"]["-widths"] = ""
        let details["create_clock_straps"]["-margins"] = ""
        let details["create_clock_straps"]["-length"] = "(Maximum stripe length)"
        let details["create_clock_straps"]["-types"] = ""
        let details["create_clock_straps"]["-grids"] = ""
        let details["create_clock_straps"]["-boundary"] = "(Boundary area where straps should be created)"
        let details["create_clock_straps"]["-keepouts"] = ""
        let details["create_clock_straps"]["-create_ends"] = "(Create straps at ends)"
        let details["create_clock_straps"]["-backoff"] = "(Backoff distance)"
        let details["create_clock_straps"]["-detect_length"] = ""
        let details["create_clock_straps"]["-spine_direction"] = ""
        let details["create_clock_straps"]["-bias"] = "(Bias to existing shields)"
        let details["create_clock_straps"]["-bias_to_nets"] = ""
        let details["create_clock_straps"]["-bias_margins"] = ""
        let details["create_clock_straps"]["-allow_floating"] = "(false|true)]"
        let details["create_clock_straps"]["-allow_splitting"] = "(false|true)]"
        let details["create_clock_straps"]["-clear"] = "(Remove straps created earlier by this command for the given net(s))"
   let details["create_command_group"]={}
        let details["create_command_group"]["-info"] = "(Help string for the group)"
   let details["create_corner"]={}
        let details["create_corner"]["-copy"] = "(Corner to copy from)"
   let details["create_custom_shields"]={}
        let details["create_custom_shields"]["-nets"] = "(collection of nets)"
        let details["create_custom_shields"]["-keep_session"] = "(false|true)]"
   let details["create_density_rule"]={}
        let details["create_density_rule"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["create_density_rule"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["create_density_rule"]["-max_density"] = ""
        let details["create_density_rule"]["-min_density"] = ""
        let details["create_density_rule"]["-layer"] = "(The layer name with which this density rule is associated with)"
        let details["create_density_rule"]["-max_gradient_density"] = ""
        let details["create_density_rule"]["-window_size"] = ""
   let details["create_dff_trace_filters"]={}
        let details["create_dff_trace_filters"]["-type"] = "(type of filter: net or pin: "
        let details["create_dff_trace_filters"]["-filename"] = "(Read patterns from this file)"
        let details["create_dff_trace_filters"]["-blocks"] = "(List of block names to use for this filter set)"
        let details["create_dff_trace_filters"]["-patterns"] = "(List of patterns to add)"
   let details["create_differential_group"]={}
        let details["create_differential_group"]["-for"] = "(Group of net objects)"
        let details["create_differential_group"]["-twist_style"] = ""
        let details["create_differential_group"]["-twist_interval"] = ""
        let details["create_differential_group"]["-twist_offset"] = ""
        let details["create_differential_group"]["-gap"] = "(Default gap)"
        let details["create_differential_group"]["-shield_placement"] = ""
        let details["create_differential_group"]["-valid_layers"] = ""
        let details["create_differential_group"]["-layer_spacings"] = "(List of layer and spacing)"
        let details["create_differential_group"]["-layer_widths"] = "(List of layer and width)"
        let details["create_differential_group"]["-force"] = "(Overwrite existing constraint)"
   let details["create_diodes"]={}
        let details["create_diodes"]["-options"] = "(<{{port_name cell_instance_name diode_fram_view_name number_of_diodes max_routing_layer max_routing_distance} ...}>)"
   let details["create_drc_error"]={}
        let details["create_drc_error"]["-error_data"] = ""
        let details["create_drc_error"]["-error_type"] = ""
        let details["create_drc_error"]["-status"] = "(Status of this error: "
        let details["create_drc_error"]["-layers"] = "(List of layers associated with the shapes or coordinates)"
        let details["create_drc_error"]["-polygons"] = ""
        let details["create_drc_error"]["-polylines"] = ""
        let details["create_drc_error"]["-points"] = ""
        let details["create_drc_error"]["-endpoints"] = ""
        let details["create_drc_error"]["-objects"] = "(List of required objects to be associated with the error)"
        let details["create_drc_error"]["-must_fix"] = "(Sets the must fix flag)"
        let details["create_drc_error"]["-information"] = ""
        let details["create_drc_error"]["-direction"] = "(The direction of a spacing violation: "
        let details["create_drc_error"]["-shape_uses"] = ""
        let details["create_drc_error"]["-required_spacing"] = ""
        let details["create_drc_error"]["-actual_spacing"] = ""
        let details["create_drc_error"]["-width_required"] = ""
        let details["create_drc_error"]["-height_required"] = ""
        let details["create_drc_error"]["-pin_edge"] = "(The violating pin edge)"
   let details["create_drc_error_data"]={}
        let details["create_drc_error_data"]["-name"] = "(Error data to create, attached to current block)"
        let details["create_drc_error_data"]["-file_name"] = "(Error data XML file to create, unattached to current block)"
        let details["create_drc_error_data"]["-checker_name"] = ""
        let details["create_drc_error_data"]["-checker_version"] = ""
        let details["create_drc_error_data"]["-information"] = ""
   let details["create_drc_error_shapes"]={}
        let details["create_drc_error_shapes"]["-error_data"] = ""
        let details["create_drc_error_shapes"]["-layers"] = "(List of layers associated with the shapes)"
        let details["create_drc_error_shapes"]["-polygons"] = ""
        let details["create_drc_error_shapes"]["-polylines"] = ""
        let details["create_drc_error_shapes"]["-points"] = ""
        let details["create_drc_error_shapes"]["-endpoints"] = ""
   let details["create_drc_error_type"]={}
        let details["create_drc_error_type"]["-error_data"] = ""
        let details["create_drc_error_type"]["-name"] = "(Name of the type)"
        let details["create_drc_error_type"]["-error_class"] = ""
        let details["create_drc_error_type"]["-brief_info"] = ""
        let details["create_drc_error_type"]["-brief_format"] = ""
        let details["create_drc_error_type"]["-verbose_info"] = ""
        let details["create_drc_error_type"]["-verbose_format"] = ""
        let details["create_drc_error_type"]["-severity"] = ""
        let details["create_drc_error_type"]["-required_objects"] = ""
        let details["create_drc_error_type"]["-num_detected_errors"] = ""
   let details["create_eco_bus_buffer_pattern"]={}
        let details["create_eco_bus_buffer_pattern"]["-name"] = "(Name of bus buffer pattern)"
        let details["create_eco_bus_buffer_pattern"]["-first_buffer"] = ""
        let details["create_eco_bus_buffer_pattern"]["-measure_from"] = ""
        let details["create_eco_bus_buffer_pattern"]["-distance"] = "(Distance between reference sides of two adjacent buffers)"
        let details["create_eco_bus_buffer_pattern"]["-repeat_after"] = ""
        let details["create_eco_bus_buffer_pattern"]["-user_specified_distance"] = ""
   let details["create_edit_group"]={}
        let details["create_edit_group"]["-name"] = ""
        let details["create_edit_group"]["-ungroup_on_remove"] = ""
        let details["create_edit_group"]["-group_use"] = "(Specifies the usage context of the edit group: "
        let details["create_edit_group"]["-cell"] = "(Specifies the physical cell where the edit group is to be added)"
   let details["create_ems_database"]={}
   let details["create_ems_message"]={}
        let details["create_ems_message"]["-rule"] = "(Rule name for which message needs to be created)"
        let details["create_ems_message"]["-parameters"] = "(Sequence of parameter name and value pairs)"
   let details["create_ems_rule"]={}
        let details["create_ems_rule"]["-name"] = "(Name of the rule)"
        let details["create_ems_rule"]["-severity"] = "(Type of the rule - Error, Warning or Information)"
        let details["create_ems_rule"]["-message"] = "(Message template text)"
        let details["create_ems_rule"]["-parameters"] = "(Definition of parameters)"
   let details["create_frame"]={}
        let details["create_frame"]["-block_all"] = "(auto|true|false|used_layers|topBlockedLayerName)]"
        let details["create_frame"]["-preserve_metal_blockage"] = "(auto|true|false)]"
        let details["create_frame"]["-trim_metal_blockage_around_pin"] = ""
        let details["create_frame"]["-merge_metal_blockage"] = "(true|false)]"
        let details["create_frame"]["-drc_distances"] = ""
        let details["create_frame"]["-include_nondefault_via"] = ""
        let details["create_frame"]["-hierarchical"] = "(true|false)]"
        let details["create_frame"]["-block_core_margin"] = ""
        let details["create_frame"]["-source_drain_annotation"] = ""
        let details["create_frame"]["-connect_within_pin"] = "(true|false)]"
        let details["create_frame"]["-port_contact_selections"] = ""
        let details["create_frame"]["-design_rule_via_blockage_layers"] = ""
        let details["create_frame"]["-pin_must_connect_area_layers"] = ""
        let details["create_frame"]["-pin_must_connect_area_thresholds"] = ""
        let details["create_frame"]["-convert_metal_blockage_to_zero_spacing"] = "(mode: touch_pin, no_touch_pin, all)]"
        let details["create_frame"]["-remove_non_pin_shapes"] = ""
        let details["create_frame"]["-create_zero_spacing_blockages_around_pins"] = ""
        let details["create_frame"]["-include_routing_pg_ports"] = ""
        let details["create_frame"]["-keepout_spacing_for_non_pin_shapes"] = ""
        let details["create_frame"]["-pin_channel_distances"] = ""
        let details["create_frame"]["-color_based_dpt_flow"] = "(auto|true|false)]"
        let details["create_frame"]["-enable_via_regions_for_all_design_types"] = "(true|false)]"
   let details["create_freeze_silicon_leq_change_list"]={}
        let details["create_freeze_silicon_leq_change_list"]["-cells"] = "(List of targeted & sorted ECO cells)"
        let details["create_freeze_silicon_leq_change_list"]["-output"] = "(netlist change list for given LEQ cells)"
   let details["create_frontend_tcd_cells"]={}
        let details["create_frontend_tcd_cells"]["-lib_cells"] = "(collection of frontend Tcd lib cells)"
        let details["create_frontend_tcd_cells"]["-window_size"] = ""
        let details["create_frontend_tcd_cells"]["-tcd_spacing"] = "(tcd spacing)"
        let details["create_frontend_tcd_cells"]["-other_cell_spacing"] = ""
        let details["create_frontend_tcd_cells"]["-icovl_spacing"] = "(icovl spacing)"
        let details["create_frontend_tcd_cells"]["-respect_blockage"] = ""
        let details["create_frontend_tcd_cells"]["-density"] = "(density)"
        let details["create_frontend_tcd_cells"]["-orientation"] = "(tcd orientation: "
        let details["create_frontend_tcd_cells"]["-check_only"] = "(check only)"
        let details["create_frontend_tcd_cells"]["-bbox"] = "(rectangle for insertion)"
        let details["create_frontend_tcd_cells"]["-include_small_windows"] = ""
        let details["create_frontend_tcd_cells"]["-snap_to_fin_grid"] = "(snap to fin grid)"
        let details["create_frontend_tcd_cells"]["-place_at_window_center"] = ""
        let details["create_frontend_tcd_cells"]["-min_tcd_count"] = "(minimum number of tcds)"
        let details["create_frontend_tcd_cells"]["-max_tcd_spacing"] = ""
   let details["create_generated_clock"]={}
        let details["create_generated_clock"]["-name"] = "(Generated clock name)"
        let details["create_generated_clock"]["-source"] = "(Master clock source object pin/port)"
        let details["create_generated_clock"]["-edges"] = "(Edge specification)"
        let details["create_generated_clock"]["-divide_by"] = ""
        let details["create_generated_clock"]["-multiply_by"] = ""
        let details["create_generated_clock"]["-combinational"] = "(Divide_by 1 clock through combinational logic)"
        let details["create_generated_clock"]["-duty_cycle"] = "(Duty cycle for frequency multiplication: "
        let details["create_generated_clock"]["-invert"] = "(Invert the signal)"
        let details["create_generated_clock"]["-edge_shift"] = ""
        let details["create_generated_clock"]["-add"] = "(Add to the existing clocks on source_objects)"
        let details["create_generated_clock"]["-master_clock"] = "(Use this clock if multiple clocks present at master pin)"
        let details["create_generated_clock"]["-comment"] = "(User specified comment)"
   let details["create_geo_mask"]={}
        let details["create_geo_mask"]["-objects"] = "(Objects to use as input geometry)"
        let details["create_geo_mask"]["-merge"] = "(Merge resulting geo_mask)"
   let details["create_grid"]={}
        let details["create_grid"]["-pg_strategy"] = ""
        let details["create_grid"]["-layers"] = "(Specify the routing layers to consider within the PG strategy)"
        let details["create_grid"]["-site_rows"] = "(Specify the site rows to be considered in creating the grid)"
        let details["create_grid"]["-site_arrays"] = ""
        let details["create_grid"]["-x_step"] = "(Specify the grid pitch in the X direction)"
        let details["create_grid"]["-y_step"] = "(Specify the grid pitch in the Y direction)"
        let details["create_grid"]["-x_offset"] = "(Specify the grid's offset to the owner design's origin in the X direction)"
        let details["create_grid"]["-y_offset"] = "(Specify the grid's offset to the owner design's origin in the Y direction)"
        let details["create_grid"]["-orientations"] = ""
        let details["create_grid"]["-type"] = "(Type of the grid to create: "
   let details["create_group"]={}
        let details["create_group"]["-name"] = "(The name of the group)"
        let details["create_group"]["-allow_duplicate_names"] = ""
        let details["create_group"]["-type"] = "(Specifies the type of the group: "
        let details["create_group"]["-remove_when"] = ""
   let details["create_icovl_cells"]={}
        let details["create_icovl_cells"]["-type"] = ""
        let details["create_icovl_cells"]["-lib_cells"] = "(collection of icovl lib cells)"
        let details["create_icovl_cells"]["-bbox"] = "(insertion bounding box)"
        let details["create_icovl_cells"]["-partitions"] = ""
        let details["create_icovl_cells"]["-tcd_spacing"] = "(tcd spacing)"
        let details["create_icovl_cells"]["-other_cell_spacing"] = ""
        let details["create_icovl_cells"]["-icovl_spacing"] = "(icovl spacing)"
        let details["create_icovl_cells"]["-placement_blockage_extension"] = ""
        let details["create_icovl_cells"]["-routing_blockage_extension"] = ""
        let details["create_icovl_cells"]["-routing_blockage_layers"] = ""
        let details["create_icovl_cells"]["-over_icovl_routing_guide_extension"] = ""
        let details["create_icovl_cells"]["-over_icovl_routing_guide_layers"] = ""
        let details["create_icovl_cells"]["-orientation"] = "(icovl orientation: "
        let details["create_icovl_cells"]["-check_only"] = "(check only)"
   let details["create_io_break_cells"]={}
        let details["create_io_break_cells"]["-reference_cells"] = ""
        let details["create_io_break_cells"]["-cells"] = ""
        let details["create_io_break_cells"]["-location"] = ""
   let details["create_io_corner_cell"]={}
        let details["create_io_corner_cell"]["-reference_cell"] = ""
        let details["create_io_corner_cell"]["-cell"] = ""
   let details["create_io_filler_cells"]={}
        let details["create_io_filler_cells"]["-io_guides"] = ""
        let details["create_io_filler_cells"]["-reference_cells"] = ""
        let details["create_io_filler_cells"]["-extension_bbox"] = ""
        let details["create_io_filler_cells"]["-overlap_cells"] = ""
        let details["create_io_filler_cells"]["-prefix"] = "(Specifies a prefix to the cells added)"
   let details["create_io_guide"]={}
        let details["create_io_guide"]["-name"] = "(The name of the io_guide)"
        let details["create_io_guide"]["-line"] = ""
        let details["create_io_guide"]["-side"] = ""
        let details["create_io_guide"]["-offset"] = ""
        let details["create_io_guide"]["-min_pitch"] = "(Specifies the minimum pitch between two neighboring pads)"
        let details["create_io_guide"]["-pad_cells"] = ""
   let details["create_io_ring"]={}
        let details["create_io_ring"]["-name"] = "(Name of the io_ring)"
        let details["create_io_ring"]["-inside"] = ""
        let details["create_io_ring"]["-offset"] = "(Offset from the boundary or the interior edge of outer ring)"
        let details["create_io_ring"]["-guides"] = ""
        let details["create_io_ring"]["-bbox"] = "(Bounding box for the io_ring)"
        let details["create_io_ring"]["-corner_height"] = "(height of io_guides in the io_ring)"
        let details["create_io_ring"]["-pad_cell_list"] = ""
   let details["create_keepout_margin"]={}
        let details["create_keepout_margin"]["-type"] = "(Keepout type (default is hard): "
        let details["create_keepout_margin"]["-outer"] = ""
        let details["create_keepout_margin"]["-inner"] = ""
        let details["create_keepout_margin"]["-layers"] = ""
        let details["create_keepout_margin"]["-tracks_per_macro_pin"] = ""
        let details["create_keepout_margin"]["-min_padding_per_macro"] = ""
        let details["create_keepout_margin"]["-max_padding_per_macro"] = ""
   let details["create_layer"]={}
        let details["create_layer"]["-tech"] = "(tech)"
        let details["create_layer"]["-name"] = "(Layer name)"
        let details["create_layer"]["-number"] = "(Layer number)"
        let details["create_layer"]["-purpose"] = ""
        let details["create_layer"]["-layer_type"] = ""
        let details["create_layer"]["-mask_name"] = "(Mask name)"
        let details["create_layer"]["-before"] = ""
        let details["create_layer"]["-after"] = ""
   let details["create_left_right_filler_cells"]={}
        let details["create_left_right_filler_cells"]["-lib_cells"] = "(list of {{center cell} {left filler cell list} {right filler cell list}} pair)"
        let details["create_left_right_filler_cells"]["-prefix"] = "(filler cell prefix)"
        let details["create_left_right_filler_cells"]["-boundaries"] = "(insertion area list)"
        let details["create_left_right_filler_cells"]["-rules"] = "(filler insertion special rules: "
        let details["create_left_right_filler_cells"]["-voltage_areas"] = ""
        let details["create_left_right_filler_cells"]["-follow_stdcell_orientation"] = ""
   let details["create_length_limit"]={}
        let details["create_length_limit"]["-for"] = "(Group of net, bundle, and topology_edge objects)"
        let details["create_length_limit"]["-min_value"] = "(Min value: "
        let details["create_length_limit"]["-force"] = "(Overwrite existing constraint)"
   let details["create_lib"]={}
        let details["create_lib"]["-technology"] = ""
        let details["create_lib"]["-use_technology_lib"] = ""
        let details["create_lib"]["-ref_libs"] = "(Reference library paths)"
        let details["create_lib"]["-convert_sites"] = ""
        let details["create_lib"]["-scale_factor"] = ""
        let details["create_lib"]["-base_lib"] = "(Base library path)"
   let details["create_logic_net"]={}
   let details["create_logic_port"]={}
        let details["create_logic_port"]["-direction"] = "(direction of the logic port; default is 'in': "
   let details["create_macro_array"]={}
        let details["create_macro_array"]["-num_rows"] = "(Specify number of rows)"
        let details["create_macro_array"]["-num_cols"] = "(Specify number of cols)"
        let details["create_macro_array"]["-horizontal_channel_height"] = ""
        let details["create_macro_array"]["-vertical_channel_width"] = ""
        let details["create_macro_array"]["-align"] = ""
        let details["create_macro_array"]["-orientation"] = ""
        let details["create_macro_array"]["-flip_alternate_rows"] = "(Flip macros in alternate rows)"
        let details["create_macro_array"]["-flip_alternate_cols"] = "(Flip macros in alternate cols)"
        let details["create_macro_array"]["-fill_pattern"] = ""
        let details["create_macro_array"]["-create_group"] = ""
        let details["create_macro_array"]["-name"] = ""
   let details["create_macro_relative_location_placement"]={}
        let details["create_macro_relative_location_placement"]["-hierarchical"] = "(Place macros level-by-level in current design)"
        let details["create_macro_relative_location_placement"]["-snap_to_grid"] = "(Hard macros will be snapped in relative location placement)"
   let details["create_marker_layers"]={}
        let details["create_marker_layers"]["-design"] = "(Top design for finding objects)"
        let details["create_marker_layers"]["-cells"] = "(cells)"
        let details["create_marker_layers"]["-references"] = ""
        let details["create_marker_layers"]["-horizontal_extension"] = ""
        let details["create_marker_layers"]["-vertical_extension"] = ""
   let details["create_mask_constraint_routing_blockages"]={}
        let details["create_mask_constraint_routing_blockages"]["-cells"] = "(Create double pattern routing blockages on selected blocks.)"
        let details["create_mask_constraint_routing_blockages"]["-self"] = "(Create double pattern routing blockages on top level.)"
        let details["create_mask_constraint_routing_blockages"]["-create_placement_blockages"] = ""
   let details["create_matching_type"]={}
        let details["create_matching_type"]["-name"] = ""
        let details["create_matching_type"]["-uniquify"] = "(Specifies how cells are assigned to pins: "
   let details["create_mim_capacitor_array"]={}
        let details["create_mim_capacitor_array"]["-lib_cell"] = "(Library cell or design to create)"
        let details["create_mim_capacitor_array"]["-boundary"] = "(polygon for insertion)"
        let details["create_mim_capacitor_array"]["-x_increment"] = "(x increment)"
        let details["create_mim_capacitor_array"]["-y_increment"] = "(y increment)"
        let details["create_mim_capacitor_array"]["-orientation"] = "(Specifies the orient of mim capacitors: "
        let details["create_mim_capacitor_array"]["-prefix"] = "(prefix to be used for names of new cells)"
   let details["create_mismatch_config"]={}
        let details["create_mismatch_config"]["-ref_config"] = ""
   let details["create_mode"]={}
   let details["create_module"]={}
        let details["create_module"]["-design"] = "(Top design for finding objects)"
   let details["create_multibit"]={}
        let details["create_multibit"]["-name"] = "(multibit cell name)"
        let details["create_multibit"]["-lib_cell"] = "(library cell name)"
   let details["create_multisource_clock_sink_group"]={}
        let details["create_multisource_clock_sink_group"]["-name"] = "(group name of a set of sinks)"
        let details["create_multisource_clock_sink_group"]["-sinks"] = "(list of clock sinks)"
        let details["create_multisource_clock_sink_group"]["-driver_object"] = ""
        let details["create_multisource_clock_sink_group"]["-type"] = ""
   let details["create_mv_cells"]={}
        let details["create_mv_cells"]["-isolation"] = "(create isolation cells)"
        let details["create_mv_cells"]["-level_shifter"] = "(create level shifter cells)"
        let details["create_mv_cells"]["-all"] = "(create both isolation and level shifter cells)"
        let details["create_mv_cells"]["-generate_strategy"] = ""
        let details["create_mv_cells"]["-strategy_output"] = ""
        let details["create_mv_cells"]["-verbose"] = "(print verbose messages for level-shifter insertion)"
   let details["create_net"]={}
        let details["create_net"]["-design"] = "(Top design for finding objects)"
        let details["create_net"]["-power"] = "(Create net of type Power)"
        let details["create_net"]["-ground"] = "(Create net of type Ground)"
        let details["create_net"]["-tie_high"] = "(Create net of type Tie High)"
        let details["create_net"]["-tie_low"] = "(Create net of type Tie Low)"
        let details["create_net"]["-cell"] = "(Specifies the cell where the net is to be added)"
   let details["create_net_bus"]={}
        let details["create_net_bus"]["-design"] = "(Top design for finding objects)"
        let details["create_net_bus"]["-create_nets"] = "(Specifies whether to create net bus members)"
        let details["create_net_bus"]["-block"] = "(Specifies the block where the net bus is to be added)"
        let details["create_net_bus"]["-cell"] = "(Specifies the cell where the net bus is to be added)"
   let details["create_net_priority"]={}
        let details["create_net_priority"]["-for"] = "(Group of net, bundle, and topology_edge objects)"
        let details["create_net_priority"]["-priority"] = "(Priority: "
        let details["create_net_priority"]["-force"] = "(Overwrite existing constraint)"
   let details["create_net_shielding"]={}
        let details["create_net_shielding"]["-for"] = "(Group of net, bundle, and topology_edge objects)"
        let details["create_net_shielding"]["-shield_net"] = "(First shield net)"
        let details["create_net_shielding"]["-shield_net_2"] = "(Second shield net)"
        let details["create_net_shielding"]["-gap"] = "(Default gap)"
        let details["create_net_shielding"]["-width"] = "(Default width)"
        let details["create_net_shielding"]["-max_gap"] = "(Default max gap)"
        let details["create_net_shielding"]["-min_segment"] = ""
        let details["create_net_shielding"]["-sharing"] = "(Whether sharing is allowed: "
        let details["create_net_shielding"]["-enclose_pins"] = "(Whether pins are enclosed: "
        let details["create_net_shielding"]["-enclose_vias"] = "(Whether vias are enclosed: "
        let details["create_net_shielding"]["-via_defs"] = "(Vias to be used)"
        let details["create_net_shielding"]["-disabled_layers"] = ""
        let details["create_net_shielding"]["-layer_widths"] = "(List of layer and width)"
        let details["create_net_shielding"]["-layer_gaps"] = "(List of layer and gap)"
        let details["create_net_shielding"]["-layer_max_gaps"] = "(List of layer and max gap)"
        let details["create_net_shielding"]["-force"] = "(Overwrite existing constraint)"
   let details["create_pad_rings"]={}
        let details["create_pad_rings"]["-create"] = ""
        let details["create_pad_rings"]["-nets"] = "(Nets to create pad rings; required for -create_specified_net)"
        let details["create_pad_rings"]["-route_pins_on_layer"] = ""
        let details["create_pad_rings"]["-sides"] = ""
        let details["create_pad_rings"]["-min_target_layer"] = ""
        let details["create_pad_rings"]["-max_target_layer"] = ""
        let details["create_pad_rings"]["-min_shrink_routing_boundaries_for_all_boundary_pads"] = ""
        let details["create_pad_rings"]["-max_shrink_routing_boundaries_for_all_boundary_pads"] = ""
        let details["create_pad_rings"]["-drc"] = "(DRC option of the PG strap: "
        let details["create_pad_rings"]["-undo"] = "(remove the most recently created PG)"
   let details["create_pg_composite_pattern"]={}
        let details["create_pg_composite_pattern"]["-nets"] = "(net name list of the PG composite pattern)"
        let details["create_pg_composite_pattern"]["-add_patterns"] = ""
        let details["create_pg_composite_pattern"]["-via_rule"] = "(via rule between low-level patterns in this PG composite pattern)"
        let details["create_pg_composite_pattern"]["-parameters"] = ""
   let details["create_pg_macro_conn_pattern"]={}
        let details["create_pg_macro_conn_pattern"]["-pin_conn_type"] = ""
        let details["create_pg_macro_conn_pattern"]["-nets"] = "(macro connection nets in this pattern)"
        let details["create_pg_macro_conn_pattern"]["-direction"] = "(macro connection direction in this pattern)"
        let details["create_pg_macro_conn_pattern"]["-width"] = "(macro connection strap width)"
        let details["create_pg_macro_conn_pattern"]["-layers"] = "(macro connection strap layers)"
        let details["create_pg_macro_conn_pattern"]["-pin_layers"] = ""
        let details["create_pg_macro_conn_pattern"]["-spacing"] = "(spacing between macro connection straps)"
        let details["create_pg_macro_conn_pattern"]["-pitch"] = "(pitch between macro connection straps)"
        let details["create_pg_macro_conn_pattern"]["-number"] = "(number of macro connection straps)"
        let details["create_pg_macro_conn_pattern"]["-excluded_pins"] = ""
        let details["create_pg_macro_conn_pattern"]["-via_rule"] = "(via rule between macro connection straps and pins)"
        let details["create_pg_macro_conn_pattern"]["-parameters"] = ""
   let details["create_pg_region"]={}
        let details["create_pg_region"]["-core"] = "(use core area to create region)"
        let details["create_pg_region"]["-design_boundary"] = "(use design boundary to create region)"
        let details["create_pg_region"]["-voltage_area"] = ""
        let details["create_pg_region"]["-block"] = "(use block to create region)"
        let details["create_pg_region"]["-polygon"] = "(use polygon to create region)"
        let details["create_pg_region"]["-group_of_macros"] = ""
        let details["create_pg_region"]["-group_of_ios"] = "(use group of IOs to create region)"
        let details["create_pg_region"]["-join_regions"] = ""
        let details["create_pg_region"]["-update"] = "(use existing PG region to create region)"
        let details["create_pg_region"]["-expand"] = "(expand the PG region horizontally and vertically)"
        let details["create_pg_region"]["-expand_by_edge"] = ""
        let details["create_pg_region"]["-exclude_macros"] = ""
        let details["create_pg_region"]["-macro_offset"] = ""
        let details["create_pg_region"]["-io_offset"] = "(offset from IOs)"
        let details["create_pg_region"]["-exclude_regions"] = ""
        let details["create_pg_region"]["-remove_jog"] = "(remove jogging edges from the region)"
        let details["create_pg_region"]["-remove_notch"] = ""
   let details["create_pg_ring_pattern"]={}
        let details["create_pg_ring_pattern"]["-nets"] = "(symbolic net names of the PG ring pattern)"
        let details["create_pg_ring_pattern"]["-horizontal_width"] = ""
        let details["create_pg_ring_pattern"]["-vertical_width"] = ""
        let details["create_pg_ring_pattern"]["-horizontal_layer"] = ""
        let details["create_pg_ring_pattern"]["-vertical_layer"] = ""
        let details["create_pg_ring_pattern"]["-horizontal_spacing"] = ""
        let details["create_pg_ring_pattern"]["-vertical_spacing"] = ""
        let details["create_pg_ring_pattern"]["-side_width"] = ""
        let details["create_pg_ring_pattern"]["-side_layer"] = ""
        let details["create_pg_ring_pattern"]["-side_spacing"] = ""
        let details["create_pg_ring_pattern"]["-corner_bridge"] = ""
        let details["create_pg_ring_pattern"]["-via_rule"] = "(via rule within this PG ring pattern)"
        let details["create_pg_ring_pattern"]["-parameters"] = ""
   let details["create_pg_special_pattern"]={}
        let details["create_pg_special_pattern"]["-insert_channel_straps"] = ""
        let details["create_pg_special_pattern"]["-honor_max_stdcell_strap_distance"] = ""
        let details["create_pg_special_pattern"]["-insert_power_switch_alignment_straps"] = ""
        let details["create_pg_special_pattern"]["-insert_terminal_alignment_straps"] = ""
        let details["create_pg_special_pattern"]["-terminal_alignment_via_rule"] = ""
        let details["create_pg_special_pattern"]["-insert_physical_cell_alignment_straps"] = ""
        let details["create_pg_special_pattern"]["-parameters"] = ""
   let details["create_pg_stapling_vias"]={}
        let details["create_pg_stapling_vias"]["-nets"] = "(PG nets for via creation)"
        let details["create_pg_stapling_vias"]["-regions"] = "(Bboxes for via creation)"
        let details["create_pg_stapling_vias"]["-from_shapes"] = ""
        let details["create_pg_stapling_vias"]["-to_shapes"] = "(Object shapes for via creation)"
        let details["create_pg_stapling_vias"]["-from_layer"] = "(Object layer for via creation)"
        let details["create_pg_stapling_vias"]["-to_layer"] = "(Object layer for via creation)"
        let details["create_pg_stapling_vias"]["-contact_code"] = ""
        let details["create_pg_stapling_vias"]["-via_masters"] = ""
        let details["create_pg_stapling_vias"]["-pitch"] = "(via creation pitch)"
        let details["create_pg_stapling_vias"]["-offset"] = "(via creation offset)"
        let details["create_pg_stapling_vias"]["-ignore_drc"] = "(ignore drc checking)"
        let details["create_pg_stapling_vias"]["-mask"] = "(cut mask: "
        let details["create_pg_stapling_vias"]["-align_track"] = ""
        let details["create_pg_stapling_vias"]["-max_array_size"] = ""
        let details["create_pg_stapling_vias"]["-mark_as"] = "(use type of the PG vias: "
        let details["create_pg_stapling_vias"]["-tag"] = "(tag for created vias)"
   let details["create_pg_std_cell_conn_pattern"]={}
        let details["create_pg_std_cell_conn_pattern"]["-rail_width"] = ""
        let details["create_pg_std_cell_conn_pattern"]["-rail_shift"] = ""
        let details["create_pg_std_cell_conn_pattern"]["-layers"] = "(layers of the PG standard cell rail pattern)"
        let details["create_pg_std_cell_conn_pattern"]["-rail_mask"] = "(top and bottom rail mask in this pattern)"
        let details["create_pg_std_cell_conn_pattern"]["-check_std_cell_drc"] = ""
        let details["create_pg_std_cell_conn_pattern"]["-mark_as_follow_pin"] = ""
        let details["create_pg_std_cell_conn_pattern"]["-parameters"] = ""
   let details["create_pg_strap"]={}
        let details["create_pg_strap"]["-layer"] = "(layer of the PG strap)"
        let details["create_pg_strap"]["-start"] = "(start value of the PG strap)"
        let details["create_pg_strap"]["-stop"] = "(stop value of the PG strap)"
        let details["create_pg_strap"]["-pitch"] = "(pitch value of the PG strap)"
        let details["create_pg_strap"]["-direction"] = "(direction of the PG strap: "
        let details["create_pg_strap"]["-width"] = "(width value of the PG strap)"
        let details["create_pg_strap"]["-net"] = "(net name of the PG strap)"
        let details["create_pg_strap"]["-low_end"] = "(low end of the PG strap)"
        let details["create_pg_strap"]["-high_end"] = "(high end of the PG strap)"
        let details["create_pg_strap"]["-extend_low"] = ""
        let details["create_pg_strap"]["-extend_high"] = ""
        let details["create_pg_strap"]["-via_rule"] = "(via rule of the PG strap)"
        let details["create_pg_strap"]["-drc"] = "(DRC option of the PG strap: "
        let details["create_pg_strap"]["-tag"] = "(tag for created vias/wires)"
        let details["create_pg_strap"]["-mark_as"] = "(use type of the PG strap: "
        let details["create_pg_strap"]["-mask"] = "(mask of the PG strap: "
        let details["create_pg_strap"]["-mask_constraint"] = ""
   let details["create_pg_vias"]={}
        let details["create_pg_vias"]["-nets"] = "(PG nets for via creation)"
        let details["create_pg_vias"]["-within_bbox"] = ""
        let details["create_pg_vias"]["-from_types"] = "(Object types for via creation)"
        let details["create_pg_vias"]["-from_layers"] = ""
        let details["create_pg_vias"]["-to_types"] = "(Object types for via creation)"
        let details["create_pg_vias"]["-to_layers"] = ""
        let details["create_pg_vias"]["-shapes"] = "(Object shapes for via creation)"
        let details["create_pg_vias"]["-via_masters"] = ""
        let details["create_pg_vias"]["-allow_parallel_objects"] = ""
        let details["create_pg_vias"]["-insert_additional_vias"] = ""
        let details["create_pg_vias"]["-drc"] = "(DRC option of the PG via creation: "
        let details["create_pg_vias"]["-mark_as"] = "(use type of the PG vias: "
        let details["create_pg_vias"]["-tag"] = "(tag for created vias/wires)"
   let details["create_pg_wire_pattern"]={}
        let details["create_pg_wire_pattern"]["-direction"] = "(direction of the PG wire pattern)"
        let details["create_pg_wire_pattern"]["-layer"] = "(layer of the PG wire pattern)"
        let details["create_pg_wire_pattern"]["-center"] = "(center of the first PG wire)"
        let details["create_pg_wire_pattern"]["-low_end_reference_point"] = ""
        let details["create_pg_wire_pattern"]["-high_end_reference_point"] = ""
        let details["create_pg_wire_pattern"]["-extend_low"] = ""
        let details["create_pg_wire_pattern"]["-extend_high"] = ""
        let details["create_pg_wire_pattern"]["-width"] = "(width list of the PG wire pattern)"
        let details["create_pg_wire_pattern"]["-spacing"] = "(spacing between PG wires in this pattern)"
        let details["create_pg_wire_pattern"]["-trim"] = "(trimming option of the PG wire pattern)"
        let details["create_pg_wire_pattern"]["-pitch"] = "(pitch of the PG wire pattern)"
        let details["create_pg_wire_pattern"]["-parameters"] = ""
        let details["create_pg_wire_pattern"]["-mask"] = "(wire pattern mask)"
        let details["create_pg_wire_pattern"]["-mask_constraint"] = ""
        let details["create_pg_wire_pattern"]["-track_alignment"] = ""
   let details["create_pin"]={}
        let details["create_pin"]["-design"] = "(Top design for finding objects)"
        let details["create_pin"]["-direction"] = "(Pin direction; default is 'in': "
   let details["create_pin_blockage"]={}
        let details["create_pin_blockage"]["-boundary"] = "(Rectilinear boundary of the pin blockage)"
        let details["create_pin_blockage"]["-layers"] = "(Layers on which the pin blockage exists)"
        let details["create_pin_blockage"]["-name"] = ""
        let details["create_pin_blockage"]["-feedthrough_only"] = "(To set the pin blockage as feedthrough)"
        let details["create_pin_blockage"]["-cell"] = "(Specifies the physical cell where the pin blockage is to be added)"
   let details["create_pin_guide"]={}
        let details["create_pin_guide"]["-boundary"] = "(Rectilinear boundary of the pin guide)"
        let details["create_pin_guide"]["-layers"] = "(Layers on which the pin guide exists)"
        let details["create_pin_guide"]["-parents"] = "(Macro and partition cells to which this pin guide applies)"
        let details["create_pin_guide"]["-name"] = "(Name of the pin guide)"
        let details["create_pin_guide"]["-exclusive"] = "(Set the pin guide to be exclusive)"
        let details["create_pin_guide"]["-pin_spacing"] = ""
        let details["create_pin_guide"]["-cell"] = "(Specifies the physical cell where the pin guide is to be added)"
   let details["create_placement"]={}
        let details["create_placement"]["-floorplan"] = "(Run design planning styled placement)"
        let details["create_placement"]["-host_options"] = ""
        let details["create_placement"]["-use_seed_locs"] = "(Use current cell locations as a seed for placement)"
        let details["create_placement"]["-timing_driven"] = "(Run timing-driven placement)"
        let details["create_placement"]["-congestion"] = "(Run congestion driven placement)"
        let details["create_placement"]["-congestion_effort"] = ""
        let details["create_placement"]["-effort"] = "(Placement effort: "
        let details["create_placement"]["-incremental"] = "(Run incremental placement)"
        let details["create_placement"]["-congestion_driven_restructuring"] = ""
   let details["create_placement_blockage"]={}
        let details["create_placement_blockage"]["-boundary"] = "(Polygon boundary points)"
        let details["create_placement_blockage"]["-type"] = "(Blockage type (default is hard): "
        let details["create_placement_blockage"]["-purpose"] = ""
        let details["create_placement_blockage"]["-name"] = "(Blockage name)"
        let details["create_placement_blockage"]["-blocked_percentage"] = ""
        let details["create_placement_blockage"]["-category"] = ""
        let details["create_placement_blockage"]["-cell"] = "(Specifies the physical cell where the placement blockage is to be added)"
   let details["create_poly_rect"]={}
        let details["create_poly_rect"]["-boundary"] = "(Convert this boundary to poly_rects)"
        let details["create_poly_rect"]["-layers"] = "(Target layers for poly_rects)"
   let details["create_port"]={}
        let details["create_port"]["-design"] = "(Top design for finding objects)"
        let details["create_port"]["-direction"] = "(Port direction; default is 'in': "
        let details["create_port"]["-cell"] = "(Specifies the cell where the port is to be added)"
        let details["create_port"]["-port_type"] = "(Port type; default is 'unset': "
   let details["create_port_bus"]={}
        let details["create_port_bus"]["-design"] = "(Top design for finding objects)"
        let details["create_port_bus"]["-create_ports"] = "(Specifies whether to create port bus members)"
        let details["create_port_bus"]["-block"] = "(Specifies the block where the port bus is to be added)"
        let details["create_port_bus"]["-cell"] = "(Specifies the cell where the port bus is to be added)"
   let details["create_power_domain"]={}
        let details["create_power_domain"]["-elements"] = "(Cells to associate with domain)"
        let details["create_power_domain"]["-include_scope"] = "(Include the scope of domain in the extent)"
        let details["create_power_domain"]["-supply"] = ""
        let details["create_power_domain"]["-available_supplies"] = ""
        let details["create_power_domain"]["-scope"] = "(Create the power domain within this logic hierarchy)"
        let details["create_power_domain"]["-update"] = "(Update the previously defined power domain)"
   let details["create_power_state_group"]={}
   let details["create_power_switch"]={}
        let details["create_power_switch"]["-domain"] = "(Specify which power domain this power switch is defined for)"
        let details["create_power_switch"]["-output_supply_port"] = ""
        let details["create_power_switch"]["-input_supply_port"] = ""
        let details["create_power_switch"]["-control_port"] = ""
        let details["create_power_switch"]["-ack_port"] = ""
        let details["create_power_switch"]["-on_state"] = ""
        let details["create_power_switch"]["-on_partial_state"] = ""
        let details["create_power_switch"]["-ack_delay"] = ""
        let details["create_power_switch"]["-off_state"] = ""
        let details["create_power_switch"]["-supply_set"] = ""
        let details["create_power_switch"]["-error_state"] = ""
   let details["create_power_switch_array"]={}
        let details["create_power_switch_array"]["-power_switch"] = ""
        let details["create_power_switch_array"]["-lib_cell"] = ""
        let details["create_power_switch_array"]["-voltage_area_shape"] = ""
        let details["create_power_switch_array"]["-voltage_area"] = ""
        let details["create_power_switch_array"]["-x_pitch"] = "(Specifies the horizontal distance between power switches)"
        let details["create_power_switch_array"]["-y_pitch"] = "(Specifies the vertical distance between power switches)"
        let details["create_power_switch_array"]["-x_offset"] = "(Specifies the horizontal offset of the first power switch)"
        let details["create_power_switch_array"]["-y_offset"] = "(Specifies the vertical offset of the first power switch)"
        let details["create_power_switch_array"]["-prefix"] = "(Prefix for power switch cell name)"
        let details["create_power_switch_array"]["-orient"] = "(Specifies the orient of power switches: "
        let details["create_power_switch_array"]["-checkerboard"] = "(Specifies if the cells should be inserted in a checker board pattern: "
        let details["create_power_switch_array"]["-snap_to_site_row"] = ""
        let details["create_power_switch_array"]["-siterow_offset"] = ""
        let details["create_power_switch_array"]["-siterow_pitch"] = ""
        let details["create_power_switch_array"]["-offset_start"] = ""
        let details["create_power_switch_array"]["-pattern"] = "(Specifies the pattern name to be placed)"
        let details["create_power_switch_array"]["-boundary"] = "(Specifies the sub-region to place power switches)"
        let details["create_power_switch_array"]["-pg_strategy"] = ""
        let details["create_power_switch_array"]["-pg_straps"] = ""
        let details["create_power_switch_array"]["-align_marker"] = ""
        let details["create_power_switch_array"]["-switch_number"] = ""
   let details["create_power_switch_ring"]={}
        let details["create_power_switch_ring"]["-power_switch"] = ""
        let details["create_power_switch_ring"]["-lib_cell"] = "(Specify the library cell name of power switch)"
        let details["create_power_switch_ring"]["-vertical_lib_cell"] = ""
        let details["create_power_switch_ring"]["-filler_cells"] = ""
        let details["create_power_switch_ring"]["-vertical_filler_cells"] = ""
        let details["create_power_switch_ring"]["-voltage_area_shape"] = ""
        let details["create_power_switch_ring"]["-voltage_area"] = ""
        let details["create_power_switch_ring"]["-boundary"] = "(Insert power switch to the polygon)"
        let details["create_power_switch_ring"]["-pattern"] = "(Specifies the pattern name to be placed)"
        let details["create_power_switch_ring"]["-x_pitch"] = "(Specifies the horizontal distance between power switches)"
        let details["create_power_switch_ring"]["-y_pitch"] = "(Specifies the vertical distance between power switches)"
        let details["create_power_switch_ring"]["-x_offset"] = "(Specifies the horizontal offset of the first power switch)"
        let details["create_power_switch_ring"]["-y_offset"] = "(Specifies the vertical offset of the first power switch)"
        let details["create_power_switch_ring"]["-prefix"] = "(Prefix for power switch cell name)"
        let details["create_power_switch_ring"]["-orient"] = "(Specifies the orient of power switches: "
        let details["create_power_switch_ring"]["-vertical_lib_cell_orient"] = ""
        let details["create_power_switch_ring"]["-snap_to_site_row"] = ""
        let details["create_power_switch_ring"]["-continue_pattern"] = "(Specifies if the pattern should be continued among edges)"
        let details["create_power_switch_ring"]["-start_point"] = ""
        let details["create_power_switch_ring"]["-end_point"] = ""
        let details["create_power_switch_ring"]["-inner_corner_cell"] = ""
        let details["create_power_switch_ring"]["-outer_corner_cell"] = ""
        let details["create_power_switch_ring"]["-inner_corner_cell_orient"] = ""
        let details["create_power_switch_ring"]["-outer_corner_cell_orient"] = ""
        let details["create_power_switch_ring"]["-switch_number"] = ""
        let details["create_power_switch_ring"]["-through_points"] = ""
   let details["create_pr_rule"]={}
        let details["create_pr_rule"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["create_pr_rule"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["create_pr_rule"]["-row_spacing"] = ""
        let details["create_pr_rule"]["-abut_table"] = "(abut table top_top top_bot bot_bot: "
   let details["create_pst"]={}
        let details["create_pst"]["-supplies"] = "(List of supply nets or ports)"
   let details["create_purpose"]={}
        let details["create_purpose"]["-tech"] = "(Tech)"
        let details["create_purpose"]["-name"] = ""
        let details["create_purpose"]["-number"] = ""
        let details["create_purpose"]["-force"] = "(Overwrite an existing tech_purpose of the same name)"
   let details["create_qor_snapshot"]={}
        let details["create_qor_snapshot"]["-modes"] = "(create qor snapshot for scenarios of these modes (default is all modes))"
        let details["create_qor_snapshot"]["-corners"] = "(create qor snapshot for scenarios of these corners (default is all corners))"
        let details["create_qor_snapshot"]["-scenarios"] = ""
        let details["create_qor_snapshot"]["-name"] = "(snapshot name)"
        let details["create_qor_snapshot"]["-power"] = "(snapshot report power)"
        let details["create_qor_snapshot"]["-significant_digits"] = ""
        let details["create_qor_snapshot"]["-zero_wire_load"] = "(report violated endpoints with zero wire load violation)"
        let details["create_qor_snapshot"]["-max_paths"] = "(report timing report max path number for each timing group)"
        let details["create_qor_snapshot"]["-nworst"] = "(report timing report max path number for each endpoint)"
        let details["create_qor_snapshot"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["create_rdl_power_extension"]={}
        let details["create_rdl_power_extension"]["-layer"] = ""
        let details["create_rdl_power_extension"]["-power_net"] = "(power net name)"
        let details["create_rdl_power_extension"]["-ground_net"] = "(ground net name)"
        let details["create_rdl_power_extension"]["-mode"] = "(new|remove)]   (specifies the mode of creating shields (default new): "
        let details["create_rdl_power_extension"]["-bbox"] = ""
        let details["create_rdl_power_extension"]["-width_variation"] = ""
        let details["create_rdl_power_extension"]["-remove_nets"] = ""
        let details["create_rdl_power_extension"]["-from_previous_extension"] = "(false|true)]"
   let details["create_rdl_shields"]={}
        let details["create_rdl_shields"]["-layers"] = ""
        let details["create_rdl_shields"]["-nets"] = ""
        let details["create_rdl_shields"]["-nets_in_file"] = ""
        let details["create_rdl_shields"]["-mode"] = "(new|unshield|reshield)]"
        let details["create_rdl_shields"]["-shield_on_bump"] = "(false|true)]"
        let details["create_rdl_shields"]["-shield_via_tie"] = "(false|true)]"
        let details["create_rdl_shields"]["-shield_routing_tie"] = "(false|true)]"
        let details["create_rdl_shields"]["-trim_floating"] = "(false|true)]"
   let details["create_routing_blockage"]={}
        let details["create_routing_blockage"]["-boundary"] = "(rectangle or polygon boundary of the blockage)"
        let details["create_routing_blockage"]["-layers"] = "(Layers on which to create routing blockage)"
        let details["create_routing_blockage"]["-net_types"] = ""
        let details["create_routing_blockage"]["-zero_spacing"] = "(Creates a zero-spacing blockage)"
        let details["create_routing_blockage"]["-reserve_for_top_level_routing"] = ""
        let details["create_routing_blockage"]["-boundary_internal"] = "(Creates an internal boundary blockage)"
        let details["create_routing_blockage"]["-boundary_external"] = "(Creates an external boundary blockage)"
        let details["create_routing_blockage"]["-allow_metal_fill_only"] = ""
        let details["create_routing_blockage"]["-cell"] = "(Specifies the physical cell where the routing blockage is to be added)"
        let details["create_routing_blockage"]["-blockage_group_id"] = ""
        let details["create_routing_blockage"]["-allow_via_ladder"] = "(To allow overlap with via_ladders)"
        let details["create_routing_blockage"]["-name_prefix"] = ""
   let details["create_routing_corridor"]={}
        let details["create_routing_corridor"]["-boundary"] = "(Corridor boundary)"
        let details["create_routing_corridor"]["-path"] = "(Corridor path)"
        let details["create_routing_corridor"]["-width"] = "(Corridor path width)"
        let details["create_routing_corridor"]["-start_endcap"] = ""
        let details["create_routing_corridor"]["-end_endcap"] = ""
        let details["create_routing_corridor"]["-min_layer_name"] = ""
        let details["create_routing_corridor"]["-max_layer_name"] = ""
        let details["create_routing_corridor"]["-name"] = "(Name of the routing corridor)"
        let details["create_routing_corridor"]["-object"] = "(Objects associated with this routing corridor)"
        let details["create_routing_corridor"]["-cell"] = "(Specifies the physical cell where the routing corridor is to be added)"
   let details["create_routing_corridor_shape"]={}
        let details["create_routing_corridor_shape"]["-routing_corridor"] = ""
        let details["create_routing_corridor_shape"]["-boundary"] = "(Routing corridor shape in rectangle or polygon)"
        let details["create_routing_corridor_shape"]["-path"] = "(Routing corridor shape in path)"
        let details["create_routing_corridor_shape"]["-width"] = "(path width)"
        let details["create_routing_corridor_shape"]["-start_endcap"] = ""
        let details["create_routing_corridor_shape"]["-end_endcap"] = ""
        let details["create_routing_corridor_shape"]["-min_layer_name"] = ""
        let details["create_routing_corridor_shape"]["-max_layer_name"] = ""
   let details["create_routing_guide"]={}
        let details["create_routing_guide"]["-boundary"] = "(Routing guide bounding box)"
        let details["create_routing_guide"]["-layers"] = ""
        let details["create_routing_guide"]["-horizontal_track_utilization"] = ""
        let details["create_routing_guide"]["-vertical_track_utilization"] = ""
        let details["create_routing_guide"]["-name"] = ""
        let details["create_routing_guide"]["-cell"] = "(Specifies the physical cell where the routing guide is to be added)"
        let details["create_routing_guide"]["-river_routing"] = "(Route Guide type is river_routing)"
        let details["create_routing_guide"]["-switched_direction_only"] = ""
        let details["create_routing_guide"]["-max_patterns"] = ""
        let details["create_routing_guide"]["-access_preference"] = ""
        let details["create_routing_guide"]["-metal_cut_allowed"] = "(Route Guide type is metal_cut_allowed)"
        let details["create_routing_guide"]["-forbidden_preferred_grid_extension"] = ""
        let details["create_routing_guide"]["-design_boundary_blockage"] = ""
        let details["create_routing_guide"]["-pin_access"] = "(Route Guide type is pin_access)"
        let details["create_routing_guide"]["-standard_cell_region"] = ""
        let details["create_routing_guide"]["-single_row_via_ladder_pattern_must_join_allowed"] = ""
        let details["create_routing_guide"]["-preferred_direction_only"] = ""
        let details["create_routing_guide"]["-switch_preferred_direction"] = ""
   let details["create_routing_rule"]={}
        let details["create_routing_rule"]["-default_reference_rule"] = ""
        let details["create_routing_rule"]["-reference_rule_name"] = ""
        let details["create_routing_rule"]["-widths"] = ""
        let details["create_routing_rule"]["-shield"] = "(Define shielding with default width and spacing)"
        let details["create_routing_rule"]["-shield_widths"] = ""
        let details["create_routing_rule"]["-shield_spacings"] = ""
        let details["create_routing_rule"]["-snap_to_track"] = "(Snap shielding wires to the nearest routing track)"
        let details["create_routing_rule"]["-vias"] = ""
        let details["create_routing_rule"]["-cuts"] = ""
        let details["create_routing_rule"]["-taper_distance"] = ""
        let details["create_routing_rule"]["-driver_taper_distance"] = ""
        let details["create_routing_rule"]["-taper_over_pin_layers"] = ""
        let details["create_routing_rule"]["-taper_under_pin_layers"] = ""
        let details["create_routing_rule"]["-spacings"] = ""
        let details["create_routing_rule"]["-spacing_weight_levels"] = ""
        let details["create_routing_rule"]["-spacing_length_thresholds"] = ""
        let details["create_routing_rule"]["-multiplier_width"] = ""
        let details["create_routing_rule"]["-multiplier_spacing"] = ""
        let details["create_routing_rule"]["-ignore_spacing_to_pg"] = ""
        let details["create_routing_rule"]["-ignore_spacing_to_blockage"] = ""
        let details["create_routing_rule"]["-ignore_spacing_to_shield"] = ""
        let details["create_routing_rule"]["-rdl_taper_distances"] = ""
        let details["create_routing_rule"]["-rdl_taper_widths"] = ""
        let details["create_routing_rule"]["-mask_constraints"] = ""
        let details["create_routing_rule"]["-via_spacings"] = ""
   let details["create_rp_group"]={}
        let details["create_rp_group"]["-name"] = "(name of the RP group)"
        let details["create_rp_group"]["-design"] = "(Top design for finding objects)"
        let details["create_rp_group"]["-rows"] = "(number of rows of RP group: "
        let details["create_rp_group"]["-columns"] = "(number of columns of RP group: "
   let details["create_sadp_track_rule"]={}
        let details["create_sadp_track_rule"]["-name"] = ""
        let details["create_sadp_track_rule"]["-pattern"] = "(pattern of the track_rule)"
        let details["create_sadp_track_rule"]["-sadp_spacing"] = ""
   let details["create_scenario"]={}
        let details["create_scenario"]["-mode"] = "(Mode of scenario; default is current mode)"
        let details["create_scenario"]["-corner"] = "(Corner of scenario; default is current corner)"
        let details["create_scenario"]["-name"] = "(Scenario name)"
        let details["create_scenario"]["-init_from"] = "(corner or scenario)"
   let details["create_shape"]={}
        let details["create_shape"]["-shape_type"] = "(Type of the shape: "
        let details["create_shape"]["-layer"] = "(Layer on which to create the shape)"
        let details["create_shape"]["-shape_use"] = "(Usage of the shape: "
        let details["create_shape"]["-boundary"] = "(Rect or polygon boundary)"
        let details["create_shape"]["-path"] = "(Path centerline points)"
        let details["create_shape"]["-width"] = "(Path width)"
        let details["create_shape"]["-start_endcap"] = "(Path start endcap: "
        let details["create_shape"]["-end_endcap"] = "(Path end endcap: "
        let details["create_shape"]["-start_extension"] = ""
        let details["create_shape"]["-end_extension"] = ""
        let details["create_shape"]["-origin"] = "(Text origin)"
        let details["create_shape"]["-height"] = "(Text height)"
        let details["create_shape"]["-orientation"] = ""
        let details["create_shape"]["-justification"] = ""
        let details["create_shape"]["-text"] = "(Text string)"
        let details["create_shape"]["-net"] = "(Net of the shape)"
        let details["create_shape"]["-port"] = "(Port of the shape)"
        let details["create_shape"]["-fill_cell"] = "(Fill cell to own the shape)"
   let details["create_shaping_blockage"]={}
        let details["create_shaping_blockage"]["-boundary"] = "(Polygon boundary points)"
        let details["create_shaping_blockage"]["-purpose"] = ""
        let details["create_shaping_blockage"]["-name"] = "(Blockage name)"
        let details["create_shaping_blockage"]["-cell"] = "(Specifies the physical cell where the shaping blockage is to be added)"
   let details["create_shields"]={}
        let details["create_shields"]["-shielding_mode"] = ""
        let details["create_shields"]["-with_ground"] = ""
        let details["create_shields"]["-nets"] = "(list of nets to shield; (default is nets with shielding rules are only shielded))"
        let details["create_shields"]["-ignore_shielding_net_pins"] = "(false|true)]"
        let details["create_shields"]["-ignore_shielding_net_rails"] = "(false|true)]"
        let details["create_shields"]["-coaxial_below"] = "(false|true)]"
        let details["create_shields"]["-coaxial_above"] = "(false|true)]"
        let details["create_shields"]["-coaxial_below_skip_tracks"] = ""
        let details["create_shields"]["-coaxial_above_skip_tracks"] = ""
        let details["create_shields"]["-pg_via_tie_effort_level"] = ""
        let details["create_shields"]["-shield_via_tie_effort_level"] = ""
        let details["create_shields"]["-preferred_direction_only"] = "(false|true)]"
        let details["create_shields"]["-align_to_shape_end"] = "(false|true)]"
        let details["create_shields"]["-coaxial_skip_tracks_on_layers"] = ""
        let details["create_shields"]["-include_adjacent_layers"] = "(false|true)]"
        let details["create_shields"]["-coaxial_below_user_spacing"] = ""
        let details["create_shields"]["-coaxial_above_user_spacing"] = ""
   let details["create_site_array"]={}
        let details["create_site_array"]["-name"] = ""
        let details["create_site_array"]["-site"] = "(Site definition name)"
        let details["create_site_array"]["-boundary"] = "(Rect or polygon boundary)"
        let details["create_site_array"]["-voltage_area"] = ""
        let details["create_site_array"]["-flip_first_row"] = ""
        let details["create_site_array"]["-flip_alternate_row"] = ""
        let details["create_site_array"]["-transparent"] = ""
        let details["create_site_array"]["-direction"] = ""
        let details["create_site_array"]["-x_margin"] = "(x offset between sites of a site row)"
        let details["create_site_array"]["-y_margin"] = "(y offset between site rows of the array)"
        let details["create_site_array"]["-core_offset"] = ""
        let details["create_site_array"]["-above"] = "(Name or collection of a site array)"
        let details["create_site_array"]["-below"] = "(Name or collection of a site array)"
        let details["create_site_array"]["-top"] = "(at the top of the stack)"
        let details["create_site_array"]["-bottom"] = "(at the bottom of the stack)"
        let details["create_site_array"]["-default"] = "(create a default site array)"
        let details["create_site_array"]["-aligned"] = "(Align site rows to virtual site grid: "
        let details["create_site_array"]["-inner_margin"] = ""
   let details["create_site_def"]={}
        let details["create_site_def"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["create_site_def"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["create_site_def"]["-name"] = "(Name of the site definition)"
        let details["create_site_def"]["-width"] = "(Width of the site definition)"
        let details["create_site_def"]["-height"] = "(Height of the site definition)"
        let details["create_site_def"]["-type"] = "(Type of the site definition as core/pad, default is core: "
        let details["create_site_def"]["-symmetry"] = "(Specifies if the site definition is symmetrical about X and/or Y and/or 90 degree rotation, there is no default symmetry)"
        let details["create_site_def"]["-is_default"] = "(This is a default site_def)"
   let details["create_site_row"]={}
        let details["create_site_row"]["-name"] = "(Site row name)"
        let details["create_site_row"]["-site"] = "(Site definition name)"
        let details["create_site_row"]["-origin"] = "(Origin of site row)"
        let details["create_site_row"]["-site_count"] = "(Number of sites in the site row: "
        let details["create_site_row"]["-orientation"] = ""
        let details["create_site_row"]["-site_orientation"] = ""
        let details["create_site_row"]["-x_margin"] = "(x offset between sites of a site row)"
   let details["create_stdcell_fillers"]={}
        let details["create_stdcell_fillers"]["-lib_cells"] = "(collection of filler lib cells)"
        let details["create_stdcell_fillers"]["-prefix"] = "( fillers prefix)"
        let details["create_stdcell_fillers"]["-bboxes"] = "(area insertion bounding box list)"
        let details["create_stdcell_fillers"]["-voltage_area"] = ""
        let details["create_stdcell_fillers"]["-rules"] = "(filler insertion special rules: "
        let details["create_stdcell_fillers"]["-continue_on_error"] = "(continue on error)"
        let details["create_stdcell_fillers"]["-ignore_hard_blockages"] = ""
        let details["create_stdcell_fillers"]["-utilization"] = ""
        let details["create_stdcell_fillers"]["-post_eco"] = "(mark filler post eco)"
        let details["create_stdcell_fillers"]["-smallest_cell_size"] = ""
   let details["create_supernet"]={}
        let details["create_supernet"]["-design"] = "(Top design for finding objects)"
        let details["create_supernet"]["-name"] = "(Name of supernet)"
   let details["create_supply_net"]={}
        let details["create_supply_net"]["-domain"] = "(The domain in whose scope the supply net is to be created)"
        let details["create_supply_net"]["-reuse"] = "(Extend the supply net name as a supply net within the power domain)"
        let details["create_supply_net"]["-resolve"] = "(The behavior for supply net resolution)"
   let details["create_supply_port"]={}
        let details["create_supply_port"]["-domain"] = "(Domain in which to create supply port)"
        let details["create_supply_port"]["-direction"] = "(Port direction; default is 'in': "
   let details["create_supply_set"]={}
        let details["create_supply_set"]["-function"] = ""
        let details["create_supply_set"]["-update"] = "(Update an existing supply set)"
   let details["create_tap_cells"]={}
        let details["create_tap_cells"]["-lib_cell"] = "(library cell for tap cell)"
        let details["create_tap_cells"]["-mirrored_row_lib_cell"] = ""
        let details["create_tap_cells"]["-distance"] = "(tap distance)"
        let details["create_tap_cells"]["-voltage_area"] = ""
        let details["create_tap_cells"]["-offset"] = "(offset)"
        let details["create_tap_cells"]["-pattern"] = ""
        let details["create_tap_cells"]["-prefix"] = "(tap cell inst prefix)"
        let details["create_tap_cells"]["-separator"] = "(tap cell seperator)"
        let details["create_tap_cells"]["-at_distance_only"] = "(Specifies whether density adjustment should be used)"
        let details["create_tap_cells"]["-skip_fixed_cells"] = "(Specifies whether existing fixed cells are treated as blockages)"
        let details["create_tap_cells"]["-insert_into_blocks"] = "(Specifies whether tap cells are inserted into blocks)"
        let details["create_tap_cells"]["-row_end_tap_bypass"] = "(No tap placed within rule distance from row ends)"
        let details["create_tap_cells"]["-preserve_distance_continuity"] = ""
   let details["create_taps"]={}
        let details["create_taps"]["-top_pg"] = "(Create taps by top-level pins)"
        let details["create_taps"]["-of_objects"] = "(Create taps by cell instances or masters)"
        let details["create_taps"]["-import"] = "(Tap file to be read in)"
        let details["create_taps"]["-point"] = "(XY coordinates of the tap to be created)"
        let details["create_taps"]["-layer"] = "(Layer number)"
        let details["create_taps"]["-supply_net"] = ""
        let details["create_taps"]["-name"] = "(Name to be assigned to the tap)"
        let details["create_taps"]["-nocheck"] = "(Don't check whether the tap touches a geometry)"
        let details["create_taps"]["-snap_distance"] = ""
   let details["create_tech"]={}
        let details["create_tech"]["-library"] = "(Library)"
        let details["create_tech"]["-force"] = "(creates a new tech and re-binds the lib)"
   let details["create_terminal"]={}
        let details["create_terminal"]["-port"] = "(Name or collection of a port)"
        let details["create_terminal"]["-of_objects"] = ""
        let details["create_terminal"]["-object"] = "(Name or collection of the terminal shape or via)"
        let details["create_terminal"]["-direction"] = ""
        let details["create_terminal"]["-eeq_class"] = "(Provide value for eeq_class attribute on terminal: "
        let details["create_terminal"]["-name"] = "(Name of the terminal)"
   let details["create_topological_constraint"]={}
        let details["create_topological_constraint"]["-start_sides"] = ""
        let details["create_topological_constraint"]["-start_offset"] = "(Offset distance from the edge's starting point in clockwise direction)"
        let details["create_topological_constraint"]["-start_offset_range"] = ""
        let details["create_topological_constraint"]["-start_layers"] = "(Layers on which pins may be created)"
        let details["create_topological_constraint"]["-end_sides"] = ""
        let details["create_topological_constraint"]["-end_offset"] = "(Offset distance from the edge's starting point in clockwise direction)"
        let details["create_topological_constraint"]["-end_offset_range"] = ""
        let details["create_topological_constraint"]["-end_layers"] = "(Layers on which pins may be created)"
        let details["create_topological_constraint"]["-start_object"] = "(Object at the start of the connection)"
        let details["create_topological_constraint"]["-end_object"] = "(Object at the end of the connection)"
        let details["create_topological_constraint"]["-cell"] = "(Specifies the physical cell where the topological feedthrough constraint is to be added)"
   let details["create_topology_edge"]={}
        let details["create_topology_edge"]["-net"] = "(Net of the topology edge)"
        let details["create_topology_edge"]["-name"] = ""
        let details["create_topology_edge"]["-endpoint0"] = "(The object to connect to the topology edge's first endpoint)"
        let details["create_topology_edge"]["-endpoint1"] = "(The object to connect to the topology edge's second endpoint)"
        let details["create_topology_edge"]["-constraint_groups"] = ""
   let details["create_topology_node"]={}
        let details["create_topology_node"]["-net"] = "(Net of the topology node)"
        let details["create_topology_node"]["-name"] = ""
        let details["create_topology_node"]["-boundary"] = "(The rectangular physical constraint boundary on the topology node)"
        let details["create_topology_node"]["-driver"] = "(Set as virtual driver pin)"
        let details["create_topology_node"]["-centroid"] = "(Set as virtual centroid pin)"
   let details["create_track"]={}
        let details["create_track"]["-layer"] = "(Routing layer used for the tracks)"
        let details["create_track"]["-space"] = "(Space between tracks)"
        let details["create_track"]["-count"] = ""
        let details["create_track"]["-coord"] = ""
        let details["create_track"]["-width"] = "(Wire width associated with this track)"
        let details["create_track"]["-dir"] = "(Direction of the track: "
        let details["create_track"]["-bbox"] = "(Boundary of the tracks)"
        let details["create_track"]["-reserved_for_width"] = "(Indicates if the track is reserved)"
        let details["create_track"]["-cell"] = "(Specifies the physical cell where the tracks are to be added)"
        let details["create_track"]["-mask_pattern"] = ""
        let details["create_track"]["-end_grid_low_offset"] = ""
        let details["create_track"]["-end_grid_high_offset"] = ""
        let details["create_track"]["-end_grid_low_steps"] = ""
        let details["create_track"]["-end_grid_high_steps"] = ""
   let details["create_undo_marker"]={}
   let details["create_utilization_configuration"]={}
        let details["create_utilization_configuration"]["-capacity"] = ""
        let details["create_utilization_configuration"]["-include"] = ""
        let details["create_utilization_configuration"]["-exclude"] = ""
        let details["create_utilization_configuration"]["-scope"] = "(Scope of the configuration: "
        let details["create_utilization_configuration"]["-as_user_default"] = "(Creates user defined default configuration for utilization reporting)"
        let details["create_utilization_configuration"]["-force"] = "(Overwrite the existing configuration)"
   let details["create_via"]={}
        let details["create_via"]["-via_def"] = ""
        let details["create_via"]["-origin"] = "(Placement location of the via's center)"
        let details["create_via"]["-orientation"] = ""
        let details["create_via"]["-pitch"] = ""
        let details["create_via"]["-size"] = "(Number of rows and columns in a simple array via)"
        let details["create_via"]["-cut_pattern"] = ""
        let details["create_via"]["-shape_use"] = "(Usage of the via: "
        let details["create_via"]["-net"] = "(Net of the via)"
        let details["create_via"]["-port"] = "(Port of the via)"
        let details["create_via"]["-lower_mask_constraint"] = ""
        let details["create_via"]["-cut_mask_constraint"] = ""
        let details["create_via"]["-upper_mask_constraint"] = ""
   let details["create_via_def"]={}
        let details["create_via_def"]["-design"] = "(Top design for finding objects)"
        let details["create_via_def"]["-library"] = "(Library for finding objects)"
        let details["create_via_def"]["-tech"] = "(Tech for finding object)"
        let details["create_via_def"]["-force"] = "(Overwrite an existing via_def of the same name)"
        let details["create_via_def"]["-shapes"] = "(Shapes of a custom via_def)"
        let details["create_via_def"]["-cut_layer"] = "(Cut layer of a simple via_def)"
        let details["create_via_def"]["-cut_size"] = ""
        let details["create_via_def"]["-lower_enclosure"] = ""
        let details["create_via_def"]["-upper_enclosure"] = ""
        let details["create_via_def"]["-min_rows"] = ""
        let details["create_via_def"]["-min_columns"] = ""
        let details["create_via_def"]["-min_cut_spacing"] = ""
        let details["create_via_def"]["-cut_pattern"] = ""
        let details["create_via_def"]["-is_default"] = "(This is a default via_def)"
        let details["create_via_def"]["-source_type"] = ""
        let details["create_via_def"]["-is_excluded_for_signal_route"] = ""
        let details["create_via_def"]["-mask_pattern"] = ""
        let details["create_via_def"]["-upper_mask_pattern"] = ""
        let details["create_via_def"]["-lower_mask_pattern"] = ""
        let details["create_via_def"]["-redundant_via_insertion_only"] = ""
   let details["create_via_region"]={}
        let details["create_via_region"]["-design"] = "(Top design for finding objects)"
        let details["create_via_region"]["-via_def"] = "(Via definition associated with the via region)"
        let details["create_via_region"]["-terminal"] = "(The terminal associated with the via region)"
        let details["create_via_region"]["-boundary"] = "(Polygon boundary points)"
        let details["create_via_region"]["-force"] = "(Overwrite an existing via_region associated with the pin)"
        let details["create_via_region"]["-rotate"] = "(Specifies whether the router must rotate the vias 90 degrees for placement in the via region)"
   let details["create_via_rule"]={}
        let details["create_via_rule"]["-design"] = "(Top design for finding objects)"
        let details["create_via_rule"]["-library"] = "(Library for finding objects)"
        let details["create_via_rule"]["-tech"] = "(Tech for finding object)"
        let details["create_via_rule"]["-name"] = "(The name of via rule)"
        let details["create_via_rule"]["-cut_layer_names"] = ""
        let details["create_via_rule"]["-cut_names"] = "(Specifies the cut names)"
        let details["create_via_rule"]["-cut_rows"] = "(Specifies the cut rows)"
        let details["create_via_rule"]["-cuts_per_row"] = ""
   let details["create_virtual_connection"]={}
        let details["create_virtual_connection"]["-name"] = "(Specify the name of the new virtual connection)"
        let details["create_virtual_connection"]["-pins"] = "(Specify pins or ports to be connected to the newly created virtual connection)"
        let details["create_virtual_connection"]["-weight"] = "(Specify the weight of virtual connection: "
   let details["create_voltage_area"]={}
        let details["create_voltage_area"]["-power_domains"] = ""
        let details["create_voltage_area"]["-power"] = "(power supply_net of this voltage_area)"
        let details["create_voltage_area"]["-ground"] = "(ground supply_net of this voltage_area)"
        let details["create_voltage_area"]["-cells"] = "(Cells to be included in the voltage_area)"
        let details["create_voltage_area"]["-region"] = "(rectangles and polygons for this voltage_area)"
        let details["create_voltage_area"]["-guard_band"] = "(guard_band widths in horizontal and vertical directions)"
        let details["create_voltage_area"]["-is_fixed"] = "(Set the voltage_area location as fixed)"
        let details["create_voltage_area"]["-merge_regions"] = "(Merge abutted and overlapping regions)"
        let details["create_voltage_area"]["-target_utilization"] = ""
        let details["create_voltage_area"]["-name"] = ""
        let details["create_voltage_area"]["-cell"] = "(Specifies the physical cell where the voltage area is to be added)"
   let details["create_voltage_area_rule"]={}
        let details["create_voltage_area_rule"]["-name"] = "(Name of the voltage area rule)"
        let details["create_voltage_area_rule"]["-allow_pass_through"] = ""
        let details["create_voltage_area_rule"]["-allow_physical_feedthrough"] = ""
        let details["create_voltage_area_rule"]["-default_rule"] = "(Create the default rule)"
        let details["create_voltage_area_rule"]["-voltage_areas"] = ""
   let details["create_voltage_area_shape"]={}
        let details["create_voltage_area_shape"]["-voltage_area"] = ""
        let details["create_voltage_area_shape"]["-region"] = "(rectangle or polygon boundary of this voltage_area_shape)"
        let details["create_voltage_area_shape"]["-guard_band"] = "(guard_band widths in horizontal and vertical directions)"
        let details["create_voltage_area_shape"]["-target_utilization"] = ""
        let details["create_voltage_area_shape"]["-cells"] = "(Cells to be included in this voltage_area_shape)"
        let details["create_voltage_area_shape"]["-exclusive"] = "(Set the voltage_area_shape as exclusive)"
        let details["create_voltage_area_shape"]["-merge_regions"] = "(Merge with existing abutted and overlapping regions)"
        let details["create_voltage_area_shape"]["-top"] = "(at the top of the stack)"
        let details["create_voltage_area_shape"]["-bottom"] = "(at the bottom of the stack)"
        let details["create_voltage_area_shape"]["-above"] = ""
        let details["create_voltage_area_shape"]["-below"] = ""
   let details["create_vtcell_fillers"]={}
        let details["create_vtcell_fillers"]["-prefix"] = "(end cap inst prefix)"
        let details["create_vtcell_fillers"]["-separator"] = "(end cap seperator)"
        let details["create_vtcell_fillers"]["-voltage_area"] = ""
        let details["create_vtcell_fillers"]["-region"] = "(rectangles and polygons for the insertion area)"
        let details["create_vtcell_fillers"]["-boundary"] = ""
        let details["create_vtcell_fillers"]["-clear_vt_information"] = ""
   let details["create_wire_matching"]={}
        let details["create_wire_matching"]["-for"] = "(Group of net, bundle, and topology_edge objects)"
        let details["create_wire_matching"]["-tolerance"] = "(Tolerance value: "
        let details["create_wire_matching"]["-match_type"] = ""
        let details["create_wire_matching"]["-relative"] = "(Tolerance is percentage or absolute)"
        let details["create_wire_matching"]["-force"] = "(Overwrite existing constraint)"
   let details["current_block"]={}
        let details["current_block"]["-quiet"] = "(Suppress all messages)"
   let details["current_corner"]={}
   let details["current_design"]={}
        let details["current_design"]["-quiet"] = "(Suppress all messages)"
   let details["current_instance"]={}
   let details["current_lib"]={}
        let details["current_lib"]["-quiet"] = "(Suppress all messages)"
   let details["current_mode"]={}
   let details["current_scenario"]={}
   let details["cut_rows"]={}
        let details["cut_rows"]["-all"] = "(To remove all site rows)"
        let details["cut_rows"]["-within"] = "(Coordinates of the boundary of the rectilinear shape)"
   let details["date"]={}
   let details["define_antenna_accumulation_mode"]={}
        let details["define_antenna_accumulation_mode"]["-cut_to_metal"] = "(Accumulation cut to metal mode)"
        let details["define_antenna_accumulation_mode"]["-metal_to_cut"] = "(Accumulation metal to cut mode)"
   let details["define_antenna_area_rule"]={}
        let details["define_antenna_area_rule"]["-mode"] = "(The way antenna areas are computed)"
        let details["define_antenna_area_rule"]["-max_area"] = "(Maximum allowable metal area for the antenna area rule: "
        let details["define_antenna_area_rule"]["-diode_distance"] = ""
   let details["define_antenna_layer_ratio_scale"]={}
        let details["define_antenna_layer_ratio_scale"]["-layer"] = "(Name of the layer)"
        let details["define_antenna_layer_ratio_scale"]["-layer_scale"] = ""
        let details["define_antenna_layer_ratio_scale"]["-accumulate_scale"] = ""
   let details["define_antenna_layer_rule"]={}
        let details["define_antenna_layer_rule"]["-mode"] = "(The way antenna areas are computed: "
        let details["define_antenna_layer_rule"]["-layer"] = "(Name of the valid metal layer or cut layer in the library)"
        let details["define_antenna_layer_rule"]["-name"] = "(An antenna rule's name that this antenna layer rule associates with)"
        let details["define_antenna_layer_rule"]["-ratio"] = "(The maximum allowable ratio of the antenna area to the gate area)"
        let details["define_antenna_layer_rule"]["-pratio"] = "(The maximum allowable ratio of the antenna area to the p-gate area)"
        let details["define_antenna_layer_rule"]["-nratio"] = "(The maximum allowable ratio of the antenna area to the n-gate area)"
        let details["define_antenna_layer_rule"]["-diode_ratio"] = ""
        let details["define_antenna_layer_rule"]["-scale_factor"] = ""
   let details["define_antenna_rule"]={}
        let details["define_antenna_rule"]["-mode"] = "(The way antenna areas are computed: "
        let details["define_antenna_rule"]["-diode_mode"] = ""
        let details["define_antenna_rule"]["-name"] = "(The name to be associated with the antenna rule)"
        let details["define_antenna_rule"]["-metal_ratio"] = ""
        let details["define_antenna_rule"]["-metal_pratio"] = ""
        let details["define_antenna_rule"]["-metal_nratio"] = ""
        let details["define_antenna_rule"]["-cut_ratio"] = ""
        let details["define_antenna_rule"]["-cut_pratio"] = ""
        let details["define_antenna_rule"]["-cut_nratio"] = ""
        let details["define_antenna_rule"]["-protected_metal_scale"] = ""
        let details["define_antenna_rule"]["-protected_cut_scale"] = ""
        let details["define_antenna_rule"]["-area_threshold"] = "(threshold for accumulated area of floating metal or via)"
   let details["define_name_rules"]={}
        let details["define_name_rules"]["-map"] = "(Rule to map objects name from existing pattern to specified one.)"
        let details["define_name_rules"]["-type"] = "(Type on which these rules can be applied)"
        let details["define_name_rules"]["-target_bus_naming_style"] = ""
        let details["define_name_rules"]["-special"] = "(Option to specify special rules for the given output format.)"
        let details["define_name_rules"]["-reset"] = "(Resets all the rules in this name rules set)"
        let details["define_name_rules"]["-equal_ports_nets"] = "(Rule for equal port and net names)"
        let details["define_name_rules"]["-inout_ports_equal_nets"] = ""
        let details["define_name_rules"]["-remove_irregular_port_bus"] = ""
        let details["define_name_rules"]["-collapse_name_space"] = "(Rule to collapse name buses.)"
        let details["define_name_rules"]["-check_internal_net_name"] = ""
        let details["define_name_rules"]["-check_bus_indexing"] = "(Rule to check bus indexing.)"
        let details["define_name_rules"]["-allowed"] = "(Specifies the set of characters allowed in names, which must be 10 or more characters.)"
        let details["define_name_rules"]["-restricted"] = ""
        let details["define_name_rules"]["-first_restricted"] = ""
        let details["define_name_rules"]["-last_restricted"] = ""
        let details["define_name_rules"]["-remove_chars"] = "(Specifies that characters not allowed in names, as specified by character restriction rules, are removed rather than replaced.)"
        let details["define_name_rules"]["-replacement_char"] = ""
        let details["define_name_rules"]["-reserved_words"] = ""
        let details["define_name_rules"]["-case_insensitive"] = "(Specifies that the case of characters is not significant when comparing names.)"
        let details["define_name_rules"]["-prefix"] = "(Specifies a prefix used when changing a name.)"
        let details["define_name_rules"]["-max_length"] = ""
        let details["define_name_rules"]["-add_dummy_nets"] = "(Adds dummy nets for unconnected pins.)"
        let details["define_name_rules"]["-dummy_net_prefix"] = ""
        let details["define_name_rules"]["-remove_port_bus"] = "(Bit-blasts all port buses.)"
        let details["define_name_rules"]["-dont_change_bus_members"] = ""
        let details["define_name_rules"]["-dont_change_ports"] = "(Specifies not to change ports.)"
   let details["define_proc_attributes"]={}
        let details["define_proc_attributes"]["-info"] = "(Help string for the procedure)"
        let details["define_proc_attributes"]["-define_args"] = ""
        let details["define_proc_attributes"]["-define_arg_groups"] = ""
        let details["define_proc_attributes"]["-command_group"] = ""
        let details["define_proc_attributes"]["-permanent"] = "(Procedure cannot be overwritten)"
        let details["define_proc_attributes"]["-hide_body"] = "(Body cannot be viewed with 'info body')"
        let details["define_proc_attributes"]["-hidden"] = "(Procedure does not show up in help or info)"
        let details["define_proc_attributes"]["-dont_abbrev"] = "(Procedure can never be abbreviated)"
        let details["define_proc_attributes"]["-return"] = "(Return type for the procedure)"
   let details["define_user_attribute"]={}
        let details["define_user_attribute"]["-type"] = "(Data type of the attribute: "
        let details["define_user_attribute"]["-classes"] = "(Define attributes for these classes: "
        let details["define_user_attribute"]["-range_min"] = "(Min value for numeric ranges)"
        let details["define_user_attribute"]["-range_max"] = "(Max value for numeric ranges)"
        let details["define_user_attribute"]["-one_of"] = "(List of allowable strings)"
        let details["define_user_attribute"]["-persistent"] = "(Make this attribute persistent)"
        let details["define_user_attribute"]["-quiet"] = "(Do not print any messages)"
        let details["define_user_attribute"]["-name"] = "(Attribute name)"
   let details["derive_cell_snap_data"]={}
        let details["derive_cell_snap_data"]["-force"] = "()"
   let details["derive_clock_balance_constraints"]={}
        let details["derive_clock_balance_constraints"]["-slack_less_than"] = ""
   let details["derive_clock_balance_points"]={}
        let details["derive_clock_balance_points"]["-clocks"] = "(List of clocks)"
        let details["derive_clock_balance_points"]["-corners"] = "(List of corners)"
        let details["derive_clock_balance_points"]["-reference_latency"] = ""
        let details["derive_clock_balance_points"]["-output"] = "(Output file name)"
   let details["derive_clock_cell_references"]={}
        let details["derive_clock_cell_references"]["-output"] = "(Write derived references to specified file instead of applying to design)"
   let details["derive_hier_antenna_property"]={}
        let details["derive_hier_antenna_property"]["-design_name"] = "(name of the design)"
   let details["derive_macro_relative_location"]={}
        let details["derive_macro_relative_location"]["-cells"] = "(Cell list of macro cells that need derivation)"
        let details["derive_macro_relative_location"]["-output_file"] = "(Specifies the output file name)"
        let details["derive_macro_relative_location"]["-anchor_corner"] = ""
        let details["derive_macro_relative_location"]["-offset_type"] = ""
        let details["derive_macro_relative_location"]["-use_bbox"] = "(Indicates that BBoxes would be used when encountering rectlinear block shape)"
        let details["derive_macro_relative_location"]["-anchor_object"] = ""
        let details["derive_macro_relative_location"]["-hierarchical"] = "(Derive macro relative location constraints in hierarchical design)"
        let details["derive_macro_relative_location"]["-cluster_spacing"] = ""
   let details["derive_mask_constraint"]={}
   let details["derive_pg_mask_constraint"]={}
        let details["derive_pg_mask_constraint"]["-nets"] = "(List of power or ground nets)"
        let details["derive_pg_mask_constraint"]["-overwrite"] = "(overwrite)"
        let details["derive_pg_mask_constraint"]["-derive_cut_mask"] = "(derive cut masks)"
        let details["derive_pg_mask_constraint"]["-verbose"] = "(show error message)"
   let details["derive_placement_blockages"]={}
        let details["derive_placement_blockages"]["-hierarchical"] = "( level-by-level in current design)"
        let details["derive_placement_blockages"]["-force"] = "(create of blockages even if utilization may be high)"
   let details["derive_preferred_macro_locations"]={}
        let details["derive_preferred_macro_locations"]["-file"] = "(write the constraints to the given file)"
   let details["derive_route_connection"]={}
   let details["diceTclLoadHelper"]={}
   let details["disconnect_3d_bumps"]={}
        let details["disconnect_3d_bumps"]["-nets"] = ""
   let details["disconnect_net"]={}
        let details["disconnect_net"]["-design"] = "(Top design for finding objects)"
        let details["disconnect_net"]["-net"] = "(Net/net_bus to disconnect object(s) from)"
        let details["disconnect_net"]["-all"] = "(Disconnect all objects from net)"
   let details["distribute_objects"]={}
        let details["distribute_objects"]["-anchor"] = "(names or collection of anchor objects)"
        let details["distribute_objects"]["-parent"] = "(distribute to parent)"
        let details["distribute_objects"]["-to"] = "(distribute to point)"
        let details["distribute_objects"]["-to_box"] = "(distribute to box)"
        let details["distribute_objects"]["-side"] = ""
        let details["distribute_objects"]["-anchor_side"] = ""
        let details["distribute_objects"]["-spacing"] = "(distribute spacing)"
        let details["distribute_objects"]["-pitch"] = "(distribute pitch)"
        let details["distribute_objects"]["-group"] = "(distribute as group)"
        let details["distribute_objects"]["-margin"] = "(consider keepout margins or guard bands)"
   let details["echo"]={}
        let details["echo"]["-n"] = "(Suppress newline)"
   let details["eco_netlist"]={}
        let details["eco_netlist"]["-write_changes"] = ""
        let details["eco_netlist"]["-write_changes_per_module"] = ""
        let details["eco_netlist"]["-cross_physical_hierarchy"] = ""
        let details["eco_netlist"]["-by_verilog_file"] = ""
        let details["eco_netlist"]["-by_block"] = ""
        let details["eco_netlist"]["-golden_lib"] = ""
        let details["eco_netlist"]["-working_block"] = ""
        let details["eco_netlist"]["-working_lib"] = ""
        let details["eco_netlist"]["-compare_physical_only_cells"] = ""
        let details["eco_netlist"]["-extract_timing_eco_changes"] = ""
        let details["eco_netlist"]["-compare_module_subsets"] = ""
        let details["eco_netlist"]["-compare_target_modules"] = ""
        let details["eco_netlist"]["-compare_pg"] = "(Include PG objects into comparison)"
        let details["eco_netlist"]["-write_summary"] = ""
   let details["eco_update_supply_net"]={}
        let details["eco_update_supply_net"]["-cells"] = "(List of cells)"
   let details["edit_block"]={}
   let details["edit_ems_rule"]={}
        let details["edit_ems_rule"]["-name"] = "(Name of the rule)"
        let details["edit_ems_rule"]["-severity"] = "(Type of the rule - Error, Warning or Information)"
        let details["edit_ems_rule"]["-message"] = "(Message template text)"
        let details["edit_ems_rule"]["-parameters"] = "(Definition of parameters)"
   let details["edit_module"]={}
   let details["ensemble"]={}
   let details["error_info"]={}
   let details["estimate_timing"]={}
        let details["estimate_timing"]["-host_options"] = ""
        let details["estimate_timing"]["-optimized_blocks"] = ""
        let details["estimate_timing"]["-force_user_corner"] = "(Use current corner delays for back-annotation)"
        let details["estimate_timing"]["-nets"] = "(List of nets for incremental timing estimation)"
        let details["estimate_timing"]["-pins"] = "(List of pins or ports for incremental timing estimation)"
   let details["eval_with_undo"]={}
        let details["eval_with_undo"]["-atomic"] = "(Name to assign to this set of commands)"
        let details["eval_with_undo"]["-disable"] = "(Disable undo for this set of commands)"
   let details["exit"]={}
   let details["expand_objects"]={}
        let details["expand_objects"]["-side"] = "(expand side (default is all): "
        let details["expand_objects"]["-offset"] = "(expand offset)"
   let details["expand_outline"]={}
        let details["expand_outline"]["-design"] = "(Top design for finding objects)"
        let details["expand_outline"]["-force"] = "(Force read)"
        let details["expand_outline"]["-keep"] = "(Keep outline design open)"
        let details["expand_outline"]["-no_def"] = "(Prevent reading of DEF file)"
        let details["expand_outline"]["-strip"] = "(File path prefixes to remove)"
   let details["explore_logic_hierarchy"]={}
        let details["explore_logic_hierarchy"]["-threshold"] = ""
        let details["explore_logic_hierarchy"]["-utilization"] = ""
        let details["explore_logic_hierarchy"]["-expand"] = "(Expands the sub-logical hierarchies of the input hierarchies)"
        let details["explore_logic_hierarchy"]["-collapse"] = "(Removes all module boundaries inside input's parent hierarchy and create the module boundary for the parent hierarchy)"
        let details["explore_logic_hierarchy"]["-create_module_boundary"] = ""
        let details["explore_logic_hierarchy"]["-remove"] = "(Removes module boundaries related to the input hierarchies)"
        let details["explore_logic_hierarchy"]["-organize"] = "(Origanizes cells outside the diearea)"
        let details["explore_logic_hierarchy"]["-place"] = "(Places the hierarchy boundaries.)"
        let details["explore_logic_hierarchy"]["-use_existing_placement"] = ""
        let details["explore_logic_hierarchy"]["-rectangular"] = "(Places the hierarchy boundaries as rectangles.)"
        let details["explore_logic_hierarchy"]["-force"] = "(Force to expand current hierarchy even if it has no connectivity.)"
        let details["explore_logic_hierarchy"]["-cell"] = "(logic hierarchy)"
        let details["explore_logic_hierarchy"]["-name"] = "(Name of the new virtual group)"
        let details["explore_logic_hierarchy"]["-virtual_group"] = ""
        let details["explore_logic_hierarchy"]["-virtual_ungroup"] = ""
        let details["explore_logic_hierarchy"]["-output"] = "(File to output current module boundaries)"
   let details["export_advanced_technology_rules"]={}
        let details["export_advanced_technology_rules"]["-exclude_lib_cells"] = ""
   let details["filter_collection"]={}
        let details["filter_collection"]["-regexp"] = "(Operators =~ and !~ use regular expressions)"
        let details["filter_collection"]["-nocase"] = "(Case insensitive string match)"
   let details["find_objects"]={}
        let details["find_objects"]["-pattern"] = "(pattern to search)"
        let details["find_objects"]["-object_type"] = "(object type: "
        let details["find_objects"]["-direction"] = "(port direction: "
        let details["find_objects"]["-transitive"] = "(applies to descendants of the elements)"
        let details["find_objects"]["-non_leaf"] = "(only non-leaf elements)"
        let details["find_objects"]["-leaf_only"] = "(only leaf elements)"
        let details["find_objects"]["-exact"] = "(disable pattern match mode)"
   let details["fix_placement_color_mask"]={}
   let details["fix_signal_em"]={}
        let details["fix_signal_em"]["-nets"] = "(List of nets)"
   let details["flip_objects"]={}
        let details["flip_objects"]["-x"] = "(x coordinate of vertical line to flip about)"
        let details["flip_objects"]["-y"] = "(y coordinate of horizontal line to flip about)"
        let details["flip_objects"]["-flip"] = "(flip axis: "
        let details["flip_objects"]["-anchor"] = "(anchor point: "
   let details["foreach_in_collection"]={}
   let details["generate_net_pattern"]={}
        let details["generate_net_pattern"]["-output"] = "(output net pattern to a file)"
        let details["generate_net_pattern"]["-route_mode"] = "(route mode)"
        let details["generate_net_pattern"]["-apply"] = "(apply net pattern to the design)"
   let details["generate_sadp_tracks"]={}
        let details["generate_sadp_tracks"]["-rule_name"] = ""
        let details["generate_sadp_tracks"]["-layer"] = "(Specifies the layer to use the tracks created by the track_rule)"
        let details["generate_sadp_tracks"]["-start"] = "(Specifies the location of the first track may start)"
        let details["generate_sadp_tracks"]["-stop"] = "(Specifies the location of the last track must stop)"
        let details["generate_sadp_tracks"]["-count"] = ""
        let details["generate_sadp_tracks"]["-pitch"] = ""
        let details["generate_sadp_tracks"]["-auto_fill"] = ""
        let details["generate_sadp_tracks"]["-exact"] = "(Specifies whether to start track_pattern from given start_point or friendly location based on floorplan)"
        let details["generate_sadp_tracks"]["-create_pg_route"] = "(Specifies whether to create pg_route if netname in the track_rule match pg_net)"
        let details["generate_sadp_tracks"]["-color"] = "(Specifies the mask pattern for the track pattern: "
   let details["get_abstract_type"]={}
   let details["get_antenna_rule_names"]={}
        let details["get_antenna_rule_names"]["-mode"] = "(Get the antenna rules with the given mode set: "
        let details["get_antenna_rule_names"]["-library"] = "(The library to get the antenna rules from)"
   let details["get_app_option_value"]={}
        let details["get_app_option_value"]["-block"] = "(Get options on this block)"
        let details["get_app_option_value"]["-user_default"] = "(Get the user-default value for the option)"
        let details["get_app_option_value"]["-system_default"] = "(Get the system-default value for the option)"
        let details["get_app_option_value"]["-details"] = "(Get detailed information about the option)"
        let details["get_app_option_value"]["-name"] = "(Option name)"
   let details["get_app_options"]={}
        let details["get_app_options"]["-block"] = "(Only include options explicitly set on the block)"
        let details["get_app_options"]["-global"] = "(Only include the global scoped options that are explicitly set)"
        let details["get_app_options"]["-non_default"] = "(Only include the options whose value is different from the default)"
        let details["get_app_options"]["-quiet"] = "(Suppress all messages)"
   let details["get_app_var"]={}
        let details["get_app_var"]["-default"] = "(Get the default value)"
        let details["get_app_var"]["-details"] = "(Get additional variable information)"
        let details["get_app_var"]["-list"] = "(Return list of variables matching pattern)"
        let details["get_app_var"]["-only_changed_vars"] = "(Only returned changed variables (ignored unless -list specified))"
   let details["get_attribute"]={}
        let details["get_attribute"]["-class"] = "(class name; for compatibility: "
        let details["get_attribute"]["-quiet"] = "(Suppress error messages)"
        let details["get_attribute"]["-value_list"] = "(Always return result as a list)"
        let details["get_attribute"]["-objects"] = "(List of collections of objects)"
        let details["get_attribute"]["-name"] = "(Attribute name)"
   let details["get_block_objects"]={}
        let details["get_block_objects"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_block_objects"]["-quiet"] = "(Suppress all messages)"
        let details["get_block_objects"]["-block"] = "(Name or collection of the top block)"
   let details["get_blocks"]={}
        let details["get_blocks"]["-open"] = "(Only match open blocks)"
        let details["get_blocks"]["-explicit"] = "(Only match explicitly opened blocks)"
        let details["get_blocks"]["-implicit"] = "(Only match implicitly opened blocks)"
        let details["get_blocks"]["-all"] = "(Match open and closed blocks)"
        let details["get_blocks"]["-lib_cells"] = "(Find lib cell blocks also)"
        let details["get_blocks"]["-hierarchical"] = "(Search level-by-level in current block)"
        let details["get_blocks"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_blocks"]["-quiet"] = "(Suppress all messages)"
        let details["get_blocks"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_blocks"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_blocks"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_blocks"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_blocks"]["-expect_at_least"] = ""
        let details["get_blocks"]["-expect_each_pattern_matches"] = ""
        let details["get_blocks"]["-of_objects"] = ""
   let details["get_bound_shapes"]={}
        let details["get_bound_shapes"]["-design"] = "(Top design for finding objects)"
        let details["get_bound_shapes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_bound_shapes"]["-quiet"] = "(Suppress all messages)"
        let details["get_bound_shapes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_bound_shapes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_bound_shapes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_bound_shapes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_bound_shapes"]["-expect_at_least"] = ""
        let details["get_bound_shapes"]["-expect_each_pattern_matches"] = ""
        let details["get_bound_shapes"]["-of_objects"] = ""
        let details["get_bound_shapes"]["-hierarchical"] = "(Get bound shapes in the full  	                   hierarchy below)"
        let details["get_bound_shapes"]["-at"] = "(Search point)"
        let details["get_bound_shapes"]["-within"] = "(Search within Rect or polygon)"
        let details["get_bound_shapes"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_bound_shapes"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_bounds"]={}
        let details["get_bounds"]["-design"] = "(Top design for finding objects)"
        let details["get_bounds"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_bounds"]["-quiet"] = "(Suppress all messages)"
        let details["get_bounds"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_bounds"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_bounds"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_bounds"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_bounds"]["-expect_at_least"] = ""
        let details["get_bounds"]["-expect_each_pattern_matches"] = ""
        let details["get_bounds"]["-of_objects"] = ""
        let details["get_bounds"]["-hierarchical"] = "(Get bounds in the full hierarchy 	                     below)"
        let details["get_bounds"]["-at"] = "(Search point)"
        let details["get_bounds"]["-within"] = "(Search within Rect or polygon)"
        let details["get_bounds"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_bounds"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_budgets"]={}
        let details["get_budgets"]["-blocks"] = "(Get block cells being budgeted)"
        let details["get_budgets"]["-clocks"] = "(Get budget clocks)"
        let details["get_budgets"]["-path_types"] = "(Get budget path types)"
        let details["get_budgets"]["-all_segments"] = "(Get all segment names)"
        let details["get_budgets"]["-pin"] = "(Get budgeted pin)"
        let details["get_budgets"]["-all_pins"] = "(Get all budgeted pins)"
        let details["get_budgets"]["-pin_data"] = "(Get path data for a budgeted pin)"
        let details["get_budgets"]["-all_pin_data"] = "(Get all path data for budgeted pins)"
        let details["get_budgets"]["-pin_constraints"] = "(Get constraints for a budgeted pin)"
        let details["get_budgets"]["-all_pin_constraints"] = "(Get all constraints for budgeted pins)"
        let details["get_budgets"]["-fanin_segments"] = ""
        let details["get_budgets"]["-fanout_segments"] = ""
        let details["get_budgets"]["-fanin_cone"] = ""
        let details["get_budgets"]["-fanout_cone"] = ""
        let details["get_budgets"]["-of_pin"] = ""
        let details["get_budgets"]["-input"] = "(Apply only to specified input pins)"
        let details["get_budgets"]["-output"] = "(Apply only to specified output pins)"
        let details["get_budgets"]["-filter"] = "(Filter collection with 'expression')"
   let details["get_bundles"]={}
        let details["get_bundles"]["-design"] = "(Top design for finding objects)"
        let details["get_bundles"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_bundles"]["-quiet"] = "(Suppress all messages)"
        let details["get_bundles"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_bundles"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_bundles"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_bundles"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_bundles"]["-expect_at_least"] = ""
        let details["get_bundles"]["-expect_each_pattern_matches"] = ""
        let details["get_bundles"]["-of_objects"] = ""
   let details["get_busplans"]={}
        let details["get_busplans"]["-of_object"] = ""
        let details["get_busplans"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_busplans"]["-quiet"] = "(Suppress all messages)"
   let details["get_cell"]={}
        let details["get_cell"]["-design"] = "(Top design for finding objects)"
        let details["get_cell"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_cell"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_cell"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_cell"]["-quiet"] = "(Suppress all messages)"
        let details["get_cell"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_cell"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_cell"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_cell"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_cell"]["-expect_at_least"] = ""
        let details["get_cell"]["-expect_each_pattern_matches"] = ""
        let details["get_cell"]["-of_objects"] = ""
        let details["get_cell"]["-at"] = "(Search point)"
        let details["get_cell"]["-within"] = "(Search within Rect or polygon)"
        let details["get_cell"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_cell"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
        let details["get_cell"]["-hsc"] = "(Separator character (default is /): "
   let details["get_cells"]={}
        let details["get_cells"]["-design"] = "(Top design for finding objects)"
        let details["get_cells"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_cells"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_cells"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_cells"]["-quiet"] = "(Suppress all messages)"
        let details["get_cells"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_cells"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_cells"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_cells"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_cells"]["-expect_at_least"] = ""
        let details["get_cells"]["-expect_each_pattern_matches"] = ""
        let details["get_cells"]["-of_objects"] = ""
        let details["get_cells"]["-at"] = "(Search point)"
        let details["get_cells"]["-within"] = "(Search within Rect or polygon)"
        let details["get_cells"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_cells"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
        let details["get_cells"]["-hsc"] = "(Separator character (default is /): "
   let details["get_cells_of_scan_chain"]={}
        let details["get_cells_of_scan_chain"]["-chain"] = "(scan chain name)"
   let details["get_clock_balance_groups"]={}
        let details["get_clock_balance_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_clock_balance_groups"]["-mode"] = "(Mode for finding objects)"
        let details["get_clock_balance_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_clock_balance_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_clock_balance_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_clock_balance_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_clock_balance_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_clock_balance_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_clock_balance_groups"]["-expect_at_least"] = ""
        let details["get_clock_balance_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_clock_balance_groups"]["-of_objects"] = ""
   let details["get_clock_group_groups"]={}
   let details["get_clock_groups"]={}
        let details["get_clock_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_clock_groups"]["-mode"] = "(Mode for finding objects)"
        let details["get_clock_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_clock_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_clock_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_clock_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_clock_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_clock_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_clock_groups"]["-expect_at_least"] = ""
        let details["get_clock_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_clock_groups"]["-of_objects"] = ""
   let details["get_clock_skew_groups"]={}
        let details["get_clock_skew_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_clock_skew_groups"]["-mode"] = "(Mode for finding objects)"
        let details["get_clock_skew_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_clock_skew_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_clock_skew_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_clock_skew_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_clock_skew_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_clock_skew_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_clock_skew_groups"]["-expect_at_least"] = ""
        let details["get_clock_skew_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_clock_skew_groups"]["-of_objects"] = ""
   let details["get_clock_tree_pins"]={}
        let details["get_clock_tree_pins"]["-clocks"] = "(List of clocks)"
        let details["get_clock_tree_pins"]["-scenario"] = ""
        let details["get_clock_tree_pins"]["-mode"] = "(do not consider any scenario unless it incorporates one of the specified modes )"
        let details["get_clock_tree_pins"]["-corner"] = ""
        let details["get_clock_tree_pins"]["-from"] = "(include pins on paths starting from these pins)"
        let details["get_clock_tree_pins"]["-through"] = ""
        let details["get_clock_tree_pins"]["-to"] = "(include pins on paths ending at these pins)"
        let details["get_clock_tree_pins"]["-groups_from"] = ""
        let details["get_clock_tree_pins"]["-of_objects"] = ""
        let details["get_clock_tree_pins"]["-filter"] = ""
        let details["get_clock_tree_pins"]["-sort_by"] = ""
        let details["get_clock_tree_pins"]["-index_range"] = ""
        let details["get_clock_tree_pins"]["-value_for_undefined_attributes"] = ""
        let details["get_clock_tree_pins"]["-metrics"] = ""
        let details["get_clock_tree_pins"]["-assign_to_variable"] = ""
        let details["get_clock_tree_pins"]["-total"] = "(add up the known results and assign the result to this variable)"
        let details["get_clock_tree_pins"]["-unique_cells"] = "(if two or more pins are on the same cell, return only one of the pins)"
        let details["get_clock_tree_pins"]["-unique_nets"] = "(if two or more pins are on the same net, return only one of the pins)"
        let details["get_clock_tree_pins"]["-scan_all_hierarchical_pins"] = ""
        let details["get_clock_tree_pins"]["-expect"] = "(Expect exactly this many matching objects: Value >= 0)"
        let details["get_clock_tree_pins"]["-expect_at_least"] = ""
        let details["get_clock_tree_pins"]["-quiet"] = "(quiet mode)"
        let details["get_clock_tree_pins"]["-verbose"] = "(verbose mode. Report information about the pins returned.)"
   let details["get_clocks"]={}
        let details["get_clocks"]["-design"] = "(Top design for finding objects)"
        let details["get_clocks"]["-mode"] = "(Mode for finding objects)"
        let details["get_clocks"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_clocks"]["-quiet"] = "(Suppress all messages)"
        let details["get_clocks"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_clocks"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_clocks"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_clocks"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_clocks"]["-expect_at_least"] = ""
        let details["get_clocks"]["-expect_each_pattern_matches"] = ""
   let details["get_command_option_values"]={}
        let details["get_command_option_values"]["-default"] = "(get default option values if available)"
        let details["get_command_option_values"]["-current"] = "(get current option values if available)"
        let details["get_command_option_values"]["-command"] = "(get option values for this command)"
   let details["get_constraint_groups"]={}
        let details["get_constraint_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_constraint_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_constraint_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_constraint_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_constraint_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_constraint_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_constraint_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_constraint_groups"]["-expect_at_least"] = ""
        let details["get_constraint_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_constraint_groups"]["-of_objects"] = ""
        let details["get_constraint_groups"]["-hierarchical"] = "(Get constraint groups in full hierarchy below)"
        let details["get_constraint_groups"]["-type"] = "(Constraint group type: "
   let details["get_core_area"]={}
        let details["get_core_area"]["-design"] = "(Top design for finding objects)"
   let details["get_corners"]={}
        let details["get_corners"]["-design"] = "(Top design for finding objects)"
        let details["get_corners"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_corners"]["-quiet"] = "(Suppress all messages)"
        let details["get_corners"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_corners"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_corners"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_corners"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_corners"]["-expect_at_least"] = ""
        let details["get_corners"]["-expect_each_pattern_matches"] = ""
   let details["get_cputime"]={}
        let details["get_cputime"]["-all"] = "(Get cpu time for this process and children)"
        let details["get_cputime"]["-verbose"] = "(Report cpu and elapsed time)"
        let details["get_cputime"]["-format"] = "(Format for returned value)"
   let details["get_current_ems_database"]={}
   let details["get_current_mismatch_config"]={}
   let details["get_date"]={}
   let details["get_defined_attributes"]={}
        let details["get_defined_attributes"]["-class"] = "(Get attributes for this class: "
        let details["get_defined_attributes"]["-return_classes"] = "(Return valid class names)"
        let details["get_defined_attributes"]["-details"] = "(Get detailed information on a specific attribute)"
        let details["get_defined_attributes"]["-user"] = "(Only display user defined attributes)"
        let details["get_defined_attributes"]["-application"] = "(Only display application defined attributes)"
   let details["get_defined_commands"]={}
        let details["get_defined_commands"]["-details"] = "(Get detailed information on specific command or group)"
        let details["get_defined_commands"]["-groups"] = "(Search groups rather than commands)"
   let details["get_density_rules"]={}
        let details["get_density_rules"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["get_density_rules"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["get_density_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_density_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_density_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_density_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_density_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_density_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_density_rules"]["-expect_at_least"] = ""
        let details["get_density_rules"]["-expect_each_pattern_matches"] = ""
        let details["get_density_rules"]["-of_objects"] = ""
   let details["get_design_checks"]={}
        let details["get_design_checks"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_design_checks"]["-quiet"] = "(Suppress all messages)"
        let details["get_design_checks"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_design_checks"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_design_checks"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_design_checks"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_design_checks"]["-expect_at_least"] = ""
        let details["get_design_checks"]["-expect_each_pattern_matches"] = ""
        let details["get_design_checks"]["-of_objects"] = ""
   let details["get_design_rules"]={}
        let details["get_design_rules"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["get_design_rules"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["get_design_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_design_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_design_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_design_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_design_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_design_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_design_rules"]["-expect_at_least"] = ""
        let details["get_design_rules"]["-expect_each_pattern_matches"] = ""
        let details["get_design_rules"]["-of_objects"] = ""
   let details["get_designs"]={}
        let details["get_designs"]["-hierarchical"] = "(Search level-by-level in current design)"
        let details["get_designs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_designs"]["-quiet"] = "(Suppress all messages)"
        let details["get_designs"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_designs"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_designs"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_designs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_designs"]["-expect_at_least"] = ""
        let details["get_designs"]["-expect_each_pattern_matches"] = ""
   let details["get_domain_elements"]={}
   let details["get_drc_error_data"]={}
        let details["get_drc_error_data"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_drc_error_data"]["-quiet"] = "(Suppress all messages)"
        let details["get_drc_error_data"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_drc_error_data"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_drc_error_data"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_drc_error_data"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_drc_error_data"]["-expect_at_least"] = ""
        let details["get_drc_error_data"]["-expect_each_pattern_matches"] = ""
        let details["get_drc_error_data"]["-of_objects"] = ""
        let details["get_drc_error_data"]["-all"] = "(Match open and closed error data)"
   let details["get_drc_error_types"]={}
        let details["get_drc_error_types"]["-error_data"] = ""
        let details["get_drc_error_types"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_drc_error_types"]["-quiet"] = "(Suppress all messages)"
        let details["get_drc_error_types"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_drc_error_types"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_drc_error_types"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_drc_error_types"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_drc_error_types"]["-expect_at_least"] = ""
        let details["get_drc_error_types"]["-expect_each_pattern_matches"] = ""
        let details["get_drc_error_types"]["-of_objects"] = ""
   let details["get_drc_errors"]={}
        let details["get_drc_errors"]["-error_data"] = ""
        let details["get_drc_errors"]["-boundary"] = "(Region boundary from which to get errors)"
        let details["get_drc_errors"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_drc_errors"]["-quiet"] = "(Suppress all messages)"
        let details["get_drc_errors"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_drc_errors"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_drc_errors"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_drc_errors"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_drc_errors"]["-expect_at_least"] = ""
        let details["get_drc_errors"]["-expect_each_pattern_matches"] = ""
        let details["get_drc_errors"]["-of_objects"] = ""
   let details["get_eco_bus_buffer_patterns"]={}
   let details["get_edit_groups"]={}
        let details["get_edit_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_edit_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_edit_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_edit_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_edit_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_edit_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_edit_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_edit_groups"]["-expect_at_least"] = ""
        let details["get_edit_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_edit_groups"]["-of_objects"] = ""
        let details["get_edit_groups"]["-hierarchical"] = "(Get edit groups in the full 	                   hierarchy below)"
        let details["get_edit_groups"]["-at"] = "(Search point)"
        let details["get_edit_groups"]["-within"] = "(Search within Rect or polygon)"
        let details["get_edit_groups"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_edit_groups"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_edit_setting"]={}
        let details["get_edit_setting"]["-ignore_locked"] = "(ignore the locked flag and modify locked objects)"
        let details["get_edit_setting"]["-keep_pin_on_edge"] = "(keep pin on parent edge)"
        let details["get_edit_setting"]["-self_intersection"] = "(allow shape self intersection)"
        let details["get_edit_setting"]["-update_floorplan"] = "(update floorplan when cell boundary is changed)"
        let details["get_edit_setting"]["-update_color_mask"] = "(update wires color mask to match associated tracks)"
        let details["get_edit_setting"]["-auto_display_hidden"] = "(automatically display hidden objects)"
        let details["get_edit_setting"]["-select_partial_object"] = ""
        let details["get_edit_setting"]["-select_edge"] = "(allow object edge selection)"
        let details["get_edit_setting"]["-select_vertex"] = "(allow object vertex selection)"
        let details["get_edit_setting"]["-select_center_line"] = "(allow wire center line selection)"
        let details["get_edit_setting"]["-select_center_vertex"] = ""
        let details["get_edit_setting"]["-expand_hit_macro_cell"] = ""
        let details["get_edit_setting"]["-expand_hit_blockage"] = "(expand hit type blockage)"
        let details["get_edit_setting"]["-expand_hit_constraint"] = ""
        let details["get_edit_setting"]["-honor_ndr"] = "(honor non-default routing rules)"
        let details["get_edit_setting"]["-hierarchical_routing"] = ""
        let details["get_edit_setting"]["-pin_layer_policy"] = "(layer policy while moving pins on the edge)"
        let details["get_edit_setting"]["-specified_pin_layer"] = "(pin layer when layer policy is set to 'specified')"
   let details["get_edrc_setting"]={}
        let details["get_edrc_setting"]["-check_drc"] = "(check drc for editing)"
        let details["get_edrc_setting"]["-honor_ndr"] = "(honor non-default routing rules)"
        let details["get_edrc_setting"]["-via_density_rule"] = "(check via density design rule)"
        let details["get_edrc_setting"]["-minimum_edge_rule"] = "(check minumum edge design rule)"
        let details["get_edrc_setting"]["-minimum_length_and_area_rule"] = ""
        let details["get_edrc_setting"]["-enclosed_via_spacing_rule"] = ""
        let details["get_edrc_setting"]["-general_via_spacing_rule"] = ""
        let details["get_edrc_setting"]["-rdl_acute_angle_rule"] = ""
        let details["get_edrc_setting"]["-rdl_right_angle_rule"] = ""
        let details["get_edrc_setting"]["-dpt_odd_cycle"] = "(check dpt odd cycle)"
        let details["get_edrc_setting"]["-dpt_precolor"] = "(check dpt color violation)"
        let details["get_edrc_setting"]["-end_of_line_spacing_rule"] = ""
        let details["get_edrc_setting"]["-via_enclosure_rule"] = "(check via enclosure rules)"
        let details["get_edrc_setting"]["-metal_width_rule"] = "(check metal width rules)"
        let details["get_edrc_setting"]["-metal_span_spacing_rule"] = ""
        let details["get_edrc_setting"]["-filter_same_net_spacing"] = ""
        let details["get_edrc_setting"]["-show_error_browser"] = "(show error browser when detecting errors)"
        let details["get_edrc_setting"]["-max_error_limit"] = "(maximum numbers of error to report)"
        let details["get_edrc_setting"]["-max_shape_limit"] = "(maximum number of shapes to check)"
        let details["get_edrc_setting"]["-max_processing_time"] = "(maximum time for drc checking (in sec))"
   let details["get_ems_databases"]={}
        let details["get_ems_databases"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_ems_databases"]["-quiet"] = "(Suppress all messages)"
        let details["get_ems_databases"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_ems_databases"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_ems_databases"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_ems_databases"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_ems_databases"]["-expect_at_least"] = ""
        let details["get_ems_databases"]["-expect_each_pattern_matches"] = ""
        let details["get_ems_databases"]["-of_objects"] = ""
   let details["get_ems_rules"]={}
        let details["get_ems_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_ems_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_ems_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_ems_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_ems_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_ems_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_ems_rules"]["-expect_at_least"] = ""
        let details["get_ems_rules"]["-expect_each_pattern_matches"] = ""
        let details["get_ems_rules"]["-of_objects"] = ""
   let details["get_estimated_wirelength"]={}
        let details["get_estimated_wirelength"]["-nets"] = "(Specifies the collection of nets for wire length estimation.)"
   let details["get_exception_groups"]={}
        let details["get_exception_groups"]["-filter"] = "(Filter collection with 'expression')"
   let details["get_exceptions"]={}
        let details["get_exceptions"]["-design"] = "(Top design for finding objects)"
        let details["get_exceptions"]["-from"] = "(List of path startpoints or clocks)"
        let details["get_exceptions"]["-rise_from"] = ""
        let details["get_exceptions"]["-fall_from"] = ""
        let details["get_exceptions"]["-through"] = ""
        let details["get_exceptions"]["-rise_through"] = ""
        let details["get_exceptions"]["-fall_through"] = ""
        let details["get_exceptions"]["-to"] = "(List of path endpoints or clocks)"
        let details["get_exceptions"]["-rise_to"] = ""
        let details["get_exceptions"]["-fall_to"] = ""
        let details["get_exceptions"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_exceptions"]["-quiet"] = "(Suppress all messages)"
        let details["get_exceptions"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_exceptions"]["-expect_at_least"] = ""
   let details["get_fill_cells"]={}
        let details["get_fill_cells"]["-design"] = "(Top design for finding objects)"
        let details["get_fill_cells"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_fill_cells"]["-quiet"] = "(Suppress all messages)"
        let details["get_fill_cells"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_fill_cells"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_fill_cells"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_fill_cells"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_fill_cells"]["-expect_at_least"] = ""
        let details["get_fill_cells"]["-expect_each_pattern_matches"] = ""
        let details["get_fill_cells"]["-hierarchical"] = "(Get fillCells in the full hierarchy below)"
   let details["get_flat_cells"]={}
        let details["get_flat_cells"]["-design"] = "(Top design for finding objects)"
        let details["get_flat_cells"]["-all"] = "(Include physical only cells)"
        let details["get_flat_cells"]["-hierarchical"] = "( Search in multiple levels of physical hierarchy)"
        let details["get_flat_cells"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_flat_cells"]["-quiet"] = "(Suppress all messages)"
        let details["get_flat_cells"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_flat_cells"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_flat_cells"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_flat_cells"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_flat_cells"]["-expect_at_least"] = ""
        let details["get_flat_cells"]["-expect_each_pattern_matches"] = ""
        let details["get_flat_cells"]["-of_objects"] = ""
        let details["get_flat_cells"]["-hsc"] = "(Separator character (default is /): "
   let details["get_flat_nets"]={}
        let details["get_flat_nets"]["-design"] = "(Top design for finding objects)"
        let details["get_flat_nets"]["-all"] = "(Include power and ground Nets)"
        let details["get_flat_nets"]["-hierarchical"] = "( Search in multiple levels of physical hierarchy)"
        let details["get_flat_nets"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_flat_nets"]["-quiet"] = "(Suppress all messages)"
        let details["get_flat_nets"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_flat_nets"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_flat_nets"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_flat_nets"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_flat_nets"]["-expect_at_least"] = ""
        let details["get_flat_nets"]["-expect_each_pattern_matches"] = ""
        let details["get_flat_nets"]["-of_objects"] = ""
        let details["get_flat_nets"]["-hsc"] = "(Separator character (default is /): "
   let details["get_flat_pins"]={}
        let details["get_flat_pins"]["-design"] = "(Top design for finding objects)"
        let details["get_flat_pins"]["-all"] = "(Include power and ground pins)"
        let details["get_flat_pins"]["-hierarchical"] = "( Search in multiple levels of physical hierarchy)"
        let details["get_flat_pins"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_flat_pins"]["-quiet"] = "(Suppress all messages)"
        let details["get_flat_pins"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_flat_pins"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_flat_pins"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_flat_pins"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_flat_pins"]["-expect_at_least"] = ""
        let details["get_flat_pins"]["-expect_each_pattern_matches"] = ""
        let details["get_flat_pins"]["-of_objects"] = ""
        let details["get_flat_pins"]["-hsc"] = "(Separator character (default is /): "
   let details["get_generated_clock"]={}
        let details["get_generated_clock"]["-design"] = "(Top design for finding objects)"
        let details["get_generated_clock"]["-mode"] = "(Mode for finding objects)"
        let details["get_generated_clock"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_generated_clock"]["-quiet"] = "(Suppress all messages)"
        let details["get_generated_clock"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_generated_clock"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_generated_clock"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_generated_clock"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_generated_clock"]["-expect_at_least"] = ""
        let details["get_generated_clock"]["-expect_each_pattern_matches"] = ""
   let details["get_generated_clocks"]={}
        let details["get_generated_clocks"]["-design"] = "(Top design for finding objects)"
        let details["get_generated_clocks"]["-mode"] = "(Mode for finding objects)"
        let details["get_generated_clocks"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_generated_clocks"]["-quiet"] = "(Suppress all messages)"
        let details["get_generated_clocks"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_generated_clocks"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_generated_clocks"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_generated_clocks"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_generated_clocks"]["-expect_at_least"] = ""
        let details["get_generated_clocks"]["-expect_each_pattern_matches"] = ""
   let details["get_grids"]={}
        let details["get_grids"]["-design"] = "(Top design for finding objects)"
        let details["get_grids"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_grids"]["-quiet"] = "(Suppress all messages)"
        let details["get_grids"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_grids"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_grids"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_grids"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_grids"]["-expect_at_least"] = ""
        let details["get_grids"]["-expect_each_pattern_matches"] = ""
        let details["get_grids"]["-type"] = "(Type of grid to return: "
   let details["get_groups"]={}
        let details["get_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_groups"]["-expect_at_least"] = ""
        let details["get_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_groups"]["-of_objects"] = ""
   let details["get_input_delays"]={}
        let details["get_input_delays"]["-modes"] = "(get input delays for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["get_input_delays"]["-corners"] = "(get input delays for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["get_input_delays"]["-scenarios"] = ""
        let details["get_input_delays"]["-of_objects"] = "(Get input delays of these ports or pins)"
        let details["get_input_delays"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_input_delays"]["-quiet"] = "(Suppress all messages)"
        let details["get_input_delays"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_input_delays"]["-expect_at_least"] = ""
   let details["get_io_guides"]={}
        let details["get_io_guides"]["-design"] = "(Top design for finding objects)"
        let details["get_io_guides"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_io_guides"]["-quiet"] = "(Suppress all messages)"
        let details["get_io_guides"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_io_guides"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_io_guides"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_io_guides"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_io_guides"]["-expect_at_least"] = ""
        let details["get_io_guides"]["-expect_each_pattern_matches"] = ""
        let details["get_io_guides"]["-of_objects"] = ""
        let details["get_io_guides"]["-hierarchical"] = "(Get io guides in the full hierarchy 	                     below)"
        let details["get_io_guides"]["-at"] = "(Search point)"
        let details["get_io_guides"]["-within"] = "(Search within Rect or polygon)"
        let details["get_io_guides"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_io_guides"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_io_rings"]={}
        let details["get_io_rings"]["-design"] = "(Top design for finding objects)"
        let details["get_io_rings"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_io_rings"]["-quiet"] = "(Suppress all messages)"
        let details["get_io_rings"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_io_rings"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_io_rings"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_io_rings"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_io_rings"]["-expect_at_least"] = ""
        let details["get_io_rings"]["-expect_each_pattern_matches"] = ""
        let details["get_io_rings"]["-of_objects"] = ""
        let details["get_io_rings"]["-hierarchical"] = "(Get io rings in the full hierarchy 	                     below)"
        let details["get_io_rings"]["-at"] = "(Search point)"
        let details["get_io_rings"]["-within"] = "(Search within Rect or polygon)"
        let details["get_io_rings"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_io_rings"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_keepout_margins"]={}
        let details["get_keepout_margins"]["-design"] = "(Top design for finding objects)"
        let details["get_keepout_margins"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_keepout_margins"]["-quiet"] = "(Suppress all messages)"
        let details["get_keepout_margins"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_keepout_margins"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_keepout_margins"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_keepout_margins"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_keepout_margins"]["-expect_at_least"] = ""
        let details["get_keepout_margins"]["-expect_each_pattern_matches"] = ""
        let details["get_keepout_margins"]["-of_objects"] = ""
        let details["get_keepout_margins"]["-hierarchical"] = "(Get keepout margins in the full hierarchy below)"
        let details["get_keepout_margins"]["-type"] = "(Get keepout margins of type: "
   let details["get_latch_loop_groups"]={}
        let details["get_latch_loop_groups"]["-of_objects"] = ""
        let details["get_latch_loop_groups"]["-loop_breakers_only"] = "(only loop breakers will be reported)"
   let details["get_layers"]={}
        let details["get_layers"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_layers"]["-quiet"] = "(Suppress all messages)"
        let details["get_layers"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_layers"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_layers"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_layers"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_layers"]["-expect_at_least"] = ""
        let details["get_layers"]["-expect_each_pattern_matches"] = ""
        let details["get_layers"]["-of_objects"] = ""
        let details["get_layers"]["-all_purposes"] = "(all purposes)"
   let details["get_lib"]={}
        let details["get_lib"]["-implicit"] = "(Get implicitly opened libraries)"
        let details["get_lib"]["-explicit"] = "(Get explicitly opened libraries)"
        let details["get_lib"]["-all"] = "(Get both implicitly and expliclty opened libraries)"
        let details["get_lib"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_lib"]["-quiet"] = "(Suppress all messages)"
        let details["get_lib"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_lib"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_lib"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_lib"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_lib"]["-expect_at_least"] = ""
        let details["get_lib"]["-expect_each_pattern_matches"] = ""
        let details["get_lib"]["-of_objects"] = ""
   let details["get_lib_cell"]={}
        let details["get_lib_cell"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_lib_cell"]["-quiet"] = "(Suppress all messages)"
        let details["get_lib_cell"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_lib_cell"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_lib_cell"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_lib_cell"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_lib_cell"]["-expect_at_least"] = ""
        let details["get_lib_cell"]["-expect_each_pattern_matches"] = ""
        let details["get_lib_cell"]["-of_objects"] = ""
        let details["get_lib_cell"]["-hsc"] = "(Separator character (default is /): "
        let details["get_lib_cell"]["-include_subcells"] = "(Include lib_cells from sub-level hierarchy)"
   let details["get_lib_cells"]={}
        let details["get_lib_cells"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_lib_cells"]["-quiet"] = "(Suppress all messages)"
        let details["get_lib_cells"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_lib_cells"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_lib_cells"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_lib_cells"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_lib_cells"]["-expect_at_least"] = ""
        let details["get_lib_cells"]["-expect_each_pattern_matches"] = ""
        let details["get_lib_cells"]["-of_objects"] = ""
        let details["get_lib_cells"]["-hsc"] = "(Separator character (default is /): "
        let details["get_lib_cells"]["-include_subcells"] = "(Include lib_cells from sub-level hierarchy)"
   let details["get_lib_pin"]={}
        let details["get_lib_pin"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_lib_pin"]["-quiet"] = "(Suppress all messages)"
        let details["get_lib_pin"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_lib_pin"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_lib_pin"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_lib_pin"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_lib_pin"]["-expect_at_least"] = ""
        let details["get_lib_pin"]["-expect_each_pattern_matches"] = ""
        let details["get_lib_pin"]["-of_objects"] = ""
        let details["get_lib_pin"]["-all"] = "(Include all lib pins, such as power/ground)"
        let details["get_lib_pin"]["-at"] = "(Search point)"
        let details["get_lib_pin"]["-within"] = "(Search within Rect or polygon)"
        let details["get_lib_pin"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_lib_pin"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
        let details["get_lib_pin"]["-hsc"] = "(Separator character (default is /): "
   let details["get_lib_pins"]={}
        let details["get_lib_pins"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_lib_pins"]["-quiet"] = "(Suppress all messages)"
        let details["get_lib_pins"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_lib_pins"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_lib_pins"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_lib_pins"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_lib_pins"]["-expect_at_least"] = ""
        let details["get_lib_pins"]["-expect_each_pattern_matches"] = ""
        let details["get_lib_pins"]["-of_objects"] = ""
        let details["get_lib_pins"]["-all"] = "(Include all lib pins, such as power/ground)"
        let details["get_lib_pins"]["-at"] = "(Search point)"
        let details["get_lib_pins"]["-within"] = "(Search within Rect or polygon)"
        let details["get_lib_pins"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_lib_pins"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
        let details["get_lib_pins"]["-hsc"] = "(Separator character (default is /): "
   let details["get_lib_timing_arcs"]={}
        let details["get_lib_timing_arcs"]["-from"] = "(From lib pins)"
        let details["get_lib_timing_arcs"]["-to"] = "(To lib pins)"
        let details["get_lib_timing_arcs"]["-of_objects"] = ""
        let details["get_lib_timing_arcs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_lib_timing_arcs"]["-quiet"] = "(Suppress all messages)"
        let details["get_lib_timing_arcs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_lib_timing_arcs"]["-expect_at_least"] = ""
   let details["get_libs"]={}
        let details["get_libs"]["-implicit"] = "(Get implicitly opened libraries)"
        let details["get_libs"]["-explicit"] = "(Get explicitly opened libraries)"
        let details["get_libs"]["-all"] = "(Get both implicitly and expliclty opened libraries)"
        let details["get_libs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_libs"]["-quiet"] = "(Suppress all messages)"
        let details["get_libs"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_libs"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_libs"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_libs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_libs"]["-expect_at_least"] = ""
        let details["get_libs"]["-expect_each_pattern_matches"] = ""
        let details["get_libs"]["-of_objects"] = ""
   let details["get_license"]={}
        let details["get_license"]["-quantity"] = "(Quantity)"
   let details["get_licenses"]={}
        let details["get_licenses"]["-quantity"] = "(Quantity)"
   let details["get_matching_types"]={}
        let details["get_matching_types"]["-design"] = "(Top design for finding objects)"
        let details["get_matching_types"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_matching_types"]["-quiet"] = "(Suppress all messages)"
        let details["get_matching_types"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_matching_types"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_matching_types"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_matching_types"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_matching_types"]["-expect_at_least"] = ""
        let details["get_matching_types"]["-expect_each_pattern_matches"] = ""
        let details["get_matching_types"]["-of_objects"] = ""
   let details["get_mem"]={}
   let details["get_message_ids"]={}
        let details["get_message_ids"]["-type"] = "(Filter ids based on type: "
   let details["get_message_info"]={}
        let details["get_message_info"]["-error_count"] = "(Return error count)"
        let details["get_message_info"]["-warning_count"] = "(Return warning count)"
        let details["get_message_info"]["-info_count"] = "(Return info count)"
        let details["get_message_info"]["-limit"] = "(Get limit for a message)"
        let details["get_message_info"]["-occurrences"] = "(Get occurrences of a message)"
        let details["get_message_info"]["-suppressed"] = "(Get count of suppressions for a message)"
        let details["get_message_info"]["-id"] = "(Get information about a message in list format)"
   let details["get_mib_objects"]={}
        let details["get_mib_objects"]["-quiet"] = "(suppress all messages)"
        let details["get_mib_objects"]["-add"] = "(include original selected pins and/or cells in returned mib objects)"
   let details["get_mismatch_objects"]={}
        let details["get_mismatch_objects"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_mismatch_objects"]["-quiet"] = "(Suppress all messages)"
        let details["get_mismatch_objects"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_mismatch_objects"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_mismatch_objects"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_mismatch_objects"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_mismatch_objects"]["-expect_at_least"] = ""
        let details["get_mismatch_objects"]["-expect_each_pattern_matches"] = ""
        let details["get_mismatch_objects"]["-of_objects"] = ""
        let details["get_mismatch_objects"]["-mismatch_type"] = ""
        let details["get_mismatch_objects"]["-repair_status"] = "(Shows mismatches with specified repaired state: "
   let details["get_mismatch_types"]={}
        let details["get_mismatch_types"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_mismatch_types"]["-quiet"] = "(Suppress all messages)"
        let details["get_mismatch_types"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_mismatch_types"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_mismatch_types"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_mismatch_types"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_mismatch_types"]["-expect_at_least"] = ""
        let details["get_mismatch_types"]["-expect_each_pattern_matches"] = ""
   let details["get_modes"]={}
        let details["get_modes"]["-design"] = "(Top design for finding objects)"
        let details["get_modes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_modes"]["-quiet"] = "(Suppress all messages)"
        let details["get_modes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_modes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_modes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_modes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_modes"]["-expect_at_least"] = ""
        let details["get_modes"]["-expect_each_pattern_matches"] = ""
   let details["get_modules"]={}
        let details["get_modules"]["-design"] = "(Design object or name)"
        let details["get_modules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_modules"]["-quiet"] = "(Suppress all messages)"
        let details["get_modules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_modules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_modules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_modules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_modules"]["-expect_at_least"] = ""
        let details["get_modules"]["-expect_each_pattern_matches"] = ""
   let details["get_multisource_clock_sink_groups"]={}
        let details["get_multisource_clock_sink_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_multisource_clock_sink_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_multisource_clock_sink_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_multisource_clock_sink_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_multisource_clock_sink_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_multisource_clock_sink_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_multisource_clock_sink_groups"]["-expect_at_least"] = ""
        let details["get_multisource_clock_sink_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_multisource_clock_sink_groups"]["-of_objects"] = ""
   let details["get_net"]={}
        let details["get_net"]["-design"] = "(Top design for finding objects)"
        let details["get_net"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_net"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_net"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_net"]["-quiet"] = "(Suppress all messages)"
        let details["get_net"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_net"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_net"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_net"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_net"]["-expect_at_least"] = ""
        let details["get_net"]["-expect_each_pattern_matches"] = ""
        let details["get_net"]["-of_objects"] = ""
        let details["get_net"]["-top_net_of_hierarchical_group"] = ""
        let details["get_net"]["-boundary_type"] = "(Which nets of hierarchical pins: "
        let details["get_net"]["-segments"] = "(Return all global segments for given nets)"
        let details["get_net"]["-hsc"] = "(Separator character (default is /): "
        let details["get_net"]["-include_shielded"] = "(Include shielded nets in search with -of_object with shapes input)"
        let details["get_net"]["-shielded_only"] = "(Return shielded nets only in search with -of_object with shapes input)"
   let details["get_net_buses"]={}
        let details["get_net_buses"]["-design"] = "(Top design for finding objects)"
        let details["get_net_buses"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_net_buses"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_net_buses"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_net_buses"]["-quiet"] = "(Suppress all messages)"
        let details["get_net_buses"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_net_buses"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_net_buses"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_net_buses"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_net_buses"]["-expect_at_least"] = ""
        let details["get_net_buses"]["-expect_each_pattern_matches"] = ""
        let details["get_net_buses"]["-of_objects"] = ""
   let details["get_net_estimation_rules"]={}
        let details["get_net_estimation_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_net_estimation_rules"]["-quiet"] = "(Suppress all messages)"
   let details["get_nets"]={}
        let details["get_nets"]["-design"] = "(Top design for finding objects)"
        let details["get_nets"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_nets"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_nets"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_nets"]["-quiet"] = "(Suppress all messages)"
        let details["get_nets"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_nets"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_nets"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_nets"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_nets"]["-expect_at_least"] = ""
        let details["get_nets"]["-expect_each_pattern_matches"] = ""
        let details["get_nets"]["-of_objects"] = ""
        let details["get_nets"]["-top_net_of_hierarchical_group"] = ""
        let details["get_nets"]["-boundary_type"] = "(Which nets of hierarchical pins: "
        let details["get_nets"]["-segments"] = "(Return all global segments for given nets)"
        let details["get_nets"]["-hsc"] = "(Separator character (default is /): "
        let details["get_nets"]["-include_shielded"] = "(Include shielded nets in search with -of_object with shapes input)"
        let details["get_nets"]["-shielded_only"] = "(Return shielded nets only in search with -of_object with shapes input)"
   let details["get_object_occurrences"]={}
        let details["get_object_occurrences"]["-quiet"] = "(Suppress all messages)"
   let details["get_objects_by_location"]={}
        let details["get_objects_by_location"]["-design"] = "(Top design for finding objects)"
        let details["get_objects_by_location"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_objects_by_location"]["-quiet"] = "(Suppress all messages)"
        let details["get_objects_by_location"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_objects_by_location"]["-expect_at_least"] = ""
        let details["get_objects_by_location"]["-classes"] = ""
        let details["get_objects_by_location"]["-hierarchical"] = "(Search physical objects in the 	                             full hierarchy below)"
        let details["get_objects_by_location"]["-include_fill_shapes"] = "(Include fill shapes in search)"
        let details["get_objects_by_location"]["-at"] = "(Search point)"
        let details["get_objects_by_location"]["-within"] = "(Search within Rect or polygon)"
        let details["get_objects_by_location"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_objects_by_location"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_output_delays"]={}
        let details["get_output_delays"]["-modes"] = "(get output delays for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["get_output_delays"]["-corners"] = "(get output delays for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["get_output_delays"]["-scenarios"] = ""
        let details["get_output_delays"]["-of_objects"] = "(Get output delays of these ports or pins)"
        let details["get_output_delays"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_output_delays"]["-quiet"] = "(Suppress all messages)"
        let details["get_output_delays"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_output_delays"]["-expect_at_least"] = ""
   let details["get_overlap_blockages"]={}
        let details["get_overlap_blockages"]["-design"] = "(Top design for finding objects)"
        let details["get_overlap_blockages"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_overlap_blockages"]["-quiet"] = "(Suppress all messages)"
        let details["get_overlap_blockages"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_overlap_blockages"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_overlap_blockages"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_overlap_blockages"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_overlap_blockages"]["-expect_at_least"] = ""
        let details["get_overlap_blockages"]["-expect_each_pattern_matches"] = ""
        let details["get_overlap_blockages"]["-of_objects"] = ""
        let details["get_overlap_blockages"]["-hierarchical"] = "(Get overlap blockages in the full 	                     hierarchy below)"
   let details["get_parasitic_techs"]={}
        let details["get_parasitic_techs"]["-library"] = "(Library)"
        let details["get_parasitic_techs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_parasitic_techs"]["-quiet"] = "(Suppress all messages)"
        let details["get_parasitic_techs"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_parasitic_techs"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_parasitic_techs"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_parasitic_techs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_parasitic_techs"]["-expect_at_least"] = ""
        let details["get_parasitic_techs"]["-expect_each_pattern_matches"] = ""
        let details["get_parasitic_techs"]["-of_objects"] = ""
   let details["get_path_group"]={}
        let details["get_path_group"]["-design"] = "(Top design for finding objects)"
        let details["get_path_group"]["-mode"] = "(Mode for finding objects)"
        let details["get_path_group"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_path_group"]["-quiet"] = "(Suppress all messages)"
        let details["get_path_group"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_path_group"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_path_group"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_path_group"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_path_group"]["-expect_at_least"] = ""
        let details["get_path_group"]["-expect_each_pattern_matches"] = ""
   let details["get_path_groups"]={}
        let details["get_path_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_path_groups"]["-mode"] = "(Mode for finding objects)"
        let details["get_path_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_path_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_path_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_path_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_path_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_path_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_path_groups"]["-expect_at_least"] = ""
        let details["get_path_groups"]["-expect_each_pattern_matches"] = ""
   let details["get_pg_regions"]={}
        let details["get_pg_regions"]["-design"] = "(Top design for finding objects)"
        let details["get_pg_regions"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_pg_regions"]["-quiet"] = "(Suppress all messages)"
        let details["get_pg_regions"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_pg_regions"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_pg_regions"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_pg_regions"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_pg_regions"]["-expect_at_least"] = ""
        let details["get_pg_regions"]["-expect_each_pattern_matches"] = ""
        let details["get_pg_regions"]["-of_objects"] = ""
        let details["get_pg_regions"]["-at"] = "(Search point)"
        let details["get_pg_regions"]["-within"] = "(Search within Rect or polygon)"
        let details["get_pg_regions"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_pg_regions"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_pin"]={}
        let details["get_pin"]["-design"] = "(Top design for finding objects)"
        let details["get_pin"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_pin"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_pin"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_pin"]["-quiet"] = "(Suppress all messages)"
        let details["get_pin"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_pin"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_pin"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_pin"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_pin"]["-expect_at_least"] = ""
        let details["get_pin"]["-expect_each_pattern_matches"] = ""
        let details["get_pin"]["-of_objects"] = ""
        let details["get_pin"]["-leaf"] = "(Get leaf/global pins of nets with -of_objects)"
        let details["get_pin"]["-at"] = "(Search point)"
        let details["get_pin"]["-within"] = "(Search within Rect or polygon)"
        let details["get_pin"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_pin"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
        let details["get_pin"]["-hsc"] = "(Separator character (default is /): "
   let details["get_pin_blockages"]={}
        let details["get_pin_blockages"]["-design"] = "(Top design for finding objects)"
        let details["get_pin_blockages"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_pin_blockages"]["-quiet"] = "(Suppress all messages)"
        let details["get_pin_blockages"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_pin_blockages"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_pin_blockages"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_pin_blockages"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_pin_blockages"]["-expect_at_least"] = ""
        let details["get_pin_blockages"]["-expect_each_pattern_matches"] = ""
        let details["get_pin_blockages"]["-of_objects"] = ""
        let details["get_pin_blockages"]["-hierarchical"] = "(Get pin blockages in the full 	                   hierarchy below)"
        let details["get_pin_blockages"]["-at"] = "(Search point)"
        let details["get_pin_blockages"]["-within"] = "(Search within Rect or polygon)"
        let details["get_pin_blockages"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_pin_blockages"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_pin_guides"]={}
        let details["get_pin_guides"]["-design"] = "(Top design for finding objects)"
        let details["get_pin_guides"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_pin_guides"]["-quiet"] = "(Suppress all messages)"
        let details["get_pin_guides"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_pin_guides"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_pin_guides"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_pin_guides"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_pin_guides"]["-expect_at_least"] = ""
        let details["get_pin_guides"]["-expect_each_pattern_matches"] = ""
        let details["get_pin_guides"]["-of_objects"] = ""
        let details["get_pin_guides"]["-hierarchical"] = "(Get pin guides in the full hierarchy 	                     below)"
        let details["get_pin_guides"]["-at"] = "(Search point)"
        let details["get_pin_guides"]["-within"] = "(Search within Rect or polygon)"
        let details["get_pin_guides"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_pin_guides"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_pins"]={}
        let details["get_pins"]["-design"] = "(Top design for finding objects)"
        let details["get_pins"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_pins"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_pins"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_pins"]["-quiet"] = "(Suppress all messages)"
        let details["get_pins"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_pins"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_pins"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_pins"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_pins"]["-expect_at_least"] = ""
        let details["get_pins"]["-expect_each_pattern_matches"] = ""
        let details["get_pins"]["-of_objects"] = ""
        let details["get_pins"]["-leaf"] = "(Get leaf/global pins of nets with -of_objects)"
        let details["get_pins"]["-at"] = "(Search point)"
        let details["get_pins"]["-within"] = "(Search within Rect or polygon)"
        let details["get_pins"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_pins"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
        let details["get_pins"]["-hsc"] = "(Separator character (default is /): "
   let details["get_placement_blockages"]={}
        let details["get_placement_blockages"]["-design"] = "(Top design for finding objects)"
        let details["get_placement_blockages"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_placement_blockages"]["-quiet"] = "(Suppress all messages)"
        let details["get_placement_blockages"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_placement_blockages"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_placement_blockages"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_placement_blockages"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_placement_blockages"]["-expect_at_least"] = ""
        let details["get_placement_blockages"]["-expect_each_pattern_matches"] = ""
        let details["get_placement_blockages"]["-hierarchical"] = "(Get placement blockages in the 	                    full hierarchy below)"
        let details["get_placement_blockages"]["-at"] = "(Search point)"
        let details["get_placement_blockages"]["-within"] = "(Search within Rect or polygon)"
        let details["get_placement_blockages"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_placement_blockages"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_port"]={}
        let details["get_port"]["-design"] = "(Top design for finding objects)"
        let details["get_port"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_port"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_port"]["-quiet"] = "(Suppress all messages)"
        let details["get_port"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_port"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_port"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_port"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_port"]["-expect_at_least"] = ""
        let details["get_port"]["-expect_each_pattern_matches"] = ""
        let details["get_port"]["-of_objects"] = ""
        let details["get_port"]["-at"] = "(Search point)"
        let details["get_port"]["-within"] = "(Search within Rect or polygon)"
        let details["get_port"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_port"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_port_antenna_property"]={}
        let details["get_port_antenna_property"]["-port"] = "(Port name)"
        let details["get_port_antenna_property"]["-layer"] = "(Layer name)"
   let details["get_port_buses"]={}
        let details["get_port_buses"]["-design"] = "(Top design for finding objects)"
        let details["get_port_buses"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_port_buses"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_port_buses"]["-quiet"] = "(Suppress all messages)"
        let details["get_port_buses"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_port_buses"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_port_buses"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_port_buses"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_port_buses"]["-expect_at_least"] = ""
        let details["get_port_buses"]["-expect_each_pattern_matches"] = ""
        let details["get_port_buses"]["-of_objects"] = ""
   let details["get_ports"]={}
        let details["get_ports"]["-design"] = "(Top design for finding objects)"
        let details["get_ports"]["-physical_context"] = "(Search physically; default is logically)"
        let details["get_ports"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_ports"]["-quiet"] = "(Suppress all messages)"
        let details["get_ports"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_ports"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_ports"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_ports"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_ports"]["-expect_at_least"] = ""
        let details["get_ports"]["-expect_each_pattern_matches"] = ""
        let details["get_ports"]["-of_objects"] = ""
        let details["get_ports"]["-at"] = "(Search point)"
        let details["get_ports"]["-within"] = "(Search within Rect or polygon)"
        let details["get_ports"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_ports"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_power_clock_scaling"]={}
        let details["get_power_clock_scaling"]["-scenarios"] = "(Scenarios for which to get the clock scaling values)"
   let details["get_power_derate"]={}
        let details["get_power_derate"]["-scenarios"] = ""
        let details["get_power_derate"]["-leakage"] = "(Get derate for leakage power)"
        let details["get_power_derate"]["-switching"] = "(Get derate for switching power)"
        let details["get_power_derate"]["-internal"] = "(Get derate for internal power)"
        let details["get_power_derate"]["-user"] = "(Get explicitly set derates)"
   let details["get_power_domains"]={}
        let details["get_power_domains"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_power_domains"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_power_domains"]["-quiet"] = "(Suppress all messages)"
        let details["get_power_domains"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_power_domains"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_power_domains"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_power_domains"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_power_domains"]["-expect_at_least"] = ""
        let details["get_power_domains"]["-expect_each_pattern_matches"] = ""
        let details["get_power_domains"]["-of_objects"] = ""
   let details["get_power_group"]={}
        let details["get_power_group"]["-user"] = "(to query user-specified power group)"
        let details["get_power_group"]["-default"] = "(to query default power group)"
   let details["get_power_group_objects"]={}
   let details["get_power_strategies"]={}
        let details["get_power_strategies"]["-domain"] = "(Name of the power domain)"
        let details["get_power_strategies"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_power_strategies"]["-quiet"] = "(Suppress all messages)"
        let details["get_power_strategies"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_power_strategies"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_power_strategies"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_power_strategies"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_power_strategies"]["-expect_at_least"] = ""
        let details["get_power_strategies"]["-expect_each_pattern_matches"] = ""
   let details["get_power_switch_patterns"]={}
        let details["get_power_switch_patterns"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_power_switch_patterns"]["-quiet"] = "(Suppress all messages)"
        let details["get_power_switch_patterns"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_power_switch_patterns"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_power_switch_patterns"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_power_switch_patterns"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_power_switch_patterns"]["-expect_at_least"] = ""
        let details["get_power_switch_patterns"]["-expect_each_pattern_matches"] = ""
   let details["get_pr_rules"]={}
        let details["get_pr_rules"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["get_pr_rules"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["get_pr_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_pr_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_pr_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_pr_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_pr_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_pr_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_pr_rules"]["-expect_at_least"] = ""
        let details["get_pr_rules"]["-expect_each_pattern_matches"] = ""
        let details["get_pr_rules"]["-of_objects"] = ""
   let details["get_purposes"]={}
        let details["get_purposes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_purposes"]["-quiet"] = "(Suppress all messages)"
        let details["get_purposes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_purposes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_purposes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_purposes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_purposes"]["-expect_at_least"] = ""
        let details["get_purposes"]["-expect_each_pattern_matches"] = ""
        let details["get_purposes"]["-of_objects"] = ""
   let details["get_related_supply_nets"]={}
        let details["get_related_supply_nets"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_related_supply_nets"]["-quiet"] = "(Suppress all messages)"
        let details["get_related_supply_nets"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_related_supply_nets"]["-expect_at_least"] = ""
        let details["get_related_supply_nets"]["-expand"] = "(Do not merge and combine duplicated related supply nets)"
        let details["get_related_supply_nets"]["-ground"] = "(Query related ground supply net)"
        let details["get_related_supply_nets"]["-in_block_upf"] = "(Query related supply net defined in block UPF)"
   let details["get_routes_between_objects"]={}
        let details["get_routes_between_objects"]["-quiet"] = "(suppress all messages)"
   let details["get_routing_blockages"]={}
        let details["get_routing_blockages"]["-design"] = "(Top design for finding objects)"
        let details["get_routing_blockages"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_routing_blockages"]["-quiet"] = "(Suppress all messages)"
        let details["get_routing_blockages"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_routing_blockages"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_routing_blockages"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_routing_blockages"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_routing_blockages"]["-expect_at_least"] = ""
        let details["get_routing_blockages"]["-expect_each_pattern_matches"] = ""
        let details["get_routing_blockages"]["-of_objects"] = ""
        let details["get_routing_blockages"]["-hierarchical"] = "(Get routing blockages in the full 	                     hierarchy below)"
        let details["get_routing_blockages"]["-include_lib_cell"] = "(Include lib_cell shapes in search)"
        let details["get_routing_blockages"]["-at"] = "(Search point)"
        let details["get_routing_blockages"]["-within"] = "(Search within Rect or polygon)"
        let details["get_routing_blockages"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_routing_blockages"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_routing_corridor_shapes"]={}
        let details["get_routing_corridor_shapes"]["-design"] = "(Top design for finding objects)"
        let details["get_routing_corridor_shapes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_routing_corridor_shapes"]["-quiet"] = "(Suppress all messages)"
        let details["get_routing_corridor_shapes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_routing_corridor_shapes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_routing_corridor_shapes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_routing_corridor_shapes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_routing_corridor_shapes"]["-expect_at_least"] = ""
        let details["get_routing_corridor_shapes"]["-expect_each_pattern_matches"] = ""
        let details["get_routing_corridor_shapes"]["-of_objects"] = ""
        let details["get_routing_corridor_shapes"]["-hierarchical"] = "(Get routing corridor shapes in the 	                     full hierarchy below)"
        let details["get_routing_corridor_shapes"]["-at"] = "(Search point)"
        let details["get_routing_corridor_shapes"]["-within"] = "(Search within Rect or polygon)"
        let details["get_routing_corridor_shapes"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_routing_corridor_shapes"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_routing_corridors"]={}
        let details["get_routing_corridors"]["-design"] = "(Top design for finding objects)"
        let details["get_routing_corridors"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_routing_corridors"]["-quiet"] = "(Suppress all messages)"
        let details["get_routing_corridors"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_routing_corridors"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_routing_corridors"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_routing_corridors"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_routing_corridors"]["-expect_at_least"] = ""
        let details["get_routing_corridors"]["-expect_each_pattern_matches"] = ""
        let details["get_routing_corridors"]["-of_objects"] = ""
        let details["get_routing_corridors"]["-hierarchical"] = "(Get routing corridors in the full 	                    hierarchy below)"
        let details["get_routing_corridors"]["-at"] = "(Search point)"
        let details["get_routing_corridors"]["-within"] = "(Search within Rect or polygon)"
        let details["get_routing_corridors"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_routing_corridors"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_routing_guides"]={}
        let details["get_routing_guides"]["-design"] = "(Top design for finding objects)"
        let details["get_routing_guides"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_routing_guides"]["-quiet"] = "(Suppress all messages)"
        let details["get_routing_guides"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_routing_guides"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_routing_guides"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_routing_guides"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_routing_guides"]["-expect_at_least"] = ""
        let details["get_routing_guides"]["-expect_each_pattern_matches"] = ""
        let details["get_routing_guides"]["-hierarchical"] = "(Get routing guides in the full hierarchy below)"
        let details["get_routing_guides"]["-at"] = "(Search point)"
        let details["get_routing_guides"]["-within"] = "(Search within Rect or polygon)"
        let details["get_routing_guides"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_routing_guides"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_routing_rules"]={}
        let details["get_routing_rules"]["-design"] = "(Top design for finding objects)"
        let details["get_routing_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_routing_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_routing_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_routing_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_routing_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_routing_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_routing_rules"]["-expect_at_least"] = ""
        let details["get_routing_rules"]["-expect_each_pattern_matches"] = ""
        let details["get_routing_rules"]["-of_objects"] = ""
   let details["get_rp_blockages"]={}
        let details["get_rp_blockages"]["-design"] = "(Top design for finding objects)"
        let details["get_rp_blockages"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_rp_blockages"]["-quiet"] = "(Suppress all messages)"
        let details["get_rp_blockages"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_rp_blockages"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_rp_blockages"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_rp_blockages"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_rp_blockages"]["-expect_at_least"] = ""
        let details["get_rp_blockages"]["-expect_each_pattern_matches"] = ""
        let details["get_rp_blockages"]["-of_objects"] = ""
        let details["get_rp_blockages"]["-hierarchical"] = "(Get hierarchical relative placement groups's blockages)"
   let details["get_rp_group_objects"]={}
        let details["get_rp_group_objects"]["-cell"] = "(Get cells of given RP groups)"
        let details["get_rp_group_objects"]["-rp_group"] = "(Get rp_groups of given RP groups)"
        let details["get_rp_group_objects"]["-blockage"] = "(Get rp_blockages of given RP groups)"
        let details["get_rp_group_objects"]["-hierarchical"] = "(Get RP Objects(cells/rp_groups/rp_blockages recursively too.)"
        let details["get_rp_group_objects"]["-row"] = "(Get object of this RP row: "
        let details["get_rp_group_objects"]["-column"] = ""
   let details["get_rp_groups"]={}
        let details["get_rp_groups"]["-design"] = "(Top design for finding objects)"
        let details["get_rp_groups"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_rp_groups"]["-quiet"] = "(Suppress all messages)"
        let details["get_rp_groups"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_rp_groups"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_rp_groups"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_rp_groups"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_rp_groups"]["-expect_at_least"] = ""
        let details["get_rp_groups"]["-expect_each_pattern_matches"] = ""
        let details["get_rp_groups"]["-of_objects"] = ""
        let details["get_rp_groups"]["-top"] = "(Get top Level RP Group Only)"
        let details["get_rp_groups"]["-hierarchical"] = "(Get hierarchical relative placement groups)"
   let details["get_scan_chain_count"]={}
   let details["get_scenarios"]={}
        let details["get_scenarios"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_scenarios"]["-quiet"] = "(Suppress all messages)"
        let details["get_scenarios"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_scenarios"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_scenarios"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_scenarios"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_scenarios"]["-expect_at_least"] = ""
        let details["get_scenarios"]["-expect_each_pattern_matches"] = ""
        let details["get_scenarios"]["-of_objects"] = ""
        let details["get_scenarios"]["-modes"] = "(Get scenarios of these modes)"
        let details["get_scenarios"]["-corners"] = "(Get scenarios of these corners)"
   let details["get_selection"]={}
        let details["get_selection"]["-slct_targets"] = ""
        let details["get_selection"]["-slct_targets_operation"] = ""
        let details["get_selection"]["-create_slct_buses"] = "(Create selection buses instead of collections to return objects)"
        let details["get_selection"]["-name"] = "(Name of selection bus)"
        let details["get_selection"]["-type"] = "(Types to filter selection)"
        let details["get_selection"]["-design"] = "(Design to filter selection)"
        let details["get_selection"]["-more_than"] = "(More objects would be returned)"
        let details["get_selection"]["-fewer_than"] = "(Fewer objects would be returned)"
        let details["get_selection"]["-count"] = "(Count objects that would be returned)"
        let details["get_selection"]["-num"] = "(Return not more than this number of objects)"
        let details["get_selection"]["-type_list"] = "(Count objects for each type of object that would be returned)"
   let details["get_shapes"]={}
        let details["get_shapes"]["-design"] = "(Top design for finding objects)"
        let details["get_shapes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_shapes"]["-quiet"] = "(Suppress all messages)"
        let details["get_shapes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_shapes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_shapes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_shapes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_shapes"]["-expect_at_least"] = ""
        let details["get_shapes"]["-expect_each_pattern_matches"] = ""
        let details["get_shapes"]["-of_objects"] = ""
        let details["get_shapes"]["-hierarchical"] = "(Get shapes in the full hierarchy 	                     below)"
        let details["get_shapes"]["-include_fill"] = "(Include fill shapes in search)"
        let details["get_shapes"]["-include_lib_cell"] = "(Include lib_cell shapes in search)"
        let details["get_shapes"]["-include_shield"] = "(Include shielding shapes in search with -of_object with nets input)"
        let details["get_shapes"]["-shield_only"] = "(Return shielding shapes only in search with -of_object with nets input)"
        let details["get_shapes"]["-at"] = "(Search point)"
        let details["get_shapes"]["-within"] = "(Search within Rect or polygon)"
        let details["get_shapes"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_shapes"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_shaping_blockages"]={}
        let details["get_shaping_blockages"]["-design"] = "(Top design for finding objects)"
        let details["get_shaping_blockages"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_shaping_blockages"]["-quiet"] = "(Suppress all messages)"
        let details["get_shaping_blockages"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_shaping_blockages"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_shaping_blockages"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_shaping_blockages"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_shaping_blockages"]["-expect_at_least"] = ""
        let details["get_shaping_blockages"]["-expect_each_pattern_matches"] = ""
        let details["get_shaping_blockages"]["-of_objects"] = ""
        let details["get_shaping_blockages"]["-hierarchical"] = "(Get shaping blockages in the full 	                     hierarchy below)"
   let details["get_site_arrays"]={}
        let details["get_site_arrays"]["-design"] = "(Top design for finding objects)"
        let details["get_site_arrays"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_site_arrays"]["-quiet"] = "(Suppress all messages)"
        let details["get_site_arrays"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_site_arrays"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_site_arrays"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_site_arrays"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_site_arrays"]["-expect_at_least"] = ""
        let details["get_site_arrays"]["-expect_each_pattern_matches"] = ""
        let details["get_site_arrays"]["-of_objects"] = ""
        let details["get_site_arrays"]["-hierarchical"] = "(Get site arrays in the full 	                     hierarchy below)"
        let details["get_site_arrays"]["-at"] = "(Search point)"
        let details["get_site_arrays"]["-within"] = "(Search within Rect or polygon)"
        let details["get_site_arrays"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_site_arrays"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_site_defs"]={}
        let details["get_site_defs"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["get_site_defs"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["get_site_defs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_site_defs"]["-quiet"] = "(Suppress all messages)"
        let details["get_site_defs"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_site_defs"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_site_defs"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_site_defs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_site_defs"]["-expect_at_least"] = ""
        let details["get_site_defs"]["-expect_each_pattern_matches"] = ""
        let details["get_site_defs"]["-of_objects"] = ""
   let details["get_site_rows"]={}
        let details["get_site_rows"]["-design"] = "(Top design for finding objects)"
        let details["get_site_rows"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_site_rows"]["-quiet"] = "(Suppress all messages)"
        let details["get_site_rows"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_site_rows"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_site_rows"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_site_rows"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_site_rows"]["-expect_at_least"] = ""
        let details["get_site_rows"]["-expect_each_pattern_matches"] = ""
        let details["get_site_rows"]["-of_objects"] = ""
        let details["get_site_rows"]["-hierarchical"] = "(Get site rows in the full hierarchy 	                     below)"
        let details["get_site_rows"]["-at"] = "(Search point)"
        let details["get_site_rows"]["-within"] = "(Search within Rect or polygon)"
        let details["get_site_rows"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_site_rows"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_snap_setting"]={}
        let details["get_snap_setting"]["-enabled"] = "(snapping state)"
        let details["get_snap_setting"]["-class"] = "(snap object class: "
        let details["get_snap_setting"]["-cursor_edge"] = "(snap cursor to object edges)"
        let details["get_snap_setting"]["-object_edge"] = "(snap object to object edges)"
        let details["get_snap_setting"]["-edge_radius"] = "(edge search radius)"
        let details["get_snap_setting"]["-user_grid"] = "(current user grid)"
        let details["get_snap_setting"]["-preferred_track"] = "(snap to preferred track only)"
        let details["get_snap_setting"]["-fix_orientation"] = "(fix cell orientation)"
        let details["get_snap_setting"]["-macro_by_color"] = "(snap macro by track coloring)"
   let details["get_supernets"]={}
        let details["get_supernets"]["-design"] = "(Top design for finding objects)"
        let details["get_supernets"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_supernets"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_supernets"]["-quiet"] = "(Suppress all messages)"
        let details["get_supernets"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_supernets"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_supernets"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_supernets"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_supernets"]["-expect_at_least"] = ""
        let details["get_supernets"]["-expect_each_pattern_matches"] = ""
        let details["get_supernets"]["-of_objects"] = ""
        let details["get_supernets"]["-hsc"] = "(Separator character (default is /): "
   let details["get_supply_nets"]={}
        let details["get_supply_nets"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_supply_nets"]["-top_net_of_hierarchical_group"] = ""
        let details["get_supply_nets"]["-segments"] = "(Include all equivalent supply nets)"
        let details["get_supply_nets"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_supply_nets"]["-quiet"] = "(Suppress all messages)"
        let details["get_supply_nets"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_supply_nets"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_supply_nets"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_supply_nets"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_supply_nets"]["-expect_at_least"] = ""
        let details["get_supply_nets"]["-expect_each_pattern_matches"] = ""
        let details["get_supply_nets"]["-of_objects"] = ""
   let details["get_supply_ports"]={}
        let details["get_supply_ports"]["-hierarchical"] = "(Search level-by-level in current instance)"
        let details["get_supply_ports"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_supply_ports"]["-quiet"] = "(Suppress all messages)"
        let details["get_supply_ports"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_supply_ports"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_supply_ports"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_supply_ports"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_supply_ports"]["-expect_at_least"] = ""
        let details["get_supply_ports"]["-expect_each_pattern_matches"] = ""
        let details["get_supply_ports"]["-of_objects"] = ""
        let details["get_supply_ports"]["-exclude_power_switch"] = ""
   let details["get_supply_sets"]={}
        let details["get_supply_sets"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_supply_sets"]["-quiet"] = "(Suppress all messages)"
        let details["get_supply_sets"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_supply_sets"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_supply_sets"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_supply_sets"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_supply_sets"]["-expect_at_least"] = ""
        let details["get_supply_sets"]["-expect_each_pattern_matches"] = ""
        let details["get_supply_sets"]["-of_objects"] = ""
   let details["get_svf"]={}
   let details["get_switching_activity"]={}
        let details["get_switching_activity"]["-modes"] = "(Get activity for specified modes)"
        let details["get_switching_activity"]["-corners"] = "(Get activity for specified corners)"
        let details["get_switching_activity"]["-scenarios"] = "(Get activity for specified scenarios)"
        let details["get_switching_activity"]["-path_sources"] = ""
        let details["get_switching_activity"]["-state_condition"] = ""
        let details["get_switching_activity"]["-rise"] = "(Rise toggle rate)"
        let details["get_switching_activity"]["-fall"] = "(Fall toggle rate)"
        let details["get_switching_activity"]["-related_clock"] = "(Get related_clock for given object)"
   let details["get_techs"]={}
        let details["get_techs"]["-all"] = "(Get Tech objects from both implicitly and expliclty opened libraries)"
        let details["get_techs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_techs"]["-quiet"] = "(Suppress all messages)"
        let details["get_techs"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_techs"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_techs"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_techs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_techs"]["-expect_at_least"] = ""
        let details["get_techs"]["-expect_each_pattern_matches"] = ""
        let details["get_techs"]["-of_objects"] = ""
   let details["get_terminals"]={}
        let details["get_terminals"]["-design"] = "(Top design for finding objects)"
        let details["get_terminals"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_terminals"]["-quiet"] = "(Suppress all messages)"
        let details["get_terminals"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_terminals"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_terminals"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_terminals"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_terminals"]["-expect_at_least"] = ""
        let details["get_terminals"]["-expect_each_pattern_matches"] = ""
        let details["get_terminals"]["-of_objects"] = ""
        let details["get_terminals"]["-hierarchical"] = "(Get terminals in the full hierarchy 	                     below)"
        let details["get_terminals"]["-include_lib_cell"] = "(Include lib_cell shapes in search)"
        let details["get_terminals"]["-at"] = "(Search point)"
        let details["get_terminals"]["-within"] = "(Search within Rect or polygon)"
        let details["get_terminals"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_terminals"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_timing_arcs"]={}
        let details["get_timing_arcs"]["-design"] = "(Top design for finding objects)"
        let details["get_timing_arcs"]["-from"] = "(From pins or ports)"
        let details["get_timing_arcs"]["-to"] = "(To pins or ports)"
        let details["get_timing_arcs"]["-of_objects"] = ""
        let details["get_timing_arcs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_timing_arcs"]["-quiet"] = "(Suppress all messages)"
        let details["get_timing_arcs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_timing_arcs"]["-expect_at_least"] = ""
   let details["get_timing_paths"]={}
        let details["get_timing_paths"]["-modes"] = "(use scenarios of these modes (default is all modes))"
        let details["get_timing_paths"]["-corners"] = "(use scenarios of these corners (default is all corners))"
        let details["get_timing_paths"]["-scenarios"] = ""
        let details["get_timing_paths"]["-groups"] = "(List of path group names to report (default is all path groups))"
        let details["get_timing_paths"]["-nworst"] = "(Number of paths per endpoint: "
        let details["get_timing_paths"]["-max_paths"] = "(Maximum total paths to find: "
        let details["get_timing_paths"]["-delay_type"] = ""
        let details["get_timing_paths"]["-path_type"] = ""
        let details["get_timing_paths"]["-report_by"] = "(Path ordering criteria: "
        let details["get_timing_paths"]["-sort_by"] = "(Sorting criteria: "
        let details["get_timing_paths"]["-exception"] = ""
        let details["get_timing_paths"]["-slack_lesser_than"] = ""
        let details["get_timing_paths"]["-include_hierarchical_pins"] = ""
        let details["get_timing_paths"]["-from"] = "(List of path startpoints or clocks)"
        let details["get_timing_paths"]["-rise_from"] = ""
        let details["get_timing_paths"]["-fall_from"] = ""
        let details["get_timing_paths"]["-through"] = ""
        let details["get_timing_paths"]["-rise_through"] = ""
        let details["get_timing_paths"]["-fall_through"] = ""
        let details["get_timing_paths"]["-to"] = "(List of path endpoints or clocks)"
        let details["get_timing_paths"]["-rise_to"] = ""
        let details["get_timing_paths"]["-fall_to"] = ""
        let details["get_timing_paths"]["-exclude"] = ""
        let details["get_timing_paths"]["-rise_exclude"] = ""
        let details["get_timing_paths"]["-fall_exclude"] = ""
        let details["get_timing_paths"]["-start_end_pair"] = "(List worst path per start-endpoint pair)"
   let details["get_topological_constraints"]={}
        let details["get_topological_constraints"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_topological_constraints"]["-quiet"] = "(Suppress all messages)"
        let details["get_topological_constraints"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_topological_constraints"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_topological_constraints"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_topological_constraints"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_topological_constraints"]["-expect_at_least"] = ""
        let details["get_topological_constraints"]["-expect_each_pattern_matches"] = ""
        let details["get_topological_constraints"]["-of_objects"] = ""
        let details["get_topological_constraints"]["-hierarchical"] = "(Get topological constraints in the full hierarchy below)"
   let details["get_topology_edges"]={}
        let details["get_topology_edges"]["-design"] = "(Top design for finding objects)"
        let details["get_topology_edges"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_topology_edges"]["-quiet"] = "(Suppress all messages)"
        let details["get_topology_edges"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_topology_edges"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_topology_edges"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_topology_edges"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_topology_edges"]["-expect_at_least"] = ""
        let details["get_topology_edges"]["-expect_each_pattern_matches"] = ""
        let details["get_topology_edges"]["-of_objects"] = ""
        let details["get_topology_edges"]["-hierarchical"] = "(Get topology_edges in the full hierarchy below)"
   let details["get_topology_nodes"]={}
        let details["get_topology_nodes"]["-design"] = "(Top design for finding objects)"
        let details["get_topology_nodes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_topology_nodes"]["-quiet"] = "(Suppress all messages)"
        let details["get_topology_nodes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_topology_nodes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_topology_nodes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_topology_nodes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_topology_nodes"]["-expect_at_least"] = ""
        let details["get_topology_nodes"]["-expect_each_pattern_matches"] = ""
        let details["get_topology_nodes"]["-of_objects"] = ""
        let details["get_topology_nodes"]["-hierarchical"] = "(Get topology_nodes in the full hierarchy below)"
   let details["get_tracks"]={}
        let details["get_tracks"]["-design"] = "(Top design for finding objects)"
        let details["get_tracks"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_tracks"]["-quiet"] = "(Suppress all messages)"
        let details["get_tracks"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_tracks"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_tracks"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_tracks"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_tracks"]["-expect_at_least"] = ""
        let details["get_tracks"]["-expect_each_pattern_matches"] = ""
        let details["get_tracks"]["-of_objects"] = ""
        let details["get_tracks"]["-hierarchical"] = "(Get tracks in the full 	                      hierarchy below)"
        let details["get_tracks"]["-at"] = "(Search point)"
        let details["get_tracks"]["-within"] = "(Search within Rect or polygon)"
        let details["get_tracks"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_tracks"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_undo_info"]={}
        let details["get_undo_info"]["-name"] = "(Marker to return information on)"
        let details["get_undo_info"]["-current"] = "(Return information on the current marker)"
        let details["get_undo_info"]["-all"] = "(Return information on all available markers)"
        let details["get_undo_info"]["-user"] = "(Return information on user-created markers)"
        let details["get_undo_info"]["-system"] = "(Return information on system-created markers)"
        let details["get_undo_info"]["-details"] = "(Return detailed information)"
        let details["get_undo_info"]["-command"] = "(Command to return undo information on)"
   let details["get_user_units"]={}
        let details["get_user_units"]["-input"] = "(Get the user unit for data input)"
        let details["get_user_units"]["-output"] = "(Get the user unit for data output)"
        let details["get_user_units"]["-type"] = "(Unit type: "
        let details["get_user_units"]["-numeric"] = "(Return numeric value; default is number plus symbol)"
   let details["get_utilization_configurations"]={}
        let details["get_utilization_configurations"]["-block"] = "(Block in which the configs are to be found)"
        let details["get_utilization_configurations"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_utilization_configurations"]["-quiet"] = "(Suppress all messages)"
        let details["get_utilization_configurations"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_utilization_configurations"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_utilization_configurations"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_utilization_configurations"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_utilization_configurations"]["-expect_at_least"] = ""
        let details["get_utilization_configurations"]["-expect_each_pattern_matches"] = ""
        let details["get_utilization_configurations"]["-scope"] = "(Scope of the configuration: "
   let details["get_via_defs"]={}
        let details["get_via_defs"]["-design"] = "(Top design for finding objects)"
        let details["get_via_defs"]["-library"] = "(Library for finding objects)"
        let details["get_via_defs"]["-tech"] = "(Tech for finding object)"
        let details["get_via_defs"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_via_defs"]["-quiet"] = "(Suppress all messages)"
        let details["get_via_defs"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_via_defs"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_via_defs"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_via_defs"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_via_defs"]["-expect_at_least"] = ""
        let details["get_via_defs"]["-expect_each_pattern_matches"] = ""
        let details["get_via_defs"]["-of_objects"] = ""
   let details["get_via_regions"]={}
        let details["get_via_regions"]["-design"] = "(Top design for finding objects)"
        let details["get_via_regions"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_via_regions"]["-quiet"] = "(Suppress all messages)"
        let details["get_via_regions"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_via_regions"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_via_regions"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_via_regions"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_via_regions"]["-expect_at_least"] = ""
        let details["get_via_regions"]["-expect_each_pattern_matches"] = ""
        let details["get_via_regions"]["-of_objects"] = ""
        let details["get_via_regions"]["-at"] = "(Search point)"
        let details["get_via_regions"]["-within"] = "(Search within Rect or polygon)"
        let details["get_via_regions"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_via_regions"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_via_rules"]={}
        let details["get_via_rules"]["-design"] = "(Top design for finding objects)"
        let details["get_via_rules"]["-library"] = "(Library for finding objects)"
        let details["get_via_rules"]["-tech"] = "(Tech for finding object)"
        let details["get_via_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_via_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_via_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_via_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_via_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_via_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_via_rules"]["-expect_at_least"] = ""
        let details["get_via_rules"]["-expect_each_pattern_matches"] = ""
        let details["get_via_rules"]["-of_objects"] = ""
   let details["get_vias"]={}
        let details["get_vias"]["-design"] = "(Top design for finding objects)"
        let details["get_vias"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_vias"]["-quiet"] = "(Suppress all messages)"
        let details["get_vias"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_vias"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_vias"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_vias"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_vias"]["-expect_at_least"] = ""
        let details["get_vias"]["-expect_each_pattern_matches"] = ""
        let details["get_vias"]["-of_objects"] = ""
        let details["get_vias"]["-hierarchical"] = "(Get Vias in the full hierarchy below)"
        let details["get_vias"]["-include_lib_cell"] = "(Include lib_cell shapes in search)"
        let details["get_vias"]["-include_shield"] = "(Include shielding vias in search with -of_object with nets input)"
        let details["get_vias"]["-shield_only"] = "(Return shielding vias only in search with -of_object with nets input)"
        let details["get_vias"]["-at"] = "(Search point)"
        let details["get_vias"]["-within"] = "(Search within Rect or polygon)"
        let details["get_vias"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_vias"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_view_switch_list"]={}
        let details["get_view_switch_list"]["-library"] = "(Library to get view switch list of)"
        let details["get_view_switch_list"]["-design"] = "(Design to get view switch list of)"
        let details["get_view_switch_list"]["-global"] = "(To get the global view switch list)"
        let details["get_view_switch_list"]["-explicit"] = "(To get the view switch list that was explicitly set on the entity)"
   let details["get_virtual_connections"]={}
        let details["get_virtual_connections"]["-of_objects"] = ""
   let details["get_voltage_area_rules"]={}
        let details["get_voltage_area_rules"]["-design"] = "(Top design for finding objects)"
        let details["get_voltage_area_rules"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_voltage_area_rules"]["-quiet"] = "(Suppress all messages)"
        let details["get_voltage_area_rules"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_voltage_area_rules"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_voltage_area_rules"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_voltage_area_rules"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_voltage_area_rules"]["-expect_at_least"] = ""
        let details["get_voltage_area_rules"]["-expect_each_pattern_matches"] = ""
   let details["get_voltage_area_shapes"]={}
        let details["get_voltage_area_shapes"]["-design"] = "(Top design for finding objects)"
        let details["get_voltage_area_shapes"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_voltage_area_shapes"]["-quiet"] = "(Suppress all messages)"
        let details["get_voltage_area_shapes"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_voltage_area_shapes"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_voltage_area_shapes"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_voltage_area_shapes"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_voltage_area_shapes"]["-expect_at_least"] = ""
        let details["get_voltage_area_shapes"]["-expect_each_pattern_matches"] = ""
        let details["get_voltage_area_shapes"]["-of_objects"] = ""
        let details["get_voltage_area_shapes"]["-hierarchical"] = "(Get voltage area shapes in the full 	                     hierarchy below)"
        let details["get_voltage_area_shapes"]["-at"] = "(Search point)"
        let details["get_voltage_area_shapes"]["-within"] = "(Search within Rect or polygon)"
        let details["get_voltage_area_shapes"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_voltage_area_shapes"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_voltage_areas"]={}
        let details["get_voltage_areas"]["-design"] = "(Top design for finding objects)"
        let details["get_voltage_areas"]["-filter"] = "(Filter collection with 'expression')"
        let details["get_voltage_areas"]["-quiet"] = "(Suppress all messages)"
        let details["get_voltage_areas"]["-regexp"] = "(Patterns are full regular expressions)"
        let details["get_voltage_areas"]["-nocase"] = "(Perform case-insensitive matching)"
        let details["get_voltage_areas"]["-exact"] = "(Wildcards are considered as plain characters)"
        let details["get_voltage_areas"]["-expect"] = "(Expect exactly this many matching objects: "
        let details["get_voltage_areas"]["-expect_at_least"] = ""
        let details["get_voltage_areas"]["-expect_each_pattern_matches"] = ""
        let details["get_voltage_areas"]["-of_objects"] = ""
        let details["get_voltage_areas"]["-hierarchical"] = "(Get flat voltage areas in the full 	                     hierarchy below)"
        let details["get_voltage_areas"]["-at"] = "(Search point)"
        let details["get_voltage_areas"]["-within"] = "(Search within Rect or polygon)"
        let details["get_voltage_areas"]["-touching"] = "(Search within and touching Rect or 	          polygon)"
        let details["get_voltage_areas"]["-intersect"] = "(Search intersecting Rect or 	          polygon)"
   let details["get_vsdc"]={}
   let details["get_working_design_stack"]={}
        let details["get_working_design_stack"]["-instance"] = "(Get current block instance within top hierarchy)"
   let details["group_cells"]={}
        let details["group_cells"]["-module_name"] = ""
        let details["group_cells"]["-cell_name"] = "(Name of the cell created for the new hierarchy)"
        let details["group_cells"]["-phys_wrapper"] = "(Create wrapper around one hierarchical cell for design planning)"
   let details["group_path"]={}
        let details["group_path"]["-name"] = "(Name of the path group)"
        let details["group_path"]["-default"] = "(Move path into the default group)"
        let details["group_path"]["-weight"] = "(Cost function weight: "
        let details["group_path"]["-critical_range"] = ""
        let details["group_path"]["-priority"] = "(level to increase priority of this group_path)"
        let details["group_path"]["-comment"] = "(User specified comment)"
        let details["group_path"]["-from"] = "(List of path startpoints or clocks)"
        let details["group_path"]["-rise_from"] = ""
        let details["group_path"]["-fall_from"] = ""
        let details["group_path"]["-through"] = ""
        let details["group_path"]["-rise_through"] = ""
        let details["group_path"]["-fall_through"] = ""
        let details["group_path"]["-to"] = "(List of path endpoints or clocks)"
        let details["group_path"]["-rise_to"] = ""
        let details["group_path"]["-fall_to"] = ""
   let details["gui_add_missing_vias"]={}
        let details["gui_add_missing_vias"]["-min_layer"] = "(minimum layer on which to create missing vias)"
        let details["gui_add_missing_vias"]["-max_layer"] = "(maximum layer on which to create missing vias)"
   let details["gui_bin"]={}
        let details["gui_bin"]["-slct_targets"] = ""
        let details["gui_bin"]["-slct_targets_operation"] = ""
        let details["gui_bin"]["-create_slct_buses"] = "(Create selection buses instead of collections to return objects)"
        let details["gui_bin"]["-clct"] = "(Collection to be binned)"
        let details["gui_bin"]["-attr"] = "(Attribute used for binning)"
        let details["gui_bin"]["-cmd"] = "(Tcl command computing value for binning)"
        let details["gui_bin"]["-value_list"] = ""
        let details["gui_bin"]["-return_values"] = "(Return values of elements in result)"
        let details["gui_bin"]["-lower_bound"] = "(Lower bound for binning)"
        let details["gui_bin"]["-lower_bound_strict"] = "(Use lower bound as strict bound)"
        let details["gui_bin"]["-upper_bound"] = "(Upper bound for binning)"
        let details["gui_bin"]["-upper_bound_strict"] = "(Use upper bound as strict bound)"
        let details["gui_bin"]["-boundary"] = "(Use boundary value)"
        let details["gui_bin"]["-filter_cmd"] = "(Filter tcl command)"
        let details["gui_bin"]["-num_bins"] = "(Number of bins)"
        let details["gui_bin"]["-numBin"] = "(Number of bins (DO NOT USE ANY MORE!!!!!))"
        let details["gui_bin"]["-underflow"] = "(Create underflow bin)"
        let details["gui_bin"]["-overflow"] = "(Create overflow bin)"
        let details["gui_bin"]["-nice_level"] = "(Use boundaries with integral values)"
        let details["gui_bin"]["-small_is_good"] = "(Values smaller than the boundary are good (by default they are assumed bad))"
        let details["gui_bin"]["-exact_binning"] = "(Use exact range for bins)"
        let details["gui_bin"]["-ignore_values"] = "(List of float values to ignore)"
        let details["gui_bin"]["-bin_range"] = "(Width of value range per bin)"
        let details["gui_bin"]["-bar_brush"] = "(Brush to be used for bars)"
   let details["gui_change_highlight"]={}
        let details["gui_change_highlight"]["-add"] = "(Highlight the specified objects)"
        let details["gui_change_highlight"]["-remove"] = "(Unhighlight the specified objects)"
        let details["gui_change_highlight"]["-toggle"] = "(Toggle the highlight state of the specified objects)"
        let details["gui_change_highlight"]["-color"] = "(The color for the highlighting operation)"
        let details["gui_change_highlight"]["-all_colors"] = "(The highlighting operation applies to all colors)"
        let details["gui_change_highlight"]["-collection"] = "(The objects affected by the highlighting operation)"
   let details["gui_check_drc_errors"]={}
        let details["gui_check_drc_errors"]["-of_objects"] = ""
        let details["gui_check_drc_errors"]["-limit_area"] = ""
        let details["gui_check_drc_errors"]["-rules"] = "(rule name list: "
        let details["gui_check_drc_errors"]["-filter_same_net_spacing"] = ""
        let details["gui_check_drc_errors"]["-layers"] = "(check shapes only on these layers)"
        let details["gui_check_drc_errors"]["-max_error_limit"] = "(maximum number of errors to report)"
        let details["gui_check_drc_errors"]["-honor_ndr"] = "(check ndr rules)"
        let details["gui_check_drc_errors"]["-max_processing_time"] = ""
        let details["gui_check_drc_errors"]["-max_shape_limit"] = "(maximum number of shapes to check.)"
        let details["gui_check_drc_errors"]["-show"] = "(show error browser)"
   let details["gui_create_attrgroup"]={}
        let details["gui_create_attrgroup"]["-class"] = "(name of design object)"
        let details["gui_create_attrgroup"]["-name"] = "(attribute group name)"
        let details["gui_create_attrgroup"]["-attr_list"] = ""
   let details["gui_create_pref_category"]={}
        let details["gui_create_pref_category"]["-category"] = "(name of category to create)"
   let details["gui_create_pref_key"]={}
        let details["gui_create_pref_key"]["-category"] = "(name of category)"
        let details["gui_create_pref_key"]["-key"] = "(name of key)"
        let details["gui_create_pref_key"]["-value_type"] = ""
        let details["gui_create_pref_key"]["-value"] = "(the value associated with the key)"
        let details["gui_create_pref_key"]["-keep_value_if_exist"] = "(Keep current value if key exist)"
        let details["gui_create_pref_key"]["-read_only"] = "(read-only preference)"
        let details["gui_create_pref_key"]["-description"] = ""
        let details["gui_create_pref_key"]["-min"] = "(for integer and double types only)"
        let details["gui_create_pref_key"]["-max"] = "(for integer and double types only)"
        let details["gui_create_pref_key"]["-legal_value_list"] = ""
        let details["gui_create_pref_key"]["-string_to_int_map"] = ""
        let details["gui_create_pref_key"]["-save_on_exit"] = ""
   let details["gui_create_task"]={}
        let details["gui_create_task"]["-name"] = "(Name of task to create.)"
        let details["gui_create_task"]["-help_string"] = "(Help message for the task)"
        let details["gui_create_task"]["-menu_string"] = "(Menu string for the task)"
        let details["gui_create_task"]["-icon"] = "(Name of icon file.)"
        let details["gui_create_task"]["-default"] = "(set as default task)"
        let details["gui_create_task"]["-item_root"] = "(Task item root that to define )"
   let details["gui_create_task_item"]={}
        let details["gui_create_task_item"]["-name"] = "(The hierarchical name for the new task item)"
        let details["gui_create_task_item"]["-task"] = "(Name of the task in which this item is created)"
        let details["gui_create_task_item"]["-item_root"] = "(Task item root in which to create the task item)"
        let details["gui_create_task_item"]["-page"] = "(Name of the task assistant page to show for this task item)"
        let details["gui_create_task_item"]["-search_terms"] = "(Additional search terms for the task item)"
   let details["gui_create_tk_palette_type"]={}
        let details["gui_create_tk_palette_type"]["-type"] = "(Palette type)"
        let details["gui_create_tk_palette_type"]["-title"] = "(Palette title)"
        let details["gui_create_tk_palette_type"]["-icon"] = "(Palette icon)"
        let details["gui_create_tk_palette_type"]["-window_types"] = ""
        let details["gui_create_tk_palette_type"]["-dock_edge"] = "(Palette dock edge: "
        let details["gui_create_tk_palette_type"]["-create_command"] = "(User initialization callback)"
   let details["gui_create_vm"]={}
        let details["gui_create_vm"]["-name"] = "(Visual Mode name)"
        let details["gui_create_vm"]["-update_cmd"] = "(Tcl command string to update vm contents)"
        let details["gui_create_vm"]["-title"] = "(String for title)"
        let details["gui_create_vm"]["-help_topic"] = "(String for help topic)"
        let details["gui_create_vm"]["-infotip"] = "(String for infotip)"
        let details["gui_create_vm"]["-netfilter"] = "(Net connection filtering)"
        let details["gui_create_vm"]["-discrete"] = "(Set visual mode to be discrete and allow reordering of buckets)"
        let details["gui_create_vm"]["-float"] = "(Indicates that bucket contents have a floating point range)"
        let details["gui_create_vm"]["-show_only_pins_of_nets"] = ""
        let details["gui_create_vm"]["-icon"] = "(Set the icon file to be used for gui menus)"
        let details["gui_create_vm"]["-top_exaggeration"] = ""
        let details["gui_create_vm"]["-mid_exaggeration"] = ""
        let details["gui_create_vm"]["-bot_exaggeration"] = ""
   let details["gui_create_vm_objects"]={}
   let details["gui_create_vmbucket"]={}
        let details["gui_create_vmbucket"]["-vmname"] = "(Visual Mode name)"
        let details["gui_create_vmbucket"]["-name"] = "(Bucket name)"
        let details["gui_create_vmbucket"]["-title"] = "(Bucket title)"
        let details["gui_create_vmbucket"]["-infotip"] = "(Infotip string)"
        let details["gui_create_vmbucket"]["-netfilter"] = "(Net connection filtering)"
        let details["gui_create_vmbucket"]["-color"] = "(Bucket color)"
        let details["gui_create_vmbucket"]["-pattern"] = "(Bucket fill pattern)"
        let details["gui_create_vmbucket"]["-exaggeration"] = "(Bucket min pixel exaggeration: "
        let details["gui_create_vmbucket"]["-number"] = "(Bucket display number: "
        let details["gui_create_vmbucket"]["-maxval"] = "(Bucket max val)"
        let details["gui_create_vmbucket"]["-minval"] = "(Bucket min val)"
        let details["gui_create_vmbucket"]["-above"] = "(Render bucket above this bucket)"
        let details["gui_create_vmbucket"]["-below"] = "(Render bucket below this bucket)"
        let details["gui_create_vmbucket"]["-at"] = "(Render bucket at top or bottom: "
        let details["gui_create_vmbucket"]["-visible"] = "(Bucket visibility)"
        let details["gui_create_vmbucket"]["-collection"] = "(Collection to provide bucket contents)"
   let details["gui_delete_attrgroup"]={}
        let details["gui_delete_attrgroup"]["-class"] = "(name of design object)"
        let details["gui_delete_attrgroup"]["-name"] = "(attribute group name)"
        let details["gui_delete_attrgroup"]["-all"] = "(delete all groups)"
   let details["gui_edit_vmbucket_contents"]={}
        let details["gui_edit_vmbucket_contents"]["-vmname"] = "(Visual Mode name)"
        let details["gui_edit_vmbucket_contents"]["-name"] = "(Bucket name)"
        let details["gui_edit_vmbucket_contents"]["-add"] = "(Add to bucket)"
        let details["gui_edit_vmbucket_contents"]["-remove"] = "(Remove from bucket)"
        let details["gui_edit_vmbucket_contents"]["-replace"] = "(Replace the current contents)"
        let details["gui_edit_vmbucket_contents"]["-collection"] = "(Collection to edit bucket contents)"
   let details["gui_eval_command"]={}
        let details["gui_eval_command"]["-command"] = "(the command to execute and log)"
        let details["gui_eval_command"]["-history"] = "(enables appending the command into the command history (default is false))"
        let details["gui_eval_command"]["-echo"] = "(enables echo of the command and the result to the console (default is false))"
        let details["gui_eval_command"]["-honor_preview"] = "(enables honoring the preview flag set in a command dialog (default is false))"
        let details["gui_eval_command"]["-preview"] = "(preview the given command irregardless of the preview flag set in a dialog (default is false))"
   let details["gui_exist_pref_category"]={}
        let details["gui_exist_pref_category"]["-category"] = "(preference category)"
   let details["gui_exist_pref_key"]={}
        let details["gui_exist_pref_key"]["-category"] = "(preference category, use default category if not specified)"
        let details["gui_exist_pref_key"]["-key"] = "(preference key)"
   let details["gui_get_bucket_option"]={}
        let details["gui_get_bucket_option"]["-map"] = "(Visual/Map Mode name)"
        let details["gui_get_bucket_option"]["-bucket"] = "(Bucket name)"
        let details["gui_get_bucket_option"]["-option"] = "(Name of the option to be get)"
        let details["gui_get_bucket_option"]["-default"] = "(Get the default value of the option)"
   let details["gui_get_bucket_option_list"]={}
        let details["gui_get_bucket_option_list"]["-map"] = "(Visual/Map Mode name)"
   let details["gui_get_current_task"]={}
   let details["gui_get_highlight"]={}
        let details["gui_get_highlight"]["-color"] = "(Get only objects of this color.)"
        let details["gui_get_highlight"]["-all_colors"] = "(Get all highlighted objects.)"
        let details["gui_get_highlight"]["-return_select_bus"] = "(Return a selection bus instead of a collection.)"
        let details["gui_get_highlight"]["-more_than"] = "(Return 1 if more than specified number of objects.)"
   let details["gui_get_highlight_options"]={}
        let details["gui_get_highlight_options"]["-all_colors"] = "(Show all valid highlight colors.)"
        let details["gui_get_highlight_options"]["-current_color"] = "(Show the current highlight color.)"
        let details["gui_get_highlight_options"]["-auto_cycle_color"] = "(Show whether color auto cycling is enabled.)"
   let details["gui_get_layer_widths"]={}
        let details["gui_get_layer_widths"]["-layer"] = "(layer name)"
        let details["gui_get_layer_widths"]["-default"] = "(get default layer values)"
        let details["gui_get_layer_widths"]["-current"] = "(get current layer values)"
        let details["gui_get_layer_widths"]["-user"] = "(get user defined layer values)"
   let details["gui_get_map_list"]={}
   let details["gui_get_map_option"]={}
        let details["gui_get_map_option"]["-map"] = "(Visual/Map Mode name)"
        let details["gui_get_map_option"]["-option"] = "(Name of the option to be retrieved)"
        let details["gui_get_map_option"]["-default"] = "(Get the default value of the option)"
   let details["gui_get_map_option_list"]={}
        let details["gui_get_map_option_list"]["-map"] = "(Visual/Map Mode name)"
   let details["gui_get_pref_keys"]={}
        let details["gui_get_pref_keys"]["-category"] = "(preference category)"
   let details["gui_get_pref_value"]={}
        let details["gui_get_pref_value"]["-category"] = "(name of category)"
        let details["gui_get_pref_value"]["-key"] = "(name of key)"
   let details["gui_get_task_list"]={}
   let details["gui_get_vm"]={}
        let details["gui_get_vm"]["-name"] = "(Visual Mode name)"
        let details["gui_get_vm"]["-update_cmd"] = "(Return update tcl cmd)"
        let details["gui_get_vm"]["-title"] = "(Return title string)"
        let details["gui_get_vm"]["-help_topic"] = "(Return help topic string)"
        let details["gui_get_vm"]["-infotip"] = "(Return infotip string)"
        let details["gui_get_vm"]["-netfilter"] = "(Return net connection filtering)"
        let details["gui_get_vm"]["-discrete"] = "(Return whether visual mode is discrete)"
        let details["gui_get_vm"]["-float"] = "(Return whether the visual mode buckets have a floating point range)"
        let details["gui_get_vm"]["-show_only_pins_of_nets"] = ""
        let details["gui_get_vm"]["-icon_file"] = "(Return the gui menu icon file)"
        let details["gui_get_vm"]["-top_exaggeration"] = "(Return the top bucket exaggeration)"
        let details["gui_get_vm"]["-mid_exaggeration"] = "(Return the middle bucket exaggeration)"
        let details["gui_get_vm"]["-bot_exaggeration"] = "(Return the bottom bucket exaggeration)"
        let details["gui_get_vm"]["-buckets"] = "(Return bucket name list)"
   let details["gui_get_vmbucket"]={}
        let details["gui_get_vmbucket"]["-vmname"] = "(Visual Mode name)"
        let details["gui_get_vmbucket"]["-name"] = "(Bucket name)"
        let details["gui_get_vmbucket"]["-title"] = "(Return bucket title)"
        let details["gui_get_vmbucket"]["-infotip"] = "(Return infotip string)"
        let details["gui_get_vmbucket"]["-netfilter"] = "(Return net connection filtering)"
        let details["gui_get_vmbucket"]["-color"] = "(Return bucket color)"
        let details["gui_get_vmbucket"]["-pattern"] = "(Return bucket fill pattern)"
        let details["gui_get_vmbucket"]["-exaggeration"] = "(Return bucket min pixel exaggeration)"
        let details["gui_get_vmbucket"]["-number"] = "(Return bucket display number)"
        let details["gui_get_vmbucket"]["-minval"] = "(Return bucket min val)"
        let details["gui_get_vmbucket"]["-maxval"] = "(Return bucket max val)"
        let details["gui_get_vmbucket"]["-visible"] = "(Return initial visibility)"
        let details["gui_get_vmbucket"]["-collection"] = "(Collection to provide bucket contents)"
        let details["gui_get_vmbucket"]["-objcount"] = "(Returns the number of objects in the bucket)"
   let details["gui_get_window_ids"]={}
        let details["gui_get_window_ids"]["-parent"] = "(Parent toplevel window id)"
        let details["gui_get_window_ids"]["-type"] = "(Window type id)"
   let details["gui_get_window_pref_categories"]={}
        let details["gui_get_window_pref_categories"]["-window"] = "(Window id)"
        let details["gui_get_window_pref_categories"]["-window_type"] = "(Window type)"
   let details["gui_get_window_pref_keys"]={}
        let details["gui_get_window_pref_keys"]["-window"] = "(Window id)"
        let details["gui_get_window_pref_keys"]["-window_type"] = "(Window type)"
        let details["gui_get_window_pref_keys"]["-category"] = "(Preference category)"
   let details["gui_get_window_pref_value"]={}
        let details["gui_get_window_pref_value"]["-window"] = "(Window id; option mutually exclusive with -window_type option)"
        let details["gui_get_window_pref_value"]["-window_type"] = "(Window type; option mutually exclusive with -window option)"
        let details["gui_get_window_pref_value"]["-category"] = "(Preference category; a default category is used if not specified)"
        let details["gui_get_window_pref_value"]["-key"] = "(Preference key)"
   let details["gui_get_window_types"]={}
        let details["gui_get_window_types"]["-type"] = "(Restrict to toplevel or child view window types: "
   let details["gui_list_attrgroups"]={}
        let details["gui_list_attrgroups"]["-class"] = "(class - name of design object)"
        let details["gui_list_attrgroups"]["-name"] = "(attribute group name)"
        let details["gui_list_attrgroups"]["-all"] = "(all object classes)"
        let details["gui_list_attrgroups"]["-tcl"] = "(tcl output format)"
        let details["gui_list_attrgroups"]["-full"] = "(full tcl output format)"
        let details["gui_list_attrgroups"]["-attr_list"] = "(list attributes only)"
   let details["gui_load_cell_density_mm"]={}
        let details["gui_load_cell_density_mm"]["-area"] = "(region area the density is analysed.)"
   let details["gui_load_path_analyzer_flylines"]={}
   let details["gui_load_pin_density_mm"]={}
        let details["gui_load_pin_density_mm"]["-area"] = "(region area the density is analysed.)"
   let details["gui_rail_map_options"]={}
        let details["gui_rail_map_options"]["-preview_limit"] = "(Total extracted nodes/edges count limit to switch to preview quality map)"
        let details["gui_rail_map_options"]["-preview_limit_3"] = "(Total extracted nodes/edges count limit to switch to minimum quality preview)"
        let details["gui_rail_map_options"]["-preview_limit_4"] = "(Total extracted nodes/edges count limit to switch to low quality preview)"
        let details["gui_rail_map_options"]["-preview_limit_5"] = "(Total extracted nodes/edges count limit to switch to standard quality preview)"
        let details["gui_rail_map_options"]["-preview_limit_6"] = "(Total extracted nodes/edges count limit to switch to high quality preview)"
        let details["gui_rail_map_options"]["-preview_depth"] = "(Preview depth: 2 to 6 (default 5))"
        let details["gui_rail_map_options"]["-preview_focus_depth"] = ""
        let details["gui_rail_map_options"]["-report_scale_full"] = ""
        let details["gui_rail_map_options"]["-report_scale_focus"] = ""
        let details["gui_rail_map_options"]["-build_threads"] = "(Thread allowance for map to build: 0 - no threads, 1 - auto, >1 - max)"
        let details["gui_rail_map_options"]["-build_scale"] = "(Scale build)"
        let details["gui_rail_map_options"]["-test_control"] = "(Testing control)"
        let details["gui_rail_map_options"]["-test_control2"] = "(Testing control)"
        let details["gui_rail_map_options"]["-test_control3"] = "(Testing control)"
        let details["gui_rail_map_options"]["-report_map_perf"] = "(Testing control)"
        let details["gui_rail_map_options"]["-dep_mode"] = "(Deployment mode: pr1 (default), pr2)"
        let details["gui_rail_map_options"]["-mode"] = "(Update mode: auto, follow (default), preview, off)"
        let details["gui_rail_map_options"]["-enable_report"] = ""
        let details["gui_rail_map_options"]["-report_image"] = "(Image file format: png (default), jpg, bmp, tiff)"
        let details["gui_rail_map_options"]["-report_result"] = ""
        let details["gui_rail_map_options"]["-report_summary"] = ""
        let details["gui_rail_map_options"]["-report_verbose"] = ""
        let details["gui_rail_map_options"]["-report_legend"] = ""
        let details["gui_rail_map_options"]["-report_into_db"] = ""
        let details["gui_rail_map_options"]["-report_path"] = "(Path for report files (\"./RAIL_DATABASE/map_report\" default))"
        let details["gui_rail_map_options"]["-report_prefix"] = ""
        let details["gui_rail_map_options"]["-report_path_current"] = ""
        let details["gui_rail_map_options"]["-preview_full"] = "(Enable full design preview (default true))"
        let details["gui_rail_map_options"]["-preview_focus"] = ""
        let details["gui_rail_map_options"]["-preview_report_full"] = ""
        let details["gui_rail_map_options"]["-preview_report_focus"] = ""
        let details["gui_rail_map_options"]["-preview_display_full"] = ""
        let details["gui_rail_map_options"]["-preview_display_focus"] = ""
        let details["gui_rail_map_options"]["-preview_focus_area"] = ""
        let details["gui_rail_map_options"]["-report_header"] = ""
        let details["gui_rail_map_options"]["-report_footer"] = ""
        let details["gui_rail_map_options"]["-backward_min_max"] = ""
        let details["gui_rail_map_options"]["-backward_power_map"] = ""
        let details["gui_rail_map_options"]["-backward_power_export"] = ""
        let details["gui_rail_map_options"]["-skip_floating"] = ""
        let details["gui_rail_map_options"]["-skip_floating_export"] = ""
        let details["gui_rail_map_options"]["-report_map_file"] = ""
        let details["gui_rail_map_options"]["-report_map_mark"] = ""
   let details["gui_read_timing_paths"]={}
        let details["gui_read_timing_paths"]["-file"] = "(Name of the input file from which to read the timing paths)"
        let details["gui_read_timing_paths"]["-report"] = "(Various summary reports on given paths file: "
        let details["gui_read_timing_paths"]["-strict_validate"] = "(If validate errors occur, exit.)"
        let details["gui_read_timing_paths"]["-blocks"] = "(Filter and adjust paths to given blocks.)"
        let details["gui_read_timing_paths"]["-cells"] = "(Filter paths to only paths with points in given cell collection.)"
   let details["gui_remove_pref_key"]={}
        let details["gui_remove_pref_key"]["-category"] = "(name of category)"
        let details["gui_remove_pref_key"]["-key"] = "(name of key)"
   let details["gui_remove_vm"]={}
        let details["gui_remove_vm"]["-name"] = "(Visual Mode name)"
   let details["gui_remove_vmbucket"]={}
        let details["gui_remove_vmbucket"]["-vmname"] = "(Visual Mode name)"
        let details["gui_remove_vmbucket"]["-name"] = "(Bucket name)"
        let details["gui_remove_vmbucket"]["-all"] = "(Remove all visual mode buckets)"
   let details["gui_report_task"]={}
        let details["gui_report_task"]["-task"] = "(Name of the task on which to report)"
        let details["gui_report_task"]["-item_root"] = "(Task item root on which to report)"
        let details["gui_report_task"]["-file"] = "(Path of the file in which to output the report)"
   let details["gui_set_bucket_option"]={}
        let details["gui_set_bucket_option"]["-map"] = "(Visual/Map Mode name)"
        let details["gui_set_bucket_option"]["-bucket"] = "(Bucket name)"
        let details["gui_set_bucket_option"]["-option"] = "(Name of the option to be set)"
        let details["gui_set_bucket_option"]["-value"] = "(Value for the option to be set)"
        let details["gui_set_bucket_option"]["-default"] = "(Set the option to its default)"
   let details["gui_set_current_task"]={}
        let details["gui_set_current_task"]["-task"] = "(Name of task to make current.)"
   let details["gui_set_highlight_options"]={}
        let details["gui_set_highlight_options"]["-next_color"] = "(Cycle to the next color.)"
        let details["gui_set_highlight_options"]["-current_color"] = ""
        let details["gui_set_highlight_options"]["-auto_cycle_color"] = ""
   let details["gui_set_layer_widths"]={}
        let details["gui_set_layer_widths"]["-layer"] = "(layer name)"
        let details["gui_set_layer_widths"]["-clear"] = "(clear layer values)"
        let details["gui_set_layer_widths"]["-values"] = "(layer width values)"
   let details["gui_set_map_option"]={}
        let details["gui_set_map_option"]["-map"] = "(Visual/Map Mode name)"
        let details["gui_set_map_option"]["-option"] = "(Name of the option to be set)"
        let details["gui_set_map_option"]["-value"] = "(Value for the option to be set)"
        let details["gui_set_map_option"]["-default"] = "(Set the option to its default)"
   let details["gui_set_pref_value"]={}
        let details["gui_set_pref_value"]["-category"] = "(name of category)"
        let details["gui_set_pref_value"]["-key"] = "(name of key)"
        let details["gui_set_pref_value"]["-value"] = "(the value associated with the key)"
   let details["gui_set_task_list"]={}
        let details["gui_set_task_list"]["-tasks"] = "(Names of tasks in the order in which they should appear.)"
   let details["gui_set_vm"]={}
        let details["gui_set_vm"]["-name"] = "(Visual Mode name)"
        let details["gui_set_vm"]["-update_cmd"] = "(Tcl command string to update vm contents)"
        let details["gui_set_vm"]["-title"] = "(String for title)"
        let details["gui_set_vm"]["-help_topic"] = "(String for help topic)"
        let details["gui_set_vm"]["-infotip"] = "(String for infotip)"
        let details["gui_set_vm"]["-netfilter"] = "(Net connection filtering)"
        let details["gui_set_vm"]["-float"] = "(Indicates that bucket contents have a floating point range)"
        let details["gui_set_vm"]["-show_only_pins_of_nets"] = ""
        let details["gui_set_vm"]["-icon"] = "(Set the icon file to be used for gui menus)"
        let details["gui_set_vm"]["-top_exaggeration"] = ""
        let details["gui_set_vm"]["-mid_exaggeration"] = ""
        let details["gui_set_vm"]["-bot_exaggeration"] = ""
        let details["gui_set_vm"]["-set_exaggerations"] = "(Set the bucket exaggerations)"
        let details["gui_set_vm"]["-buckets"] = "(Set the order of buckets)"
   let details["gui_set_vmbucket"]={}
        let details["gui_set_vmbucket"]["-vmname"] = "(Visual Mode name)"
        let details["gui_set_vmbucket"]["-name"] = "(Bucket name)"
        let details["gui_set_vmbucket"]["-title"] = "(Bucket title)"
        let details["gui_set_vmbucket"]["-infotip"] = "(Infotip string)"
        let details["gui_set_vmbucket"]["-netfilter"] = "(Net connection filtering)"
        let details["gui_set_vmbucket"]["-color"] = "(Bucket color)"
        let details["gui_set_vmbucket"]["-pattern"] = "(Bucket fill pattern)"
        let details["gui_set_vmbucket"]["-exaggeration"] = "(Bucket min pixel exaggeration: "
        let details["gui_set_vmbucket"]["-number"] = "(Bucket display number: "
        let details["gui_set_vmbucket"]["-minval"] = "(Bucket min val)"
        let details["gui_set_vmbucket"]["-maxval"] = "(Bucket max val)"
        let details["gui_set_vmbucket"]["-above"] = "(Render bucket above this bucket)"
        let details["gui_set_vmbucket"]["-below"] = "(Render bucket below this bucket)"
        let details["gui_set_vmbucket"]["-at"] = "(Render bucket at top or bottom: "
        let details["gui_set_vmbucket"]["-visible"] = "(Initial visibility)"
        let details["gui_set_vmbucket"]["-collection"] = "(Collection to provide bucket contents)"
   let details["gui_set_window_pref_key"]={}
        let details["gui_set_window_pref_key"]["-window"] = "(Window id; option mutually exclusive with -window_type option)"
        let details["gui_set_window_pref_key"]["-window_type"] = "(Window type; option mutually exclusive with -window option)"
        let details["gui_set_window_pref_key"]["-category"] = "(Preference category; a default category is used if not specified)"
        let details["gui_set_window_pref_key"]["-key"] = "(Preference key)"
        let details["gui_set_window_pref_key"]["-value_type"] = "(Preference value type: [integer|bool|double|color|string|rect|size|point])"
        let details["gui_set_window_pref_key"]["-value"] = "(Preference value)"
   let details["gui_show_map"]={}
        let details["gui_show_map"]["-map"] = "(Visual/Map Mode name)"
        let details["gui_show_map"]["-show"] = "(Shows/Hides the map)"
        let details["gui_show_map"]["-window"] = "(Window in which to show/hide the map)"
   let details["gui_start"]={}
        let details["gui_start"]["-no_windows"] = "(set flag not to load windows for this cmd)"
        let details["gui_start"]["-file"] = "(file to source on gui_start)"
   let details["gui_stop"]={}
   let details["gui_trim_dangling_wires"]={}
   let details["gui_update_attrgroup"]={}
        let details["gui_update_attrgroup"]["-class"] = "(name of design object)"
        let details["gui_update_attrgroup"]["-name"] = "(attribute group name)"
        let details["gui_update_attrgroup"]["-attr_list"] = "(reset list of attributes)"
        let details["gui_update_attrgroup"]["-add"] = "(add new attribute to the group)"
        let details["gui_update_attrgroup"]["-delete"] = "(delete attribute from the group)"
        let details["gui_update_attrgroup"]["-move"] = "(move attribute in the list: "
        let details["gui_update_attrgroup"]["-attr"] = "(single attribute)"
        let details["gui_update_attrgroup"]["-anchor"] = "(anchor attribute)"
   let details["gui_update_pref_file"]={}
        let details["gui_update_pref_file"]["-file"] = "(pathname of pref. file to save to)"
   let details["gui_update_vm"]={}
        let details["gui_update_vm"]["-name"] = "(Visual Mode name)"
   let details["gui_update_vm_annotations"]={}
        let details["gui_update_vm_annotations"]["-clear"] = "(Remove all annotations from object)"
        let details["gui_update_vm_annotations"]["-add"] = "(Add points for the specified type)"
        let details["gui_update_vm_annotations"]["-draw_net"] = "(Specify net drawing: "
        let details["gui_update_vm_annotations"]["-type"] = "(Annotation type: "
        let details["gui_update_vm_annotations"]["-text"] = "(String to display)"
        let details["gui_update_vm_annotations"]["-color"] = "(Color, default: bucket color)"
        let details["gui_update_vm_annotations"]["-pattern"] = "(Fill pattern, default: none)"
        let details["gui_update_vm_annotations"]["-line_style"] = ""
        let details["gui_update_vm_annotations"]["-width"] = "(Line width, default: 1)"
        let details["gui_update_vm_annotations"]["-center"] = "()"
        let details["gui_update_vm_annotations"]["-info_tip"] = "(Info tip)"
        let details["gui_update_vm_annotations"]["-query_text"] = ""
        let details["gui_update_vm_annotations"]["-query_command"] = ""
   let details["gui_write_timing_paths"]={}
        let details["gui_write_timing_paths"]["-file"] = "(Name of the output file to which to write the timing paths)"
        let details["gui_write_timing_paths"]["-overwrite"] = "(Overwrite existing output file)"
        let details["gui_write_timing_paths"]["-tag"] = "(User can tag paths file with some arbitrary string.)"
        let details["gui_write_timing_paths"]["-comment"] = "(User comment for paths file.)"
   let details["help"]={}
        let details["help"]["-verbose"] = "(Display options like -help)"
        let details["help"]["-groups"] = "(Display command groups only)"
   let details["help_app_options"]={}
        let details["help_app_options"]["-verbose"] = "(Display application options properties)"
        let details["help_app_options"]["-scope"] = "(Scope of application options: "
        let details["help_app_options"]["-category"] = "(Category of application option)"
   let details["help_attributes"]={}
        let details["help_attributes"]["-verbose"] = "(Display attribute properties)"
        let details["help_attributes"]["-application"] = "(Only display application defined attributes)"
        let details["help_attributes"]["-user"] = "(Only display user defined attributes)"
   let details["history"]={}
        let details["history"]["-h"] = "(Display history without leading numbers)"
        let details["history"]["-r"] = "(Display history in reverse order)"
   let details["identify_channels"]={}
        let details["identify_channels"]["-horizontal_threshold"] = ""
        let details["identify_channels"]["-vertical_threshold"] = ""
        let details["identify_channels"]["-cross_area"] = "(identify cross areas)"
        let details["identify_channels"]["-cross_area_width"] = ""
        let details["identify_channels"]["-cross_area_height"] = ""
        let details["identify_channels"]["-output_filename"] = ""
        let details["identify_channels"]["-cut_polyrect"] = "(cut polyrect to rect)"
   let details["identify_multibit"]={}
        let details["identify_multibit"]["-register"] = "(Identify registers for banking)"
        let details["identify_multibit"]["-mv_cell"] = "(Identify LS and ISO cells for banking)"
        let details["identify_multibit"]["-input_map_file"] = ""
        let details["identify_multibit"]["-output_file"] = ""
        let details["identify_multibit"]["-apply"] = "(Modify netlist by replacing single-bit cells with multi-bit cell)"
        let details["identify_multibit"]["-slack_threshold_file"] = ""
        let details["identify_multibit"]["-slack_threshold"] = ""
        let details["identify_multibit"]["-exclude_instance"] = ""
        let details["identify_multibit"]["-exclude_library_cells"] = ""
        let details["identify_multibit"]["-no_dft_opt"] = "(disable scan chain optimization before banking)"
        let details["identify_multibit"]["-cells"] = "(cells to be considered for multibit banking)"
   let details["index_collection"]={}
   let details["initialize_floorplan"]={}
        let details["initialize_floorplan"]["-control_type"] = ""
        let details["initialize_floorplan"]["-boundary"] = "(Specifies the shape to be used)"
        let details["initialize_floorplan"]["-core_utilization"] = ""
        let details["initialize_floorplan"]["-shape"] = "(boundary shape, default is rectangular (Rect): "
        let details["initialize_floorplan"]["-orientation"] = ""
        let details["initialize_floorplan"]["-side_ratio"] = ""
        let details["initialize_floorplan"]["-side_length"] = ""
        let details["initialize_floorplan"]["-core_offset"] = ""
        let details["initialize_floorplan"]["-row_core_ratio"] = ""
        let details["initialize_floorplan"]["-keep_boundary"] = "(keep existing boundary)"
        let details["initialize_floorplan"]["-keep_pg_route"] = "(keep pg routes)"
        let details["initialize_floorplan"]["-keep_detail_route"] = "(keep routes of all nets except pg net)"
        let details["initialize_floorplan"]["-keep_placement"] = ""
        let details["initialize_floorplan"]["-keep_objects"] = ""
        let details["initialize_floorplan"]["-origin_offset"] = ""
        let details["initialize_floorplan"]["-coincident_boundary"] = ""
        let details["initialize_floorplan"]["-flip_first_row"] = ""
        let details["initialize_floorplan"]["-pin_snap"] = "(snap pin to wire track: "
        let details["initialize_floorplan"]["-honor_pad_limit"] = "(adjust core and die size to honor pad limit designs)"
        let details["initialize_floorplan"]["-site_def"] = ""
        let details["initialize_floorplan"]["-use_site_row"] = "(create siteRow)"
   let details["insert_buffer"]={}
        let details["insert_buffer"]["-lib_cell"] = ""
        let details["insert_buffer"]["-new_net_names"] = ""
        let details["insert_buffer"]["-new_cell_names"] = ""
        let details["insert_buffer"]["-no_of_cells"] = "(no of buffer to add: "
        let details["insert_buffer"]["-inverter_pair"] = "(Add a pair of inverter cells instead of a buffer)"
   let details["insert_via_ladders"]={}
        let details["insert_via_ladders"]["-clean"] = "(false|true)]  (Remove existing via ladders before inserting new via ladders (default false))"
        let details["insert_via_ladders"]["-allow_drcs"] = "(false|true)]"
        let details["insert_via_ladders"]["-ignore_routing_shape_drcs"] = "(false|true)]"
        let details["insert_via_ladders"]["-verbose"] = "(false|true)]"
        let details["insert_via_ladders"]["-allow_patching"] = "(false|true)]"
        let details["insert_via_ladders"]["-strictly_honor_cut_table"] = "(false|true)]"
        let details["insert_via_ladders"]["-ignore_rippable_shapes"] = "(false|true)]"
        let details["insert_via_ladders"]["-nets"] = "(the nets for via ladder insertion (default all))"
        let details["insert_via_ladders"]["-user_debug"] = "(false|true)]"
        let details["insert_via_ladders"]["-ndr_on_top_layer_only"] = "(false|true)]"
        let details["insert_via_ladders"]["-relax_pin_layer_metal_spacing_rules"] = "(false|true)]"
        let details["insert_via_ladders"]["-relax_line_end_via_enclosure_rule"] = "(false|true)]"
        let details["insert_via_ladders"]["-remove_routing_shapes_below_net_via_ladder_top_layer"] = "(false|true)]"
        let details["insert_via_ladders"]["-shift_vias_on_transition_layers"] = "(false|true)]"
        let details["insert_via_ladders"]["-pattern_must_join_over_pin_layer"] = ""
        let details["insert_via_ladders"]["-connect_within_metal"] = "(false|true)]"
   let details["legalize_placement"]={}
        let details["legalize_placement"]["-cells"] = "(List of cells to be legalized)"
        let details["legalize_placement"]["-moveable_distance"] = ""
        let details["legalize_placement"]["-boundary"] = "(Legalize the cells within the boundary where its syntax can be {{{llx lly} {urx ury}} | {{x1 y1} {x2 y2} ...}})"
        let details["legalize_placement"]["-incremental"] = "(Perform incremental legalization only for illegal cells)"
        let details["legalize_placement"]["-post_route"] = "(Run in post-route mode)"
        let details["legalize_placement"]["-priority"] = "(Specify priority on cells. Valid string is low, medium, high. Default is low)"
   let details["legalize_rp_groups"]={}
        let details["legalize_rp_groups"]["-legalize_over_rp"] = "(Specified Relative Placement groups will be legalized over other unspecified Relative placement groups)"
   let details["link"]={}
        let details["link"]["-force"] = "(Force block to relink)"
        let details["link"]["-rebind"] = "(Rebind all references)"
        let details["link"]["-incremental"] = "(Only update unresolved references)"
        let details["link"]["-verbose"] = "(Verbose messages from the linker)"
   let details["link_block"]={}
        let details["link_block"]["-force"] = "(Force block to relink)"
        let details["link_block"]["-rebind"] = "(Rebind all references)"
        let details["link_block"]["-incremental"] = "(Only update unresolved references)"
        let details["link_block"]["-verbose"] = "(Verbose messages from the linker)"
   let details["link_design"]={}
        let details["link_design"]["-force"] = "(Force block to relink)"
        let details["link_design"]["-rebind"] = "(Rebind all references)"
        let details["link_design"]["-incremental"] = "(Only update unresolved references)"
        let details["link_design"]["-verbose"] = "(Verbose messages from the linker)"
   let details["list_attributes"]={}
        let details["list_attributes"]["-application"] = "(List application attributes as well)"
        let details["list_attributes"]["-class"] = "(List attributes of this class only: "
        let details["list_attributes"]["-nosplit"] = "(Do not split lines when columns overflow)"
   let details["list_blocks"]={}
        let details["list_blocks"]["-ref_libs"] = "(List blocks from the ref_lib list)"
        let details["list_blocks"]["-lib_cells"] = "(List blocks from lib_cell libraries)"
   let details["list_commands"]={}
        let details["list_commands"]["-status"] = ""
        let details["list_commands"]["-options"] = "(list of options of the commands will also be shown.)"
   let details["list_constraints"]={}
        let details["list_constraints"]["-significant_digits"] = ""
        let details["list_constraints"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["list_licenses"]={}
   let details["load_block_constraints"]={}
        let details["load_block_constraints"]["-type"] = "(List of constraint types)"
        let details["load_block_constraints"]["-all_blocks"] = "(Load constraints for all child blocks)"
        let details["load_block_constraints"]["-blocks"] = ""
        let details["load_block_constraints"]["-host_options"] = ""
        let details["load_block_constraints"]["-work_dir"] = "(Specify the directory for block scripts and log files)"
   let details["load_busplans"]={}
        let details["load_busplans"]["-xml_file"] = "(Load busplan details from an XML file)"
        let details["load_busplans"]["-only_create"] = "(Only create start/end groups of busplans.)"
        let details["load_busplans"]["-replace_existing"] = "(Overwrite existing busplans with the same name(s).)"
        let details["load_busplans"]["-verbose"] = "(show details of busplan loading)"
        let details["load_busplans"]["-buses"] = "(buses to create)"
   let details["load_constraints"]={}
        let details["load_constraints"]["-promote"] = "(attempt to promote constraints from blocks with changed view)"
        let details["load_constraints"]["-auto_clock"] = "(automatically associate clocks in blocks: "
        let details["load_constraints"]["-force"] = "(don't error out when constraints mismatch with the design)"
   let details["load_metal_pattern_density"]={}
   let details["load_upf"]={}
        let details["load_upf"]["-scope"] = "(Hierarchical instance scope)"
        let details["load_upf"]["-noecho"] = "(Do not echo commands)"
        let details["load_upf"]["-strict_check"] = ""
        let details["load_upf"]["-supplemental"] = ""
   let details["magnet_placement"]={}
        let details["magnet_placement"]["-mark_fixed"] = "(mark cells as fixed after placement)"
        let details["magnet_placement"]["-move_fixed"] = "(allow fixed cell to be moved)"
        let details["magnet_placement"]["-mark_legalize_only"] = "(mark cells as legalize_only after placement)"
        let details["magnet_placement"]["-move_legalize_only"] = "(allow legalize_only cell to be moved)"
        let details["magnet_placement"]["-stop_by_sequential_cells"] = ""
        let details["magnet_placement"]["-stop_on_sequential_cells"] = ""
        let details["magnet_placement"]["-exclude_buffers"] = "(skip through buffers in levels)"
        let details["magnet_placement"]["-avoid_soft_blockage"] = "(dont allow cells to be placed over soft blockages)"
        let details["magnet_placement"]["-only_report_magnet_cells"] = ""
        let details["magnet_placement"]["-get_collection"] = "(return cells as collection)"
        let details["magnet_placement"]["-logical_levels"] = ""
        let details["magnet_placement"]["-multiple_long_port_mode"] = ""
        let details["magnet_placement"]["-hierarchy_mode"] = ""
        let details["magnet_placement"]["-cells"] = "(list of cells to be pulled)"
        let details["magnet_placement"]["-stop_points"] = ""
   let details["man"]={}
        let details["man"]["-html"] = "(Display in html.)"
   let details["map_freeze_silicon"]={}
        let details["map_freeze_silicon"]["-eco_cell"] = "(eco cell to be mapped)"
        let details["map_freeze_silicon"]["-spare_cell"] = "(spare cell to map eco cell)"
        let details["map_freeze_silicon"]["-map_file"] = "(name of map file)"
        let details["map_freeze_silicon"]["-filler_map_strategy"] = "( pack_left | pack_right | pack_top | pack_bottom | closest )]"
        let details["map_freeze_silicon"]["-lib_cells_for_filler_recovery"] = ""
   let details["map_isolation_cell"]={}
        let details["map_isolation_cell"]["-domain"] = "(The domain on which the isolation strategy will apply)"
        let details["map_isolation_cell"]["-lib_cells"] = ""
   let details["map_level_shifter_cell"]={}
        let details["map_level_shifter_cell"]["-domain"] = "(The domain on which the level shifter strategy will apply)"
        let details["map_level_shifter_cell"]["-lib_cells"] = ""
   let details["map_power_switch"]={}
        let details["map_power_switch"]["-domain"] = "(The power domain where this power switch is to be created)"
        let details["map_power_switch"]["-lib_cells"] = ""
   let details["map_retention_cell"]={}
        let details["map_retention_cell"]["-domain"] = "(Specify the power domain of the strategy)"
        let details["map_retention_cell"]["-elements"] = ""
        let details["map_retention_cell"]["-lib_cells"] = ""
        let details["map_retention_cell"]["-lib_cell_type"] = ""
        let details["map_retention_cell"]["-lib_model_name"] = ""
   let details["mark_clock_trees"]={}
        let details["mark_clock_trees"]["-clocks"] = "(List of clocks)"
        let details["mark_clock_trees"]["-clear"] = "(clear the attributes on clock trees)"
        let details["mark_clock_trees"]["-dont_touch"] = "(set dont_touch attribute on clock trees)"
        let details["mark_clock_trees"]["-synthesized"] = "(mark synthesized attributes on clock trees)"
        let details["mark_clock_trees"]["-routing_rules"] = "(propagate NDR and layer lists on clock trees)"
        let details["mark_clock_trees"]["-fix_sinks"] = "(Mark physical_status attribute of clock sinks as fixed)"
        let details["mark_clock_trees"]["-clock_cell_spacing"] = "(propagate clock cell spacing attribute on cell)"
        let details["mark_clock_trees"]["-freeze_routing"] = "(Mark physical_status attribute on net as locked)"
   let details["mem"]={}
   let details["merge_abstract"]={}
        let details["merge_abstract"]["-host_options"] = ""
        let details["merge_abstract"]["-blocks"] = ""
        let details["merge_abstract"]["-all_blocks"] = "(Create abstract view for all blocks)"
        let details["merge_abstract"]["-force"] = "(Force merging regardless of the state of the views)"
   let details["merge_clock_gates"]={}
        let details["merge_clock_gates"]["-clocks"] = "(List of clocks)"
   let details["merge_objects"]={}
   let details["merge_stream"]={}
        let details["merge_stream"]["-merge_files"] = ""
        let details["merge_stream"]["-format"] = ""
        let details["merge_stream"]["-rename_cell"] = ""
        let details["merge_stream"]["-merge_cell_shapes"] = "(Merge shapes of same name cells)"
        let details["merge_stream"]["-rename_conflicting_cell"] = ""
        let details["merge_stream"]["-merge_conflict_suffix"] = ""
        let details["merge_stream"]["-compress_gds"] = "(GZIP the output GDSII file)"
        let details["merge_stream"]["-oasis_compression_level"] = ""
        let details["merge_stream"]["-cell_log_file"] = ""
        let details["merge_stream"]["-units"] = "(User defined database-unit)"
        let details["merge_stream"]["-top_cell"] = "(Set the top cell name)"
        let details["merge_stream"]["-verbose"] = "(Enable detailed messaging)"
   let details["modify_busplan"]={}
        let details["modify_busplan"]["-add_guide"] = "(add a guide element to the busplan)"
        let details["modify_busplan"]["-add_register"] = "(add a virtual register element to the busplan)"
        let details["modify_busplan"]["-move_element"] = "(change an element's location)"
        let details["modify_busplan"]["-balance_registers"] = "(modify busplan so each branch has equal number of registers)"
        let details["modify_busplan"]["-remove_elements"] = ""
        let details["modify_busplan"]["-reconnect_elements"] = ""
        let details["modify_busplan"]["-change_rule"] = "(change the net estimation rule for this busplan)"
        let details["modify_busplan"]["-after"] = "(order or insert elements in the busplan after this one)"
        let details["modify_busplan"]["-before"] = "(insert elements in the bus before this one)"
        let details["modify_busplan"]["-location"] = "(where to place the object)"
        let details["modify_busplan"]["-name"] = "(name of added element)"
        let details["modify_busplan"]["-rename"] = "(new name of busplan)"
        let details["modify_busplan"]["-load_launch_capture_budget"] = ""
   let details["modify_rp_groups"]={}
        let details["modify_rp_groups"]["-add_rows"] = "(specifies it will insert rows into rp groups)"
        let details["modify_rp_groups"]["-remove_rows"] = ""
        let details["modify_rp_groups"]["-add_columns"] = ""
        let details["modify_rp_groups"]["-remove_columns"] = ""
        let details["modify_rp_groups"]["-swap_rows"] = ""
        let details["modify_rp_groups"]["-swap_columns"] = ""
        let details["modify_rp_groups"]["-flip_row"] = ""
        let details["modify_rp_groups"]["-flip_column"] = ""
   let details["move_block"]={}
        let details["move_block"]["-force"] = "(override a modified destination block)"
        let details["move_block"]["-from_block"] = "(Source block objects or name)"
        let details["move_block"]["-to_block"] = "(Destination block name [libName:]blockName[/labelName][.viewName])"
   let details["move_block_origin"]={}
        let details["move_block_origin"]["-design"] = "(Top design for finding objects)"
        let details["move_block_origin"]["-to"] = "(The coordinate to move the block origin to)"
   let details["move_lib"]={}
        let details["move_lib"]["-from_lib"] = "(Source library)"
        let details["move_lib"]["-to_lib"] = "(Name of destination library)"
        let details["move_lib"]["-force"] = "(override the destination library even if it is modified)"
   let details["move_objects"]={}
        let details["move_objects"]["-delta"] = "(delta by which the objects are to be moved)"
        let details["move_objects"]["-from"] = "(move from point)"
        let details["move_objects"]["-to"] = "(move to point)"
        let details["move_objects"]["-x"] = "(new x-coordinate of the left edge of the object)"
        let details["move_objects"]["-y"] = "(new y-coordinate of the bottom edge of the object)"
        let details["move_objects"]["-rotate_by"] = "(amount to rotate by: "
        let details["move_objects"]["-group"] = "(rotate as group)"
   let details["open_attachment"]={}
        let details["open_attachment"]["-mode"] = "(mode for opening the file)"
        let details["open_attachment"]["-of_object"] = ""
   let details["open_block"]={}
        let details["open_block"]["-edit"] = "(open block in edit mode)"
        let details["open_block"]["-read"] = "(open block in read mode)"
        let details["open_block"]["-check"] = "(return block if it is already in memory)"
        let details["open_block"]["-ref_libs_for_edit"] = "(Open module ref libs for edit)"
   let details["open_drc_error_data"]={}
        let details["open_drc_error_data"]["-file_name"] = ""
        let details["open_drc_error_data"]["-readwrite"] = "(open error data in read-write mode)"
        let details["open_drc_error_data"]["-readonly"] = "(open error data in read-only mode)"
        let details["open_drc_error_data"]["-checkonly"] = "(return error datda if it is already in memory)"
   let details["open_ems_database"]={}
   let details["open_lib"]={}
        let details["open_lib"]["-read"] = "(Open library for read)"
        let details["open_lib"]["-edit"] = "(Open library for edit)"
        let details["open_lib"]["-ref_libs_for_edit"] = "(Open module ref libs for edit)"
   let details["optimize_dft"]={}
        let details["optimize_dft"]["-clock_aware"] = "(bool)"
   let details["optimize_rdl_routes"]={}
        let details["optimize_rdl_routes"]["-layer"] = ""
        let details["optimize_rdl_routes"]["-nets"] = ""
        let details["optimize_rdl_routes"]["-nets_in_file"] = ""
        let details["optimize_rdl_routes"]["-reserve_power_resources"] = "(false|true)]"
        let details["optimize_rdl_routes"]["-objects"] = ""
   let details["optimize_routability"]={}
        let details["optimize_routability"]["-drc_rules"] = "(DRC rules)"
        let details["optimize_routability"]["-layer_rules"] = ""
        let details["optimize_routability"]["-keepout_width"] = "(Keepout width in microns)"
        let details["optimize_routability"]["-flip"] = "(Flip cells)"
        let details["optimize_routability"]["-route"] = "(Perform eco route)"
        let details["optimize_routability"]["-remove_keepouts"] = "(Remove all keepouts added by optimize_routability)"
        let details["optimize_routability"]["-check_drc_rules"] = "(Print information about DRC rules)"
   let details["optimize_routes"]={}
        let details["optimize_routes"]["-nets"] = "(the nets to be optimized)"
        let details["optimize_routes"]["-reroute_all_shapes_in_nets"] = "(false|true)]"
        let details["optimize_routes"]["-max_detail_route_iterations"] = ""
   let details["option"]={}
   let details["parallel_execute"]={}
        let details["parallel_execute"]["-commands_only"] = "(Only commands are given without log files)"
        let details["parallel_execute"]["-list_allowed_commands"] = ""
        let details["parallel_execute"]["-max_cores"] = "(Maximum number of cores for child processes: "
   let details["parse_proc_arguments"]={}
        let details["parse_proc_arguments"]["-args"] = "(Argument list to be parsed)"
   let details["part"]={}
   let details["place_eco_cells"]={}
        let details["place_eco_cells"]["-cells"] = "(List of cells)"
        let details["place_eco_cells"]["-eco_changed_cells"] = "(place the cells changed by ECO operations)"
        let details["place_eco_cells"]["-unplaced_cells"] = "(place all unplaced cells)"
        let details["place_eco_cells"]["-channel_aware"] = "(channel_aware)"
        let details["place_eco_cells"]["-no_legalize"] = "(do not legalize)"
        let details["place_eco_cells"]["-legalize_only"] = "(only perform legalization on given cells that already have locations)"
        let details["place_eco_cells"]["-legalize_mode"] = ""
        let details["place_eco_cells"]["-displacement_threshold"] = ""
        let details["place_eco_cells"]["-max_displacement_threshold"] = ""
        let details["place_eco_cells"]["-fixed_connection_net_weight"] = ""
        let details["place_eco_cells"]["-honor_user_net_weight"] = ""
        let details["place_eco_cells"]["-use_virtual_connection"] = ""
        let details["place_eco_cells"]["-remove_filler_references"] = ""
        let details["place_eco_cells"]["-max_fanout"] = ""
        let details["place_eco_cells"]["-ignore_pin_connection"] = ""
   let details["place_freeze_silicon"]={}
        let details["place_freeze_silicon"]["-cells"] = "(List of cells)"
        let details["place_freeze_silicon"]["-lib_cells_for_filler_recovery"] = ""
        let details["place_freeze_silicon"]["-min_filler_distance"] = ""
        let details["place_freeze_silicon"]["-no_spare_cell_swapping"] = ""
        let details["place_freeze_silicon"]["-map_spare_cells_only"] = ""
        let details["place_freeze_silicon"]["-write_map_file"] = ""
   let details["place_io"]={}
        let details["place_io"]["-rule"] = "(specify name of routing rule)"
        let details["place_io"]["-matching_types"] = ""
        let details["place_io"]["-include_unassigned_pads"] = ""
        let details["place_io"]["-incremental"] = "(place IO drivers according to user specified locations)"
        let details["place_io"]["-io_guide"] = ""
        let details["place_io"]["-pad_assignment_file"] = ""
        let details["place_io"]["-match_terminals_to_bumps"] = ""
        let details["place_io"]["-bump_assignment_only"] = ""
   let details["place_opt"]={}
        let details["place_opt"]["-list_only"] = "(List sub-steps of place_opt flow [ initial_place initial_drc initial_opto final_place final_opto ])"
        let details["place_opt"]["-from"] = "(Run subset of place_opt flow starting with specified step)"
        let details["place_opt"]["-to"] = "(Run subset of place_opt flow ending with specified step)"
   let details["place_pins"]={}
        let details["place_pins"]["-use_existing_routing"] = ""
        let details["place_pins"]["-nets"] = "(Place block pins that connected to nets.)"
        let details["place_pins"]["-exclude_nets"] = "(Place all the block pins except those nets.)"
        let details["place_pins"]["-nets_to_exclude_from_routing"] = ""
        let details["place_pins"]["-pins"] = "(Place selected block pins.)"
        let details["place_pins"]["-ports"] = "(Place selected top level terminals.)"
        let details["place_pins"]["-cells"] = "(Place block pins on selected block cells.)"
        let details["place_pins"]["-self"] = "(Only place pins on current design)"
   let details["pop_up_objects"]={}
        let details["pop_up_objects"]["-cells"] = ""
        let details["pop_up_objects"]["-blocks"] = ""
   let details["print_suppressed_messages"]={}
   let details["printvar"]={}
        let details["printvar"]["-application"] = "(Display application variables only)"
        let details["printvar"]["-user_defined"] = "(Display user-defined variables only)"
   let details["promote_clock_data"]={}
        let details["promote_clock_data"]["-auto_clock"] = "(automatically associate clocks in blocks: "
        let details["promote_clock_data"]["-balance_points"] = "(promote clock balance points)"
        let details["promote_clock_data"]["-mesh_annotations"] = "(promote mesh annotations)"
        let details["promote_clock_data"]["-cells"] = "(Cells of physical hierarchy)"
   let details["promote_constraints"]={}
        let details["promote_constraints"]["-auto_clock"] = "(automatically associate clocks in blocks: "
        let details["promote_constraints"]["-cts"] = "(promote Clock Tree Synthesis constraints)"
        let details["promote_constraints"]["-force"] = "(don't error out when constraints mismatch with the design)"
   let details["propagate_3d_connections"]={}
        let details["propagate_3d_connections"]["-nets"] = ""
        let details["propagate_3d_connections"]["-check_only"] = "(bool)"
   let details["propagate_3d_matching_types"]={}
        let details["propagate_3d_matching_types"]["-check_only"] = "(bool)"
        let details["propagate_3d_matching_types"]["-force"] = "(bool)"
        let details["propagate_3d_matching_types"]["-from"] = ""
        let details["propagate_3d_matching_types"]["-to"] = ""
        let details["propagate_3d_matching_types"]["-matching_types"] = ""
   let details["propagate_pin_mask_constraint"]={}
   let details["propagate_pin_mask_to_via_metal"]={}
        let details["propagate_pin_mask_to_via_metal"]["-block"] = "(Block to be processed for via lower-overhang color changes)"
   let details["propagate_switching_activity"]={}
        let details["propagate_switching_activity"]["-modes"] = "(List of modes in which to propagate)"
        let details["propagate_switching_activity"]["-corners"] = "(List of corners in which to propagate)"
        let details["propagate_switching_activity"]["-scenarios"] = ""
   let details["push_down_clock_trunks"]={}
        let details["push_down_clock_trunks"]["-clock"] = "(Clock)"
   let details["push_down_objects"]={}
        let details["push_down_objects"]["-cells"] = ""
   let details["push_rdl_routes"]={}
        let details["push_rdl_routes"]["-layer"] = ""
        let details["push_rdl_routes"]["-nets"] = ""
        let details["push_rdl_routes"]["-nets_in_file"] = ""
        let details["push_rdl_routes"]["-direction"] = "(up|down|left|right)]"
        let details["push_rdl_routes"]["-mode"] = "(net|neighbor)] (specifies the pushing mode (default net): "
        let details["push_rdl_routes"]["-sweep_range"] = ""
        let details["push_rdl_routes"]["-bounding_box"] = ""
        let details["push_rdl_routes"]["-objects"] = ""
   let details["pwd"]={}
   let details["query_objects"]={}
        let details["query_objects"]["-verbose"] = "(Display type of each object)"
        let details["query_objects"]["-truncate"] = "(Truncate display to n elements.)"
        let details["query_objects"]["-class"] = "(If object_spec is a name, this is its class)"
   let details["query_qor_snapshot"]={}
        let details["query_qor_snapshot"]["-name"] = "(QoR snapshot name )"
        let details["query_qor_snapshot"]["-directory"] = ""
        let details["query_qor_snapshot"]["-type"] = "(min or max: "
        let details["query_qor_snapshot"]["-output_file"] = ""
        let details["query_qor_snapshot"]["-display"] = "(display interactive GUI browser (do not generate text/html output))"
        let details["query_qor_snapshot"]["-sort_by"] = "(column to sort results by)"
        let details["query_qor_snapshot"]["-group_by"] = "(column to group results by: "
        let details["query_qor_snapshot"]["-columns"] = "(columns to show in output)"
        let details["query_qor_snapshot"]["-and"] = "(filters to use AND logic with)"
        let details["query_qor_snapshot"]["-filters"] = "(filters to apply to timing paths)"
   let details["quit"]={}
   let details["read_aif"]={}
        let details["read_aif"]["-use_port_name"] = "(Net connection of the bump will be used as port name)"
        let details["read_aif"]["-ignore_assign_nets"] = "(Only the bumps will be placed ignoring net assignment)"
        let details["read_aif"]["-pad_to_ref_list"] = ""
   let details["read_cell_expansion"]={}
        let details["read_cell_expansion"]["-input"] = "(Specify the file name for output)"
        let details["read_cell_expansion"]["-scale_factor"] = "(Specify the differnce in units between tools)"
   let details["read_def"]={}
        let details["read_def"]["-design"] = "(Top design for finding objects)"
        let details["read_def"]["-syntax_only"] = "(Only do syntax/semantic checks)"
        let details["read_def"]["-no_incremental"] = "(Removes all pre-existing physical annotations before reading in the physical information in the DEF file)"
        let details["read_def"]["-convert_sites"] = ""
        let details["read_def"]["-add_def_only_objects"] = ""
        let details["read_def"]["-traverse_physical_hierarchy"] = ""
   let details["read_drc_error_file"]={}
        let details["read_drc_error_file"]["-drc_type"] = "(Specify type of the drc error file (default: calibre))"
        let details["read_drc_error_file"]["-error_data"] = "(Specify the name of error data (default: <name of block>)))"
        let details["read_drc_error_file"]["-file"] = "(Specify the name of input file)"
   let details["read_lib_package"]={}
        let details["read_lib_package"]["-destination"] = ""
        let details["read_lib_package"]["-overwrite"] = "(Overwrites the existing library, if the unpacked library has same name)"
   let details["read_name_map"]={}
   let details["read_net_estimation_rules"]={}
        let details["read_net_estimation_rules"]["-filename"] = "(name of XML file to read)"
   let details["read_ocvm"]={}
        let details["read_ocvm"]["-corners"] = "(List of corners)"
   let details["read_parasitic_tech"]={}
        let details["read_parasitic_tech"]["-tlup"] = "(TLU+ files to read)"
        let details["read_parasitic_tech"]["-layermap"] = ""
        let details["read_parasitic_tech"]["-name"] = "(Parasitic tech model name)"
   let details["read_parasitics"]={}
        let details["read_parasitics"]["-corner_spef"] = ""
        let details["read_parasitics"]["-block"] = "(block name to read spef. If no specify, it is for current design block)"
        let details["read_parasitics"]["-validate"] = "(do validation)"
   let details["read_pin_constraints"]={}
        let details["read_pin_constraints"]["-file_name"] = "(Specifies the constraint file name to read-in)"
   let details["read_saif"]={}
        let details["read_saif"]["-strip_path"] = ""
        let details["read_saif"]["-path"] = "(Name of the target instance on which activity is to be annotated)"
        let details["read_saif"]["-scenarios"] = "(Scenarios for which to annotate SAIF)"
        let details["read_saif"]["-modes"] = "(Get activity for specified modes)"
        let details["read_saif"]["-corners"] = "(Get activity for specified corners)"
        let details["read_saif"]["-exclude_sdpd"] = "(Exclude SDPD information while merging the SAIF files)"
        let details["read_saif"]["-normalize"] = "(false|true)]"
        let details["read_saif"]["-nocase"] = "(Find objects ignoring name case)"
   let details["read_sdc"]={}
        let details["read_sdc"]["-echo"] = "(Echo all commands)"
        let details["read_sdc"]["-syntax_only"] = "(Only do syntax/semantic checks)"
        let details["read_sdc"]["-version"] = "(SDC Version (default is latest): "
   let details["read_signal_em_constraints"]={}
        let details["read_signal_em_constraints"]["-encrypted"] = "(Specify the Encrypted em file to read)"
        let details["read_signal_em_constraints"]["-format"] = "(Specify the em file format, ITF by default: "
   let details["read_tech_file"]={}
        let details["read_tech_file"]["-convert_sites"] = ""
   let details["read_tech_lef"]={}
        let details["read_tech_lef"]["-design"] = "(Top design for finding objects)"
        let details["read_tech_lef"]["-merge_action"] = ""
        let details["read_tech_lef"]["-syntax_only"] = "(Only do syntax/semantic checks)"
   let details["read_top_level_netlist"]={}
        let details["read_top_level_netlist"]["-connections"] = "(Single text file containing information of all the connections in the system)"
        let details["read_top_level_netlist"]["-output"] = "(Name of output netlist file)"
        let details["read_top_level_netlist"]["-design_name"] = "(Name of top-level design)"
        let details["read_top_level_netlist"]["-map_file"] = "(CSV file to map custom column names in connections file to standard Synopsys column names)"
        let details["read_top_level_netlist"]["-format"] = "(Format of output top-level design (verilog or design))"
        let details["read_top_level_netlist"]["-ignore_blocks"] = ""
   let details["read_verilog"]={}
        let details["read_verilog"]["-library"] = ""
        let details["read_verilog"]["-design"] = "(Design name)"
        let details["read_verilog"]["-top"] = "(Top module name)"
   let details["read_verilog_outline"]={}
        let details["read_verilog_outline"]["-library"] = ""
        let details["read_verilog_outline"]["-design"] = "(Design name)"
        let details["read_verilog_outline"]["-top"] = "(Top module name)"
        let details["read_verilog_outline"]["-partition"] = "(Use partition outline method)"
        let details["read_verilog_outline"]["-allocation"] = "(Use allocation outline method)"
        let details["read_verilog_outline"]["-target_block_size"] = ""
        let details["read_verilog_outline"]["-glue_cell_count"] = ""
        let details["read_verilog_outline"]["-target_cell_count"] = ""
        let details["read_verilog_outline"]["-large_threshold"] = ""
        let details["read_verilog_outline"]["-depth"] = "(Dense module depth)"
        let details["read_verilog_outline"]["-keep_port_depth"] = ""
        let details["read_verilog_outline"]["-dense_modules"] = ""
        let details["read_verilog_outline"]["-port_modules"] = ""
        let details["read_verilog_outline"]["-sparse_modules"] = ""
        let details["read_verilog_outline"]["-leaf_cells"] = ""
        let details["read_verilog_outline"]["-buffer_cells"] = ""
        let details["read_verilog_outline"]["-macro_cells"] = ""
   let details["read_virtual_pad_file"]={}
   let details["rebind_block"]={}
        let details["rebind_block"]["-verbose"] = "(Verbose messages)"
   let details["record_layout_editing"]={}
        let details["record_layout_editing"]["-start"] = "(start recording layout editing)"
        let details["record_layout_editing"]["-stop"] = "(stop recording layout editing)"
        let details["record_layout_editing"]["-output"] = "(file name to output change)"
   let details["record_signoff_eco_changes"]={}
        let details["record_signoff_eco_changes"]["-init"] = "(init DB for eco change recording)"
        let details["record_signoff_eco_changes"]["-start"] = "(start eco change recording)"
        let details["record_signoff_eco_changes"]["-stop"] = "(stop eco change recording and save)"
        let details["record_signoff_eco_changes"]["-input"] = "(pt eco solution file)"
        let details["record_signoff_eco_changes"]["-def"] = "(save DEF)"
        let details["record_signoff_eco_changes"]["-compress"] = "(compress DEF/Verilog)"
   let details["recover_rp_placement"]={}
        let details["recover_rp_placement"]["-all"] = "(Recover all RP groups)"
        let details["recover_rp_placement"]["-blockage"] = "(Consider blockages too and inflate BBOX of RP group)"
   let details["recycle_programmable_spare_cells"]={}
        let details["recycle_programmable_spare_cells"]["-cells"] = "(List of cells)"
        let details["recycle_programmable_spare_cells"]["-lib_cells_for_filler_recovery"] = ""
   let details["redirect"]={}
        let details["redirect"]["-append"] = "(Append output to the file)"
        let details["redirect"]["-tee"] = "(Tee output to the current output stream)"
        let details["redirect"]["-file"] = "(Output to a file (default))"
        let details["redirect"]["-compress"] = "(Compress when writing to file)"
        let details["redirect"]["-variable"] = "(Output to a variable)"
        let details["redirect"]["-channel"] = "(Output to a Tcl channel)"
   let details["redo"]={}
        let details["redo"]["-check_only"] = "(Report result without doing anything)"
        let details["redo"]["-marker"] = "(Marker to redo to)"
        let details["redo"]["-levels"] = "(Levels of commands to redo to)"
        let details["redo"]["-all"] = "(Redo to the most recent available state)"
        let details["redo"]["-silent"] = "(Print no messages)"
   let details["refine_opt"]={}
        let details["refine_opt"]["-list_only"] = "(List sub-steps of refine_opt flow [ initial_path_opt inc_place inc_opto final_path_opt ])"
        let details["refine_opt"]["-from"] = "(Run subset of refine_opt flow starting with specified step)"
        let details["refine_opt"]["-to"] = "(Run subset of refine_opt flow ending with specified step)"
        let details["refine_opt"]["-end_points"] = "(Optimize specific end points in refine_opt flow)"
        let details["refine_opt"]["-path_groups"] = "(Optimize specific path groups in refine_opt flow)"
        let details["refine_opt"]["-nets"] = "(Optimize specific nets in refine_opt flow)"
   let details["refine_placement"]={}
        let details["refine_placement"]["-congestion_effort"] = ""
        let details["refine_placement"]["-effort"] = "(Placement effort (default medium): "
        let details["refine_placement"]["-coordinates"] = ""
        let details["refine_placement"]["-perturbation_level"] = ""
   let details["refresh_performance_via_ladder_constraints"]={}
   let details["refresh_via_ladders"]={}
        let details["refresh_via_ladders"]["-nets"] = "(the nets for via ladder verification (default all))"
   let details["remove_abstract"]={}
   let details["remove_annotated_check"]={}
        let details["remove_annotated_check"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_annotated_check"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_annotated_check"]["-scenarios"] = ""
        let details["remove_annotated_check"]["-all"] = "(Remove all annotated checks)"
        let details["remove_annotated_check"]["-setup"] = "(setup arc sense)"
        let details["remove_annotated_check"]["-hold"] = "(hold arc sense)"
        let details["remove_annotated_check"]["-recovery"] = "(recovery arc sense)"
        let details["remove_annotated_check"]["-removal"] = "(removal arc sense)"
        let details["remove_annotated_check"]["-nochange_high"] = "(nochange_high arc sense)"
        let details["remove_annotated_check"]["-nochange_low"] = "(nochange_low arc sense)"
        let details["remove_annotated_check"]["-width"] = "(pulsewidth arc sense)"
        let details["remove_annotated_check"]["-period"] = "(period arc sense)"
        let details["remove_annotated_check"]["-rise"] = "(rise arc check value)"
        let details["remove_annotated_check"]["-fall"] = "(fall arc check value)"
        let details["remove_annotated_check"]["-clock"] = "(Clock rising or falling check: "
        let details["remove_annotated_check"]["-from"] = "(List of from pins/ports)"
        let details["remove_annotated_check"]["-to"] = "(List of to pins/ports)"
   let details["remove_annotated_delay"]={}
        let details["remove_annotated_delay"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_annotated_delay"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_annotated_delay"]["-scenarios"] = ""
        let details["remove_annotated_delay"]["-all"] = "(Remove all annotated delays)"
        let details["remove_annotated_delay"]["-from"] = "(List of from pins/ports)"
        let details["remove_annotated_delay"]["-to"] = "(List of to pins/ports)"
   let details["remove_annotated_power"]={}
        let details["remove_annotated_power"]["-scenarios"] = ""
        let details["remove_annotated_power"]["-all"] = "(Remove annotation on all cells)"
   let details["remove_annotated_transition"]={}
        let details["remove_annotated_transition"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_annotated_transition"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_annotated_transition"]["-scenarios"] = ""
        let details["remove_annotated_transition"]["-all"] = "(Remove all annotated transitions)"
   let details["remove_antenna_rules"]={}
        let details["remove_antenna_rules"]["-name"] = "(The name of the rule to be deleted)"
        let details["remove_antenna_rules"]["-library"] = "(The library to remove the antenna rules from)"
   let details["remove_attachments"]={}
        let details["remove_attachments"]["-of_object"] = ""
   let details["remove_attributes"]={}
        let details["remove_attributes"]["-quiet"] = "(Suppress error messages)"
        let details["remove_attributes"]["-objects"] = "(List of collections of objects)"
        let details["remove_attributes"]["-name"] = "(Attribute name)"
   let details["remove_blackbox_timing"]={}
   let details["remove_block_pin_constraints"]={}
        let details["remove_block_pin_constraints"]["-cells"] = "(Specifies the collection of blocks to remove pin constraints)"
        let details["remove_block_pin_constraints"]["-self"] = "(Remove pin constraints for current top design)"
        let details["remove_block_pin_constraints"]["-pin_spacing_control"] = "(Remove only the spacing control part of block pin constraints)"
   let details["remove_blocks"]={}
        let details["remove_blocks"]["-force"] = "(remove block with un-saved data)"
   let details["remove_bound_shapes"]={}
        let details["remove_bound_shapes"]["-verbose"] = "(To print verbose information)"
        let details["remove_bound_shapes"]["-all"] = "(To remove all bound shapes)"
        let details["remove_bound_shapes"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_boundary_cell_rules"]={}
        let details["remove_boundary_cell_rules"]["-left_boundary_cell"] = "(Whether to remove library cell or design for the left side)"
        let details["remove_boundary_cell_rules"]["-bottom_boundary_cells"] = ""
        let details["remove_boundary_cell_rules"]["-right_boundary_cell"] = "(Whether to remove library cell or design for the right side)"
        let details["remove_boundary_cell_rules"]["-top_boundary_cells"] = "(Whether to remove library cells or designs for the top side)"
        let details["remove_boundary_cell_rules"]["-bottom_left_outside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-bottom_right_outside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-top_left_outside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-top_right_outside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-bottom_left_inside_corner_cells"] = ""
        let details["remove_boundary_cell_rules"]["-bottom_right_inside_corner_cells"] = ""
        let details["remove_boundary_cell_rules"]["-top_left_inside_corner_cells"] = ""
        let details["remove_boundary_cell_rules"]["-top_right_inside_corner_cells"] = ""
        let details["remove_boundary_cell_rules"]["-top_tap_cell"] = "(Whether to remove library cell or design to be used for the top tap cell)"
        let details["remove_boundary_cell_rules"]["-bottom_tap_cell"] = "(Whether to remove library cell or design to be used for the bottom tap cell)"
        let details["remove_boundary_cell_rules"]["-tap_distance"] = "(Whether to remove the tap distance)"
        let details["remove_boundary_cell_rules"]["-prefix"] = "(Whether to remove the end cap inst prefix)"
        let details["remove_boundary_cell_rules"]["-separator"] = "(Whether to remove the end cap separator)"
        let details["remove_boundary_cell_rules"]["-insert_into_blocks"] = "(Whether to remove the insert into blocks rule)"
        let details["remove_boundary_cell_rules"]["-at_va_boundary"] = "(Whether to remove the at va boundary rule)"
        let details["remove_boundary_cell_rules"]["-no_1x"] = "(Whether to remove the no 1x rule)"
        let details["remove_boundary_cell_rules"]["-min_row_width"] = "(Whether to remove the min row width rule)"
        let details["remove_boundary_cell_rules"]["-min_horizontal_jog"] = "(Whether to remove the min horizontal jog rule)"
        let details["remove_boundary_cell_rules"]["-mirror_left_outside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-mirror_right_outside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-mirror_left_inside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-mirror_right_inside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-mirror_left_boundary_cell"] = ""
        let details["remove_boundary_cell_rules"]["-mirror_right_boundary_cell"] = ""
        let details["remove_boundary_cell_rules"]["-do_not_swap_top_and_bottom_inside_corner_cell"] = ""
        let details["remove_boundary_cell_rules"]["-all"] = "(Whether to remove all the boundary cell rules)"
   let details["remove_bounds"]={}
        let details["remove_bounds"]["-verbose"] = "(To print verbose information)"
        let details["remove_bounds"]["-all"] = "(To remove all bounds)"
        let details["remove_bounds"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_buffer"]={}
        let details["remove_buffer"]["-from"] = "(Starting driver for buffer removal)"
        let details["remove_buffer"]["-net"] = "(Net to remove buffers from)"
   let details["remove_buffer_trees"]={}
        let details["remove_buffer_trees"]["-from"] = "(a list of driver pins or nets for which buffer trees are to be removed)"
        let details["remove_buffer_trees"]["-source_of"] = "(a list of sink pins for which buffer trees are to be removed)"
        let details["remove_buffer_trees"]["-all"] = "(remove all buffer trees)"
        let details["remove_buffer_trees"]["-no_clustering"] = "(clsuering for negative sinks)"
        let details["remove_buffer_trees"]["-hfs_fanout_threshold"] = ""
        let details["remove_buffer_trees"]["-verbose"] = "(verbose)"
   let details["remove_buffers"]={}
        let details["remove_buffers"]["-from"] = "(Starting driver for buffer removal)"
        let details["remove_buffers"]["-net"] = "(Net to remove buffers from)"
   let details["remove_bundle_pin_constraints"]={}
        let details["remove_bundle_pin_constraints"]["-bundles"] = ""
        let details["remove_bundle_pin_constraints"]["-cells"] = "(Specify  the  block cells on which the constraints are removed.)"
        let details["remove_bundle_pin_constraints"]["-self"] = "(Specifies that the constraints applied  to the toplevel block are removed.)"
   let details["remove_bundles"]={}
   let details["remove_busplans"]={}
        let details["remove_busplans"]["-from"] = "(Remove part of an existing bus)"
   let details["remove_case_analysis"]={}
   let details["remove_cell"]={}
        let details["remove_cell"]["-design"] = "(Top design for finding objects)"
        let details["remove_cell"]["-all"] = "(Remove all cells)"
        let details["remove_cell"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_cells"]={}
        let details["remove_cells"]["-design"] = "(Top design for finding objects)"
        let details["remove_cells"]["-all"] = "(Remove all cells)"
        let details["remove_cells"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_clock"]={}
        let details["remove_clock"]["-all"] = "(Remove all clocks)"
   let details["remove_clock_balance_groups"]={}
        let details["remove_clock_balance_groups"]["-all"] = "(All clock balance groups)"
   let details["remove_clock_balance_points"]={}
        let details["remove_clock_balance_points"]["-clock"] = "(clocks)"
        let details["remove_clock_balance_points"]["-corners"] = ""
        let details["remove_clock_balance_points"]["-balance_points"] = ""
   let details["remove_clock_cell_spacings"]={}
        let details["remove_clock_cell_spacings"]["-clocks"] = "(List of clocks)"
        let details["remove_clock_cell_spacings"]["-lib_cells"] = ""
   let details["remove_clock_drivers"]={}
        let details["remove_clock_drivers"]["-prefix"] = "(Remove instances with this name prefix only)"
   let details["remove_clock_gating_check"]={}
        let details["remove_clock_gating_check"]["-setup"] = "(Remove clock gating setup time)"
        let details["remove_clock_gating_check"]["-hold"] = "(Remove clock gating hold time)"
        let details["remove_clock_gating_check"]["-rise"] = "(Only rise checks are considered)"
        let details["remove_clock_gating_check"]["-fall"] = "(Only fall checks are considered)"
        let details["remove_clock_gating_check"]["-high"] = "(Check is for the high level of the clock)"
        let details["remove_clock_gating_check"]["-low"] = "(Check is for the low level of the clock)"
   let details["remove_clock_groups"]={}
        let details["remove_clock_groups"]["-physically_exclusive"] = ""
        let details["remove_clock_groups"]["-logically_exclusive"] = "(Specify logically exclusive clock groups)"
        let details["remove_clock_groups"]["-asynchronous"] = "(Specify asynchronous clock groups)"
        let details["remove_clock_groups"]["-exclusive"] = "(Specify logically exclusive clock groups)"
        let details["remove_clock_groups"]["-name"] = "(List of clock group names)"
        let details["remove_clock_groups"]["-all"] = "(Remove all clock groups)"
   let details["remove_clock_latency"]={}
        let details["remove_clock_latency"]["-modes"] = "(remove latency for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_clock_latency"]["-corners"] = "(remove latency for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_clock_latency"]["-scenarios"] = ""
        let details["remove_clock_latency"]["-clock"] = "(List of relative clocks)"
        let details["remove_clock_latency"]["-source"] = "(Specify clock source latency)"
   let details["remove_clock_routing_rules"]={}
        let details["remove_clock_routing_rules"]["-clocks"] = "(List of clocks)"
        let details["remove_clock_routing_rules"]["-nets"] = "(List of nets)"
        let details["remove_clock_routing_rules"]["-net_type"] = "(net type in the clock tree: "
        let details["remove_clock_routing_rules"]["-rule"] = "(non-default routing rules)"
        let details["remove_clock_routing_rules"]["-default_rule"] = "(remove default routing rule)"
   let details["remove_clock_sense"]={}
        let details["remove_clock_sense"]["-clocks"] = "(List of clocks)"
        let details["remove_clock_sense"]["-all"] = "(Remove all defined clock senses)"
   let details["remove_clock_skew_groups"]={}
   let details["remove_clock_transition"]={}
        let details["remove_clock_transition"]["-modes"] = "(remove clock transition for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_clock_transition"]["-corners"] = "(remove clock transition for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_clock_transition"]["-scenarios"] = ""
   let details["remove_clock_tree_options"]={}
        let details["remove_clock_tree_options"]["-clocks"] = "(List of clocks)"
        let details["remove_clock_tree_options"]["-corners"] = "(Corner list)"
        let details["remove_clock_tree_options"]["-copy_exceptions_across_modes"] = ""
        let details["remove_clock_tree_options"]["-target_latency"] = "(target latency)"
        let details["remove_clock_tree_options"]["-target_skew"] = "(target skew)"
        let details["remove_clock_tree_options"]["-all"] = "(All target skew/latency)"
   let details["remove_clock_tree_reference_subset"]={}
        let details["remove_clock_tree_reference_subset"]["-clocks"] = "(List of clocks)"
   let details["remove_clock_trees"]={}
        let details["remove_clock_trees"]["-clocks"] = "(List of clocks)"
        let details["remove_clock_trees"]["-clock_repeaters_only"] = ""
        let details["remove_clock_trees"]["-keep_ideal_clock_attributes"] = ""
        let details["remove_clock_trees"]["-keep_struct"] = "(keep structure intact)"
   let details["remove_clock_trunk_endpoints"]={}
        let details["remove_clock_trunk_endpoints"]["-clock"] = "(Clocks)"
        let details["remove_clock_trunk_endpoints"]["-corners"] = "(Corners)"
   let details["remove_clock_uncertainty"]={}
        let details["remove_clock_uncertainty"]["-modes"] = "(remove uncertainty for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_clock_uncertainty"]["-corners"] = "(remove uncertainty for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_clock_uncertainty"]["-scenarios"] = ""
        let details["remove_clock_uncertainty"]["-from"] = "(List of from clocks)"
        let details["remove_clock_uncertainty"]["-rise_from"] = ""
        let details["remove_clock_uncertainty"]["-fall_from"] = ""
        let details["remove_clock_uncertainty"]["-to"] = "(List of to clocks)"
        let details["remove_clock_uncertainty"]["-rise_to"] = ""
        let details["remove_clock_uncertainty"]["-fall_to"] = ""
        let details["remove_clock_uncertainty"]["-rise"] = "(Inter-clock uncertainty is for rising clock edge)"
        let details["remove_clock_uncertainty"]["-fall"] = "(Inter-clock uncertainty is for falling clock edge)"
        let details["remove_clock_uncertainty"]["-setup"] = "(Clock uncertainty is for setup checks)"
        let details["remove_clock_uncertainty"]["-hold"] = "(Clock uncertainty is for hold checks)"
   let details["remove_clocks"]={}
        let details["remove_clocks"]["-all"] = "(Remove all clocks)"
   let details["remove_colors"]={}
   let details["remove_constraint_groups"]={}
        let details["remove_constraint_groups"]["-all"] = "(To remove all constraint groups)"
   let details["remove_corners"]={}
        let details["remove_corners"]["-all"] = "(Remove all corners)"
   let details["remove_custom_shields"]={}
        let details["remove_custom_shields"]["-nets"] = "(collection of nets)"
        let details["remove_custom_shields"]["-keep_session"] = "(false|true)]"
   let details["remove_data_check"]={}
        let details["remove_data_check"]["-modes"] = "(set data check for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_data_check"]["-corners"] = "(set data check for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_data_check"]["-scenarios"] = ""
        let details["remove_data_check"]["-from"] = "(From pin or port for check)"
        let details["remove_data_check"]["-rise_from"] = ""
        let details["remove_data_check"]["-fall_from"] = ""
        let details["remove_data_check"]["-to"] = "(To pin or port for check)"
        let details["remove_data_check"]["-rise_to"] = ""
        let details["remove_data_check"]["-fall_to"] = ""
        let details["remove_data_check"]["-setup"] = "(Remove setup check)"
        let details["remove_data_check"]["-hold"] = "(Remove hold check)"
        let details["remove_data_check"]["-all"] = "(Remove all checks)"
        let details["remove_data_check"]["-clock"] = "(Clock at the related pin/port of the check)"
   let details["remove_density_rules"]={}
        let details["remove_density_rules"]["-tech"] = "(Tech)"
        let details["remove_density_rules"]["-library"] = "(Library)"
        let details["remove_density_rules"]["-all"] = "(To remove all density rules)"
   let details["remove_dff_trace_filters"]={}
        let details["remove_dff_trace_filters"]["-type"] = "(type of filter: net or pin: "
        let details["remove_dff_trace_filters"]["-all"] = "(remove all filters for the specified blocks)"
        let details["remove_dff_trace_filters"]["-blocks"] = "(List of block names to apply to this filter set)"
        let details["remove_dff_trace_filters"]["-patterns"] = "(List of patterns to remove)"
   let details["remove_disable_clock_gating_check"]={}
   let details["remove_disable_timing"]={}
        let details["remove_disable_timing"]["-from"] = "(From pin on cell)"
        let details["remove_disable_timing"]["-to"] = "(To pin on cell)"
        let details["remove_disable_timing"]["-loop_break"] = "(indicate whether constraints coming from tool, not user)"
   let details["remove_drc_error_data"]={}
        let details["remove_drc_error_data"]["-force"] = "(Remove the error data even if there are multiple pending opens)"
   let details["remove_drc_error_types"]={}
        let details["remove_drc_error_types"]["-error_data"] = ""
   let details["remove_drc_errors"]={}
        let details["remove_drc_errors"]["-error_data"] = ""
   let details["remove_drive_resistance"]={}
        let details["remove_drive_resistance"]["-modes"] = "(remove drive resistance for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_drive_resistance"]["-corners"] = "(remove drive resistance for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_drive_resistance"]["-scenarios"] = ""
   let details["remove_driving_cell"]={}
        let details["remove_driving_cell"]["-modes"] = "(remove driving cell for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_driving_cell"]["-corners"] = "(remove driving cell for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_driving_cell"]["-scenarios"] = ""
        let details["remove_driving_cell"]["-min"] = "(Set minimum driving_cell info)"
        let details["remove_driving_cell"]["-max"] = "(Set maximum driving_cell info)"
        let details["remove_driving_cell"]["-rise"] = "(Set rise driving_cell info)"
        let details["remove_driving_cell"]["-fall"] = "(Set fall driving_cell info)"
        let details["remove_driving_cell"]["-clock"] = "(Transition is relative to this clock)"
        let details["remove_driving_cell"]["-clock_fall"] = "(Transition is relative to falling edge of the clock)"
   let details["remove_eco_bus_buffer_patterns"]={}
        let details["remove_eco_bus_buffer_patterns"]["-all"] = "(removed all)"
        let details["remove_eco_bus_buffer_patterns"]["-verbose"] = "(list removed patterns)"
   let details["remove_eco_repeater"]={}
        let details["remove_eco_repeater"]["-keep_net_name"] = "(net to keep)"
   let details["remove_edit_groups"]={}
        let details["remove_edit_groups"]["-verbose"] = "(To print verbose information)"
        let details["remove_edit_groups"]["-all"] = "(To remove all edit groups)"
        let details["remove_edit_groups"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_ems_rules"]={}
        let details["remove_ems_rules"]["-all"] = "(Remove all the user-defined rules)"
   let details["remove_feedthroughs"]={}
        let details["remove_feedthroughs"]["-cells"] = "(Specifies the collection of cells for feedthrough removal.)"
        let details["remove_feedthroughs"]["-nets"] = "(Specifies the collection of nets for feedthrough removal.)"
        let details["remove_feedthroughs"]["-include_original_feedthroughs"] = ""
   let details["remove_fill_cells"]={}
        let details["remove_fill_cells"]["-all"] = "(Remove all cells)"
   let details["remove_floorplan_rules"]={}
        let details["remove_floorplan_rules"]["-object_types"] = ""
        let details["remove_floorplan_rules"]["-lib_cells"] = ""
        let details["remove_floorplan_rules"]["-all"] = "(removes all the floorplan rules)"
   let details["remove_from_bound"]={}
   let details["remove_from_bundle"]={}
        let details["remove_from_bundle"]["-bundle"] = ""
        let details["remove_from_bundle"]["-all"] = "(Remove all occurences of the object from the bundle)"
   let details["remove_from_collection"]={}
        let details["remove_from_collection"]["-intersect"] = "(removes objects from collection1 not found in object_spec)"
   let details["remove_from_edit_group"]={}
   let details["remove_from_group"]={}
   let details["remove_from_io_guide"]={}
   let details["remove_from_io_ring"]={}
   let details["remove_from_matching_type"]={}
        let details["remove_from_matching_type"]["-auto_fix"] = "(To remove all non-existent objects)"
   let details["remove_from_multisource_clock_sink_group"]={}
        let details["remove_from_multisource_clock_sink_group"]["-name"] = "(group name of a set of sinks)"
        let details["remove_from_multisource_clock_sink_group"]["-sinks"] = "(list of clock sinks to be removed)"
   let details["remove_from_net"]={}
        let details["remove_from_net"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_from_net_bus"]={}
   let details["remove_from_pin_blockage"]={}
   let details["remove_from_pin_guide"]={}
   let details["remove_from_port_bus"]={}
   let details["remove_from_routing_corridor"]={}
   let details["remove_from_rp_group"]={}
        let details["remove_from_rp_group"]["-cells"] = "(Cells to be removed from RP Group)"
        let details["remove_from_rp_group"]["-rp_group"] = ""
        let details["remove_from_rp_group"]["-blockage"] = "(Name of the blockage to be removed fromRP group)"
   let details["remove_generated_clock"]={}
        let details["remove_generated_clock"]["-all"] = "(Remove all generated clocks)"
   let details["remove_generated_clocks"]={}
        let details["remove_generated_clocks"]["-all"] = "(Remove all generated clocks)"
   let details["remove_grids"]={}
        let details["remove_grids"]["-all"] = "(Remove all the existing grids in the current design)"
   let details["remove_groups"]={}
        let details["remove_groups"]["-verbose"] = "(To print verbose information)"
   let details["remove_host_options"]={}
        let details["remove_host_options"]["-all"] = "(Remove all defined hosts or pools)"
        let details["remove_host_options"]["-name"] = "(Name of host options to be removed)"
        let details["remove_host_options"]["-target"] = "(Target of host options to be removed: "
   let details["remove_ideal_latency"]={}
        let details["remove_ideal_latency"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_ideal_latency"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_ideal_latency"]["-scenarios"] = ""
        let details["remove_ideal_latency"]["-all"] = "(Remove all ideal latencies)"
        let details["remove_ideal_latency"]["-min"] = "(Min ideal latency)"
        let details["remove_ideal_latency"]["-max"] = "(Max ideal latency)"
        let details["remove_ideal_latency"]["-rise"] = "(Rise ideal latency)"
        let details["remove_ideal_latency"]["-fall"] = "(Fall ideal latency)"
   let details["remove_ideal_network"]={}
        let details["remove_ideal_network"]["-all"] = "(Remove ideal_network for all objects)"
   let details["remove_ideal_transition"]={}
        let details["remove_ideal_transition"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_ideal_transition"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_ideal_transition"]["-scenarios"] = ""
        let details["remove_ideal_transition"]["-all"] = "(Remove all ideal transitions)"
        let details["remove_ideal_transition"]["-min"] = "(Min ideal transition)"
        let details["remove_ideal_transition"]["-max"] = "(Max ideal transition)"
        let details["remove_ideal_transition"]["-rise"] = "(Rise ideal transition)"
        let details["remove_ideal_transition"]["-fall"] = "(Fall ideal transition)"
   let details["remove_ignored_layers"]={}
        let details["remove_ignored_layers"]["-min_routing_layer"] = "(Remove min routing layer)"
        let details["remove_ignored_layers"]["-max_routing_layer"] = "(Remove max routing layer)"
        let details["remove_ignored_layers"]["-all"] = "(Remove all ignored layers)"
        let details["remove_ignored_layers"]["-rc_congestion_ignored_layers"] = ""
   let details["remove_individual_pin_constraints"]={}
        let details["remove_individual_pin_constraints"]["-nets"] = "(remove constraints on block pins that connected to nets.)"
        let details["remove_individual_pin_constraints"]["-pins"] = "(Specifies the collection of pins to remove pin constraints)"
        let details["remove_individual_pin_constraints"]["-ports"] = "(Specifies the collection of ports to remove pin constraints)"
   let details["remove_input_delay"]={}
        let details["remove_input_delay"]["-modes"] = "(remove input delay for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_input_delay"]["-corners"] = "(remove input delay for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_input_delay"]["-scenarios"] = ""
        let details["remove_input_delay"]["-clock"] = "(Relative clock; '' for no clock)"
        let details["remove_input_delay"]["-clock_fall"] = "(Delay is relative to falling edge of clock)"
        let details["remove_input_delay"]["-level_sensitive"] = "(Delay is from level-sensitive latch)"
        let details["remove_input_delay"]["-rise"] = "( Specifies rising delay)"
        let details["remove_input_delay"]["-fall"] = "( Specifies falling delay)"
        let details["remove_input_delay"]["-max"] = "( Specifies maximum delay)"
        let details["remove_input_delay"]["-min"] = "( Specifies minimum delay)"
   let details["remove_io_guides"]={}
        let details["remove_io_guides"]["-verbose"] = "(To print verbose information)"
        let details["remove_io_guides"]["-all"] = "(To remove all io_guides)"
        let details["remove_io_guides"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_io_rings"]={}
        let details["remove_io_rings"]["-verbose"] = "(To print verbose information)"
        let details["remove_io_rings"]["-all"] = "(To remove all io_rings)"
        let details["remove_io_rings"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_keepout_margins"]={}
   let details["remove_layer_map_file"]={}
        let details["remove_layer_map_file"]["-format"] = "(Layer mapping file format: Values: gds, starrc)"
        let details["remove_layer_map_file"]["-library"] = ""
   let details["remove_license"]={}
        let details["remove_license"]["-keep"] = "(Keep)"
   let details["remove_licenses"]={}
        let details["remove_licenses"]["-keep"] = "(Keep)"
   let details["remove_macro_constraints"]={}
        let details["remove_macro_constraints"]["-allowed_orientations"] = ""
        let details["remove_macro_constraints"]["-preferred_location"] = "(remove preferred location)"
        let details["remove_macro_constraints"]["-alignment_grid"] = "(remove alignment grid)"
        let details["remove_macro_constraints"]["-alignment_point"] = "(remove alignment point)"
        let details["remove_macro_constraints"]["-alignment_orientation_set"] = ""
        let details["remove_macro_constraints"]["-align_pins_to_tracks"] = ""
   let details["remove_macro_relative_location"]={}
        let details["remove_macro_relative_location"]["-hierarchical"] = "(remove hierarchically)"
   let details["remove_matching_types"]={}
        let details["remove_matching_types"]["-verbose"] = "(To print verbose information)"
        let details["remove_matching_types"]["-all"] = "(To remove all matching types)"
   let details["remove_max_capacitance"]={}
        let details["remove_max_capacitance"]["-modes"] = "(remove DRC limit for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_max_capacitance"]["-corners"] = "(remove DRC limit for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_max_capacitance"]["-scenarios"] = ""
   let details["remove_max_fanout"]={}
   let details["remove_max_lvth_percentages"]={}
   let details["remove_max_time_borrow"]={}
        let details["remove_max_time_borrow"]["-modes"] = "(remove max_time_borrow for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_max_time_borrow"]["-corners"] = "(remove max_time_borrow for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_max_time_borrow"]["-scenarios"] = ""
   let details["remove_max_transition"]={}
        let details["remove_max_transition"]["-modes"] = "(remove DRC limit for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_max_transition"]["-corners"] = "(remove DRC limit for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_max_transition"]["-scenarios"] = ""
   let details["remove_min_capacitance"]={}
        let details["remove_min_capacitance"]["-modes"] = "(remove DRC limit for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_min_capacitance"]["-corners"] = "(remove DRC limit for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_min_capacitance"]["-scenarios"] = ""
   let details["remove_min_pulse_width"]={}
        let details["remove_min_pulse_width"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_min_pulse_width"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_min_pulse_width"]["-scenarios"] = ""
        let details["remove_min_pulse_width"]["-low"] = "(Applies value only to low clock signal level)"
        let details["remove_min_pulse_width"]["-high"] = "(Applies value only to high clock signal level)"
   let details["remove_modes"]={}
        let details["remove_modes"]["-all"] = "(Remove all modes)"
   let details["remove_modules"]={}
        let details["remove_modules"]["-design"] = "(Design to remove module(s) from)"
   let details["remove_multisource_clock_sink_groups"]={}
   let details["remove_multisource_clock_subtree_constraints"]={}
        let details["remove_multisource_clock_subtree_constraints"]["-names"] = "(list of option set names from which constraints will be removed)"
        let details["remove_multisource_clock_subtree_constraints"]["-clocks"] = "(remove all constraints from these clocks)"
        let details["remove_multisource_clock_subtree_constraints"]["-cells"] = "(list of cells to which constraints need to be applied)"
        let details["remove_multisource_clock_subtree_constraints"]["-pins"] = "(list of pins to which constraints need to be applied)"
        let details["remove_multisource_clock_subtree_constraints"]["-target_level"] = "(add buffers to make all subtrees have this number of levels: "
        let details["remove_multisource_clock_subtree_constraints"]["-ignore_for_icg_reordering"] = ""
   let details["remove_multisource_clock_subtree_options"]={}
        let details["remove_multisource_clock_subtree_options"]["-names"] = "(list of option sets which should get removed or removed from)"
        let details["remove_multisource_clock_subtree_options"]["-clocks"] = "(remove entire option sets or options from these clocks)"
        let details["remove_multisource_clock_subtree_options"]["-corners"] = "(Corner list)"
        let details["remove_multisource_clock_subtree_options"]["-driver_objects"] = "(remove list of subtree root drivers (pins or ports))"
        let details["remove_multisource_clock_subtree_options"]["-max_total_wire_delay"] = ""
        let details["remove_multisource_clock_subtree_options"]["-dont_merge_cells"] = ""
        let details["remove_multisource_clock_subtree_options"]["-target_level"] = "(remove the target_level setting applied during level balancing)"
   let details["remove_multisource_clock_tap_options"]={}
        let details["remove_multisource_clock_tap_options"]["-names"] = "(list of option sets which should get removed)"
        let details["remove_multisource_clock_tap_options"]["-clocks"] = "(remove tap option sets belonging to these clocks)"
        let details["remove_multisource_clock_tap_options"]["-dont_merge_cells"] = ""
   let details["remove_multisource_global_clock_trees"]={}
        let details["remove_multisource_global_clock_trees"]["-nets"] = "(remove instances in the forward cone of these nets only)"
        let details["remove_multisource_global_clock_trees"]["-prefix"] = "(remove instances with this prefix only)"
   let details["remove_net"]={}
        let details["remove_net"]["-design"] = "(Top design for finding objects)"
        let details["remove_net"]["-all"] = "(Remove all nets)"
        let details["remove_net"]["-force"] = "(To ignore locked status of the objects)"
        let details["remove_net"]["-remove_shapes"] = "(To remove shapes owned by the nets)"
   let details["remove_net_buses"]={}
        let details["remove_net_buses"]["-design"] = "(Top design for finding objects)"
        let details["remove_net_buses"]["-force"] = "(To ignore locked status of the objects)"
        let details["remove_net_buses"]["-block"] = "(Specifies the block where the net bus is to be removed)"
        let details["remove_net_buses"]["-cell"] = "(Specifies the cell where the net bus is to be removed)"
        let details["remove_net_buses"]["-all"] = "(Remove all net buses)"
   let details["remove_net_estimation_rules"]={}
   let details["remove_net_weight_effort"]={}
        let details["remove_net_weight_effort"]["-nets"] = ""
   let details["remove_nets"]={}
        let details["remove_nets"]["-design"] = "(Top design for finding objects)"
        let details["remove_nets"]["-all"] = "(Remove all nets)"
        let details["remove_nets"]["-force"] = "(To ignore locked status of the objects)"
        let details["remove_nets"]["-remove_shapes"] = "(To remove shapes owned by the nets)"
   let details["remove_objects"]={}
        let details["remove_objects"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_ocvm"]={}
        let details["remove_ocvm"]["-derate"] = "(Only OCVM tables are removed)"
        let details["remove_ocvm"]["-coefficient"] = "(Only AOCVM coefficients are removed)"
        let details["remove_ocvm"]["-corners"] = "(List of corners)"
   let details["remove_output_delay"]={}
        let details["remove_output_delay"]["-modes"] = "(remove output delay for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["remove_output_delay"]["-corners"] = "(remove output delay for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["remove_output_delay"]["-scenarios"] = ""
        let details["remove_output_delay"]["-clock"] = "(Relative clock; '' for no clock)"
        let details["remove_output_delay"]["-clock_fall"] = "(Delay is relative to falling edge of clock)"
        let details["remove_output_delay"]["-level_sensitive"] = "(Delay is to level-sensitive latch)"
        let details["remove_output_delay"]["-rise"] = "( Specifies rising delay)"
        let details["remove_output_delay"]["-fall"] = "( Specifies falling delay)"
        let details["remove_output_delay"]["-max"] = "( Specifies maximum delay)"
        let details["remove_output_delay"]["-min"] = "( Specifies minimum delay)"
   let details["remove_path_group"]={}
        let details["remove_path_group"]["-all"] = "(Remove all path groups)"
   let details["remove_path_groups"]={}
        let details["remove_path_groups"]["-all"] = "(Remove all path groups)"
   let details["remove_pg_mask_constraints"]={}
        let details["remove_pg_mask_constraints"]["-all"] = "(remove all existing PG mask constraints)"
   let details["remove_pg_patterns"]={}
        let details["remove_pg_patterns"]["-all"] = "(remove all existing PG patterns)"
   let details["remove_pg_regions"]={}
        let details["remove_pg_regions"]["-all"] = "(remove all existing PG regions)"
        let details["remove_pg_regions"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_pg_strategies"]={}
        let details["remove_pg_strategies"]["-all"] = "(remove all existing PG strategies)"
   let details["remove_pg_strategy_via_rules"]={}
        let details["remove_pg_strategy_via_rules"]["-all"] = "(remove all existing PG strategy via rules)"
   let details["remove_pg_via_master_rules"]={}
        let details["remove_pg_via_master_rules"]["-all"] = "(remove all existing PG via rules)"
   let details["remove_physical_objects"]={}
        let details["remove_physical_objects"]["-remove_disconnected"] = "(Remove disconnected objects)"
        let details["remove_physical_objects"]["-quiet"] = "(Suppress all messages)"
   let details["remove_pin_blockages"]={}
        let details["remove_pin_blockages"]["-verbose"] = "(To print verbose information)"
        let details["remove_pin_blockages"]["-all"] = "(To remove all pin blockages)"
        let details["remove_pin_blockages"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_pin_guides"]={}
        let details["remove_pin_guides"]["-verbose"] = "(To print verbose information)"
        let details["remove_pin_guides"]["-all"] = "(To remove all pin guides)"
        let details["remove_pin_guides"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_pins"]={}
        let details["remove_pins"]["-design"] = "(Top design for finding objects)"
        let details["remove_pins"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_pins_from_virtual_connection"]={}
        let details["remove_pins_from_virtual_connection"]["-object"] = ""
        let details["remove_pins_from_virtual_connection"]["-pins"] = "(Specify pins/ports to be disconnected from the virtual connection)"
   let details["remove_placement_blockages"]={}
        let details["remove_placement_blockages"]["-verbose"] = "(To print verbose information)"
        let details["remove_placement_blockages"]["-all"] = "(To remove all placement blockages)"
        let details["remove_placement_blockages"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_placement_spacing_rules"]={}
        let details["remove_placement_spacing_rules"]["-label"] = "(Label name)"
        let details["remove_placement_spacing_rules"]["-rule"] = "(Label names)"
        let details["remove_placement_spacing_rules"]["-all"] = "(Remove all rules)"
   let details["remove_pop_up_object_options"]={}
        let details["remove_pop_up_object_options"]["-object_type"] = ""
   let details["remove_port_buses"]={}
        let details["remove_port_buses"]["-design"] = "(Top design for finding objects)"
        let details["remove_port_buses"]["-force"] = "(To ignore locked status of the objects)"
        let details["remove_port_buses"]["-block"] = "(Specifies the block where the port bus is to be removed)"
        let details["remove_port_buses"]["-cell"] = "(Specifies the cell where the port bus is to be removed)"
        let details["remove_port_buses"]["-all"] = "(Remove all port buses)"
   let details["remove_ports"]={}
        let details["remove_ports"]["-design"] = "(Top design for finding objects)"
        let details["remove_ports"]["-force"] = "(To ignore locked status of the objects)"
        let details["remove_ports"]["-remove_shapes"] = "(Remove pin shapes also)"
   let details["remove_post_route_filler"]={}
        let details["remove_post_route_filler"]["-skip_filler_type_check"] = ""
        let details["remove_post_route_filler"]["-hierarchical"] = "(hierarchical)"
   let details["remove_power_io_constraints"]={}
        let details["remove_power_io_constraints"]["-io_guide_list"] = ""
   let details["remove_pr_rules"]={}
        let details["remove_pr_rules"]["-all"] = "(To remove all pr rules)"
   let details["remove_programmable_spare_cell_mapping_rule"]={}
        let details["remove_programmable_spare_cell_mapping_rule"]["-psc_type_id"] = "(a list of psc type id)"
        let details["remove_programmable_spare_cell_mapping_rule"]["-all"] = "(remove all psc mapping rules)"
   let details["remove_propagated_clock"]={}
   let details["remove_propagated_clocks"]={}
   let details["remove_push_down_object_options"]={}
        let details["remove_push_down_object_options"]["-object_type"] = ""
   let details["remove_qor_snapshot"]={}
        let details["remove_qor_snapshot"]["-name"] = "(Name of QoR snapshot to be removed)"
        let details["remove_qor_snapshot"]["-all"] = "(Remove all QoR snapshots)"
   let details["remove_rail_integrity_strategy"]={}
        let details["remove_rail_integrity_strategy"]["-all"] = "((default false))"
   let details["remove_redundant_shapes"]={}
        let details["remove_redundant_shapes"]["-nets"] = "(collection of nets)"
        let details["remove_redundant_shapes"]["-route_types"] = ""
        let details["remove_redundant_shapes"]["-layers"] = "(collection of layers)"
        let details["remove_redundant_shapes"]["-initial_drc_from_input"] = "(false|true)]"
        let details["remove_redundant_shapes"]["-remove_loop_shapes"] = "(false|true)]"
        let details["remove_redundant_shapes"]["-remove_floating_shapes"] = "(false|true)]"
        let details["remove_redundant_shapes"]["-remove_dangling_shapes"] = "(false|true)]"
        let details["remove_redundant_shapes"]["-report_changed_nets"] = "(false|true)]"
   let details["remove_route_aware_estimation"]={}
   let details["remove_routes"]={}
        let details["remove_routes"]["-nets"] = ""
        let details["remove_routes"]["-net_types"] = "(remove routes by specified net types)"
        let details["remove_routes"]["-detail_route"] = "(remove routes with shape use as detail route)"
        let details["remove_routes"]["-global_route"] = "(remove routes with shape use as global route)"
        let details["remove_routes"]["-user_route"] = "(remove routes with shape use as user route)"
        let details["remove_routes"]["-shield_route"] = "(remove routes with shape use as shield route)"
        let details["remove_routes"]["-ring"] = "(remove routes with shape use as ring)"
        let details["remove_routes"]["-stripe"] = "(remove routes with shape use as stripe)"
        let details["remove_routes"]["-lib_cell_pin_connect"] = ""
        let details["remove_routes"]["-macro_pin_connect"] = "(remove routes with shape use as macro pin connect)"
        let details["remove_routes"]["-follow_pin"] = "(remove routes with shape use as follow pin)"
        let details["remove_routes"]["-core_wire"] = "(remove routes with shape use as core wire)"
        let details["remove_routes"]["-zero_skew"] = "(remove routes with shape use as zero Skew)"
        let details["remove_routes"]["-area_fill"] = "(remove routes with shape use as area fill)"
        let details["remove_routes"]["-opc"] = "(remove routes with shape use as opc)"
        let details["remove_routes"]["-rdl"] = "(remove routes with shape use as rdl)"
        let details["remove_routes"]["-keep_pg_pins_at_boundary"] = ""
        let details["remove_routes"]["-keep_frozen_nets"] = "(keep routes of frozen nets with physical_status locked)"
   let details["remove_routing_blockages"]={}
        let details["remove_routing_blockages"]["-verbose"] = "(To print verbose information)"
        let details["remove_routing_blockages"]["-all"] = "(To remove all routing blockages)"
        let details["remove_routing_blockages"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_routing_corridor_shapes"]={}
        let details["remove_routing_corridor_shapes"]["-verbose"] = "(To print verbose information)"
        let details["remove_routing_corridor_shapes"]["-all"] = "(To remove all routing_corridor_shapes)"
        let details["remove_routing_corridor_shapes"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_routing_corridors"]={}
        let details["remove_routing_corridors"]["-verbose"] = "(To print verbose information)"
        let details["remove_routing_corridors"]["-all"] = "(To remove all routing_corridors)"
        let details["remove_routing_corridors"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_routing_guides"]={}
        let details["remove_routing_guides"]["-verbose"] = "(Show detailed information)"
        let details["remove_routing_guides"]["-all"] = "(Option to remove all routing guides)"
        let details["remove_routing_guides"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_routing_rules"]={}
        let details["remove_routing_rules"]["-verbose"] = "(To print verbose information)"
        let details["remove_routing_rules"]["-all"] = "(To remove all non-default routing rules)"
   let details["remove_rp_group_options"]={}
        let details["remove_rp_group_options"]["-group_orientation"] = "(Remove Orientation of RP group))"
        let details["remove_rp_group_options"]["-anchor_corner"] = "(Remove Anchor Corner of RP group))"
        let details["remove_rp_group_options"]["-rp_only_keepout_margin"] = ""
        let details["remove_rp_group_options"]["-allow_non_rp_cells"] = "(Remove option of placing non RP cells on RP groups )"
        let details["remove_rp_group_options"]["-allow_non_rp_cells_on_blockages"] = ""
   let details["remove_rp_groups"]={}
        let details["remove_rp_groups"]["-all"] = "(Remove all RP groups)"
        let details["remove_rp_groups"]["-hierarchical"] = "(Remove RP groups recursively too. Applicable only with rp_group_list)"
   let details["remove_sadp_track_rule"]={}
        let details["remove_sadp_track_rule"]["-all"] = "(Removes all the track_rules)"
   let details["remove_scan_def"]={}
   let details["remove_scenarios"]={}
        let details["remove_scenarios"]["-all"] = "(Remove all scenarios)"
   let details["remove_sdc"]={}
        let details["remove_sdc"]["-design"] = "(Remove constraints not associated with any mode, corner, or scenario)"
        let details["remove_sdc"]["-modes"] = "(Remove constraints on these modes)"
        let details["remove_sdc"]["-corners"] = "(Remove constraints on these corners)"
        let details["remove_sdc"]["-scenarios"] = ""
        let details["remove_sdc"]["-include"] = ""
        let details["remove_sdc"]["-exclude"] = ""
   let details["remove_sense"]={}
        let details["remove_sense"]["-type"] = "(Specify type of sense: Values: clock, data)"
        let details["remove_sense"]["-clocks"] = "(List of clocks)"
        let details["remove_sense"]["-all"] = "(Remove all defined senses)"
   let details["remove_shapes"]={}
        let details["remove_shapes"]["-verbose"] = "(To print verbose information)"
        let details["remove_shapes"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_shaping_blockages"]={}
        let details["remove_shaping_blockages"]["-verbose"] = "(To print verbose information)"
        let details["remove_shaping_blockages"]["-all"] = "(To remove all shaping blockages)"
        let details["remove_shaping_blockages"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_shield_association"]={}
        let details["remove_shield_association"]["-objects"] = ""
        let details["remove_shield_association"]["-nets"] = "(Shielded nets to remove from shield association)"
   let details["remove_si_delay_analysis"]={}
        let details["remove_si_delay_analysis"]["-victims"] = "(List of nets as victim)"
        let details["remove_si_delay_analysis"]["-aggressors"] = ""
        let details["remove_si_delay_analysis"]["-ignore_arrival"] = ""
   let details["remove_signal_io_constraints"]={}
        let details["remove_signal_io_constraints"]["-io_guide_list"] = ""
   let details["remove_site_arrays"]={}
        let details["remove_site_arrays"]["-verbose"] = "(To print verbose information)"
        let details["remove_site_arrays"]["-all"] = "(To remove all site arrays)"
        let details["remove_site_arrays"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_site_defs"]={}
        let details["remove_site_defs"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["remove_site_defs"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["remove_site_defs"]["-verbose"] = "(To print verbose information)"
        let details["remove_site_defs"]["-all"] = "(To remove all site defs)"
   let details["remove_site_rows"]={}
        let details["remove_site_rows"]["-verbose"] = "(To print verbose information)"
        let details["remove_site_rows"]["-all"] = "(To remove all site rows)"
        let details["remove_site_rows"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_stdcell_fillers_with_violation"]={}
        let details["remove_stdcell_fillers_with_violation"]["-name"] = "(the pattern of the names of the cell instances)"
        let details["remove_stdcell_fillers_with_violation"]["-check_only"] = "(false|true)]"
        let details["remove_stdcell_fillers_with_violation"]["-check_between_fixed_objects"] = "(false|true)]"
        let details["remove_stdcell_fillers_with_violation"]["-boundary"] = ""
        let details["remove_stdcell_fillers_with_violation"]["-post_eco"] = "(false|true)]"
   let details["remove_supernet_exceptions"]={}
        let details["remove_supernet_exceptions"]["-pins"] = "(Pins whose supernet transparent settings to remove)"
        let details["remove_supernet_exceptions"]["-cells"] = "(Cells whose supernet transparent settings to remove)"
        let details["remove_supernet_exceptions"]["-all"] = "(To remove all supernet transparent)"
   let details["remove_supernets"]={}
        let details["remove_supernets"]["-design"] = "(Top design for finding objects)"
   let details["remove_taps"]={}
   let details["remove_target_library_subset"]={}
        let details["remove_target_library_subset"]["-objects"] = "(Hierarchical cells from which to remove subsets)"
        let details["remove_target_library_subset"]["-top"] = "(To remove the subset from the top block)"
   let details["remove_tech"]={}
   let details["remove_terminals"]={}
        let details["remove_terminals"]["-verbose"] = "(To print verbose information)"
        let details["remove_terminals"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_tie_cells"]={}
        let details["remove_tie_cells"]["-objects"] = "(cells or lib_cells for tie-cell removal)"
   let details["remove_timing_paths_disabled_blocks"]={}
   let details["remove_topological_constraints"]={}
        let details["remove_topological_constraints"]["-all"] = "(To remove all topological pin feedthrough constraints in the current block)"
   let details["remove_topology_edges"]={}
        let details["remove_topology_edges"]["-all"] = "(Remove all topology_edges in the current block)"
        let details["remove_topology_edges"]["-verbose"] = "(To print verbose information)"
   let details["remove_topology_nodes"]={}
        let details["remove_topology_nodes"]["-all"] = "(Remove all topology_nodes in the current block)"
        let details["remove_topology_nodes"]["-verbose"] = "(To print verbose information)"
   let details["remove_track_constraint"]={}
        let details["remove_track_constraint"]["-block"] = ""
        let details["remove_track_constraint"]["-layer"] = ""
        let details["remove_track_constraint"]["-track_direction"] = ""
        let details["remove_track_constraint"]["-mask"] = ""
        let details["remove_track_constraint"]["-all"] = "(Remove all constraints in the block)"
   let details["remove_tracks"]={}
        let details["remove_tracks"]["-all"] = "(Remove all tracks)"
        let details["remove_tracks"]["-layer"] = "(Routing layer of tracks to remove)"
        let details["remove_tracks"]["-dir"] = "(Direction of tracks to remove: "
        let details["remove_tracks"]["-verbose"] = "(To print verbose information)"
        let details["remove_tracks"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_utilization_configurations"]={}
        let details["remove_utilization_configurations"]["-all"] = "(Remove all the existing utilization configurations)"
        let details["remove_utilization_configurations"]["-scope"] = "(Scope of the configuration: "
   let details["remove_via_defs"]={}
        let details["remove_via_defs"]["-design"] = "(Top design for finding objects)"
        let details["remove_via_defs"]["-library"] = "(Library for finding objects)"
        let details["remove_via_defs"]["-tech"] = "(Tech for finding object)"
        let details["remove_via_defs"]["-verbose"] = "(To print verbose information)"
   let details["remove_via_ladder_constraints"]={}
        let details["remove_via_ladder_constraints"]["-pins"] = "(Collection or names of pins)"
        let details["remove_via_ladder_constraints"]["-all"] = "(Remove constraints on all pins)"
   let details["remove_via_ladder_rules"]={}
   let details["remove_via_ladders"]={}
        let details["remove_via_ladders"]["-nets"] = "(the nets for via ladder removal (default all))"
   let details["remove_via_mappings"]={}
        let details["remove_via_mappings"]["-from"] = "(From via pattern)"
        let details["remove_via_mappings"]["-to"] = "(To via pattern)"
        let details["remove_via_mappings"]["-all"] = "(To remove all via mappings)"
   let details["remove_via_regions"]={}
        let details["remove_via_regions"]["-design"] = "(Top design for finding objects)"
        let details["remove_via_regions"]["-verbose"] = "(To print verbose information)"
   let details["remove_via_rules"]={}
        let details["remove_via_rules"]["-design"] = "(Top design for finding objects)"
        let details["remove_via_rules"]["-library"] = "(Library for finding objects)"
        let details["remove_via_rules"]["-tech"] = "(Tech for finding object)"
        let details["remove_via_rules"]["-all"] = "(To remove all via rules)"
   let details["remove_vias"]={}
        let details["remove_vias"]["-verbose"] = "(To print verbose information)"
        let details["remove_vias"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_virtual_connections"]={}
        let details["remove_virtual_connections"]["-all"] = "(Remove all the virtual connections)"
   let details["remove_virtual_pads"]={}
        let details["remove_virtual_pads"]["-net"] = "(power or ground net)"
        let details["remove_virtual_pads"]["-layer"] = "(Specify layer of the virtual tap)"
        let details["remove_virtual_pads"]["-coordinate"] = ""
        let details["remove_virtual_pads"]["-all"] = "(all existing virtual pads)"
   let details["remove_voltage_area_rules"]={}
        let details["remove_voltage_area_rules"]["-verbose"] = "(To print verbose information)"
        let details["remove_voltage_area_rules"]["-all"] = "(To remove all voltage area rules)"
   let details["remove_voltage_area_shapes"]={}
        let details["remove_voltage_area_shapes"]["-verbose"] = "(To print verbose information)"
        let details["remove_voltage_area_shapes"]["-all"] = "(To remove all voltage_area_shapes)"
        let details["remove_voltage_area_shapes"]["-force"] = "(To ignore locked status of the objects)"
   let details["remove_voltage_areas"]={}
        let details["remove_voltage_areas"]["-verbose"] = "(To print verbose information)"
        let details["remove_voltage_areas"]["-all"] = "(To remove all voltage_areas)"
        let details["remove_voltage_areas"]["-force"] = "(To ignore locked status of the objects)"
   let details["rename"]={}
   let details["rename_block"]={}
        let details["rename_block"]["-force"] = "(override a modified destination block)"
        let details["rename_block"]["-from_block"] = "(Source block object or name)"
        let details["rename_block"]["-to_block"] = "(Destination block name [libName:]blockName[/labelName][.viewName])"
        let details["rename_block"]["-hierarchical"] = "(rename all block views in this design hierarchy)"
        let details["rename_block"]["-verbose"] = "(Verbose messages)"
   let details["reopen_block"]={}
        let details["reopen_block"]["-edit"] = "(re-open block in edit mode)"
        let details["reopen_block"]["-read"] = "(re-open block in read mode)"
        let details["reopen_block"]["-new"] = "(discard block content and re-open in new mode)"
        let details["reopen_block"]["-force"] = "(force block contents to be discarded)"
   let details["replace_fillers_by_rules"]={}
        let details["replace_fillers_by_rules"]["-replacement_rule"] = ""
        let details["replace_fillers_by_rules"]["-constraint_fillers"] = ""
        let details["replace_fillers_by_rules"]["-non_constraint_fillers"] = ""
        let details["replace_fillers_by_rules"]["-non_constraint_left_fillers"] = ""
        let details["replace_fillers_by_rules"]["-non_constraint_right_fillers"] = ""
        let details["replace_fillers_by_rules"]["-exception_cells"] = ""
        let details["replace_fillers_by_rules"]["-max_constraint_length"] = ""
        let details["replace_fillers_by_rules"]["-replace_abutment"] = ""
        let details["replace_fillers_by_rules"]["-illegal_abutment"] = ""
        let details["replace_fillers_by_rules"]["-tap_cells"] = "(tap cells)"
        let details["replace_fillers_by_rules"]["-left_violation_tap"] = ""
        let details["replace_fillers_by_rules"]["-right_violation_tap"] = ""
        let details["replace_fillers_by_rules"]["-both_violation_tap"] = ""
        let details["replace_fillers_by_rules"]["-tap_distance_range"] = ""
        let details["replace_fillers_by_rules"]["-adjacent_non_od_cells"] = ""
        let details["replace_fillers_by_rules"]["-refill_table"] = ""
        let details["replace_fillers_by_rules"]["-random_replace"] = ""
        let details["replace_fillers_by_rules"]["-direct_replace"] = ""
        let details["replace_fillers_by_rules"]["-target_fillers"] = ""
        let details["replace_fillers_by_rules"]["-left_end"] = ""
        let details["replace_fillers_by_rules"]["-right_end"] = ""
        let details["replace_fillers_by_rules"]["-eco_attribute"] = ""
        let details["replace_fillers_by_rules"]["-eco_target"] = ""
        let details["replace_fillers_by_rules"]["-patching_fillers"] = ""
        let details["replace_fillers_by_rules"]["-fillers_to_replace"] = ""
        let details["replace_fillers_by_rules"]["-prefix"] = "( new filler prefix)"
        let details["replace_fillers_by_rules"]["-layer"] = "(layer name)"
   let details["report_3d_chip_placement"]={}
        let details["report_3d_chip_placement"]["-chips"] = "(List of chips' names)"
        let details["report_3d_chip_placement"]["-all"] = "(Display all chips' attributes)"
   let details["report_abstracts"]={}
   let details["report_activity"]={}
        let details["report_activity"]["-modes"] = "(List of mode names to report)"
        let details["report_activity"]["-corners"] = "(List of corner names to report)"
        let details["report_activity"]["-scenarios"] = ""
        let details["report_activity"]["-verbose"] = "(Print verbose output)"
        let details["report_activity"]["-rtl"] = "(Report RTL oriented switching activity)"
        let details["report_activity"]["-driver"] = "(Report driver centric switching activity)"
        let details["report_activity"]["-show_zeros"] = "(do not suppress columns with only zeros)"
        let details["report_activity"]["-print_objects"] = ""
   let details["report_annotated_check"]={}
        let details["report_annotated_check"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_annotated_delay"]={}
        let details["report_annotated_delay"]["-cell"] = "(Report annotated cell arcs)"
        let details["report_annotated_delay"]["-net"] = "(Report annotated net arcs)"
        let details["report_annotated_delay"]["-summary"] = "(Display summary of annotated cell and net arcs)"
        let details["report_annotated_delay"]["-min"] = "(Report annotated min arc delays)"
        let details["report_annotated_delay"]["-significant_digits"] = ""
        let details["report_annotated_delay"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_annotated_power"]={}
        let details["report_annotated_power"]["-scenarios"] = ""
        let details["report_annotated_power"]["-significant_digits"] = ""
        let details["report_annotated_power"]["-supply_net"] = ""
        let details["report_annotated_power"]["-list_annotated"] = "(List all annotated cells)"
   let details["report_annotated_transition"]={}
        let details["report_annotated_transition"]["-significant_digits"] = ""
        let details["report_annotated_transition"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_antenna_rules"]={}
        let details["report_antenna_rules"]["-mode"] = "(Report the antenna rules with the given mode set: "
        let details["report_antenna_rules"]["-library"] = "(The library to report the antenna rules from)"
   let details["report_app_options"]={}
        let details["report_app_options"]["-block"] = "(Report options on this block)"
        let details["report_app_options"]["-global"] = "(Report options in the global scope)"
        let details["report_app_options"]["-non_default"] = "(Report options with values different from default)"
        let details["report_app_options"]["-as_list"] = "(Report options as list of name-value pairs)"
   let details["report_app_var"]={}
        let details["report_app_var"]["-verbose"] = "(Show detailed information)"
        let details["report_app_var"]["-only_changed_vars"] = "(Only report changed variables)"
   let details["report_attachments"]={}
        let details["report_attachments"]["-of_object"] = ""
   let details["report_attribute"]={}
        let details["report_attribute"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_attribute"]["-application"] = "(Report application attributes as well)"
        let details["report_attribute"]["-class"] = "(User object class: "
        let details["report_attribute"]["-compact"] = "(Compact design/object names to fit column width)"
   let details["report_attributes"]={}
        let details["report_attributes"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_attributes"]["-application"] = "(Report application attributes as well)"
        let details["report_attributes"]["-class"] = "(User object class: "
        let details["report_attributes"]["-compact"] = "(Compact design/object names to fit column width)"
   let details["report_block_pin_constraints"]={}
        let details["report_block_pin_constraints"]["-cells"] = ""
        let details["report_block_pin_constraints"]["-self"] = "(Report pin constraints for current top design)"
   let details["report_block_shaping"]={}
        let details["report_block_shaping"]["-utilization_from_target"] = ""
        let details["report_block_shaping"]["-error_view"] = "(Error Browser output is written into this file)"
        let details["report_block_shaping"]["-core_area_violations"] = ""
        let details["report_block_shaping"]["-overlaps"] = "(Report on block overlaps)"
        let details["report_block_shaping"]["-chimney_area"] = "(Report area of blocks in chimneys)"
        let details["report_block_shaping"]["-detour_estimate"] = "(Report estimated number of nets which detour blocks (assuming no feeds))"
        let details["report_block_shaping"]["-unaligned_pins_estimate"] = ""
        let details["report_block_shaping"]["-flyline_crossing"] = "(Report number of block to block flyline crossings)"
        let details["report_block_shaping"]["-orientation_violations"] = ""
        let details["report_block_shaping"]["-channel"] = "(Report on channels between blocks)"
        let details["report_block_shaping"]["-verbose"] = ""
        let details["report_block_shaping"]["-cells"] = ""
        let details["report_block_shaping"]["-hierarchical"] = "(Report with multiple physical hierarchy)"
   let details["report_block_to_top_map"]={}
        let details["report_block_to_top_map"]["-blocks"] = "(report just the given block cells in the netlist)"
        let details["report_block_to_top_map"]["-path"] = "(report just for the given hierarchy path)"
        let details["report_block_to_top_map"]["-waveform"] = "(show waveform of clocks in blocks)"
        let details["report_block_to_top_map"]["-warnings"] = "(report on possible mapping problems)"
   let details["report_boundary_cell_rules"]={}
   let details["report_bounds"]={}
        let details["report_bounds"]["-verbose"] = "(Show all bound info)"
        let details["report_bounds"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_bounds"]["-significant_digits"] = ""
   let details["report_budget"]={}
        let details["report_budget"]["-blocks"] = "(Show the budget blocks and their associated options)"
        let details["report_budget"]["-html"] = "(Dump analysis of budget with hyperlinks)"
        let details["report_budget"]["-html_dir"] = ""
        let details["report_budget"]["-latency"] = "(Report results of clock latency analysis)"
        let details["report_budget"]["-pins"] = ""
        let details["report_budget"]["-fanin_segments"] = ""
        let details["report_budget"]["-fanout_segments"] = ""
        let details["report_budget"]["-through"] = "(Report path details through the budget pin)"
        let details["report_budget"]["-hold_through"] = ""
        let details["report_budget"]["-busplans"] = "(Report on budget segments to be derived from busplans)"
        let details["report_budget"]["-input"] = "(Report only specified block inputs)"
        let details["report_budget"]["-output"] = "(Report only specified block outputs)"
        let details["report_budget"]["-warning_pins"] = "(Show details of budget warnings)"
   let details["report_buffer_trees"]={}
        let details["report_buffer_trees"]["-from"] = "(specifies starting point of buffer tree )"
        let details["report_buffer_trees"]["-depth"] = "(report buffer only till max depth specified: "
        let details["report_buffer_trees"]["-connections"] = "(show net connection in the report)"
        let details["report_buffer_trees"]["-hierarchy"] = "(show buffer tree across hierarchy)"
        let details["report_buffer_trees"]["-physical"] = "(show location of each pin)"
   let details["report_bundle_pin_constraints"]={}
        let details["report_bundle_pin_constraints"]["-bundles"] = ""
        let details["report_bundle_pin_constraints"]["-cells"] = "(Specify  the  block cells on which the constraints are reported..)"
        let details["report_bundle_pin_constraints"]["-self"] = "(Specifies that the constraints applied  to the toplevel block are reported.)"
   let details["report_bundles"]={}
   let details["report_busplan_constraints"]={}
   let details["report_busplans"]={}
        let details["report_busplans"]["-start_end_cells"] = "(Report start/end cell data)"
        let details["report_busplans"]["-location"] = "(Report location data)"
        let details["report_busplans"]["-xml_file"] = "(Report busplan details in XML format)"
   let details["report_case_analysis"]={}
        let details["report_case_analysis"]["-mode"] = "(Mode to report)"
        let details["report_case_analysis"]["-all"] = "(Report logic constant pins of the design)"
        let details["report_case_analysis"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_cell"]={}
        let details["report_cell"]["-connections"] = "(Show cell connection info)"
        let details["report_cell"]["-verbose"] = "(Show verbose cell connection info)"
        let details["report_cell"]["-pvt"] = "(Show cell PVT info)"
        let details["report_cell"]["-power"] = "(Show cell power connection info)"
        let details["report_cell"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_cell"]["-significant_digits"] = ""
   let details["report_cell_em"]={}
        let details["report_cell_em"]["-pins"] = "(List of pins)"
        let details["report_cell_em"]["-cells"] = "(List of cells)"
        let details["report_cell_em"]["-significant_digits"] = ""
        let details["report_cell_em"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_cell_modes"]={}
        let details["report_cell_modes"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_cell_modes"]["-missing"] = "(Just show instances with missing cell modes)"
   let details["report_cells"]={}
        let details["report_cells"]["-connections"] = "(Show cell connection info)"
        let details["report_cells"]["-verbose"] = "(Show verbose cell connection info)"
        let details["report_cells"]["-pvt"] = "(Show cell PVT info)"
        let details["report_cells"]["-power"] = "(Show cell power connection info)"
        let details["report_cells"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_cells"]["-significant_digits"] = ""
   let details["report_check_design_strategy"]={}
        let details["report_check_design_strategy"]["-checks"] = "(names of user-defined checks)"
   let details["report_clock"]={}
        let details["report_clock"]["-attributes"] = "(Show clock attributes)"
        let details["report_clock"]["-skew"] = "(Show clock skew info)"
        let details["report_clock"]["-groups"] = "(Show clock group info)"
        let details["report_clock"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_clock"]["-significant_digits"] = ""
        let details["report_clock"]["-modes"] = "(List of modes)"
   let details["report_clock_balance_groups"]={}
   let details["report_clock_balance_points"]={}
        let details["report_clock_balance_points"]["-clock"] = "(List of clocks)"
        let details["report_clock_balance_points"]["-significant_digits"] = ""
        let details["report_clock_balance_points"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_clock_balance_points"]["-balance_points"] = ""
   let details["report_clock_cell_spacings"]={}
        let details["report_clock_cell_spacings"]["-clocks"] = "(List of clocks)"
   let details["report_clock_gating_check"]={}
        let details["report_clock_gating_check"]["-significant_digits"] = ""
        let details["report_clock_gating_check"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_clock_gating_checks"]={}
        let details["report_clock_gating_checks"]["-significant_digits"] = ""
        let details["report_clock_gating_checks"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_clock_power"]={}
        let details["report_clock_power"]["-clocks"] = "(List of clocks)"
        let details["report_clock_power"]["-type"] = "(Type of report: "
        let details["report_clock_power"]["-modes"] = "(Mode list)"
        let details["report_clock_power"]["-corners"] = "(Corner list)"
        let details["report_clock_power"]["-scenarios"] = ""
        let details["report_clock_power"]["-nosplit"] = "(Do not split lines if column overflows)"
        let details["report_clock_power"]["-significant_digits"] = ""
   let details["report_clock_qor"]={}
        let details["report_clock_qor"]["-clocks"] = "(List of clocks)"
        let details["report_clock_qor"]["-type"] = "(Type of information to report: "
        let details["report_clock_qor"]["-histogram_type"] = ""
        let details["report_clock_qor"]["-trace_beyond_exception"] = ""
        let details["report_clock_qor"]["-modes"] = "(Mode list)"
        let details["report_clock_qor"]["-corners"] = "(Corner list)"
        let details["report_clock_qor"]["-skew_group"] = ""
        let details["report_clock_qor"]["-robustness_corner"] = ""
        let details["report_clock_qor"]["-scenarios"] = ""
        let details["report_clock_qor"]["-from"] = "(From pin list)"
        let details["report_clock_qor"]["-to"] = "(To pin list)"
        let details["report_clock_qor"]["-through"] = "(Through pin list)"
        let details["report_clock_qor"]["-smallest"] = ""
        let details["report_clock_qor"]["-largest"] = ""
        let details["report_clock_qor"]["-histogram_bins"] = ""
        let details["report_clock_qor"]["-histogram_min"] = ""
        let details["report_clock_qor"]["-histogram_max"] = ""
        let details["report_clock_qor"]["-significant_digits"] = ""
        let details["report_clock_qor"]["-all"] = "(Report all)"
        let details["report_clock_qor"]["-nosplit"] = "(No split)"
        let details["report_clock_qor"]["-show_paths"] = "(Shows full path)"
        let details["report_clock_qor"]["-show_verbose_paths"] = "(Shows full path with extra columns)"
        let details["report_clock_qor"]["-per_clock_root"] = "(Report per clock root for latency reports)"
   let details["report_clock_routing_rules"]={}
   let details["report_clock_settings"]={}
        let details["report_clock_settings"]["-clocks"] = "(List of clocks)"
        let details["report_clock_settings"]["-type"] = "(Type of settings to report: "
        let details["report_clock_settings"]["-nosplit"] = "(Do not split lines if column overflows)"
        let details["report_clock_settings"]["-significant_digits"] = ""
   let details["report_clock_skew_groups"]={}
        let details["report_clock_skew_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_clock_timing"]={}
        let details["report_clock_timing"]["-modes"] = "(report scenarios of these modes (default is current mode))"
        let details["report_clock_timing"]["-corners"] = "(report scenarios of these corners (default is all corners))"
        let details["report_clock_timing"]["-scenarios"] = ""
        let details["report_clock_timing"]["-clock"] = "(Clock network(s) of interest)"
        let details["report_clock_timing"]["-from_clock"] = ""
        let details["report_clock_timing"]["-to_clock"] = ""
        let details["report_clock_timing"]["-from"] = "(From pins in the clock network)"
        let details["report_clock_timing"]["-to"] = "(To pins in the clock network)"
        let details["report_clock_timing"]["-through"] = ""
        let details["report_clock_timing"]["-verbose"] = "(Display the report in verbose format)"
        let details["report_clock_timing"]["-type"] = "(Generate this type of report: "
        let details["report_clock_timing"]["-slack_lesser_than"] = ""
        let details["report_clock_timing"]["-lesser_than"] = ""
        let details["report_clock_timing"]["-greater_than"] = ""
        let details["report_clock_timing"]["-nworst"] = ""
        let details["report_clock_timing"]["-rise"] = "(Show entries with rising transition)"
        let details["report_clock_timing"]["-fall"] = "(Show entries with falling transition)"
        let details["report_clock_timing"]["-capture"] = "(Show entries with capture transition)"
        let details["report_clock_timing"]["-launch"] = "(Show entries with launch transition)"
        let details["report_clock_timing"]["-setup"] = "(Display entries for setup paths between latches)"
        let details["report_clock_timing"]["-hold"] = "(Display entries for hold paths between latches)"
        let details["report_clock_timing"]["-include_uncertainty_in_skew"] = ""
        let details["report_clock_timing"]["-significant_digits"] = ""
        let details["report_clock_timing"]["-show_clocks"] = "(Display from/to clock names)"
        let details["report_clock_timing"]["-derate"] = "(Display derate information)"
        let details["report_clock_timing"]["-clock_crossing"] = "(Exclude non-interacting or false clock domains)"
        let details["report_clock_timing"]["-physical"] = "(print physical location data in verbose path reports)"
        let details["report_clock_timing"]["-nets"] = "(print net data in verbose path reports)"
        let details["report_clock_timing"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_clock_timing"]["-clock_synthesis_view"] = ""
        let details["report_clock_timing"]["-variation"] = "(Display variation information)"
   let details["report_clock_tree_options"]={}
        let details["report_clock_tree_options"]["-nosplit"] = "(Do not split lines if column overflows)"
   let details["report_clock_tree_reference_subset"]={}
        let details["report_clock_tree_reference_subset"]["-clocks"] = "(List of clocks)"
   let details["report_clock_trunk_endpoints"]={}
        let details["report_clock_trunk_endpoints"]["-clock"] = "(Clocks)"
        let details["report_clock_trunk_endpoints"]["-corners"] = "(Corners)"
        let details["report_clock_trunk_endpoints"]["-script"] = "(Return report as a TCL script which can be sourced again)"
        let details["report_clock_trunk_endpoints"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_clock_trunk_endpoints"]["-significant_digits"] = ""
   let details["report_clock_trunk_qor"]={}
        let details["report_clock_trunk_qor"]["-clock"] = "(List of clocks)"
        let details["report_clock_trunk_qor"]["-endpoint_limit"] = ""
        let details["report_clock_trunk_qor"]["-from_block"] = ""
        let details["report_clock_trunk_qor"]["-to_block"] = ""
        let details["report_clock_trunk_qor"]["-violating_only"] = "(Lists only the violating paths)"
        let details["report_clock_trunk_qor"]["-sort_by"] = ""
        let details["report_clock_trunk_qor"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_clock_trunk_qor"]["-significant_digits"] = ""
   let details["report_clocks"]={}
        let details["report_clocks"]["-attributes"] = "(Show clock attributes)"
        let details["report_clocks"]["-skew"] = "(Show clock skew info)"
        let details["report_clocks"]["-groups"] = "(Show clock group info)"
        let details["report_clocks"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_clocks"]["-significant_digits"] = ""
        let details["report_clocks"]["-modes"] = "(List of modes)"
   let details["report_congestion"]={}
        let details["report_congestion"]["-mode"] = ""
        let details["report_congestion"]["-boundary"] = ""
        let details["report_congestion"]["-layers"] = ""
        let details["report_congestion"]["-rerun_global_router"] = "(rerun global route to generate congestion map)"
        let details["report_congestion"]["-overflow_threshold"] = ""
        let details["report_congestion"]["-include_soft_congestion_map"] = ""
        let details["report_congestion"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_congestion"]["-significant_digits"] = ""
   let details["report_constraint"]={}
        let details["report_constraint"]["-modes"] = "(report scenarios of these modes (default is all modes, or current scenario if neither mode nor corner are specified))"
        let details["report_constraint"]["-corners"] = "(report scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["report_constraint"]["-scenarios"] = ""
        let details["report_constraint"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_constraint"]["-significant_digits"] = ""
        let details["report_constraint"]["-verbose"] = "(Show verbose information)"
        let details["report_constraint"]["-max_transition"] = "(Show only max_transition)"
        let details["report_constraint"]["-max_capacitance"] = "(Show only max_capacitance)"
        let details["report_constraint"]["-min_capacitance"] = "(Show only min_capacitance)"
        let details["report_constraint"]["-max_delay"] = "(Show only late timing checks(setup, max_delay))"
        let details["report_constraint"]["-min_delay"] = "(Show only early timing checks(hold, min_delay))"
        let details["report_constraint"]["-min_pulse_width"] = "(Show only min_pulse_width)"
        let details["report_constraint"]["-all_violators"] = "(Show all constraint violators)"
   let details["report_constraint_groups"]={}
        let details["report_constraint_groups"]["-type"] = "(Constraint group type: "
        let details["report_constraint_groups"]["-count"] = "(Print number of objects in group)"
        let details["report_constraint_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_constraint_mapping_file"]={}
        let details["report_constraint_mapping_file"]["-design"] = "(Specify the design)"
        let details["report_constraint_mapping_file"]["-constraint_type"] = ""
   let details["report_constraints"]={}
        let details["report_constraints"]["-modes"] = "(report scenarios of these modes (default is all modes, or current scenario if neither mode nor corner are specified))"
        let details["report_constraints"]["-corners"] = "(report scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["report_constraints"]["-scenarios"] = ""
        let details["report_constraints"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_constraints"]["-significant_digits"] = ""
        let details["report_constraints"]["-verbose"] = "(Show verbose information)"
        let details["report_constraints"]["-max_transition"] = "(Show only max_transition)"
        let details["report_constraints"]["-max_capacitance"] = "(Show only max_capacitance)"
        let details["report_constraints"]["-min_capacitance"] = "(Show only min_capacitance)"
        let details["report_constraints"]["-max_delay"] = "(Show only late timing checks(setup, max_delay))"
        let details["report_constraints"]["-min_delay"] = "(Show only early timing checks(hold, min_delay))"
        let details["report_constraints"]["-min_pulse_width"] = "(Show only min_pulse_width)"
        let details["report_constraints"]["-all_violators"] = "(Show all constraint violators)"
   let details["report_corners"]={}
        let details["report_corners"]["-verbose"] = "(Print additional information)"
        let details["report_corners"]["-significant_digits"] = ""
   let details["report_crpr"]={}
        let details["report_crpr"]["-modes"] = "(report scenarios of these modes (default is current mode))"
        let details["report_crpr"]["-corners"] = "(report scenarios of these corners (default is all corners))"
        let details["report_crpr"]["-scenarios"] = ""
        let details["report_crpr"]["-from"] = "(From register clock pin or port)"
        let details["report_crpr"]["-to"] = "(To register clock pin or port)"
        let details["report_crpr"]["-from_clock"] = "(Clock that fans out to the launching device)"
        let details["report_crpr"]["-to_clock"] = "(Clock that fans out to the capturing device)"
        let details["report_crpr"]["-setup"] = "(Show CRP used for setup check)"
        let details["report_crpr"]["-hold"] = "(Show CRP used for hold check)"
        let details["report_crpr"]["-significant_digits"] = ""
   let details["report_delay_calculation"]={}
        let details["report_delay_calculation"]["-mode"] = "(report for scenario of this mode (default is current mode))"
        let details["report_delay_calculation"]["-corner"] = "(report for scenario of this corner (default is current corner))"
        let details["report_delay_calculation"]["-scenario"] = "(report for this scenario)"
        let details["report_delay_calculation"]["-from"] = "(from-pins)"
        let details["report_delay_calculation"]["-to"] = "(to-pins)"
        let details["report_delay_calculation"]["-transition"] = "(Override for input transition time)"
        let details["report_delay_calculation"]["-load"] = "(Override for output load)"
        let details["report_delay_calculation"]["-process_number"] = ""
        let details["report_delay_calculation"]["-process_label"] = ""
        let details["report_delay_calculation"]["-voltage"] = "(Override for operating voltage)"
        let details["report_delay_calculation"]["-temperature"] = ""
        let details["report_delay_calculation"]["-clock"] = "(Use data for this clock)"
        let details["report_delay_calculation"]["-source_rise"] = "(Use data for the rising clock source)"
        let details["report_delay_calculation"]["-source_fall"] = "(Use data for the faling clock source)"
        let details["report_delay_calculation"]["-pvt"] = "(Print detailed PVT information)"
        let details["report_delay_calculation"]["-crosstalk"] = "(Print crosstalk calculation information)"
        let details["report_delay_calculation"]["-min"] = "(Report for min delay)"
        let details["report_delay_calculation"]["-significant_digits"] = ""
   let details["report_density_gradient_options"]={}
   let details["report_design"]={}
        let details["report_design"]["-routing"] = "(Reports routing information)"
        let details["report_design"]["-library"] = "(Reports library information)"
        let details["report_design"]["-netlist"] = "(Reports netlist information such as of nets/cells/pins/library cells of the current design)"
        let details["report_design"]["-hierarchical"] = "(Reports netlist information including objects inside the block)"
        let details["report_design"]["-floorplan"] = "(Reports floorplan information such as of site rows/ plan groups/ voltage areas/ blockages etc.,)"
        let details["report_design"]["-all"] = "(Reports floorplan/netlist/routing/library information)"
        let details["report_design"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_design_mismatch"]={}
        let details["report_design_mismatch"]["-verbose"] = "(Shows instance information also for a mismatch type)"
        let details["report_design_mismatch"]["-mismatch_type"] = ""
        let details["report_design_mismatch"]["-repair_status"] = "(Shows mismatches with specified repaired state: "
        let details["report_design_mismatch"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_design_rules"]={}
        let details["report_design_rules"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["report_design_rules"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["report_design_rules"]["-verbose"] = "(Show all design rule info)"
        let details["report_design_rules"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_design_rules"]["-all"] = "(To report all design rules)"
   let details["report_disable_timing"]={}
        let details["report_disable_timing"]["-mode"] = "(Mode to report)"
        let details["report_disable_timing"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_dont_touch"]={}
        let details["report_dont_touch"]["-all"] = "(Report details of all dont_touch cells and nets)"
   let details["report_eco_bus_buffer_patterns"]={}
   let details["report_eco_physical_changes"]={}
        let details["report_eco_physical_changes"]["-type"] = "(The types of physical changes to be reported: "
        let details["report_eco_physical_changes"]["-min_displacement"] = ""
        let details["report_eco_physical_changes"]["-min_net_length_ratio"] = ""
        let details["report_eco_physical_changes"]["-min_estimated_length"] = ""
        let details["report_eco_physical_changes"]["-cells"] = ""
   let details["report_eco_placement_net_weight"]={}
        let details["report_eco_placement_net_weight"]["-nets"] = ""
        let details["report_eco_placement_net_weight"]["-output"] = "(output net weight setting to file)"
   let details["report_edit_groups"]={}
        let details["report_edit_groups"]["-verbose"] = "(Show all edit group info)"
        let details["report_edit_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_edit_groups"]["-significant_digits"] = ""
   let details["report_ems_database"]={}
        let details["report_ems_database"]["-name"] = ""
   let details["report_ems_rules"]={}
        let details["report_ems_rules"]["-all"] = "(Report all user-defined rules)"
   let details["report_exceptions"]={}
        let details["report_exceptions"]["-from"] = "(List of path startpoints or clocks)"
        let details["report_exceptions"]["-rise_from"] = ""
        let details["report_exceptions"]["-fall_from"] = ""
        let details["report_exceptions"]["-through"] = ""
        let details["report_exceptions"]["-rise_through"] = ""
        let details["report_exceptions"]["-fall_through"] = ""
        let details["report_exceptions"]["-to"] = "(List of path endpoints or clocks)"
        let details["report_exceptions"]["-rise_to"] = ""
        let details["report_exceptions"]["-fall_to"] = ""
        let details["report_exceptions"]["-ignored"] = "(Show ignored exceptions)"
        let details["report_exceptions"]["-dominant"] = "(Show dominant exceptions)"
        let details["report_exceptions"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_extraction_options"]={}
        let details["report_extraction_options"]["-corners"] = "(List of corners)"
        let details["report_extraction_options"]["-all"] = "(report all options including default values)"
   let details["report_feedthroughs"]={}
        let details["report_feedthroughs"]["-nets"] = "(Specifies the collection of nets for feedthrough reporting.)"
        let details["report_feedthroughs"]["-include_original_feedthroughs"] = ""
        let details["report_feedthroughs"]["-file_name_prefix"] = ""
        let details["report_feedthroughs"]["-reporting_style"] = ""
        let details["report_feedthroughs"]["-include_buffered"] = "(Reports the buffered feedthroughs)"
        let details["report_feedthroughs"]["-self"] = "(Only report top level feed-throughs)"
   let details["report_floorplan_rules"]={}
        let details["report_floorplan_rules"]["-object_types"] = ""
        let details["report_floorplan_rules"]["-lib_cells"] = ""
   let details["report_frame_properties"]={}
        let details["report_frame_properties"]["-library"] = "(library)"
        let details["report_frame_properties"]["-output"] = "(output file name)"
        let details["report_frame_properties"]["-block"] = "(frame block)"
        let details["report_frame_properties"]["-implant_width"] = "(false|true)]"
        let details["report_frame_properties"]["-diffusion_width_height"] = "(false|true)]"
        let details["report_frame_properties"]["-source_drain_annotation"] = "(false|true)]"
   let details["report_freeze_ports"]={}
        let details["report_freeze_ports"]["-all"] = "(Report details of all freeze_ports cells)"
   let details["report_grids"]={}
        let details["report_grids"]["-ref_blocks"] = ""
        let details["report_grids"]["-type"] = "(Type of the grid: "
   let details["report_groups"]={}
        let details["report_groups"]["-verbose"] = "(Show group's complete information)"
        let details["report_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_hierarchy"]={}
        let details["report_hierarchy"]["-block"] = "(Specifies the block for which to generate the report)"
        let details["report_hierarchy"]["-physical_context"] = "(Generate report on only blocks and leaf modules.)"
        let details["report_hierarchy"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_hierarchy"]["-hierarchical"] = "(Display the unfolded hierarchy)"
        let details["report_hierarchy"]["-no_leaf"] = "(Exclude leaf modules from the report)"
   let details["report_hierarchy_options"]={}
        let details["report_hierarchy_options"]["-blocks"] = ""
   let details["report_host_options"]={}
        let details["report_host_options"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_ignored_layers"]={}
        let details["report_ignored_layers"]["-verbose"] = "(Show all ignored layer info)"
        let details["report_ignored_layers"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_ignored_layers"]["-significant_digits"] = ""
   let details["report_incomplete_upf"]={}
        let details["report_incomplete_upf"]["-max_message_count"] = ""
   let details["report_individual_pin_constraints"]={}
        let details["report_individual_pin_constraints"]["-nets"] = "(report constraints on block pins that connected to nets.)"
        let details["report_individual_pin_constraints"]["-pins"] = "(Specifies the collection of pins to report pin constraints)"
        let details["report_individual_pin_constraints"]["-ports"] = "(Specifies the collection of ports to report pin constraints)"
        let details["report_individual_pin_constraints"]["-constraint_type"] = ""
   let details["report_io_guides"]={}
        let details["report_io_guides"]["-verbose"] = "(Show all io_guide info)"
        let details["report_io_guides"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_io_guides"]["-significant_digits"] = ""
   let details["report_io_rings"]={}
        let details["report_io_rings"]["-verbose"] = "(Show all io_ring info)"
        let details["report_io_rings"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_io_rings"]["-significant_digits"] = ""
   let details["report_isolate_ports"]={}
        let details["report_isolate_ports"]["-all"] = "(Report details of all isolate_ports cells)"
   let details["report_keepout_margins"]={}
   let details["report_latch_loop_groups"]={}
        let details["report_latch_loop_groups"]["-of_objects"] = ""
        let details["report_latch_loop_groups"]["-loop_breakers_only"] = "(only loop breakers will be reported)"
        let details["report_latch_loop_groups"]["-path_breakers_only"] = "(only path breakers (including loop breakers) will be reported)"
        let details["report_latch_loop_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_lib"]={}
        let details["report_lib"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_lib"]["-timing_arcs"] = "(list timing arcs for tech lib cells)"
        let details["report_lib"]["-parasitic_tech"] = "(list parasitic tech info)"
        let details["report_lib"]["-routability"] = "(list pins that do not have optimal routability for lib cells )"
        let details["report_lib"]["-min_pin_layer"] = "(minimum pin layer. No pins should exist under this layer.)"
        let details["report_lib"]["-pattern_must_join_pin"] = ""
        let details["report_lib"]["-pattern_must_join_pin_exclusion_list"] = ""
        let details["report_lib"]["-wire_tracks"] = "(list via-region on wire track information for lib cells )"
        let details["report_lib"]["-wire_track_colors"] = "(list pins on wire track color information for lib cells)"
        let details["report_lib"]["-technology_lib"] = ""
        let details["report_lib"]["-placement_constraints"] = ""
        let details["report_lib"]["-antenna"] = "(report missing antenna properties of cells in the specified library)"
        let details["report_lib"]["-physical"] = "(report the physical characteristics in the specified library)"
        let details["report_lib"]["-verbose"] = "(verbose)"
        let details["report_lib"]["-include_db_mapping"] = "(DB file mapping information)"
   let details["report_lib_cells"]={}
        let details["report_lib_cells"]["-objects"] = "(Lib cells to report)"
        let details["report_lib_cells"]["-columns"] = ""
   let details["report_lib_pins"]={}
        let details["report_lib_pins"]["-objects"] = "(Lib pins to report)"
        let details["report_lib_pins"]["-columns"] = ""
   let details["report_lib_timing_arcs"]={}
        let details["report_lib_timing_arcs"]["-objects"] = "(Lib timing arcs to report)"
        let details["report_lib_timing_arcs"]["-columns"] = ""
   let details["report_macro_constraints"]={}
        let details["report_macro_constraints"]["-allowed_orientations"] = ""
        let details["report_macro_constraints"]["-preferred_location"] = "(show preferred location)"
        let details["report_macro_constraints"]["-alignment_grid"] = "(show alignment grid information)"
        let details["report_macro_constraints"]["-align_pins_to_tracks"] = ""
   let details["report_macro_relative_location"]={}
        let details["report_macro_relative_location"]["-hierarchical"] = "(report hierarchical)"
        let details["report_macro_relative_location"]["-nosplit"] = "(report with nosplit line)"
   let details["report_matching_types"]={}
        let details["report_matching_types"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_mibs"]={}
   let details["report_min_pulse_width"]={}
        let details["report_min_pulse_width"]["-modes"] = "(report for scenarios of these modes (default is all modes, or current scenario if neither mode nor corner are specified))"
        let details["report_min_pulse_width"]["-corners"] = "(report for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["report_min_pulse_width"]["-scenarios"] = ""
        let details["report_min_pulse_width"]["-all_violators"] = "(Show only min pulse width violations)"
        let details["report_min_pulse_width"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_min_pulse_width"]["-significant_digits"] = ""
   let details["report_mismatch_configs"]={}
        let details["report_mismatch_configs"]["-config_list"] = ""
        let details["report_mismatch_configs"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_mismatch_configs"]["-all"] = "(Show all configs in detail)"
   let details["report_modes"]={}
        let details["report_modes"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_modes"]["-significant_digits"] = ""
   let details["report_multibit"]={}
        let details["report_multibit"]["-nosplit"] = "(Show summary without splitting)"
   let details["report_multisource_clock_sink_groups"]={}
   let details["report_multisource_clock_subtree_constraints"]={}
        let details["report_multisource_clock_subtree_constraints"]["-names"] = "(list of option set names for which constraints will be reported)"
        let details["report_multisource_clock_subtree_constraints"]["-clocks"] = "(report all constraints from these clock)"
   let details["report_multisource_clock_subtree_options"]={}
        let details["report_multisource_clock_subtree_options"]["-names"] = "(list of option set names)"
        let details["report_multisource_clock_subtree_options"]["-clocks"] = "(list of clocks to be reported)"
   let details["report_multisource_clock_tap_options"]={}
        let details["report_multisource_clock_tap_options"]["-clocks"] = "(List of clocks to be reported)"
        let details["report_multisource_clock_tap_options"]["-names"] = "(List of option set names)"
   let details["report_mv_lib_cells"]={}
        let details["report_mv_lib_cells"]["-verbose"] = "(verbose)"
   let details["report_mv_path"]={}
        let details["report_mv_path"]["-isolation"] = "(report isolation constraints)"
        let details["report_mv_path"]["-level_shifter"] = "(report level shifter constraints)"
        let details["report_mv_path"]["-all_path"] = "(all paths in the design)"
        let details["report_mv_path"]["-pin"] = "(pin or port along the path)"
        let details["report_mv_path"]["-net"] = "(net_list )"
        let details["report_mv_path"]["-shifting"] = "(shifting information)"
        let details["report_mv_path"]["-full_path"] = "(full isolation path information)"
        let details["report_mv_path"]["-cell"] = ""
        let details["report_mv_path"]["-all_not_associated"] = "(report all un-associated mv cells)"
   let details["report_name_rules"]={}
   let details["report_names"]={}
        let details["report_names"]["-rules"] = "(name of the rule. Wildcards also allowed.)"
        let details["report_names"]["-hierarchy"] = "(Report name changes hierarchically within current block only)"
        let details["report_names"]["-include_sub_blocks"] = "(Report name changes across all hierarchies including different physical hierarchies)"
        let details["report_names"]["-skip_physical_only_cells"] = ""
   let details["report_net"]={}
        let details["report_net"]["-connections"] = "(Show net connection info)"
        let details["report_net"]["-verbose"] = "(Show all net info)"
        let details["report_net"]["-segments"] = "(Show all global segments for listed nets)"
        let details["report_net"]["-significant_digits"] = ""
        let details["report_net"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_net"]["-physical"] = "(Show the physical attributes and routing information)"
   let details["report_net_buses"]={}
        let details["report_net_buses"]["-verbose"] = "(Show all net bus info)"
        let details["report_net_buses"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_net_estimation_rules"]={}
   let details["report_net_fanout"]={}
        let details["report_net_fanout"]["-high_fanout"] = "(Show only high fanout nets)"
        let details["report_net_fanout"]["-verbose"] = "(Prints verbose information)"
        let details["report_net_fanout"]["-connections"] = "(reports connections)"
        let details["report_net_fanout"]["-tree"] = "(Reports buffer tree fanout)"
        let details["report_net_fanout"]["-hierarchical"] = "(Reports fanout information including objects inside the block)"
        let details["report_net_fanout"]["-physical"] = "(Show physical information of pins)"
        let details["report_net_fanout"]["-threshold"] = "(show nets with more fanout than threshold)"
        let details["report_net_fanout"]["-depth"] = "(Show buffer trees with more levels than depth only)"
        let details["report_net_fanout"]["-upper_bound"] = "(Show nets with fanout less than or equal to bound)"
        let details["report_net_fanout"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_net_weight_effort"]={}
        let details["report_net_weight_effort"]["-nets"] = ""
   let details["report_nets"]={}
        let details["report_nets"]["-connections"] = "(Show net connection info)"
        let details["report_nets"]["-verbose"] = "(Show all net info)"
        let details["report_nets"]["-segments"] = "(Show all global segments for listed nets)"
        let details["report_nets"]["-significant_digits"] = ""
        let details["report_nets"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_nets"]["-physical"] = "(Show the physical attributes and routing information)"
   let details["report_ocvm"]={}
        let details["report_ocvm"]["-mode"] = "(report for scenario of this mode (default is current mode))"
        let details["report_ocvm"]["-corner"] = "(report for scenario of this corner (default is current corner))"
        let details["report_ocvm"]["-scenario"] = "(report for this scenario)"
        let details["report_ocvm"]["-type"] = "(Show info relevant to specific ocvm_type: aocvm, pocvm: "
        let details["report_ocvm"]["-early"] = "(Report for early condition)"
        let details["report_ocvm"]["-late"] = "(Report for late condition)"
        let details["report_ocvm"]["-rise"] = "(Report for rise transitions)"
        let details["report_ocvm"]["-fall"] = "(Report for fall transitions)"
        let details["report_ocvm"]["-clock"] = "(Only advanced OCV derate clock tables are shown)"
        let details["report_ocvm"]["-data"] = "(Only data advanced OCV derate tables are shown)"
        let details["report_ocvm"]["-cell_delay"] = "(Only cell delay advanced OCV derate tables are shown)"
        let details["report_ocvm"]["-net_delay"] = "(Only net delay advanced OCV derate tables are shown)"
        let details["report_ocvm"]["-list_annotated"] = "(Only leaf cells and global nets annotated with advanced OCV derate tables are listed)"
        let details["report_ocvm"]["-list_not_annotated"] = "(Only leaf cells and global nets not annotated with advanced OCV derate tables are listed)"
        let details["report_ocvm"]["-lib_cell"] = "(Report table annotation summary on a lib cell basis not a cell instance basis)"
        let details["report_ocvm"]["-coefficient"] = "(Show AOCVM coefficients)"
        let details["report_ocvm"]["-corner_sigma"] = "(Show POCVM corner sigma value)"
        let details["report_ocvm"]["-min_depth"] = "(Show the AOCVM minimum depth)"
        let details["report_ocvm"]["-nosplit"] = "(Do not split lines when columns overflow)"
        let details["report_ocvm"]["-significant_digits"] = ""
   let details["report_parasitic_parameters"]={}
        let details["report_parasitic_parameters"]["-corners"] = "(List of corners)"
   let details["report_parasitics"]={}
        let details["report_parasitics"]["-mode"] = "(report for scenario of this mode (default is current mode))"
        let details["report_parasitics"]["-corner"] = "(report for scenario of this corner (default is current corner))"
        let details["report_parasitics"]["-scenario"] = "(report for this scenario)"
        let details["report_parasitics"]["-early"] = "(Report for early condition)"
        let details["report_parasitics"]["-late"] = "(Report for late condition)"
        let details["report_parasitics"]["-rise"] = "(Report for rise transitions)"
        let details["report_parasitics"]["-fall"] = "(Report for fall transitions)"
        let details["report_parasitics"]["-significant_digits"] = ""
        let details["report_parasitics"]["-xcap"] = "(Print cross-capacitance information)"
        let details["report_parasitics"]["-percentile"] = "(Print percentile instead of histogram statistics)"
   let details["report_path_group"]={}
        let details["report_path_group"]["-modes"] = "(List of modes to report)"
        let details["report_path_group"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_path_groups"]={}
        let details["report_path_groups"]["-modes"] = "(List of modes to report)"
        let details["report_path_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_pg_mask_constraints"]={}
        let details["report_pg_mask_constraints"]["-tcl"] = "(report Tcl of this mask constraint)"
   let details["report_pg_patterns"]={}
        let details["report_pg_patterns"]["-tcl"] = "(report the Tcl command for this pattern)"
   let details["report_pg_regions"]={}
   let details["report_pg_strategies"]={}
        let details["report_pg_strategies"]["-tcl"] = "(report the content for Tcl purpose)"
   let details["report_pg_strategy_via_rules"]={}
        let details["report_pg_strategy_via_rules"]["-tcl"] = "(report the content for Tcl purpose)"
   let details["report_pg_via_master_rules"]={}
        let details["report_pg_via_master_rules"]["-tcl"] = "(report Tcl of this via rule)"
   let details["report_pin_blockages"]={}
        let details["report_pin_blockages"]["-verbose"] = "(Show all pin blockage info)"
        let details["report_pin_blockages"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_pin_blockages"]["-significant_digits"] = ""
   let details["report_pin_guides"]={}
        let details["report_pin_guides"]["-verbose"] = "(Show all pin guide info)"
        let details["report_pin_guides"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_pin_guides"]["-significant_digits"] = ""
   let details["report_pin_placement"]={}
        let details["report_pin_placement"]["-cells"] = ""
        let details["report_pin_placement"]["-nets"] = "(Specifies the collection of nets for pin placement reporting.)"
        let details["report_pin_placement"]["-pins"] = "(Specifies the collection of pins for pin placement reporting)"
        let details["report_pin_placement"]["-ports"] = "(Specifies the collection of ports for pin placement reporting)"
        let details["report_pin_placement"]["-format"] = ""
        let details["report_pin_placement"]["-self"] = "(Only report pins on current design)"
   let details["report_placement"]={}
        let details["report_placement"]["-physical_hierarchy_violations"] = ""
        let details["report_placement"]["-voltage_area_violations"] = ""
        let details["report_placement"]["-wirelength"] = ""
        let details["report_placement"]["-error_view"] = "(Error Browser output is written into this file)"
        let details["report_placement"]["-swimming_pool_area"] = "(Report area of swimming pools)"
        let details["report_placement"]["-thin_channel_area"] = "(Report area of thin channels)"
        let details["report_placement"]["-hard_macro_route_over"] = ""
        let details["report_placement"]["-hard_macro_overlap"] = "(Report number of hard macro overlaps)"
        let details["report_placement"]["-hard_macro_orientation_violations"] = ""
        let details["report_placement"]["-hard_macro_hierarchy_perimeter"] = ""
        let details["report_placement"]["-user_grid"] = "(Report violations of user grid)"
        let details["report_placement"]["-hierarchical"] = "(Report level-by-level in current design)"
        let details["report_placement"]["-ignore_fixed"] = "(ignore fixed cells for certain reports)"
        let details["report_placement"]["-verbose"] = ""
        let details["report_placement"]["-hard_macro_pin_track_violations"] = ""
        let details["report_placement"]["-hard_macro_density_gradient_violations"] = ""
        let details["report_placement"]["-poly_rule"] = "(Report the poly rule violations)"
        let details["report_placement"]["-macro_spacing_rule"] = "(Report number of hard macro spacing rule violations)"
   let details["report_placement_spacing_rules"]={}
   let details["report_pop_up_object_options"]={}
        let details["report_pop_up_object_options"]["-object_type"] = ""
   let details["report_port"]={}
        let details["report_port"]["-verbose"] = "(Show all port info)"
        let details["report_port"]["-design_rule"] = "(Only port design rule info)"
        let details["report_port"]["-drive"] = "(Only port drive info)"
        let details["report_port"]["-input_delay"] = "(Only port input delay info)"
        let details["report_port"]["-output_delay"] = "(Only port output delay info)"
        let details["report_port"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_port_buses"]={}
        let details["report_port_buses"]["-verbose"] = "(Show all port bus info)"
        let details["report_port_buses"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_port_protection_diodes"]={}
   let details["report_ports"]={}
        let details["report_ports"]["-verbose"] = "(Show all port info)"
        let details["report_ports"]["-design_rule"] = "(Only port design rule info)"
        let details["report_ports"]["-drive"] = "(Only port drive info)"
        let details["report_ports"]["-input_delay"] = "(Only port input delay info)"
        let details["report_ports"]["-output_delay"] = "(Only port output delay info)"
        let details["report_ports"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_power"]={}
        let details["report_power"]["-modes"] = "(List of mode names to report)"
        let details["report_power"]["-corners"] = "(List of corner names to report)"
        let details["report_power"]["-scenarios"] = ""
        let details["report_power"]["-significant_digits"] = ""
        let details["report_power"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_power"]["-levels"] = "(Report power consumption of design hierarchy till this level: "
        let details["report_power"]["-verbose"] = "(Print verbose output)"
        let details["report_power"]["-net_power"] = "(Report power consumption of nets)"
        let details["report_power"]["-cell_power"] = "(Report power consumption of cells)"
        let details["report_power"]["-leaf"] = "(Report all leaf-level cells)"
        let details["report_power"]["-hierarchy"] = "(Report power consumption of design hierarchy)"
        let details["report_power"]["-early"] = "(Report power for early timing)"
        let details["report_power"]["-include_boundary_nets"] = ""
        let details["report_power"]["-blocks"] = "(Create a report with physical blocks. Use the -levels option to indicate how many levels of physical blocks should be reported)"
        let details["report_power"]["-force"] = "(Report power for all the specified active/inactive scenarios, irrespective of the leakage_power/dynamic_power flags of a scenario)"
   let details["report_power_calculation"]={}
        let details["report_power_calculation"]["-capacitance"] = ""
        let details["report_power_calculation"]["-probability"] = ""
        let details["report_power_calculation"]["-toggle_rate"] = ""
        let details["report_power_calculation"]["-transition"] = ""
        let details["report_power_calculation"]["-rise_transition"] = ""
        let details["report_power_calculation"]["-fall_transition"] = ""
        let details["report_power_calculation"]["-scenarios"] = ""
        let details["report_power_calculation"]["-significant_digits"] = ""
        let details["report_power_calculation"]["-rise"] = "(Report only rise internal power)"
        let details["report_power_calculation"]["-fall"] = "(Report only fall internal power)"
        let details["report_power_calculation"]["-early"] = "(Report power for early timing)"
        let details["report_power_calculation"]["-verbose"] = "(Report power calculation in detail)"
   let details["report_power_clock_scaling"]={}
        let details["report_power_clock_scaling"]["-scenarios"] = "(Scenarios for which to get the clock scaling values)"
   let details["report_power_derate"]={}
        let details["report_power_derate"]["-scenarios"] = ""
        let details["report_power_derate"]["-include_inherited"] = "(Report for inherited derates)"
        let details["report_power_derate"]["-significant_digits"] = ""
        let details["report_power_derate"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_power_domain"]={}
        let details["report_power_domain"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_power_domains"]={}
        let details["report_power_domains"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_power_groups"]={}
   let details["report_power_io_constraints"]={}
        let details["report_power_io_constraints"]["-io_guide_list"] = ""
        let details["report_power_io_constraints"]["-significant_digits"] = ""
   let details["report_power_scopes"]={}
        let details["report_power_scopes"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_power_switch_patterns"]={}
        let details["report_power_switch_patterns"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_power_switch_placement_patterns"]={}
   let details["report_pr_rules"]={}
        let details["report_pr_rules"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["report_pr_rules"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["report_pr_rules"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_pr_rules"]["-all"] = "(To report all pr rules)"
   let details["report_programmable_spare_cell_mapping_rule"]={}
        let details["report_programmable_spare_cell_mapping_rule"]["-psc_type_id"] = "(a list of psc type id)"
        let details["report_programmable_spare_cell_mapping_rule"]["-all"] = "(report all psc mapping rules)"
   let details["report_pst"]={}
        let details["report_pst"]["-derived"] = "(derived PST for implementation)"
        let details["report_pst"]["-psts"] = "(List of PST name)"
        let details["report_pst"]["-supplies"] = ""
        let details["report_pst"]["-voltage_type"] = "(voltage type to report; default is none: "
        let details["report_pst"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_push_down_object_options"]={}
        let details["report_push_down_object_options"]["-object_type"] = ""
   let details["report_pvt"]={}
        let details["report_pvt"]["-object_list"] = "(List of cells and/or ports)"
        let details["report_pvt"]["-mismatched"] = "(Report only mismatched cells and/or ports)"
        let details["report_pvt"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_pvt"]["-significant_digits"] = ""
   let details["report_qor"]={}
        let details["report_qor"]["-modes"] = "(report scenarios of these modes (default is all modes))"
        let details["report_qor"]["-corners"] = "(report scenarios of these corners (default is all corners))"
        let details["report_qor"]["-scenarios"] = ""
        let details["report_qor"]["-include"] = ""
        let details["report_qor"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_qor"]["-significant_digits"] = ""
        let details["report_qor"]["-summary"] = "(Get summary of design costs)"
   let details["report_qor_snapshot"]={}
        let details["report_qor_snapshot"]["-name"] = "(snapshot name)"
        let details["report_qor_snapshot"]["-directory"] = "(snapshot directory)"
        let details["report_qor_snapshot"]["-display"] = "(show QoR snapshot report on browser)"
        let details["report_qor_snapshot"]["-save_as"] = "(save report as)"
   let details["report_rail_integrity_strategy"]={}
   let details["report_rdl_routes"]={}
        let details["report_rdl_routes"]["-nets"] = ""
        let details["report_rdl_routes"]["-nets_in_file"] = ""
        let details["report_rdl_routes"]["-file"] = "(output RDL net names into a specified file)"
        let details["report_rdl_routes"]["-open_nets"] = "(false|true)]"
        let details["report_rdl_routes"]["-create_error_data"] = "(false|flyline_only|verification)]"
   let details["report_ref_libs"]={}
        let details["report_ref_libs"]["-library"] = "(Library name)"
   let details["report_reference"]={}
        let details["report_reference"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_reference"]["-hierarchical"] = "(Report all the references inside the hierarchy)"
   let details["report_references"]={}
        let details["report_references"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_references"]["-hierarchical"] = "(Report all the references inside the hierarchy)"
   let details["report_routing_corridors"]={}
        let details["report_routing_corridors"]["-verbose"] = "(Show all routing_corridor info)"
        let details["report_routing_corridors"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_routing_corridors"]["-significant_digits"] = ""
        let details["report_routing_corridors"]["-output"] = "(To create a routing corridor Tcl script file)"
   let details["report_routing_guides"]={}
        let details["report_routing_guides"]["-rectangle"] = "(Route guide bounding box)"
        let details["report_routing_guides"]["-level"] = ""
   let details["report_routing_rules"]={}
        let details["report_routing_rules"]["-verbose"] = "(Show all routing rule info)"
        let details["report_routing_rules"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_routing_rules"]["-significant_digits"] = ""
        let details["report_routing_rules"]["-output"] = "(To create a routing rule Tcl script file)"
        let details["report_routing_rules"]["-of_objects"] = "(Names or collection of nets)"
   let details["report_rp_groups"]={}
        let details["report_rp_groups"]["-all"] = "(Report all Top Level RP groups)"
        let details["report_rp_groups"]["-verbose"] = "(Report failures in detail)"
        let details["report_rp_groups"]["-critical"] = "(Report failed relative placement groups)"
        let details["report_rp_groups"]["-unplaced"] = "(Report unplaced relative placement groups)"
        let details["report_rp_groups"]["-non_critical"] = "(Report placed relative placement groups for which all constraints are not respected)"
   let details["report_sadp_track_rule"]={}
        let details["report_sadp_track_rule"]["-all"] = "(Report all the track_rules)"
        let details["report_sadp_track_rule"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_sadp_track_rule"]["-significant_digits"] = ""
   let details["report_scan_chains"]={}
   let details["report_scenarios"]={}
        let details["report_scenarios"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_scenarios"]["-modes"] = "(report scenarios of these modes (default is all modes))"
        let details["report_scenarios"]["-corners"] = "(report scenarios of these corners (default is all corners))"
        let details["report_scenarios"]["-scenarios"] = ""
   let details["report_shaping_options"]={}
   let details["report_shields"]={}
        let details["report_shields"]["-nets"] = ""
        let details["report_shields"]["-per_layer"] = "(false|true)]"
        let details["report_shields"]["-output"] = "(output file name (default report_shields.txt))"
   let details["report_si_calculation"]={}
        let details["report_si_calculation"]["-mode"] = "(report for scenario of this mode (default is current mode))"
        let details["report_si_calculation"]["-corner"] = "(report for scenario of this corner (default is current corner))"
        let details["report_si_calculation"]["-scenario"] = "(report for this scenario)"
        let details["report_si_calculation"]["-min"] = "(Report for min delay)"
        let details["report_si_calculation"]["-max"] = "(Report for max delay)"
        let details["report_si_calculation"]["-rise"] = "(Report for rise transition)"
        let details["report_si_calculation"]["-fall"] = "(Report for fall transition)"
        let details["report_si_calculation"]["-significant_digits"] = ""
        let details["report_si_calculation"]["-clock"] = "(Use data for this clock)"
        let details["report_si_calculation"]["-source_rise"] = "(Use data for the rising clock source)"
        let details["report_si_calculation"]["-source_fall"] = "(Use data for the faling clock source)"
   let details["report_si_delay_analysis"]={}
        let details["report_si_delay_analysis"]["-ignored_arrival"] = "(Nets with their arrival windows ignored)"
        let details["report_si_delay_analysis"]["-excluded"] = "(Nets excluded as victim or aggressors)"
        let details["report_si_delay_analysis"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_signal_em"]={}
        let details["report_signal_em"]["-verbose"] = "(Display the report in verbose format)"
        let details["report_signal_em"]["-violated"] = "(Display the report for violations)"
        let details["report_signal_em"]["-nets"] = "(List of nets)"
        let details["report_signal_em"]["-significant_digits"] = ""
   let details["report_signal_io_constraints"]={}
        let details["report_signal_io_constraints"]["-io_guide_list"] = ""
        let details["report_signal_io_constraints"]["-significant_digits"] = ""
   let details["report_site_defs"]={}
        let details["report_site_defs"]["-tech"] = "(Tech for finding objects, default is current library's tech)"
        let details["report_site_defs"]["-library"] = "(Library for finding objects, default is current library's tech)"
        let details["report_site_defs"]["-significant_digits"] = ""
        let details["report_site_defs"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_size_only"]={}
        let details["report_size_only"]["-all"] = "(Report details of all size_only cells)"
   let details["report_stage"]={}
        let details["report_stage"]["-mode"] = "(report for scenario of this mode (default is current mode))"
        let details["report_stage"]["-corner"] = "(report for scenario of this corner (default is current corner))"
        let details["report_stage"]["-scenario"] = "(report for this scenario)"
        let details["report_stage"]["-min"] = "(Report for min delay)"
        let details["report_stage"]["-max"] = "(Report for max delay)"
        let details["report_stage"]["-rise"] = "(Report for rise transition)"
        let details["report_stage"]["-fall"] = "(Report for fall transition)"
        let details["report_stage"]["-significant_digits"] = ""
        let details["report_stage"]["-clock"] = "(Use data for this clock)"
        let details["report_stage"]["-source_rise"] = "(Use data for the rising clock source)"
        let details["report_stage"]["-source_fall"] = "(Use data for the faling clock source)"
   let details["report_supernet_exceptions"]={}
        let details["report_supernet_exceptions"]["-verbose"] = "(Show all info)"
        let details["report_supernet_exceptions"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_supernet_exceptions"]["-significant_digits"] = ""
   let details["report_supply_net"]={}
        let details["report_supply_net"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_supply_nets"]={}
        let details["report_supply_nets"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_supply_ports"]={}
        let details["report_supply_ports"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_supply_sets"]={}
        let details["report_supply_sets"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_switching_activity"]={}
        let details["report_switching_activity"]["-cells"] = "(Report switching activity only for these cells)"
        let details["report_switching_activity"]["-modes"] = "(List of mode names to report)"
        let details["report_switching_activity"]["-corners"] = "(List of corner names to report)"
        let details["report_switching_activity"]["-scenarios"] = ""
        let details["report_switching_activity"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_switching_activity"]["-switching_activity_types"] = ""
        let details["report_switching_activity"]["-verbose"] = "(Print verbose output)"
        let details["report_switching_activity"]["-coverage"] = "(Compute switching activity coverage)"
        let details["report_switching_activity"]["-toggle_rate_limit"] = ""
        let details["report_switching_activity"]["-list_low_activity"] = "(Report nets with low activity)"
        let details["report_switching_activity"]["-hierarchy"] = "(Report switching activity hierarchically)"
        let details["report_switching_activity"]["-essential"] = "(Report essential switching activity)"
   let details["report_taps"]={}
        let details["report_taps"]["-static_current"] = "(Report tap static current)"
   let details["report_target_library_subset"]={}
        let details["report_target_library_subset"]["-objects"] = "(Hierarchical cells for which to report subsets)"
        let details["report_target_library_subset"]["-top"] = "(To report the subset on the top block)"
        let details["report_target_library_subset"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_threshold_voltage_group"]={}
        let details["report_threshold_voltage_group"]["-verbose"] = "(Print verbose output)"
        let details["report_threshold_voltage_group"]["-significant_digits"] = ""
        let details["report_threshold_voltage_group"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_threshold_voltage_groups"]={}
        let details["report_threshold_voltage_groups"]["-verbose"] = "(Print verbose output)"
        let details["report_threshold_voltage_groups"]["-significant_digits"] = ""
        let details["report_threshold_voltage_groups"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_timing"]={}
        let details["report_timing"]["-modes"] = "(use scenarios of these modes (default is all modes))"
        let details["report_timing"]["-corners"] = "(use scenarios of these corners (default is all corners))"
        let details["report_timing"]["-scenarios"] = ""
        let details["report_timing"]["-groups"] = "(List of path group names to report (default is all path groups))"
        let details["report_timing"]["-nworst"] = "(Number of paths per endpoint: "
        let details["report_timing"]["-max_paths"] = "(Maximum total paths to find: "
        let details["report_timing"]["-delay_type"] = ""
        let details["report_timing"]["-path_type"] = ""
        let details["report_timing"]["-report_by"] = "(Path ordering criteria: "
        let details["report_timing"]["-sort_by"] = "(Sorting criteria: "
        let details["report_timing"]["-exception"] = ""
        let details["report_timing"]["-slack_lesser_than"] = ""
        let details["report_timing"]["-include_hierarchical_pins"] = ""
        let details["report_timing"]["-from"] = "(List of path startpoints or clocks)"
        let details["report_timing"]["-rise_from"] = ""
        let details["report_timing"]["-fall_from"] = ""
        let details["report_timing"]["-through"] = ""
        let details["report_timing"]["-rise_through"] = ""
        let details["report_timing"]["-fall_through"] = ""
        let details["report_timing"]["-to"] = "(List of path endpoints or clocks)"
        let details["report_timing"]["-rise_to"] = ""
        let details["report_timing"]["-fall_to"] = ""
        let details["report_timing"]["-exclude"] = ""
        let details["report_timing"]["-rise_exclude"] = ""
        let details["report_timing"]["-fall_exclude"] = ""
        let details["report_timing"]["-start_end_pair"] = "(List worst path per start-endpoint pair)"
        let details["report_timing"]["-significant_digits"] = ""
        let details["report_timing"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_timing"]["-nets"] = "(Print nets)"
        let details["report_timing"]["-physical"] = "(Print pin XY locations)"
        let details["report_timing"]["-attributes"] = "(Print attributes)"
        let details["report_timing"]["-input_pins"] = "(Print input pins)"
        let details["report_timing"]["-skip_transparency_window"] = ""
        let details["report_timing"]["-transition_time"] = "(Print transition times)"
        let details["report_timing"]["-capacitance"] = "(Print capacitances)"
        let details["report_timing"]["-process"] = "(Print process numbers/labels)"
        let details["report_timing"]["-voltage"] = "(Print voltages)"
        let details["report_timing"]["-temperature"] = "(Print temperatures)"
        let details["report_timing"]["-derate"] = "(Print timing derates)"
        let details["report_timing"]["-variation"] = "(Report variation-aware info)"
        let details["report_timing"]["-crosstalk_delta"] = "(Print SI delta-delays)"
   let details["report_timing_derate"]={}
        let details["report_timing_derate"]["-corners"] = "(Restrict report to the following corners; default is to report only the current corner)"
        let details["report_timing_derate"]["-include_inherited"] = "(Display inherited derates)"
        let details["report_timing_derate"]["-aocvm_guardband"] = "(Display Aocvm Guard Band)"
        let details["report_timing_derate"]["-pocvm_guardband"] = "(Display Pocvm Guard Band)"
        let details["report_timing_derate"]["-pocvm_coefficient_scale_factor"] = ""
        let details["report_timing_derate"]["-increment"] = "(Display incremental derates)"
        let details["report_timing_derate"]["-significant_digits"] = ""
        let details["report_timing_derate"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_topological_constraints"]={}
        let details["report_topological_constraints"]["-all"] = "(To report all topological pin feedthrough constraints in the current block)"
   let details["report_topology_edges"]={}
        let details["report_topology_edges"]["-design"] = "(Top design for finding objects)"
        let details["report_topology_edges"]["-verbose"] = "(Show all topology_edge info)"
        let details["report_topology_edges"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_topology_edges"]["-significant_digits"] = ""
   let details["report_topology_nodes"]={}
        let details["report_topology_nodes"]["-design"] = "(Top design for finding objects)"
        let details["report_topology_nodes"]["-verbose"] = "(Show all topology_node info)"
        let details["report_topology_nodes"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_topology_nodes"]["-significant_digits"] = ""
   let details["report_track_constraints"]={}
   let details["report_tracks"]={}
        let details["report_tracks"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_tracks"]["-significant_digits"] = ""
        let details["report_tracks"]["-layer"] = "(Routing layer of tracks to report)"
        let details["report_tracks"]["-dir"] = "(Direction of tracks to report: "
   let details["report_transitive_fanin"]={}
        let details["report_transitive_fanin"]["-to"] = "(list of sink pins, ports, and/or nets)"
        let details["report_transitive_fanin"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_transitive_fanout"]={}
        let details["report_transitive_fanout"]["-from"] = "(List of source ports, pins and/or nets)"
        let details["report_transitive_fanout"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_unbound"]={}
        let details["report_unbound"]["-verbose"] = "(Prints verbose information)"
        let details["report_unbound"]["-hierarchical"] = "(Reports unbound objects information including objects inside the block)"
        let details["report_unbound"]["-cell"] = "(Prints unbound cell instance(s) information)"
        let details["report_unbound"]["-via"] = "(Prints unbound via(s) information)"
        let details["report_unbound"]["-site_row"] = "(Prints unbound site row(s) information)"
        let details["report_unbound"]["-site_array"] = "(Prints unbound site array(s) information)"
   let details["report_units"]={}
        let details["report_units"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_user_units"]={}
        let details["report_user_units"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_utilization"]={}
        let details["report_utilization"]["-of_objects"] = ""
        let details["report_utilization"]["-config"] = "(Utilization configuration to use)"
        let details["report_utilization"]["-verbose"] = "(Prints number and aggregate area of cells not completely within the block-boundary)"
        let details["report_utilization"]["-scope"] = "(Scope of the configuration: "
   let details["report_versions"]={}
   let details["report_via_defs"]={}
        let details["report_via_defs"]["-design"] = "(Top design for finding objects)"
        let details["report_via_defs"]["-library"] = "(Library for finding objects)"
        let details["report_via_defs"]["-tech"] = "(Tech for finding object)"
        let details["report_via_defs"]["-verbose"] = "(Show all via_def info)"
        let details["report_via_defs"]["-significant_digits"] = ""
        let details["report_via_defs"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_via_ladder_constraints"]={}
        let details["report_via_ladder_constraints"]["-pins"] = "(Collection or names of pins)"
        let details["report_via_ladder_constraints"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_via_ladder_rules"]={}
        let details["report_via_ladder_rules"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_via_mapping"]={}
        let details["report_via_mapping"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_via_mapping"]["-from"] = "(From via pattern)"
        let details["report_via_mapping"]["-to"] = "(To via pattern)"
   let details["report_via_regions"]={}
        let details["report_via_regions"]["-design"] = "(Top design for finding objects)"
        let details["report_via_regions"]["-verbose"] = "(Show all via_region info)"
        let details["report_via_regions"]["-significant_digits"] = ""
        let details["report_via_regions"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_via_rules"]={}
        let details["report_via_rules"]["-design"] = "(Top design for finding objects)"
        let details["report_via_rules"]["-library"] = "(Library for finding objects)"
        let details["report_via_rules"]["-tech"] = "(Tech for finding object)"
        let details["report_via_rules"]["-verbose"] = "(Show all via rule info)"
        let details["report_via_rules"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_via_rules"]["-all"] = "(To report all via rules)"
   let details["report_virtual_pads"]={}
   let details["report_voltage_area_rules"]={}
        let details["report_voltage_area_rules"]["-nosplit"] = "(Don't split lines if column overflows)"
   let details["report_voltage_areas"]={}
        let details["report_voltage_areas"]["-design"] = "(Top design for finding objects)"
        let details["report_voltage_areas"]["-verbose"] = "(Show all voltage_area info)"
        let details["report_voltage_areas"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["report_voltage_areas"]["-significant_digits"] = ""
        let details["report_voltage_areas"]["-hierarchical"] = "(Show hierarchical voltage_area info)"
   let details["reset_app_options"]={}
        let details["reset_app_options"]["-block"] = "(Reset the options set on this block)"
        let details["reset_app_options"]["-user_default"] = "(Reset the user-default value for the option)"
   let details["reset_cell_mode"]={}
   let details["reset_design"]={}
   let details["reset_path"]={}
        let details["reset_path"]["-hold"] = "(Reset hold timing)"
        let details["reset_path"]["-setup"] = "(Reset setup timing)"
        let details["reset_path"]["-rise"] = "(Reset timing for rising signal at endpoint)"
        let details["reset_path"]["-fall"] = "(Reset timing for falling signal at endpoint)"
        let details["reset_path"]["-all"] = "(Remove all timing exceptions in this mode)"
        let details["reset_path"]["-from"] = "(List of path startpoints or clocks)"
        let details["reset_path"]["-rise_from"] = ""
        let details["reset_path"]["-fall_from"] = ""
        let details["reset_path"]["-through"] = ""
        let details["reset_path"]["-rise_through"] = ""
        let details["reset_path"]["-fall_through"] = ""
        let details["reset_path"]["-to"] = "(List of path endpoints or clocks)"
        let details["reset_path"]["-rise_to"] = ""
        let details["reset_path"]["-fall_to"] = ""
   let details["reset_paths"]={}
        let details["reset_paths"]["-hold"] = "(Reset hold timing)"
        let details["reset_paths"]["-setup"] = "(Reset setup timing)"
        let details["reset_paths"]["-rise"] = "(Reset timing for rising signal at endpoint)"
        let details["reset_paths"]["-fall"] = "(Reset timing for falling signal at endpoint)"
        let details["reset_paths"]["-all"] = "(Remove all timing exceptions in this mode)"
        let details["reset_paths"]["-from"] = "(List of path startpoints or clocks)"
        let details["reset_paths"]["-rise_from"] = ""
        let details["reset_paths"]["-fall_from"] = ""
        let details["reset_paths"]["-through"] = ""
        let details["reset_paths"]["-rise_through"] = ""
        let details["reset_paths"]["-fall_through"] = ""
        let details["reset_paths"]["-to"] = "(List of path endpoints or clocks)"
        let details["reset_paths"]["-rise_to"] = ""
        let details["reset_paths"]["-fall_to"] = ""
   let details["reset_placement"]={}
        let details["reset_placement"]["-spread_cells"] = "(Spread the unplaced cells to the right of the core)"
   let details["reset_power_clock_scaling"]={}
        let details["reset_power_clock_scaling"]["-all"] = "(Reset the entire scaling data)"
        let details["reset_power_clock_scaling"]["-scenarios"] = "(Scenarios for which to reset the scaling values)"
   let details["reset_power_derate"]={}
        let details["reset_power_derate"]["-scenarios"] = ""
        let details["reset_power_derate"]["-groups"] = "(Specify the power group names)"
   let details["reset_power_group"]={}
        let details["reset_power_group"]["-name"] = "(power group name to be reset)"
        let details["reset_power_group"]["-all"] = "(to reset all user-specified power group)"
   let details["reset_pvt"]={}
        let details["reset_pvt"]["-corners"] = "(List of corners)"
   let details["reset_switching_activity"]={}
        let details["reset_switching_activity"]["-modes"] = "(Reset activity for specified modes)"
        let details["reset_switching_activity"]["-corners"] = "(Reset activity for specified corners)"
        let details["reset_switching_activity"]["-scenarios"] = "(Reset activity for specified scenarios)"
        let details["reset_switching_activity"]["-path_sources"] = ""
        let details["reset_switching_activity"]["-state_condition"] = ""
   let details["reset_timing_derate"]={}
        let details["reset_timing_derate"]["-hierarchical_net_delay"] = ""
        let details["reset_timing_derate"]["-scalar"] = "(Reset derate factor for deterministic delays only. Option currently ignored.)"
        let details["reset_timing_derate"]["-variation"] = "(Reset derate factor for statistical delays only. Option currently ignored.)"
        let details["reset_timing_derate"]["-aocvm_guardband"] = "(Reset the AOCVM Guard Band)"
        let details["reset_timing_derate"]["-pocvm_guardband"] = "(Reset the POCVM Guard Band)"
        let details["reset_timing_derate"]["-pocvm_coefficient_scale_factor"] = ""
        let details["reset_timing_derate"]["-increment"] = "(Reset incremental derate factors)"
        let details["reset_timing_derate"]["-corners"] = "(List of corners)"
   let details["reset_upf"]={}
   let details["reshape_objects"]={}
        let details["reshape_objects"]["-add"] = "(add rectangle to an object shape)"
        let details["reshape_objects"]["-cut"] = "(cut object shape by rectangle)"
        let details["reshape_objects"]["-cut_by_locked"] = "(cut object shape by another locked object)"
        let details["reshape_objects"]["-ignore_end_cap"] = "(ignore end caps when cutting wires)"
        let details["reshape_objects"]["-gap"] = "(cut gap)"
        let details["reshape_objects"]["-gap_min_spacing"] = "(min spacing as cut gap)"
        let details["reshape_objects"]["-keep_inside"] = "(keep inside part when object being cut)"
        let details["reshape_objects"]["-via_cut_pattern"] = "(update via cut pattern)"
   let details["resize_objects"]={}
        let details["resize_objects"]["-bbox"] = "(new bounding box)"
        let details["resize_objects"]["-delta"] = "(displacement to the bounding box)"
        let details["resize_objects"]["-scale"] = "(scale bounding box)"
        let details["resize_objects"]["-width"] = "(new bounding box width)"
        let details["resize_objects"]["-height"] = "(new bounding box height)"
        let details["resize_objects"]["-utilization"] = "(new utilization: "
        let details["resize_objects"]["-aspect"] = "(new bounding box aspect: "
        let details["resize_objects"]["-area"] = "(new area)"
        let details["resize_objects"]["-force"] = "(ignore locked status of the objects)"
        let details["resize_objects"]["-simple"] = "(disable snapping and editing constraints)"
        let details["resize_objects"]["-quiet"] = "(suppress all warnings)"
   let details["resize_polygons"]={}
        let details["resize_polygons"]["-objects"] = "(Use as input geometry)"
        let details["resize_polygons"]["-size"] = "(Distance to stretches boundaries. Can be 1, 2, or 4 numbers)"
   let details["resolve_pg_nets"]={}
        let details["resolve_pg_nets"]["-design"] = "(Top design for finding objects)"
        let details["resolve_pg_nets"]["-check_only"] = "(check inconsisitency only)"
        let details["resolve_pg_nets"]["-verbose"] = "(Verbose output)"
   let details["revert_blocks"]={}
   let details["revert_cell_sizing"]={}
        let details["revert_cell_sizing"]["-cells"] = "(cells to be reverted)"
        let details["revert_cell_sizing"]["-include_adjacent_sized_cells"] = ""
        let details["revert_cell_sizing"]["-adjacent_cell_distance"] = ""
   let details["rotate_objects"]={}
        let details["rotate_objects"]["-orient"] = "(orientation value to be set on the objects: "
        let details["rotate_objects"]["-angle"] = "(angle to rotate by: "
        let details["rotate_objects"]["-anchor"] = "(anchor point: "
        let details["rotate_objects"]["-pivot"] = "(pivot point)"
   let details["route_auto"]={}
        let details["route_auto"]["-max_detail_route_iterations"] = ""
        let details["route_auto"]["-stop_after_track_assignment"] = "(false|true)]"
        let details["route_auto"]["-save_after_global_route"] = "(false|true)]"
        let details["route_auto"]["-save_after_track_assignment"] = "(false|true)]"
        let details["route_auto"]["-save_after_detail_route"] = "(false|true)]"
        let details["route_auto"]["-save_cell_prefix"] = ""
        let details["route_auto"]["-reuse_existing_global_route"] = "(false|true)]"
        let details["route_auto"]["-route_nondefault_nets_first"] = "(false|true)]"
   let details["route_busplans"]={}
        let details["route_busplans"]["-incremental"] = "(Incrementally route and plan)"
        let details["route_busplans"]["-force"] = "(disable layer checking and force to route)"
        let details["route_busplans"]["-quick"] = "(auto-plan busplans)"
        let details["route_busplans"]["-reduce_virtual_pins"] = "(create fewer virtual pins)"
   let details["route_clock_straps"]={}
        let details["route_clock_straps"]["-nets"] = "(List of nets)"
        let details["route_clock_straps"]["-topology"] = ""
        let details["route_clock_straps"]["-fishbone_fanout"] = ""
        let details["route_clock_straps"]["-fishbone_span"] = ""
        let details["route_clock_straps"]["-fishbone_sub_span"] = ""
        let details["route_clock_straps"]["-stop_after_global_route"] = "(false|true)]"
        let details["route_clock_straps"]["-fishbone_layers"] = ""
        let details["route_clock_straps"]["-max_detail_route_iterations"] = ""
   let details["route_custom"]={}
        let details["route_custom"]["-nets"] = "(collection of nets)"
        let details["route_custom"]["-keep_session"] = "(false|true)]"
   let details["route_detail"]={}
        let details["route_detail"]["-incremental"] = "(false|true)]"
        let details["route_detail"]["-start_iteration"] = ""
        let details["route_detail"]["-max_number_iterations"] = ""
        let details["route_detail"]["-initial_drc_from_input"] = "(false|true)]"
        let details["route_detail"]["-coordinates"] = ""
   let details["route_eco"]={}
        let details["route_eco"]["-nets"] = "(eco route the nets provided (with this option open net driven is always false))"
        let details["route_eco"]["-max_detail_route_iterations"] = ""
        let details["route_eco"]["-utilize_dangling_wires"] = "(false|true)]"
        let details["route_eco"]["-reroute"] = "(any_nets|modified_nets_only|modified_nets_first_then_others)]"
        let details["route_eco"]["-max_reported_nets"] = ""
        let details["route_eco"]["-open_net_driven"] = "(false|true)]"
        let details["route_eco"]["-reuse_existing_global_route"] = "(false|true)]"
   let details["route_fishbone"]={}
        let details["route_fishbone"]["-nets"] = "(List of nets)"
        let details["route_fishbone"]["-stop_after_global_route"] = "(false|true)]"
   let details["route_global"]={}
        let details["route_global"]["-effort_level"] = "(global route effort: "
        let details["route_global"]["-congestion_map_only"] = "(false|true)]"
        let details["route_global"]["-reuse_existing_global_route"] = "(false|true)]"
        let details["route_global"]["-floorplan"] = "(false|true)]"
        let details["route_global"]["-virtual_flat"] = ""
        let details["route_global"]["-host_options"] = ""
   let details["route_group"]={}
        let details["route_group"]["-nets"] = "(collection of nets)"
        let details["route_group"]["-all_clock_nets"] = "(route all clock nets)"
        let details["route_group"]["-stop_after_global_route"] = "(false|true)]"
        let details["route_group"]["-utilize_dangling_wires"] = "(false|true)]"
        let details["route_group"]["-max_detail_route_iterations"] = ""
        let details["route_group"]["-from_file"] = ""
        let details["route_group"]["-reuse_existing_global_route"] = "(false|true)]"
        let details["route_group"]["-floorplan"] = "(false|true)]"
        let details["route_group"]["-global_planning"] = "(false|true)]"
        let details["route_group"]["-route_nondefault_nets_first"] = "(false|true)]"
   let details["route_opt"]={}
        let details["route_opt"]["-xtalk_reduction"] = "(route_opt xtalk reduction)"
   let details["route_rdl_differential"]={}
        let details["route_rdl_differential"]["-layers"] = ""
        let details["route_rdl_differential"]["-nets"] = ""
        let details["route_rdl_differential"]["-nets_in_file"] = ""
        let details["route_rdl_differential"]["-mode"] = "(length|parallel)]"
        let details["route_rdl_differential"]["-objects"] = ""
        let details["route_rdl_differential"]["-allow_push_neighbor_nets"] = "(false|true)]"
   let details["route_rdl_flip_chip"]={}
        let details["route_rdl_flip_chip"]["-layers"] = ""
        let details["route_rdl_flip_chip"]["-nets"] = ""
        let details["route_rdl_flip_chip"]["-nets_in_file"] = ""
        let details["route_rdl_flip_chip"]["-skip_detail_route"] = "(false|true)]"
        let details["route_rdl_flip_chip"]["-reuse_existing_global_route"] = "(false|true)]"
        let details["route_rdl_flip_chip"]["-objects"] = ""
   let details["route_track"]={}
   let details["run_block_compile_pg"]={}
        let details["run_block_compile_pg"]["-skip_top"] = "(do not create PG for top-portion design)"
        let details["run_block_compile_pg"]["-host_options"] = ""
   let details["run_block_script"]={}
        let details["run_block_script"]["-script"] = "(Script to run on blocks)"
        let details["run_block_script"]["-blocks"] = "(List of blocks to run)"
        let details["run_block_script"]["-cells"] = "(List of cell instances to run)"
        let details["run_block_script"]["-host_options"] = ""
        let details["run_block_script"]["-var_list"] = ""
        let details["run_block_script"]["-work_dir"] = ""
        let details["run_block_script"]["-name"] = "(Name to use for distributed run)"
        let details["run_block_script"]["-reuse_processes"] = "(Allow more than 1 block to run per process)"
        let details["run_block_script"]["-force"] = "(Force run even if data may be lost in modified blocks)"
        let details["run_block_script"]["-run_order"] = ""
   let details["run_monitor_gui"]={}
        let details["run_monitor_gui"]["-kill"] = "(Terminate all running instances of the monitor gui from this session.)"
        let details["run_monitor_gui"]["-nolaunch"] = "(Works together with -kill: only terminate, no launching)"
   let details["saif_map"]={}
        let details["saif_map"]["-start"] = "(Start the saif map notification process)"
        let details["saif_map"]["-stop"] = "(Delete the Mapping Table and stop the notification process)"
        let details["saif_map"]["-write_map"] = "(Write the Mapping Table)"
        let details["saif_map"]["-hsep"] = "(Write the Mapping Table using the specified hier char)"
        let details["saif_map"]["-type"] = "(Write the PTPX commands)"
        let details["saif_map"]["-read_map"] = "(Read the Mapping Table)"
   let details["save_block"]={}
        let details["save_block"]["-as"] = "(Name [libName:]blockName[/labelName][.viewName] of block to be saved as)"
        let details["save_block"]["-label"] = "(specify the desired user label while keeping lib, block, and view the same)"
        let details["save_block"]["-force"] = "(force save -as if destination block is modified)"
        let details["save_block"]["-hierarchical"] = "(save all block views in this design hierarchy)"
        let details["save_block"]["-verbose"] = "(Verbose messages)"
        let details["save_block"]["-compress"] = "(Save in compressed format)"
   let details["save_drc_error_data"]={}
        let details["save_drc_error_data"]["-as"] = "(Save the error data to this file name)"
   let details["save_ems_database"]={}
        let details["save_ems_database"]["-as"] = ""
        let details["save_ems_database"]["-overwrite"] = "(Overwrites the EMS database file, if it already exists)"
        let details["save_ems_database"]["-all"] = "(save all open databases)"
   let details["save_lib"]={}
        let details["save_lib"]["-as"] = "(Library name to be saved as)"
        let details["save_lib"]["-all"] = "(Save all libraries in memory)"
        let details["save_lib"]["-version"] = "(The file version to save to)"
        let details["save_lib"]["-compress"] = "(Save in compressed format)"
   let details["save_upf"]={}
        let details["save_upf"]["-format"] = "(Output format: Values: both, user, supplemental)"
        let details["save_upf"]["-for_empty_blackbox"] = "(Generate UPF for empty black-box)"
        let details["save_upf"]["-for_etm"] = "(Generate UPF for ETM)"
        let details["save_upf"]["-full_chip"] = "(Generate full-chip UPF)"
        let details["save_upf"]["-force_reference"] = ""
        let details["save_upf"]["-force_no_reference"] = ""
        let details["save_upf"]["-include"] = ""
        let details["save_upf"]["-exclude"] = ""
   let details["send_status"]={}
        let details["send_status"]["-status"] = "(Status message to send)"
   let details["set_3d_chip_placement"]={}
        let details["set_3d_chip_placement"]["-chip"] = "(Name of chip)"
        let details["set_3d_chip_placement"]["-location"] = "(Location of chip {x y z}, default is {0 0 0})"
        let details["set_3d_chip_placement"]["-orientation"] = ""
        let details["set_3d_chip_placement"]["-scaling_factor"] = ""
   let details["set_annotated_check"]={}
        let details["set_annotated_check"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_annotated_check"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_annotated_check"]["-scenarios"] = ""
        let details["set_annotated_check"]["-setup"] = "(setup arc sense)"
        let details["set_annotated_check"]["-hold"] = "(hold arc sense)"
        let details["set_annotated_check"]["-recovery"] = "(recovery arc sense)"
        let details["set_annotated_check"]["-removal"] = "(removal arc sense)"
        let details["set_annotated_check"]["-nochange_high"] = "(nochange_high arc sense)"
        let details["set_annotated_check"]["-nochange_low"] = "(nochange_low arc sense)"
        let details["set_annotated_check"]["-width"] = "(pulsewidth arc sense)"
        let details["set_annotated_check"]["-period"] = "(period arc sense)"
        let details["set_annotated_check"]["-rise"] = "(rise arc check value)"
        let details["set_annotated_check"]["-fall"] = "(fall arc check value)"
        let details["set_annotated_check"]["-increment"] = "(increment check value)"
        let details["set_annotated_check"]["-override_increment"] = "(replace increment check value)"
        let details["set_annotated_check"]["-clock"] = "(Clock rising or falling check: "
        let details["set_annotated_check"]["-from"] = "(List of from pins/ports)"
        let details["set_annotated_check"]["-to"] = "(List of to pins/ports)"
   let details["set_annotated_delay"]={}
        let details["set_annotated_delay"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_annotated_delay"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_annotated_delay"]["-scenarios"] = ""
        let details["set_annotated_delay"]["-cell"] = "(annotated cell delay)"
        let details["set_annotated_delay"]["-net"] = "(annotated net delay)"
        let details["set_annotated_delay"]["-min"] = "(Set minimum delay only)"
        let details["set_annotated_delay"]["-max"] = "(Set maximum delay only)"
        let details["set_annotated_delay"]["-rise"] = "(Set rise delay only)"
        let details["set_annotated_delay"]["-fall"] = "(Set fall delay only)"
        let details["set_annotated_delay"]["-from"] = "(List of from pins/ports)"
        let details["set_annotated_delay"]["-to"] = "(List of to pins/ports)"
   let details["set_annotated_power"]={}
        let details["set_annotated_power"]["-scenarios"] = ""
        let details["set_annotated_power"]["-leakage"] = "(Specify leakage power in user power units)"
        let details["set_annotated_power"]["-internal"] = "(Specify internal dynamic power in user power units)"
        let details["set_annotated_power"]["-supply_net"] = ""
   let details["set_annotated_transition"]={}
        let details["set_annotated_transition"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_annotated_transition"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_annotated_transition"]["-scenarios"] = ""
        let details["set_annotated_transition"]["-min"] = "(Set minimum transition only)"
        let details["set_annotated_transition"]["-max"] = "(Set maximum transition only)"
        let details["set_annotated_transition"]["-rise"] = "(Set rise transition only)"
        let details["set_annotated_transition"]["-fall"] = "(Set fall transition only)"
   let details["set_aocvm_coefficient"]={}
   let details["set_app_options"]={}
        let details["set_app_options"]["-block"] = "(Set options on this block)"
        let details["set_app_options"]["-as_user_default"] = "(Update the user-default)"
        let details["set_app_options"]["-category"] = "(Category of the application option)"
        let details["set_app_options"]["-name"] = "(Name of the application option)"
        let details["set_app_options"]["-value"] = "(Value of the application option)"
        let details["set_app_options"]["-list"] = ""
   let details["set_app_var"]={}
        let details["set_app_var"]["-default"] = "(Reset the variable to its default value)"
   let details["set_attribute"]={}
        let details["set_attribute"]["-class"] = "(class name; for compatibility: "
        let details["set_attribute"]["-quiet"] = "(Suppress warning messages)"
        let details["set_attribute"]["-objects"] = "(List of collections of objects)"
        let details["set_attribute"]["-name"] = "(Attribute name)"
        let details["set_attribute"]["-value"] = "(Attribute value)"
   let details["set_base_lib"]={}
        let details["set_base_lib"]["-library"] = "(Library)"
        let details["set_base_lib"]["-base_lib"] = "(Base library path)"
   let details["set_blackbox_clock_port"]={}
   let details["set_blackbox_port_drive"]={}
        let details["set_blackbox_port_drive"]["-type"] = "(Specify the pre-defined drive type for the ports)"
        let details["set_blackbox_port_drive"]["-input_transition_rise"] = ""
        let details["set_blackbox_port_drive"]["-input_transition_fall"] = ""
   let details["set_blackbox_port_load"]={}
        let details["set_blackbox_port_load"]["-value"] = "(Specify the load capacitance value for the ports)"
        let details["set_blackbox_port_load"]["-type"] = "(Specify the pre-defined load type for the ports)"
        let details["set_blackbox_port_load"]["-factor"] = "(Specify the multiplication factor of the load type)"
   let details["set_block_grid_references"]={}
        let details["set_block_grid_references"]["-designs"] = "(Specify the block designs)"
        let details["set_block_grid_references"]["-grid"] = "(Specify the block grid to associate with)"
        let details["set_block_grid_references"]["-snap_point"] = "(Specify the design's snap point)"
        let details["set_block_grid_references"]["-adjust_snap_point_of_cell"] = ""
        let details["set_block_grid_references"]["-reset"] = "(Reset the block design reference's block grid settings)"
   let details["set_block_pin_constraints"]={}
        let details["set_block_pin_constraints"]["-cells"] = ""
        let details["set_block_pin_constraints"]["-allowed_layers"] = ""
        let details["set_block_pin_constraints"]["-corner_keepout_num_tracks"] = ""
        let details["set_block_pin_constraints"]["-corner_keepout_distance"] = ""
        let details["set_block_pin_constraints"]["-pin_spacing"] = "(Minimum number of wire tracks between adjacent block pins: "
        let details["set_block_pin_constraints"]["-pin_spacing_distance"] = ""
        let details["set_block_pin_constraints"]["-allow_feedthroughs"] = ""
        let details["set_block_pin_constraints"]["-exclude_sides"] = ""
        let details["set_block_pin_constraints"]["-sides"] = ""
        let details["set_block_pin_constraints"]["-self"] = "(Set pin constraints for current top design)"
        let details["set_block_pin_constraints"]["-hard_constraints"] = ""
        let details["set_block_pin_constraints"]["-stacking_allowed"] = ""
   let details["set_block_to_top_map"]={}
        let details["set_block_to_top_map"]["-block"] = "(Block cell in the netlist)"
        let details["set_block_to_top_map"]["-path"] = "(Hierarchy path to a block)"
        let details["set_block_to_top_map"]["-auto_clock"] = "(automatically associate clocks in blocks: "
        let details["set_block_to_top_map"]["-corner"] = ""
        let details["set_block_to_top_map"]["-mode"] = ""
        let details["set_block_to_top_map"]["-clock"] = ""
        let details["set_block_to_top_map"]["-inverted_clock"] = ""
        let details["set_block_to_top_map"]["-unused_clock"] = ""
        let details["set_block_to_top_map"]["-ignore_waveform"] = "(ignore mismatches between top and block clock waveforms)"
        let details["set_block_to_top_map"]["-report_only"] = "(only report on auto_clock creation)"
   let details["set_boundary_budget_constraints"]={}
        let details["set_boundary_budget_constraints"]["-name"] = "(Name of the boundary constraint)"
        let details["set_boundary_budget_constraints"]["-driving_cell"] = ""
        let details["set_boundary_budget_constraints"]["-library"] = "(Library of driving cell)"
        let details["set_boundary_budget_constraints"]["-pin"] = "(Driving pin name)"
        let details["set_boundary_budget_constraints"]["-from_pin"] = ""
        let details["set_boundary_budget_constraints"]["-input_transition_rise"] = ""
        let details["set_boundary_budget_constraints"]["-input_transition_fall"] = ""
        let details["set_boundary_budget_constraints"]["-corner"] = "(Corner for electrical values)"
        let details["set_boundary_budget_constraints"]["-default"] = "(Set default for unspecified corners)"
        let details["set_boundary_budget_constraints"]["-fanin_capacitance"] = ""
        let details["set_boundary_budget_constraints"]["-load_capacitance"] = ""
        let details["set_boundary_budget_constraints"]["-max_transition"] = ""
        let details["set_boundary_budget_constraints"]["-auto"] = "(Indicate that boundary was automatically derived)"
   let details["set_boundary_cell_rules"]={}
        let details["set_boundary_cell_rules"]["-left_boundary_cell"] = ""
        let details["set_boundary_cell_rules"]["-bottom_boundary_cells"] = ""
        let details["set_boundary_cell_rules"]["-right_boundary_cell"] = ""
        let details["set_boundary_cell_rules"]["-top_boundary_cells"] = ""
        let details["set_boundary_cell_rules"]["-bottom_left_outside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-bottom_right_outside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-top_left_outside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-top_right_outside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-bottom_left_inside_corner_cells"] = ""
        let details["set_boundary_cell_rules"]["-bottom_right_inside_corner_cells"] = ""
        let details["set_boundary_cell_rules"]["-top_left_inside_corner_cells"] = ""
        let details["set_boundary_cell_rules"]["-top_right_inside_corner_cells"] = ""
        let details["set_boundary_cell_rules"]["-top_tap_cell"] = ""
        let details["set_boundary_cell_rules"]["-bottom_tap_cell"] = ""
        let details["set_boundary_cell_rules"]["-tap_distance"] = ""
        let details["set_boundary_cell_rules"]["-prefix"] = "(end cap inst prefix)"
        let details["set_boundary_cell_rules"]["-separator"] = "(end cap separator)"
        let details["set_boundary_cell_rules"]["-insert_into_blocks"] = "(Specifies whether end cap cells are inserted into blocks)"
        let details["set_boundary_cell_rules"]["-at_va_boundary"] = "(Specifies whether rows are cut on voltage areas)"
        let details["set_boundary_cell_rules"]["-no_1x"] = "(Specifies that the tool should not insert into a row where the row length equals two times the corner cell width plus one unit tile width.)"
        let details["set_boundary_cell_rules"]["-min_row_width"] = ""
        let details["set_boundary_cell_rules"]["-min_horizontal_jog"] = ""
        let details["set_boundary_cell_rules"]["-min_vertical_jog"] = ""
        let details["set_boundary_cell_rules"]["-min_vertical_separation"] = ""
        let details["set_boundary_cell_rules"]["-min_horizontal_separation"] = ""
        let details["set_boundary_cell_rules"]["-add_metal_cut_allowed"] = ""
        let details["set_boundary_cell_rules"]["-mirror_left_outside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-mirror_right_outside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-mirror_left_inside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-mirror_right_inside_corner_cell"] = ""
        let details["set_boundary_cell_rules"]["-mirror_left_boundary_cell"] = ""
        let details["set_boundary_cell_rules"]["-mirror_right_boundary_cell"] = ""
        let details["set_boundary_cell_rules"]["-do_not_swap_top_and_bottom_inside_corner_cell"] = ""
   let details["set_budget_margins"]={}
        let details["set_budget_margins"]["-corner"] = "(Corner for margin values)"
        let details["set_budget_margins"]["-default"] = "(Set default for unspecified corners)"
        let details["set_budget_margins"]["-setup"] = "(Apply only to setup budgets)"
        let details["set_budget_margins"]["-hold"] = "(Apply only to hold budgets)"
        let details["set_budget_margins"]["-prects"] = "(Apply only where the block adjust option is set to \"prects\")"
        let details["set_budget_margins"]["-target"] = "(Apply only where the block adjust option is set to \"target\")"
        let details["set_budget_margins"]["-actual"] = "(Apply only where the block adjust option is set to \"actual\")"
        let details["set_budget_margins"]["-postcts"] = "(Apply only where the block adjust option is set to \"target\" or \"actual\")"
        let details["set_budget_margins"]["-clock"] = ""
        let details["set_budget_margins"]["-from_clock"] = ""
        let details["set_budget_margins"]["-to_clock"] = ""
        let details["set_budget_margins"]["-launch"] = "(Apply on budget segment that launch in the block)"
        let details["set_budget_margins"]["-capture"] = "(Apply on budget segment that capture in the block)"
   let details["set_budget_options"]={}
        let details["set_budget_options"]["-reset"] = "(Remove all budget options and constraints from the design)"
        let details["set_budget_options"]["-add_blocks"] = "(Add to list of cell instances to be budgeted)"
        let details["set_budget_options"]["-remove_blocks"] = "(Remove from list of cell instances to be budgeted)"
        let details["set_budget_options"]["-adjust_latency"] = ""
        let details["set_budget_options"]["-launch_hold_fix"] = ""
        let details["set_budget_options"]["-capture_hold_fix"] = ""
        let details["set_budget_options"]["-feed_hold_fix"] = ""
        let details["set_budget_options"]["-launch_fixed_delay"] = ""
        let details["set_budget_options"]["-capture_fixed_delay"] = ""
        let details["set_budget_options"]["-feed_fixed_delay"] = ""
        let details["set_budget_options"]["-top_level"] = "(Apply to the top level of the design)"
        let details["set_budget_options"]["-all"] = "(Apply to all budget blocks and top level)"
   let details["set_budget_shell_latencies"]={}
        let details["set_budget_shell_latencies"]["-block"] = ""
        let details["set_budget_shell_latencies"]["-clock"] = "(Name of clock in the top-level clock)"
        let details["set_budget_shell_latencies"]["-block_mode"] = ""
        let details["set_budget_shell_latencies"]["-block_output"] = ""
        let details["set_budget_shell_latencies"]["-corner"] = "(Corner for delay values)"
        let details["set_budget_shell_latencies"]["-rise"] = "(Delay with respect to rising edge of the clock at its source)"
        let details["set_budget_shell_latencies"]["-fall"] = "(Delay with respect to falling edge of the clock at its source)"
        let details["set_budget_shell_latencies"]["-early"] = "(Early (minimum) clock delay)"
        let details["set_budget_shell_latencies"]["-late"] = "(Late (maximum) clock delay)"
   let details["set_bundle_pin_constraints"]={}
        let details["set_bundle_pin_constraints"]["-bundles"] = ""
        let details["set_bundle_pin_constraints"]["-cells"] = "(Specify  the  block cells that the net based constraints associated with.)"
        let details["set_bundle_pin_constraints"]["-self"] = "(Specifies that the constraint applies to the toplevel block.)"
        let details["set_bundle_pin_constraints"]["-keep_pins_together"] = ""
        let details["set_bundle_pin_constraints"]["-range"] = ""
        let details["set_bundle_pin_constraints"]["-bundle_order"] = ""
        let details["set_bundle_pin_constraints"]["-allow_feedthroughs"] = ""
        let details["set_bundle_pin_constraints"]["-allowed_layers"] = ""
        let details["set_bundle_pin_constraints"]["-pin_spacing"] = ""
        let details["set_bundle_pin_constraints"]["-pin_spacing_distance"] = ""
        let details["set_bundle_pin_constraints"]["-sides"] = "(Specifies the block sides on which the pin must be placed.)"
        let details["set_bundle_pin_constraints"]["-width"] = "(Specified the width of the pin.)"
        let details["set_bundle_pin_constraints"]["-length"] = "(Specified the length of the pin.)"
   let details["set_busplan_constraints"]={}
        let details["set_busplan_constraints"]["-from"] = "(bus the constraint is from)"
        let details["set_busplan_constraints"]["-to"] = "(bus the constraint is to)"
        let details["set_busplan_constraints"]["-to_value"] = ""
        let details["set_busplan_constraints"]["-type"] = "(constraint to set)"
        let details["set_busplan_constraints"]["-remove"] = "(remove all constraints on bus)"
   let details["set_case_analysis"]={}
   let details["set_cell_hierarchy_type"]={}
        let details["set_cell_hierarchy_type"]["-boundary"] = "(Boundary for the cell (only valid for boundary or partition types))"
        let details["set_cell_hierarchy_type"]["-type"] = "(New hierarchy type: "
   let details["set_cell_location"]={}
        let details["set_cell_location"]["-design"] = "(Top design for finding objects)"
        let details["set_cell_location"]["-coordinates"] = "(Cell placement origin)"
        let details["set_cell_location"]["-orientation"] = ""
        let details["set_cell_location"]["-ignore_fixed"] = "(Ignore fixed cells)"
        let details["set_cell_location"]["-fixed"] = "(Set modified cells as fixed)"
   let details["set_cell_mode"]={}
        let details["set_cell_mode"]["-quiet"] = "(Suppress all messages)"
   let details["set_cell_site"]={}
        let details["set_cell_site"]["-site_def"] = "(Site_def name)"
        let details["set_cell_site"]["-library"] = "(Library to which the site_def will be set; default is current library)"
        let details["set_cell_site"]["-cells"] = ""
        let details["set_cell_site"]["-height_type"] = ""
   let details["set_cell_vt_type"]={}
        let details["set_cell_vt_type"]["-lib_cells"] = "(Library cells to mark with the specified VT)"
        let details["set_cell_vt_type"]["-vt_type"] = "(The left vt)"
        let details["set_cell_vt_type"]["-silent"] = "(Specifies whether additional information is printed)"
   let details["set_clock_balance_points"]={}
        let details["set_clock_balance_points"]["-rise"] = "(Specifies rising delay)"
        let details["set_clock_balance_points"]["-fall"] = "(Specifies falling delay)"
        let details["set_clock_balance_points"]["-early"] = "(Specifies early delay)"
        let details["set_clock_balance_points"]["-late"] = "(Specifies late delay)"
        let details["set_clock_balance_points"]["-delay"] = "(Delay Value)"
        let details["set_clock_balance_points"]["-consider_for_balancing"] = ""
        let details["set_clock_balance_points"]["-clock"] = "(clocks)"
        let details["set_clock_balance_points"]["-corners"] = ""
        let details["set_clock_balance_points"]["-balance_points"] = ""
   let details["set_clock_cell_spacing"]={}
        let details["set_clock_cell_spacing"]["-clocks"] = "(List of clocks)"
        let details["set_clock_cell_spacing"]["-lib_cells"] = ""
        let details["set_clock_cell_spacing"]["-x_spacing"] = "(Value of spacing in x direction)"
        let details["set_clock_cell_spacing"]["-y_spacing"] = "(Value of spacing in y direction)"
   let details["set_clock_gating_check"]={}
        let details["set_clock_gating_check"]["-setup"] = "(Clock gating setup time)"
        let details["set_clock_gating_check"]["-hold"] = "(Clock gating hold time)"
        let details["set_clock_gating_check"]["-rise"] = "(Only rise checks are considered)"
        let details["set_clock_gating_check"]["-fall"] = "(Only fall checks are considered)"
        let details["set_clock_gating_check"]["-high"] = "(Check is for the high level of the clock)"
        let details["set_clock_gating_check"]["-low"] = "(Check is for the low level of the clock)"
   let details["set_clock_groups"]={}
        let details["set_clock_groups"]["-group"] = "(List of clocks)"
        let details["set_clock_groups"]["-physically_exclusive"] = ""
        let details["set_clock_groups"]["-logically_exclusive"] = "(Specify logically exclusive clock groups)"
        let details["set_clock_groups"]["-asynchronous"] = "(Specify asynchronous clock groups)"
        let details["set_clock_groups"]["-allow_paths"] = "(Keep paths as constrained)"
        let details["set_clock_groups"]["-comment"] = "(User specified comment)"
        let details["set_clock_groups"]["-name"] = "(Name for clock grouping)"
   let details["set_clock_latency"]={}
        let details["set_clock_latency"]["-modes"] = "(set clock latency for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_clock_latency"]["-corners"] = "(set clock latency for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_clock_latency"]["-scenarios"] = ""
        let details["set_clock_latency"]["-clock"] = "(List of relative clocks)"
        let details["set_clock_latency"]["-min"] = "(Specify clock min condition latency)"
        let details["set_clock_latency"]["-max"] = "(Specify clock max condition latency)"
        let details["set_clock_latency"]["-rise"] = "(Specify clock rise latency)"
        let details["set_clock_latency"]["-fall"] = "(Specify clock fall latency)"
        let details["set_clock_latency"]["-source"] = "(Specify clock source latency)"
        let details["set_clock_latency"]["-dynamic"] = ""
        let details["set_clock_latency"]["-early"] = "(Specify clock early source latency)"
        let details["set_clock_latency"]["-late"] = "(Specify clock late source latency)"
   let details["set_clock_routing_rules"]={}
        let details["set_clock_routing_rules"]["-clocks"] = "(List of clocks)"
        let details["set_clock_routing_rules"]["-nets"] = "(List of nets)"
        let details["set_clock_routing_rules"]["-net_type"] = "(net type in the clock tree: "
        let details["set_clock_routing_rules"]["-rules"] = "(non-default routing rules)"
        let details["set_clock_routing_rules"]["-min_routing_layer"] = ""
        let details["set_clock_routing_rules"]["-max_routing_layer"] = ""
        let details["set_clock_routing_rules"]["-default_rule"] = "(assign default routing rule)"
   let details["set_clock_sense"]={}
        let details["set_clock_sense"]["-positive"] = "(Specify positive unate (non-inverting) clock sense)"
        let details["set_clock_sense"]["-negative"] = "(Specify negative unate (inverting) clock sense)"
        let details["set_clock_sense"]["-stop_propagation"] = "(Stop clock propagation from specified pins)"
        let details["set_clock_sense"]["-logical_stop_propagation"] = ""
        let details["set_clock_sense"]["-clock_leaf"] = "(Specify that the pin is a clock consumer)"
        let details["set_clock_sense"]["-pulse"] = "(Specify pulse clock sense: "
        let details["set_clock_sense"]["-clocks"] = "(List of clocks)"
   let details["set_clock_transition"]={}
        let details["set_clock_transition"]["-modes"] = "(set clock transition for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_clock_transition"]["-corners"] = "(set clock transition for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_clock_transition"]["-scenarios"] = ""
        let details["set_clock_transition"]["-min"] = "(Set minimum transition only)"
        let details["set_clock_transition"]["-max"] = "(Set maximum transition only)"
        let details["set_clock_transition"]["-rise"] = "(Set rise transition only)"
        let details["set_clock_transition"]["-fall"] = "(Set fall transition only)"
   let details["set_clock_tree_options"]={}
        let details["set_clock_tree_options"]["-clocks"] = "(List of clocks)"
        let details["set_clock_tree_options"]["-corners"] = "(Corner list)"
        let details["set_clock_tree_options"]["-copy_exceptions_across_modes"] = ""
        let details["set_clock_tree_options"]["-from_mode"] = "(from mode)"
        let details["set_clock_tree_options"]["-to_mode"] = ""
        let details["set_clock_tree_options"]["-target_latency"] = ""
        let details["set_clock_tree_options"]["-target_skew"] = ""
   let details["set_clock_tree_reference_subset"]={}
        let details["set_clock_tree_reference_subset"]["-clocks"] = "(List of clocks)"
        let details["set_clock_tree_reference_subset"]["-lib_cells"] = "(Library cells allowed to use)"
   let details["set_clock_trunk_endpoints"]={}
        let details["set_clock_trunk_endpoints"]["-clock"] = "(Clocks)"
        let details["set_clock_trunk_endpoints"]["-corners"] = "(Corners)"
        let details["set_clock_trunk_endpoints"]["-delay"] = "(Phase delay)"
   let details["set_clock_uncertainty"]={}
        let details["set_clock_uncertainty"]["-modes"] = "(set uncertainty for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_clock_uncertainty"]["-corners"] = "(set uncertainty for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_clock_uncertainty"]["-scenarios"] = ""
        let details["set_clock_uncertainty"]["-from"] = "(List of from clocks)"
        let details["set_clock_uncertainty"]["-rise_from"] = ""
        let details["set_clock_uncertainty"]["-fall_from"] = ""
        let details["set_clock_uncertainty"]["-to"] = "(List of to clocks)"
        let details["set_clock_uncertainty"]["-rise_to"] = ""
        let details["set_clock_uncertainty"]["-fall_to"] = ""
        let details["set_clock_uncertainty"]["-rise"] = "(Inter-clock uncertainty is for rising clock edge)"
        let details["set_clock_uncertainty"]["-fall"] = "(Inter-clock uncertainty is for falling clock edge)"
        let details["set_clock_uncertainty"]["-setup"] = "(Clock uncertainty is for setup checks)"
        let details["set_clock_uncertainty"]["-hold"] = "(Clock uncertainty is for hold checks)"
   let details["set_colors"]={}
        let details["set_colors"]["-cycle_color"] = "(Cycle to the next color)"
        let details["set_colors"]["-depth"] = "(Integer hierarchy depth value or \"all\" to traverse entire hierarchy)"
        let details["set_colors"]["-keep"] = "(Keep current cell color if any)"
        let details["set_colors"]["-hierarchy_types"] = ""
        let details["set_colors"]["-color"] = "(Color ID for the color to use: "
        let details["set_colors"]["-color_name"] = "(Color name for the color to use: "
   let details["set_command_option_value"]={}
        let details["set_command_option_value"]["-default"] = "(set default option value)"
        let details["set_command_option_value"]["-current"] = "(set current option value)"
        let details["set_command_option_value"]["-command"] = "(set option value for an option of this command)"
        let details["set_command_option_value"]["-option"] = "(set option value for this option of the command)"
        let details["set_command_option_value"]["-position"] = ""
        let details["set_command_option_value"]["-value"] = "(set option value to this value)"
        let details["set_command_option_value"]["-undefined"] = "(set option value to undefined)"
   let details["set_consistency_settings_options"]={}
        let details["set_consistency_settings_options"]["-exec_path"] = ""
        let details["set_consistency_settings_options"]["-tool"] = ""
        let details["set_consistency_settings_options"]["-script"] = "(the script)"
        let details["set_consistency_settings_options"]["-saved_session"] = ""
        let details["set_consistency_settings_options"]["-corner"] = "(cstr corner for extraction consistency checking)"
        let details["set_consistency_settings_options"]["-star_corner"] = ""
        let details["set_consistency_settings_options"]["-tluplus"] = ""
        let details["set_consistency_settings_options"]["-early"] = "(select early mode)"
        let details["set_consistency_settings_options"]["-default"] = "(reset to default settings)"
        let details["set_consistency_settings_options"]["-report"] = "(report current option settings)"
   let details["set_constraint_mapping_file"]={}
        let details["set_constraint_mapping_file"]["-reset"] = "(Reset existing block constraint map)"
   let details["set_corner_status"]={}
        let details["set_corner_status"]["-modes"] = "(List of modes)"
        let details["set_corner_status"]["-corners"] = "(List of corners)"
        let details["set_corner_status"]["-setup"] = "(Control setup analysis)"
        let details["set_corner_status"]["-hold"] = "(Control hold analysis)"
        let details["set_corner_status"]["-power"] = "(Control leakage power analysis)"
        let details["set_corner_status"]["-max_transition"] = ""
        let details["set_corner_status"]["-max_capacitance"] = ""
        let details["set_corner_status"]["-min_capacitance"] = ""
        let details["set_corner_status"]["-active"] = "(Allow specified analysis types to happen)"
        let details["set_corner_status"]["-label"] = "(Label name for reporting)"
   let details["set_current_command_mode"]={}
        let details["set_current_command_mode"]["-mode"] = "(set current command mode to this mode)"
        let details["set_current_command_mode"]["-command"] = ""
   let details["set_current_ems_database"]={}
        let details["set_current_ems_database"]["-reset"] = "(Sets the current EMS database to none)"
   let details["set_current_mismatch_config"]={}
        let details["set_current_mismatch_config"]["-enable"] = ""
   let details["set_data_check"]={}
        let details["set_data_check"]["-modes"] = "(set data check for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_data_check"]["-corners"] = "(set data check for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_data_check"]["-scenarios"] = ""
        let details["set_data_check"]["-from"] = "(From pin or port for check)"
        let details["set_data_check"]["-rise_from"] = ""
        let details["set_data_check"]["-fall_from"] = ""
        let details["set_data_check"]["-to"] = "(To pin or port for check)"
        let details["set_data_check"]["-rise_to"] = ""
        let details["set_data_check"]["-fall_to"] = ""
        let details["set_data_check"]["-setup"] = "(Check is for setup only)"
        let details["set_data_check"]["-hold"] = "(Check is for hold only)"
        let details["set_data_check"]["-clock"] = "(Clock at the related pin/port of the check)"
   let details["set_db_file_mapping"]={}
        let details["set_db_file_mapping"]["-library"] = "(Library)"
   let details["set_density_gradient_options"]={}
        let details["set_density_gradient_options"]["-white_space_density"] = ""
        let details["set_density_gradient_options"]["-edge_zone_width"] = ""
        let details["set_density_gradient_options"]["-outer_zone_width"] = ""
        let details["set_density_gradient_options"]["-gradient_tolerance"] = ""
        let details["set_density_gradient_options"]["-min_macro_size"] = "(500.0)]"
        let details["set_density_gradient_options"]["-cluster_threshold"] = "(5.0)]"
   let details["set_design_attributes"]={}
        let details["set_design_attributes"]["-elements"] = ""
        let details["set_design_attributes"]["-attribute"] = ""
        let details["set_design_attributes"]["-models"] = "(list of lib cells on which the attribute will be set)"
   let details["set_disable_clock_gating_check"]={}
   let details["set_disable_timing"]={}
        let details["set_disable_timing"]["-from"] = "(From pin on cell)"
        let details["set_disable_timing"]["-to"] = "(To pin on cell)"
        let details["set_disable_timing"]["-loop_break"] = "(indicate whether constraints coming from tool, not user)"
   let details["set_domain_supply_net"]={}
        let details["set_domain_supply_net"]["-primary_power_net"] = ""
        let details["set_domain_supply_net"]["-primary_ground_net"] = ""
   let details["set_dont_touch"]={}
   let details["set_dont_touch_network"]={}
        let details["set_dont_touch_network"]["-no_propagate"] = "(Don't propagate across logic gates)"
        let details["set_dont_touch_network"]["-clock_only"] = "(Propagate only within clock network)"
        let details["set_dont_touch_network"]["-clear"] = "(Remove any dont_touch_network attribute)"
   let details["set_drive"]={}
        let details["set_drive"]["-modes"] = "(set drive resistance for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_drive"]["-corners"] = "(set drive resistance for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_drive"]["-scenarios"] = ""
        let details["set_drive"]["-min"] = "(Set minimum resistance only)"
        let details["set_drive"]["-max"] = "(Set maximum resistance only)"
        let details["set_drive"]["-rise"] = "(Set rise resistance only)"
        let details["set_drive"]["-fall"] = "(Set fall resistance only)"
   let details["set_drive_resistance"]={}
        let details["set_drive_resistance"]["-modes"] = "(set drive resistance for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_drive_resistance"]["-corners"] = "(set drive resistance for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_drive_resistance"]["-scenarios"] = ""
        let details["set_drive_resistance"]["-min"] = "(Set minimum resistance only)"
        let details["set_drive_resistance"]["-max"] = "(Set maximum resistance only)"
        let details["set_drive_resistance"]["-rise"] = "(Set rise resistance only)"
        let details["set_drive_resistance"]["-fall"] = "(Set fall resistance only)"
   let details["set_driving_cell"]={}
        let details["set_driving_cell"]["-modes"] = "(set driving cell for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_driving_cell"]["-corners"] = "(set driving cell for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_driving_cell"]["-scenarios"] = ""
        let details["set_driving_cell"]["-lib_cell"] = ""
        let details["set_driving_cell"]["-min"] = "(Set minimum driving_cell info)"
        let details["set_driving_cell"]["-max"] = "(Set maximum driving_cell info)"
        let details["set_driving_cell"]["-rise"] = "(Set rise driving_cell info)"
        let details["set_driving_cell"]["-fall"] = "(Set fall driving_cell info)"
        let details["set_driving_cell"]["-library"] = "(Library of driving cell)"
        let details["set_driving_cell"]["-pin"] = "(Driving pin name)"
        let details["set_driving_cell"]["-from_pin"] = ""
        let details["set_driving_cell"]["-multiply_by"] = "(Driving strength multiplier: "
        let details["set_driving_cell"]["-dont_scale"] = "(Prevent operating condition scaling)"
        let details["set_driving_cell"]["-no_design_rule"] = "(Do not infer design rules from driving cell)"
        let details["set_driving_cell"]["-input_transition_rise"] = ""
        let details["set_driving_cell"]["-input_transition_fall"] = ""
        let details["set_driving_cell"]["-clock"] = "(Transition is relative to this clock)"
        let details["set_driving_cell"]["-clock_fall"] = "(Transition is relative to falling edge of the clock)"
   let details["set_eco_placement_net_weight"]={}
        let details["set_eco_placement_net_weight"]["-nets"] = ""
        let details["set_eco_placement_net_weight"]["-weight"] = "(value of the weight: "
        let details["set_eco_placement_net_weight"]["-reset"] = "(reset all nets weight)"
   let details["set_eco_power_intention"]={}
        let details["set_eco_power_intention"]["-cells"] = "(List of cells)"
   let details["set_edit_setting"]={}
        let details["set_edit_setting"]["-ignore_locked"] = "(ignore the locked flag and modify locked objects)"
        let details["set_edit_setting"]["-keep_pin_on_edge"] = ""
        let details["set_edit_setting"]["-self_intersection"] = ""
        let details["set_edit_setting"]["-update_floorplan"] = ""
        let details["set_edit_setting"]["-update_color_mask"] = ""
        let details["set_edit_setting"]["-auto_display_hidden"] = ""
        let details["set_edit_setting"]["-select_partial_object"] = ""
        let details["set_edit_setting"]["-select_edge"] = "(allow object edge selection)"
        let details["set_edit_setting"]["-select_vertex"] = "(allow object vertex selection)"
        let details["set_edit_setting"]["-select_center_line"] = ""
        let details["set_edit_setting"]["-select_center_vertex"] = ""
        let details["set_edit_setting"]["-expand_hit_macro_cell"] = ""
        let details["set_edit_setting"]["-expand_hit_blockage"] = ""
        let details["set_edit_setting"]["-expand_hit_constraint"] = ""
        let details["set_edit_setting"]["-honor_ndr"] = "(honor non-default routing rules)"
        let details["set_edit_setting"]["-hierarchical_routing"] = ""
        let details["set_edit_setting"]["-pin_layer_policy"] = ""
        let details["set_edit_setting"]["-specified_pin_layer"] = ""
        let details["set_edit_setting"]["-default"] = "(Reset all options to default state)"
   let details["set_edrc_setting"]={}
        let details["set_edrc_setting"]["-check_drc"] = "(check drc for editing)"
        let details["set_edrc_setting"]["-honor_ndr"] = "(honor non-default routing rules)"
        let details["set_edrc_setting"]["-via_density_rule"] = ""
        let details["set_edrc_setting"]["-minimum_edge_rule"] = ""
        let details["set_edrc_setting"]["-minimum_length_and_area_rule"] = ""
        let details["set_edrc_setting"]["-enclosed_via_spacing_rule"] = ""
        let details["set_edrc_setting"]["-general_via_spacing_rule"] = ""
        let details["set_edrc_setting"]["-rdl_acute_angle_rule"] = ""
        let details["set_edrc_setting"]["-rdl_right_angle_rule"] = ""
        let details["set_edrc_setting"]["-dpt_odd_cycle"] = "(check dpt odd cycle)"
        let details["set_edrc_setting"]["-dpt_precolor"] = "(check dpt color violation)"
        let details["set_edrc_setting"]["-end_of_line_spacing_rule"] = ""
        let details["set_edrc_setting"]["-via_enclosure_rule"] = ""
        let details["set_edrc_setting"]["-metal_width_rule"] = ""
        let details["set_edrc_setting"]["-metal_span_spacing_rule"] = ""
        let details["set_edrc_setting"]["-filter_same_net_spacing"] = ""
        let details["set_edrc_setting"]["-show_error_browser"] = ""
        let details["set_edrc_setting"]["-max_error_limit"] = ""
        let details["set_edrc_setting"]["-max_shape_limit"] = ""
        let details["set_edrc_setting"]["-max_processing_time"] = ""
        let details["set_edrc_setting"]["-default"] = "(resets all options to their defaults)"
   let details["set_equivalent"]={}
        let details["set_equivalent"]["-nets"] = ""
        let details["set_equivalent"]["-sets"] = "(List of supply sets)"
        let details["set_equivalent"]["-function_only"] = "(Specifies that the supplies are functionally equivalent rather than electrically equivalent.)"
   let details["set_extraction_options"]={}
        let details["set_extraction_options"]["-corners"] = "(List of corners)"
        let details["set_extraction_options"]["-late_cap_scale"] = ""
        let details["set_extraction_options"]["-early_cap_scale"] = ""
        let details["set_extraction_options"]["-late_res_scale"] = ""
        let details["set_extraction_options"]["-early_res_scale"] = ""
        let details["set_extraction_options"]["-late_ccap_scale"] = ""
        let details["set_extraction_options"]["-early_ccap_scale"] = ""
        let details["set_extraction_options"]["-late_vr_horizontal_cap_scale"] = ""
        let details["set_extraction_options"]["-early_vr_horizontal_cap_scale"] = ""
        let details["set_extraction_options"]["-late_vr_vertical_cap_scale"] = ""
        let details["set_extraction_options"]["-early_vr_vertical_cap_scale"] = ""
        let details["set_extraction_options"]["-late_vr_horizontal_res_scale"] = ""
        let details["set_extraction_options"]["-early_vr_horizontal_res_scale"] = ""
        let details["set_extraction_options"]["-late_vr_vertical_res_scale"] = ""
        let details["set_extraction_options"]["-early_vr_vertical_res_scale"] = ""
        let details["set_extraction_options"]["-late_vr_via_res_scale"] = ""
        let details["set_extraction_options"]["-early_vr_via_res_scale"] = ""
        let details["set_extraction_options"]["-late_ccap_threshold"] = ""
        let details["set_extraction_options"]["-early_ccap_threshold"] = ""
        let details["set_extraction_options"]["-late_ccap_ratio"] = ""
        let details["set_extraction_options"]["-early_ccap_ratio"] = ""
        let details["set_extraction_options"]["-reference_direction"] = ""
        let details["set_extraction_options"]["-real_metalfill_extraction"] = ""
        let details["set_extraction_options"]["-virtual_shield_extraction"] = ""
        let details["set_extraction_options"]["-enable_ccap_or_filtering"] = ""
        let details["set_extraction_options"]["-honor_mask_constraints"] = ""
        let details["set_extraction_options"]["-include_pin_resistance"] = ""
        let details["set_extraction_options"]["-process_scale"] = ""
        let details["set_extraction_options"]["-operating_frequency"] = ""
        let details["set_extraction_options"]["-default"] = "(restore all extraction options to default)"
   let details["set_false_path"]={}
        let details["set_false_path"]["-hold"] = "(Eliminate hold timing analysis for paths)"
        let details["set_false_path"]["-setup"] = "(Eliminate setup timing analysis for paths)"
        let details["set_false_path"]["-rise"] = "(Eliminate only rising delays for the defined paths)"
        let details["set_false_path"]["-fall"] = "(Eliminate only falling delays for the defined paths)"
        let details["set_false_path"]["-reset_path"] = "(Reset this path before setting false path)"
        let details["set_false_path"]["-comment"] = "(User specified comment)"
        let details["set_false_path"]["-from"] = "(List of path startpoints or clocks)"
        let details["set_false_path"]["-rise_from"] = ""
        let details["set_false_path"]["-fall_from"] = ""
        let details["set_false_path"]["-through"] = ""
        let details["set_false_path"]["-rise_through"] = ""
        let details["set_false_path"]["-fall_through"] = ""
        let details["set_false_path"]["-to"] = "(List of path endpoints or clocks)"
        let details["set_false_path"]["-rise_to"] = ""
        let details["set_false_path"]["-fall_to"] = ""
   let details["set_fanout_load"]={}
   let details["set_fixed_objects"]={}
        let details["set_fixed_objects"]["-unfix"] = "(Unfix objects)"
   let details["set_floorplan_area_rules"]={}
        let details["set_floorplan_area_rules"]["-object_types"] = ""
        let details["set_floorplan_area_rules"]["-lib_cells"] = ""
        let details["set_floorplan_area_rules"]["-layers"] = "(layers for routing_blockage object type)"
        let details["set_floorplan_area_rules"]["-name"] = "(name of the rule)"
        let details["set_floorplan_area_rules"]["-max"] = "(maximum value)"
        let details["set_floorplan_area_rules"]["-min"] = "(minimum value)"
        let details["set_floorplan_area_rules"]["-forbidden_list"] = ""
        let details["set_floorplan_area_rules"]["-forbidden_ranges"] = ""
        let details["set_floorplan_area_rules"]["-valid_list"] = ""
        let details["set_floorplan_area_rules"]["-valid_ranges"] = ""
   let details["set_floorplan_enclosure_rules"]={}
        let details["set_floorplan_enclosure_rules"]["-from_object_types"] = ""
        let details["set_floorplan_enclosure_rules"]["-to_object_types"] = ""
        let details["set_floorplan_enclosure_rules"]["-to_lib_cells"] = ""
        let details["set_floorplan_enclosure_rules"]["-must_enclose"] = "(whether from object must enclose to object)"
        let details["set_floorplan_enclosure_rules"]["-follow_rotations"] = "(whether sides specified should follow all rotations of lib cells)"
        let details["set_floorplan_enclosure_rules"]["-ignore_rotate90"] = "(whether this rule be checked for 90 degree rotations of lib cells)"
        let details["set_floorplan_enclosure_rules"]["-layers"] = "(layers for routing_blockage object type)"
        let details["set_floorplan_enclosure_rules"]["-sides"] = "(sides for this enclosure floorplan rule: "
        let details["set_floorplan_enclosure_rules"]["-from_corner"] = ""
        let details["set_floorplan_enclosure_rules"]["-to_corner"] = "(to corner for this enclosure floorplan rule: "
        let details["set_floorplan_enclosure_rules"]["-name"] = "(name of the rule)"
        let details["set_floorplan_enclosure_rules"]["-forbidden_list"] = ""
        let details["set_floorplan_enclosure_rules"]["-forbidden_ranges"] = ""
        let details["set_floorplan_enclosure_rules"]["-max"] = "(maximum value)"
        let details["set_floorplan_enclosure_rules"]["-min"] = "(minimum value)"
        let details["set_floorplan_enclosure_rules"]["-offset"] = "(offset for dimension constraint)"
        let details["set_floorplan_enclosure_rules"]["-step"] = "(step for dimension constraint)"
        let details["set_floorplan_enclosure_rules"]["-valid_list"] = ""
        let details["set_floorplan_enclosure_rules"]["-valid_ranges"] = ""
   let details["set_floorplan_halo_rules"]={}
        let details["set_floorplan_halo_rules"]["-from_object_types"] = ""
        let details["set_floorplan_halo_rules"]["-to_object_types"] = ""
        let details["set_floorplan_halo_rules"]["-to_lib_cells"] = ""
        let details["set_floorplan_halo_rules"]["-must_enclose"] = "(whether from object must enclose to object)"
        let details["set_floorplan_halo_rules"]["-follow_rotations"] = "(whether sides specified should follow all rotations of lib cells)"
        let details["set_floorplan_halo_rules"]["-ignore_rotate90"] = "(whether this rule be checked for 90 degree rotations of lib cells)"
        let details["set_floorplan_halo_rules"]["-layers"] = "(layers for routing_blockage object type)"
        let details["set_floorplan_halo_rules"]["-sides"] = "(sides for this enclosure floorplan rule: "
        let details["set_floorplan_halo_rules"]["-type"] = "(halo type for this halo floorplan rule: "
        let details["set_floorplan_halo_rules"]["-name"] = "(name of the rule)"
        let details["set_floorplan_halo_rules"]["-forbidden_list"] = ""
        let details["set_floorplan_halo_rules"]["-forbidden_ranges"] = ""
        let details["set_floorplan_halo_rules"]["-max"] = "(maximum value)"
        let details["set_floorplan_halo_rules"]["-min"] = "(minimum value)"
        let details["set_floorplan_halo_rules"]["-offset"] = "(offset for dimension constraint)"
        let details["set_floorplan_halo_rules"]["-step"] = "(step for dimension constraint)"
        let details["set_floorplan_halo_rules"]["-valid_list"] = ""
        let details["set_floorplan_halo_rules"]["-valid_ranges"] = ""
   let details["set_floorplan_spacing_rules"]={}
        let details["set_floorplan_spacing_rules"]["-from_object_types"] = ""
        let details["set_floorplan_spacing_rules"]["-from_lib_cells"] = ""
        let details["set_floorplan_spacing_rules"]["-to_object_types"] = ""
        let details["set_floorplan_spacing_rules"]["-to_lib_cells"] = ""
        let details["set_floorplan_spacing_rules"]["-directions"] = ""
        let details["set_floorplan_spacing_rules"]["-min_parallel_run_length"] = ""
        let details["set_floorplan_spacing_rules"]["-follow_rotations"] = "(whether sides specified should follow all rotations of lib cells)"
        let details["set_floorplan_spacing_rules"]["-ignore_rotate90"] = "(whether this rule be checked for 90 degree rotations of lib cells)"
        let details["set_floorplan_spacing_rules"]["-no_overlap"] = "(whether the shapes will overlap)"
        let details["set_floorplan_spacing_rules"]["-from_layers"] = ""
        let details["set_floorplan_spacing_rules"]["-to_layers"] = ""
        let details["set_floorplan_spacing_rules"]["-name"] = "(name of the rule)"
        let details["set_floorplan_spacing_rules"]["-forbidden_list"] = ""
        let details["set_floorplan_spacing_rules"]["-forbidden_ranges"] = ""
        let details["set_floorplan_spacing_rules"]["-max"] = "(maximum value)"
        let details["set_floorplan_spacing_rules"]["-min"] = "(minimum value)"
        let details["set_floorplan_spacing_rules"]["-offset"] = "(offset for dimension constraint)"
        let details["set_floorplan_spacing_rules"]["-step"] = "(step for dimension constraint)"
        let details["set_floorplan_spacing_rules"]["-valid_list"] = ""
        let details["set_floorplan_spacing_rules"]["-valid_ranges"] = ""
   let details["set_floorplan_width_rules"]={}
        let details["set_floorplan_width_rules"]["-object_types"] = ""
        let details["set_floorplan_width_rules"]["-lib_cells"] = ""
        let details["set_floorplan_width_rules"]["-type"] = "(type for this width floorplan rule: "
        let details["set_floorplan_width_rules"]["-direction"] = "(direction for this width floorplan rule: "
        let details["set_floorplan_width_rules"]["-layers"] = "(layers for routing_blockage object type)"
        let details["set_floorplan_width_rules"]["-name"] = "(name of the rule)"
        let details["set_floorplan_width_rules"]["-forbidden_list"] = ""
        let details["set_floorplan_width_rules"]["-forbidden_ranges"] = ""
        let details["set_floorplan_width_rules"]["-max"] = "(maximum value)"
        let details["set_floorplan_width_rules"]["-min"] = "(minimum value)"
        let details["set_floorplan_width_rules"]["-offset"] = "(offset for dimension constraint)"
        let details["set_floorplan_width_rules"]["-step"] = "(step for dimension constraint)"
        let details["set_floorplan_width_rules"]["-valid_list"] = ""
        let details["set_floorplan_width_rules"]["-valid_ranges"] = ""
   let details["set_freeze_ports"]={}
        let details["set_freeze_ports"]["-all"] = "(Change both data and clock port freeze settings)"
        let details["set_freeze_ports"]["-clock"] = "(Change clock port freeze settings)"
        let details["set_freeze_ports"]["-data"] = "(Change data port freeze settings)"
   let details["set_grid"]={}
        let details["set_grid"]["-pg_strategy"] = ""
        let details["set_grid"]["-layers"] = "(Specify the routing layers to consider within the PG strategy)"
        let details["set_grid"]["-site_rows"] = "(Specify the site rows to be considered in creating the grid)"
        let details["set_grid"]["-site_arrays"] = ""
        let details["set_grid"]["-x_step"] = "(Specify the grid pitch in the X direction)"
        let details["set_grid"]["-y_step"] = "(Specify the grid pitch in the Y direction)"
        let details["set_grid"]["-x_offset"] = "(Specify the grid's offset to the owner design's origin in the X direction)"
        let details["set_grid"]["-y_offset"] = "(Specify the grid's offset to the owner design's origin in the Y direction)"
        let details["set_grid"]["-orientations"] = ""
        let details["set_grid"]["-reset"] = "(Remove all existing options of the grid)"
   let details["set_hierarchy_options"]={}
        let details["set_hierarchy_options"]["-blocks"] = ""
        let details["set_hierarchy_options"]["-enable_planning"] = ""
        let details["set_hierarchy_options"]["-from_level"] = ""
        let details["set_hierarchy_options"]["-to_level"] = ""
   let details["set_host_options"]={}
        let details["set_host_options"]["-name"] = "(Name for these options)"
        let details["set_host_options"]["-max_cores"] = "(Maximum number of cores for the parent or child processes: "
        let details["set_host_options"]["-num_processes"] = "(Maximum number of processes for specified pool/hosts : "
        let details["set_host_options"]["-add_hosts"] = "(addHosts)"
        let details["set_host_options"]["-submit_command"] = "(Command with options to submit a job)"
        let details["set_host_options"]["-submit_protocol"] = ""
        let details["set_host_options"]["-timeout"] = ""
        let details["set_host_options"]["-work_dir"] = "(Work directory for job files)"
        let details["set_host_options"]["-target"] = "(Target application: "
   let details["set_ideal_latency"]={}
        let details["set_ideal_latency"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_ideal_latency"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_ideal_latency"]["-scenarios"] = ""
        let details["set_ideal_latency"]["-min"] = "(Min ideal latency)"
        let details["set_ideal_latency"]["-max"] = "(Max ideal latency)"
        let details["set_ideal_latency"]["-rise"] = "(Rise ideal latency)"
        let details["set_ideal_latency"]["-fall"] = "(Fall ideal latency)"
   let details["set_ideal_network"]={}
        let details["set_ideal_network"]["-no_propagate"] = "(Don't propagate through logic cells)"
   let details["set_ideal_transition"]={}
        let details["set_ideal_transition"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_ideal_transition"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_ideal_transition"]["-scenarios"] = ""
        let details["set_ideal_transition"]["-min"] = "(Min ideal transition)"
        let details["set_ideal_transition"]["-max"] = "(Max ideal transition)"
        let details["set_ideal_transition"]["-rise"] = "(Rise ideal transition)"
        let details["set_ideal_transition"]["-fall"] = "(Fall ideal transition)"
   let details["set_ignored_layers"]={}
        let details["set_ignored_layers"]["-min_routing_layer"] = ""
        let details["set_ignored_layers"]["-max_routing_layer"] = ""
        let details["set_ignored_layers"]["-rc_congestion_ignored_layers"] = ""
        let details["set_ignored_layers"]["-verbose"] = "(Print verbose output)"
   let details["set_individual_pin_constraints"]={}
        let details["set_individual_pin_constraints"]["-cells"] = "(Specifies the collection of block cells for nets to set pin constraints)"
        let details["set_individual_pin_constraints"]["-nets"] = "(set constraints on block pins that connected to nets.)"
        let details["set_individual_pin_constraints"]["-pins"] = "(Specifies the collection of pins to set pin constraints)"
        let details["set_individual_pin_constraints"]["-ports"] = "(Specifies the collection of ports to set pin constraints)"
        let details["set_individual_pin_constraints"]["-allow_feedthroughs"] = ""
        let details["set_individual_pin_constraints"]["-allowed_layers"] = ""
        let details["set_individual_pin_constraints"]["-pin_spacing"] = ""
        let details["set_individual_pin_constraints"]["-pin_spacing_distance"] = ""
        let details["set_individual_pin_constraints"]["-sides"] = ""
        let details["set_individual_pin_constraints"]["-offset"] = ""
        let details["set_individual_pin_constraints"]["-width"] = "(width of the pin)"
        let details["set_individual_pin_constraints"]["-length"] = "(length of the pin)"
        let details["set_individual_pin_constraints"]["-off_edge"] = "(this pin should be placed off edge)"
        let details["set_individual_pin_constraints"]["-location"] = ""
   let details["set_input_delay"]={}
        let details["set_input_delay"]["-modes"] = "(set input delay for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_input_delay"]["-corners"] = "(set input delay for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_input_delay"]["-scenarios"] = ""
        let details["set_input_delay"]["-clock"] = "(Relative clock)"
        let details["set_input_delay"]["-clock_fall"] = "(Delay is relative to falling edge of clock)"
        let details["set_input_delay"]["-level_sensitive"] = "(Delay is from level-sensitive latch)"
        let details["set_input_delay"]["-rise"] = "( Specifies rising delay)"
        let details["set_input_delay"]["-fall"] = "( Specifies falling delay)"
        let details["set_input_delay"]["-max"] = "( Specifies maximum delay)"
        let details["set_input_delay"]["-min"] = "( Specifies minimum delay)"
        let details["set_input_delay"]["-reference_pin"] = ""
        let details["set_input_delay"]["-add_delay"] = "(Don't remove existing input delay)"
        let details["set_input_delay"]["-network_latency_included"] = ""
        let details["set_input_delay"]["-source_latency_included"] = ""
   let details["set_input_transition"]={}
        let details["set_input_transition"]["-modes"] = "(set transition for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_input_transition"]["-corners"] = "(set transition for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_input_transition"]["-scenarios"] = ""
        let details["set_input_transition"]["-min"] = "(Set minimum transition only)"
        let details["set_input_transition"]["-max"] = "(Set maximum transition only)"
        let details["set_input_transition"]["-rise"] = "(Set rise transition only)"
        let details["set_input_transition"]["-fall"] = "(Set fall transition only)"
        let details["set_input_transition"]["-clock"] = "(Transition is relative to this clock)"
        let details["set_input_transition"]["-clock_fall"] = "(Transition is relative to falling edge of the clock)"
   let details["set_interfaces"]={}
        let details["set_interfaces"]["-design"] = "(Top design for finding objects)"
        let details["set_interfaces"]["-force"] = "(Disconnect any connected nets)"
   let details["set_isolate_ports"]={}
        let details["set_isolate_ports"]["-driver"] = ""
        let details["set_isolate_ports"]["-type"] = ""
        let details["set_isolate_ports"]["-force"] = "(ensure that specified driver libcell type or buffer/inverter type is used)"
   let details["set_isolation"]={}
        let details["set_isolation"]["-domain"] = "(Power domain)"
        let details["set_isolation"]["-isolation_power_net"] = ""
        let details["set_isolation"]["-isolation_ground_net"] = ""
        let details["set_isolation"]["-isolation_supply_set"] = ""
        let details["set_isolation"]["-clamp_value"] = "(The value to which the input or output shall be clamped: "
        let details["set_isolation"]["-isolation_signal"] = ""
        let details["set_isolation"]["-isolation_sense"] = ""
        let details["set_isolation"]["-location"] = "(Location in logic hierarchy: "
        let details["set_isolation"]["-applies_to"] = ""
        let details["set_isolation"]["-source"] = "(The source supply set)"
        let details["set_isolation"]["-sink"] = "(The sink supply set)"
        let details["set_isolation"]["-diff_supply_only"] = ""
        let details["set_isolation"]["-elements"] = ""
        let details["set_isolation"]["-exclude_elements"] = ""
        let details["set_isolation"]["-no_isolation"] = "(No isolation)"
        let details["set_isolation"]["-name_prefix"] = ""
        let details["set_isolation"]["-name_suffix"] = ""
        let details["set_isolation"]["-update"] = "(update elements)"
   let details["set_isolation_control"]={}
        let details["set_isolation_control"]["-domain"] = "(Power domain)"
        let details["set_isolation_control"]["-isolation_signal"] = ""
        let details["set_isolation_control"]["-isolation_sense"] = ""
        let details["set_isolation_control"]["-location"] = "(Location in logic hierarchy: "
   let details["set_latch_loop_breaker"]={}
        let details["set_latch_loop_breaker"]["-pin"] = "(latch D pin)"
        let details["set_latch_loop_breaker"]["-avoid"] = "(Indicates to avoid these pins when selecting loop-breakers)"
        let details["set_latch_loop_breaker"]["-remove"] = "(Removes the user-specified settings on pins)"
   let details["set_latency_adjustment_options"]={}
        let details["set_latency_adjustment_options"]["-exclude_clocks"] = ""
        let details["set_latency_adjustment_options"]["-clocks_to_update"] = ""
        let details["set_latency_adjustment_options"]["-reference_clock"] = ""
        let details["set_latency_adjustment_options"]["-ocv_included"] = "(Update clock already includes early and late clock variance)"
   let details["set_latency_budget_constraints"]={}
        let details["set_latency_budget_constraints"]["-corner"] = "(Corner for delay values)"
        let details["set_latency_budget_constraints"]["-default"] = "(Set default for unspecified corners)"
        let details["set_latency_budget_constraints"]["-early_latency"] = "(Set budgeted early latency for the clock)"
        let details["set_latency_budget_constraints"]["-late_latency"] = "(Set budgeted late latency for the clock)"
        let details["set_latency_budget_constraints"]["-source"] = "(Specified latencies are source latency)"
        let details["set_latency_budget_constraints"]["-early_dynamic"] = "(Specifies dynamic component of latency)"
        let details["set_latency_budget_constraints"]["-late_dynamic"] = "(Specifies dynamic component of latency)"
        let details["set_latency_budget_constraints"]["-crp"] = "(Set \"clock reconvergence pessimism\" that should be added back to the budget path)"
        let details["set_latency_budget_constraints"]["-latency_offset"] = ""
        let details["set_latency_budget_constraints"]["-clock"] = ""
        let details["set_latency_budget_constraints"]["-from_clock"] = ""
        let details["set_latency_budget_constraints"]["-to_clock"] = ""
   let details["set_layer_map_file"]={}
        let details["set_layer_map_file"]["-format"] = "(Layer mapping file format: Values: gds, starrc)"
        let details["set_layer_map_file"]["-library"] = ""
        let details["set_layer_map_file"]["-map_file"] = ""
   let details["set_level_shifter"]={}
        let details["set_level_shifter"]["-domain"] = "(Power domain)"
        let details["set_level_shifter"]["-elements"] = "(List of pin and ports)"
        let details["set_level_shifter"]["-exclude_elements"] = ""
        let details["set_level_shifter"]["-applies_to"] = ""
        let details["set_level_shifter"]["-threshold"] = "(Voltage threshold)"
        let details["set_level_shifter"]["-rule"] = "(Rules for level shifter: "
        let details["set_level_shifter"]["-location"] = "(Location in logic hierarchy: "
        let details["set_level_shifter"]["-no_shift"] = "(No shift)"
        let details["set_level_shifter"]["-force_shift"] = "(Unconditional insertion of a level shifter)"
        let details["set_level_shifter"]["-name_prefix"] = ""
        let details["set_level_shifter"]["-name_suffix"] = ""
        let details["set_level_shifter"]["-update"] = "(update elements)"
   let details["set_lib_cell_purpose"]={}
        let details["set_lib_cell_purpose"]["-include"] = "(The lib_cells can be used for only these purposes: "
        let details["set_lib_cell_purpose"]["-exclude"] = "(The lib_cells cannot be used for these purposes: "
   let details["set_load"]={}
        let details["set_load"]["-min"] = "(Specify the minimum capacitance value)"
        let details["set_load"]["-max"] = "(Specify the maximum capacitance value)"
        let details["set_load"]["-rise"] = "(Specify the rise capacitance value (for ports only))"
        let details["set_load"]["-fall"] = "(Specify the fall capacitance value (for ports only))"
        let details["set_load"]["-pin_load"] = "(Pin capacitance (for ports only))"
        let details["set_load"]["-wire_load"] = "(Wire capacitance (for ports only))"
        let details["set_load"]["-subtract_pin_load"] = "(Subtract pin capacitance from value (nets only))"
   let details["set_locked_objects"]={}
        let details["set_locked_objects"]["-unlock"] = "(Unlock objects)"
   let details["set_macro_constraints"]={}
        let details["set_macro_constraints"]["-allowed_orientations"] = ""
        let details["set_macro_constraints"]["-preferred_location"] = ""
        let details["set_macro_constraints"]["-alignment_grid"] = ""
        let details["set_macro_constraints"]["-alignment_point"] = ""
        let details["set_macro_constraints"]["-alignment_orientation_set"] = ""
        let details["set_macro_constraints"]["-align_pins_to_tracks"] = ""
   let details["set_macro_relative_location"]={}
        let details["set_macro_relative_location"]["-target_object"] = ""
        let details["set_macro_relative_location"]["-target_orientation"] = ""
        let details["set_macro_relative_location"]["-target_corner"] = ""
        let details["set_macro_relative_location"]["-anchor_object"] = ""
        let details["set_macro_relative_location"]["-anchor_corner"] = ""
        let details["set_macro_relative_location"]["-offset"] = "(X and Y distance from anchor corner to target corner)"
        let details["set_macro_relative_location"]["-offset_type"] = ""
        let details["set_macro_relative_location"]["-used_length"] = ""
        let details["set_macro_relative_location"]["-scale_edge"] = ""
   let details["set_max_capacitance"]={}
        let details["set_max_capacitance"]["-modes"] = "(set DRC limit for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_max_capacitance"]["-corners"] = "(set DRC limit for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_max_capacitance"]["-scenarios"] = ""
        let details["set_max_capacitance"]["-clock_path"] = "(Specify clock path)"
        let details["set_max_capacitance"]["-data_path"] = "(Specify data path)"
        let details["set_max_capacitance"]["-db"] = "(Specify db library path for lib_pins)"
   let details["set_max_delay"]={}
        let details["set_max_delay"]["-rise"] = "(Delay value applies to rising paths)"
        let details["set_max_delay"]["-fall"] = "(Delay value applies to falling paths)"
        let details["set_max_delay"]["-reset_path"] = "(Reset this path first)"
        let details["set_max_delay"]["-comment"] = "(User specified comment)"
        let details["set_max_delay"]["-from"] = "(List of path startpoints or clocks)"
        let details["set_max_delay"]["-rise_from"] = ""
        let details["set_max_delay"]["-fall_from"] = ""
        let details["set_max_delay"]["-through"] = ""
        let details["set_max_delay"]["-rise_through"] = ""
        let details["set_max_delay"]["-fall_through"] = ""
        let details["set_max_delay"]["-to"] = "(List of path endpoints or clocks)"
        let details["set_max_delay"]["-rise_to"] = ""
        let details["set_max_delay"]["-fall_to"] = ""
        let details["set_max_delay"]["-ignore_clock_latency"] = ""
   let details["set_max_fanout"]={}
   let details["set_max_lvth_percentage"]={}
   let details["set_max_time_borrow"]={}
        let details["set_max_time_borrow"]["-modes"] = "(set max_time_borrow for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_max_time_borrow"]["-corners"] = "(set max_time_borrow for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_max_time_borrow"]["-scenarios"] = ""
   let details["set_max_transition"]={}
        let details["set_max_transition"]["-modes"] = "(set DRC limit for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_max_transition"]["-corners"] = "(set DRC limit for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_max_transition"]["-scenarios"] = ""
        let details["set_max_transition"]["-clock_path"] = "(Specify clock path)"
        let details["set_max_transition"]["-data_path"] = "(Specify data path)"
        let details["set_max_transition"]["-db"] = "(Specify db library path for lib_pins)"
   let details["set_message_info"]={}
        let details["set_message_info"]["-id"] = "(Message id)"
        let details["set_message_info"]["-limit"] = "(Maximum occurences before auto-suppression: "
        let details["set_message_info"]["-stop_on"] = "(Force Tcl error if message is emitted)"
        let details["set_message_info"]["-stop_off"] = "(Turn off Tcl error for message if -stop_on was previously used)"
   let details["set_min_capacitance"]={}
        let details["set_min_capacitance"]["-modes"] = "(set DRC limit for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_min_capacitance"]["-corners"] = "(set DRC limit for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_min_capacitance"]["-scenarios"] = ""
        let details["set_min_capacitance"]["-clock_path"] = "(Specify clock path)"
        let details["set_min_capacitance"]["-data_path"] = "(Specify data path)"
        let details["set_min_capacitance"]["-db"] = "(Specify db library path for lib_pins)"
   let details["set_min_delay"]={}
        let details["set_min_delay"]["-rise"] = "(Delay value applies to rising paths)"
        let details["set_min_delay"]["-fall"] = "(Delay value applies to falling paths)"
        let details["set_min_delay"]["-reset_path"] = "(Reset this path first)"
        let details["set_min_delay"]["-comment"] = "(User specified comment)"
        let details["set_min_delay"]["-from"] = "(List of path startpoints or clocks)"
        let details["set_min_delay"]["-rise_from"] = ""
        let details["set_min_delay"]["-fall_from"] = ""
        let details["set_min_delay"]["-through"] = ""
        let details["set_min_delay"]["-rise_through"] = ""
        let details["set_min_delay"]["-fall_through"] = ""
        let details["set_min_delay"]["-to"] = "(List of path endpoints or clocks)"
        let details["set_min_delay"]["-rise_to"] = ""
        let details["set_min_delay"]["-fall_to"] = ""
        let details["set_min_delay"]["-ignore_clock_latency"] = ""
   let details["set_min_pulse_width"]={}
        let details["set_min_pulse_width"]["-modes"] = "(use scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_min_pulse_width"]["-corners"] = "(use scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_min_pulse_width"]["-scenarios"] = ""
        let details["set_min_pulse_width"]["-low"] = "(Applies value only to low clock signal level)"
        let details["set_min_pulse_width"]["-high"] = "(Applies value only to high clock signal level)"
   let details["set_multicycle_path"]={}
        let details["set_multicycle_path"]["-hold"] = "(Only hold multiplier is set)"
        let details["set_multicycle_path"]["-setup"] = "(Only setup multiplier is set)"
        let details["set_multicycle_path"]["-rise"] = "(Multiplier valid for rising delays on path endpoint)"
        let details["set_multicycle_path"]["-fall"] = "(Multiplier valid for falling delays on path endpoint)"
        let details["set_multicycle_path"]["-start"] = "(Multiplier measured against launch clock)"
        let details["set_multicycle_path"]["-end"] = "(Multiplier measured against capture clock)"
        let details["set_multicycle_path"]["-reset_path"] = "(Reset this path before setting multicycle)"
        let details["set_multicycle_path"]["-comment"] = "(User specified comment)"
        let details["set_multicycle_path"]["-from"] = "(List of path startpoints or clocks)"
        let details["set_multicycle_path"]["-rise_from"] = ""
        let details["set_multicycle_path"]["-fall_from"] = ""
        let details["set_multicycle_path"]["-through"] = ""
        let details["set_multicycle_path"]["-rise_through"] = ""
        let details["set_multicycle_path"]["-fall_through"] = ""
        let details["set_multicycle_path"]["-to"] = "(List of path endpoints or clocks)"
        let details["set_multicycle_path"]["-rise_to"] = ""
        let details["set_multicycle_path"]["-fall_to"] = ""
   let details["set_multisource_clock_subtree_constraints"]={}
        let details["set_multisource_clock_subtree_constraints"]["-name"] = "(name of the option settings)"
        let details["set_multisource_clock_subtree_constraints"]["-clock"] = "(the clock the settings should apply to)"
        let details["set_multisource_clock_subtree_constraints"]["-cells"] = "(list of cells to which constraints need to be applied)"
        let details["set_multisource_clock_subtree_constraints"]["-pins"] = "(list of pins to which constraints need to be applied)"
        let details["set_multisource_clock_subtree_constraints"]["-target_level"] = "(add buffers to make all subtrees have this number of levels: "
        let details["set_multisource_clock_subtree_constraints"]["-ignore_for_icg_reordering"] = ""
   let details["set_multisource_clock_subtree_options"]={}
        let details["set_multisource_clock_subtree_options"]["-name"] = "(name of the option settings)"
        let details["set_multisource_clock_subtree_options"]["-clock"] = "(the clock the settings should apply to)"
        let details["set_multisource_clock_subtree_options"]["-corners"] = "(Corner list)"
        let details["set_multisource_clock_subtree_options"]["-driver_objects"] = ""
        let details["set_multisource_clock_subtree_options"]["-max_total_wire_delay"] = ""
        let details["set_multisource_clock_subtree_options"]["-dont_merge_cells"] = ""
        let details["set_multisource_clock_subtree_options"]["-balance_levels"] = "(false|true)]"
        let details["set_multisource_clock_subtree_options"]["-target_level"] = "(add buffers to make all subtrees have this number of levels: "
        let details["set_multisource_clock_subtree_options"]["-enable_icg_reordering"] = "(false|true)]"
   let details["set_multisource_clock_tap_options"]={}
        let details["set_multisource_clock_tap_options"]["-name"] = "(explicit name for the option setting)"
        let details["set_multisource_clock_tap_options"]["-clock"] = "(the clock the settings should apply to)"
        let details["set_multisource_clock_tap_options"]["-driver_objects"] = ""
        let details["set_multisource_clock_tap_options"]["-num_taps"] = ""
        let details["set_multisource_clock_tap_options"]["-dont_merge_cells"] = ""
   let details["set_net_estimation_rule"]={}
        let details["set_net_estimation_rule"]["-parameter"] = ""
        let details["set_net_estimation_rule"]["-unset"] = "(Remove a manually set value)"
        let details["set_net_estimation_rule"]["-value"] = "(Set a manual value)"
        let details["set_net_estimation_rule"]["-horizontal_value"] = ""
        let details["set_net_estimation_rule"]["-vertical_value"] = ""
   let details["set_net_weight_effort"]={}
        let details["set_net_weight_effort"]["-nets"] = ""
        let details["set_net_weight_effort"]["-weight_effort"] = "(Weight effort <low | medium | high | ultra | none>. Default is low.)"
        let details["set_net_weight_effort"]["-virtual_flat"] = "(Propagate net weight to associated net segments in child blocks)"
        let details["set_net_weight_effort"]["-verbose"] = "(Print verbose output)"
   let details["set_object_layer"]={}
        let details["set_object_layer"]["-of_objects"] = "(Set layer of these objects)"
        let details["set_object_layer"]["-layers"] = "(Target layers for objects)"
        let details["set_object_layer"]["-force"] = "(To ignore locked status of the objects)"
   let details["set_object_shape"]={}
        let details["set_object_shape"]["-shape"] = "(shape to set: "
        let details["set_object_shape"]["-lengths"] = "(specifies absolute lengths or length ratios of the sides of the shape.)"
        let details["set_object_shape"]["-utilization"] = "(specifies the required utilization: "
        let details["set_object_shape"]["-area"] = "(specifies the required area)"
        let details["set_object_shape"]["-keep_area"] = "(specifies to use the current area)"
        let details["set_object_shape"]["-rotate"] = "(amount to rotate by: "
   let details["set_operating_conditions"]={}
        let details["set_operating_conditions"]["-analysis_type"] = "(Analysis type (unused): "
        let details["set_operating_conditions"]["-min"] = "(Min operating condition name)"
        let details["set_operating_conditions"]["-max"] = "(Max operating condition name)"
        let details["set_operating_conditions"]["-library"] = "(.db library name to search)"
        let details["set_operating_conditions"]["-min_library"] = "(.db library name to search for min condition)"
        let details["set_operating_conditions"]["-max_library"] = "(.db library name to search for max condition)"
        let details["set_operating_conditions"]["-object_list"] = ""
   let details["set_output_delay"]={}
        let details["set_output_delay"]["-modes"] = "(set output delay for scenarios of these modes (default is current mode, or current scenario if neither mode nor corner are specified))"
        let details["set_output_delay"]["-corners"] = "(set output delay for scenarios of these corners (default is all corners, or current scenario if neither mode nor corner are specified))"
        let details["set_output_delay"]["-scenarios"] = ""
        let details["set_output_delay"]["-clock"] = "(Relative clock)"
        let details["set_output_delay"]["-clock_fall"] = "(Delay is relative to falling edge of clock)"
        let details["set_output_delay"]["-level_sensitive"] = "(Delay is to level-sensitive latch)"
        let details["set_output_delay"]["-rise"] = "( Specifies rising delay)"
        let details["set_output_delay"]["-fall"] = "( Specifies falling delay)"
        let details["set_output_delay"]["-max"] = "( Specifies maximum delay)"
        let details["set_output_delay"]["-min"] = "( Specifies minimum delay)"
        let details["set_output_delay"]["-reference_pin"] = ""
        let details["set_output_delay"]["-add_delay"] = "(Don't remove existing output delay)"
        let details["set_output_delay"]["-network_latency_included"] = ""
        let details["set_output_delay"]["-source_latency_included"] = ""
        let details["set_output_delay"]["-group_path"] = ""
   let details["set_parasitic_parameters"]={}
        let details["set_parasitic_parameters"]["-corners"] = "(List of corners)"
        let details["set_parasitic_parameters"]["-library"] = "(Library containing specs)"
        let details["set_parasitic_parameters"]["-late_spec"] = ""
        let details["set_parasitic_parameters"]["-early_spec"] = ""
        let details["set_parasitic_parameters"]["-late_temperature"] = ""
        let details["set_parasitic_parameters"]["-early_temperature"] = ""
   let details["set_parasitics_parameters"]={}
        let details["set_parasitics_parameters"]["-corners"] = "(List of corners)"
        let details["set_parasitics_parameters"]["-library"] = "(Library containing specs)"
        let details["set_parasitics_parameters"]["-late_spec"] = ""
        let details["set_parasitics_parameters"]["-early_spec"] = ""
        let details["set_parasitics_parameters"]["-late_temperature"] = ""
        let details["set_parasitics_parameters"]["-early_temperature"] = ""
   let details["set_partial_on_translation"]={}
        let details["set_partial_on_translation"]["-full_on_tools"] = ""
        let details["set_partial_on_translation"]["-off_tools"] = "(list of tools in which partial on is translated to off)"
   let details["set_path_margin"]={}
        let details["set_path_margin"]["-hold"] = "(Margin value applies for hold timing at endpoint)"
        let details["set_path_margin"]["-setup"] = "(Margin value applies for setup timing at endpoint)"
        let details["set_path_margin"]["-rise"] = "(Margin value applies to rising paths at endpoint)"
        let details["set_path_margin"]["-fall"] = "(Margin value applies to falling paths at endpoint)"
        let details["set_path_margin"]["-reset_path"] = "(Reset this path before setting path margin)"
        let details["set_path_margin"]["-from"] = "(List of path startpoints or clocks)"
        let details["set_path_margin"]["-rise_from"] = ""
        let details["set_path_margin"]["-fall_from"] = ""
        let details["set_path_margin"]["-through"] = ""
        let details["set_path_margin"]["-rise_through"] = ""
        let details["set_path_margin"]["-fall_through"] = ""
        let details["set_path_margin"]["-to"] = "(List of path endpoints or clocks)"
        let details["set_path_margin"]["-rise_to"] = ""
        let details["set_path_margin"]["-fall_to"] = ""
        let details["set_path_margin"]["-comment"] = "(User specified comment)"
        let details["set_path_margin"]["-corners"] = ""
   let details["set_pg_mask_constraint"]={}
        let details["set_pg_mask_constraint"]["-track_alignment_mode"] = ""
        let details["set_pg_mask_constraint"]["-width"] = "(PG wire width)"
        let details["set_pg_mask_constraint"]["-track_alignment_offset"] = ""
   let details["set_pg_strategy"]={}
        let details["set_pg_strategy"]["-core"] = "(use core area as routing area)"
        let details["set_pg_strategy"]["-design_boundary"] = "(use design boundary as routing area)"
        let details["set_pg_strategy"]["-voltage_areas"] = ""
        let details["set_pg_strategy"]["-polygon"] = "(use polygon as routing area)"
        let details["set_pg_strategy"]["-macros"] = "(use macros as routing area)"
        let details["set_pg_strategy"]["-blocks"] = "(use blocks as routing area)"
        let details["set_pg_strategy"]["-pg_regions"] = ""
        let details["set_pg_strategy"]["-pattern"] = ""
        let details["set_pg_strategy"]["-extension"] = "(extension option of this strategy)"
        let details["set_pg_strategy"]["-blockage"] = "(blockage option of this strategy)"
   let details["set_pg_strategy_via_rule"]={}
        let details["set_pg_strategy_via_rule"]["-via_rule"] = "(via rule for PG strategies)"
   let details["set_pg_via_master_rule"]={}
        let details["set_pg_via_master_rule"]["-offset"] = "(horizontal and vertical offset of the via)"
        let details["set_pg_via_master_rule"]["-offset_start"] = ""
        let details["set_pg_via_master_rule"]["-contact_code"] = ""
        let details["set_pg_via_master_rule"]["-via_array_dimension"] = ""
        let details["set_pg_via_master_rule"]["-orient"] = "(the orient of the contact code: "
        let details["set_pg_via_master_rule"]["-allow_multiple"] = ""
        let details["set_pg_via_master_rule"]["-cut_spacing"] = "(the horizontal and vertical spacing between cuts in an array via)"
        let details["set_pg_via_master_rule"]["-snap_reference_point"] = ""
        let details["set_pg_via_master_rule"]["-via_site_ratio"] = ""
        let details["set_pg_via_master_rule"]["-track_alignment"] = ""
        let details["set_pg_via_master_rule"]["-cut_mask"] = ""
   let details["set_pin_budget_constraints"]={}
        let details["set_pin_budget_constraints"]["-from_percent"] = ""
        let details["set_pin_budget_constraints"]["-from_delay"] = "(Set a manual budget by specifying delay on the path before the pin)"
        let details["set_pin_budget_constraints"]["-to_percent"] = "(Set a manual budget by specifying percent of the path after the pin)"
        let details["set_pin_budget_constraints"]["-to_delay"] = "(Set a manual budget by specifying delay on the path after the pin)"
        let details["set_pin_budget_constraints"]["-internal_percent"] = ""
        let details["set_pin_budget_constraints"]["-internal_delay"] = ""
        let details["set_pin_budget_constraints"]["-none"] = "(Set so no budget is created)"
        let details["set_pin_budget_constraints"]["-early_boundary"] = ""
        let details["set_pin_budget_constraints"]["-late_boundary"] = ""
        let details["set_pin_budget_constraints"]["-frozen"] = "(Don't allow update_budget to change value)"
        let details["set_pin_budget_constraints"]["-not_frozen"] = "(Allow update_budget to change value)"
        let details["set_pin_budget_constraints"]["-reset"] = "(Clear all budgets for this pin)"
        let details["set_pin_budget_constraints"]["-same_as_mib"] = "(Set the same budget as other multiply instantiated blocks)"
        let details["set_pin_budget_constraints"]["-not_same_as_mib"] = "(Make this pin independent of other multiply instantiated blocks)"
        let details["set_pin_budget_constraints"]["-same_as_pin"] = ""
        let details["set_pin_budget_constraints"]["-not_same_as_pin"] = "(Make this pin independent of other pin budgets)"
        let details["set_pin_budget_constraints"]["-same_as_modes"] = ""
        let details["set_pin_budget_constraints"]["-not_same_as_modes"] = "(Make this pin independent of other mode budgets)"
        let details["set_pin_budget_constraints"]["-same_as_feedthrough"] = "(Set the internal budget to be the same as the feedthrough budget)"
        let details["set_pin_budget_constraints"]["-not_same_as_feedthrough"] = ""
        let details["set_pin_budget_constraints"]["-inputs"] = "(Apply only to specified block inputs)"
        let details["set_pin_budget_constraints"]["-outputs"] = "(Apply only to specified block outputs)"
        let details["set_pin_budget_constraints"]["-feedthrough"] = "(Apply only to paths that are part of block feedthroughs)"
        let details["set_pin_budget_constraints"]["-internal"] = "(Apply only to paths that start or end in the local block)"
        let details["set_pin_budget_constraints"]["-from_clock"] = "(Apply only to paths starting with this clock)"
        let details["set_pin_budget_constraints"]["-from_clock_rise"] = "(Specify rising edge of from_clock)"
        let details["set_pin_budget_constraints"]["-from_clock_fall"] = "(Specify falling edge of from_clock)"
        let details["set_pin_budget_constraints"]["-to_clock"] = "(Apply only to paths ending with this clock)"
        let details["set_pin_budget_constraints"]["-to_clock_rise"] = "(Specify rising edge of to_clock)"
        let details["set_pin_budget_constraints"]["-to_clock_fall"] = "(Specify falling edge of to_clock)"
        let details["set_pin_budget_constraints"]["-modes"] = "(Apply budget in these modes)"
        let details["set_pin_budget_constraints"]["-all_modes"] = "(Apply budget in all modes)"
        let details["set_pin_budget_constraints"]["-all_pins"] = "(Specify all pins of all budgeted blocks in the selected modes)"
        let details["set_pin_budget_constraints"]["-all"] = "(Specify all pins of all budgeted blocks in all modes)"
   let details["set_placement_spacing_label"]={}
        let details["set_placement_spacing_label"]["-name"] = "(Label name)"
        let details["set_placement_spacing_label"]["-side"] = "(Side one of left | right | both: "
        let details["set_placement_spacing_label"]["-lib_cells"] = "(collection of lib cells)"
        let details["set_placement_spacing_label"]["-row"] = "(row of cell)"
   let details["set_placement_spacing_rule"]={}
        let details["set_placement_spacing_rule"]["-labels"] = ""
   let details["set_placement_status"]={}
   let details["set_pocvm_corner_sigma"]={}
        let details["set_pocvm_corner_sigma"]["-corners"] = "(List of corners)"
   let details["set_pop_up_object_options"]={}
        let details["set_pop_up_object_options"]["-object_type"] = ""
        let details["set_pop_up_object_options"]["-block_action"] = ""
        let details["set_pop_up_object_options"]["-routing_overlap_check"] = ""
        let details["set_pop_up_object_options"]["-pins_as_terminals"] = ""
   let details["set_port_antenna_property"]={}
        let details["set_port_antenna_property"]["-port"] = "(Port name)"
        let details["set_port_antenna_property"]["-data"] = "(Antenna Prop Data)"
        let details["set_port_antenna_property"]["-add"] = "(Add to Existing data)"
        let details["set_port_antenna_property"]["-replace"] = "(Replace Existing Data)"
   let details["set_port_attributes"]={}
        let details["set_port_attributes"]["-ports"] = "(list of ports to be attributed)"
        let details["set_port_attributes"]["-elements"] = ""
        let details["set_port_attributes"]["-applies_to"] = ""
        let details["set_port_attributes"]["-clamp_value"] = "(indicates the value that specified ports shall be clamped to: "
        let details["set_port_attributes"]["-attribute"] = ""
        let details["set_port_attributes"]["-driver_supply"] = ""
        let details["set_port_attributes"]["-receiver_supply"] = ""
        let details["set_port_attributes"]["-repeater_supply"] = ""
        let details["set_port_attributes"]["-model"] = "(name of a library cell)"
        let details["set_port_attributes"]["-feedthrough"] = "(indicates specified ports connected together internally)"
        let details["set_port_attributes"]["-unconnected"] = "(indicates specified ports are unconnected internally)"
   let details["set_power_clock_scaling"]={}
        let details["set_power_clock_scaling"]["-period"] = "(period of clock used in SAIF: "
        let details["set_power_clock_scaling"]["-ratio"] = "(clock period in SAIF / clock period in SDC: "
        let details["set_power_clock_scaling"]["-scenarios"] = "(Scenarios for which to set the clock scaling values)"
   let details["set_power_derate"]={}
        let details["set_power_derate"]["-scenarios"] = ""
        let details["set_power_derate"]["-leakage"] = "(Apply derate to leakage power)"
        let details["set_power_derate"]["-switching"] = "(Apply derate to switching power)"
        let details["set_power_derate"]["-internal"] = "(Apply derate to internal power)"
        let details["set_power_derate"]["-groups"] = "(Specify the power group names)"
   let details["set_power_group"]={}
        let details["set_power_group"]["-name"] = "(power group names to be set)"
   let details["set_power_io_constraints"]={}
        let details["set_power_io_constraints"]["-io_guide_object"] = ""
        let details["set_power_io_constraints"]["-reference_cell"] = ""
        let details["set_power_io_constraints"]["-share"] = ""
        let details["set_power_io_constraints"]["-spacing"] = ""
        let details["set_power_io_constraints"]["-ratio"] = ""
        let details["set_power_io_constraints"]["-offset"] = ""
   let details["set_power_strategy_attribute"]={}
   let details["set_power_switch_placement_pattern"]={}
        let details["set_power_switch_placement_pattern"]["-name"] = "(power switch placement pattern name)"
        let details["set_power_switch_placement_pattern"]["-direction"] = "(power switch pattern placement direction: "
        let details["set_power_switch_placement_pattern"]["-driver"] = "(drive cell in the pattern)"
        let details["set_power_switch_placement_pattern"]["-connect_mode"] = ""
        let details["set_power_switch_placement_pattern"]["-placement_type"] = ""
        let details["set_power_switch_placement_pattern"]["-pattern"] = "(power switch pattern)"
        let details["set_power_switch_placement_pattern"]["-port_net_name"] = "(port net name)"
   let details["set_process_label"]={}
        let details["set_process_label"]["-corners"] = "(List of corners)"
        let details["set_process_label"]["-object_list"] = "(List of cells and/or ports)"
        let details["set_process_label"]["-library"] = "(Applicable cell library)"
        let details["set_process_label"]["-clear"] = "(Remove existing settings)"
        let details["set_process_label"]["-early"] = "(Early process label name)"
        let details["set_process_label"]["-late"] = "(Late process label name)"
   let details["set_process_number"]={}
        let details["set_process_number"]["-corners"] = "(List of corners)"
        let details["set_process_number"]["-object_list"] = "(List of cells and/or ports)"
        let details["set_process_number"]["-library"] = "(Applicable cell library)"
        let details["set_process_number"]["-clear"] = "(Remove existing settings)"
        let details["set_process_number"]["-early"] = "(Early process number)"
        let details["set_process_number"]["-late"] = "(Late process number)"
   let details["set_programmable_spare_cell_mapping_rule"]={}
        let details["set_programmable_spare_cell_mapping_rule"]["-psc_type_id"] = "(a list of psc type id)"
        let details["set_programmable_spare_cell_mapping_rule"]["-dont_overlap_pg_stripe_layer"] = ""
        let details["set_programmable_spare_cell_mapping_rule"]["-partial_overlap_pg_stripe_layer"] = ""
        let details["set_programmable_spare_cell_mapping_rule"]["-multi_height_split"] = ""
        let details["set_programmable_spare_cell_mapping_rule"]["-multi_height_merge"] = ""
        let details["set_programmable_spare_cell_mapping_rule"]["-compatible"] = "(compatible psc type id list)"
   let details["set_propagated_clock"]={}
   let details["set_push_down_object_options"]={}
        let details["set_push_down_object_options"]["-object_type"] = ""
        let details["set_push_down_object_options"]["-top_action"] = ""
        let details["set_push_down_object_options"]["-block_action"] = ""
        let details["set_push_down_object_options"]["-routing_overlap_check"] = ""
        let details["set_push_down_object_options"]["-ignore_misalignment"] = ""
        let details["set_push_down_object_options"]["-location_based_terminal_naming"] = ""
        let details["set_push_down_object_options"]["-allow_multi_rail_cells"] = "(default is false)]"
        let details["set_push_down_object_options"]["-collinear_margin"] = "(default is -1, 0 means abutting exactly, >0 applies a non-0 margin)]"
        let details["set_push_down_object_options"]["-pin_meet_fatwire_rule"] = "(default is false)]"
   let details["set_pvt_configuration"]={}
        let details["set_pvt_configuration"]["-clear_filter"] = ""
        let details["set_pvt_configuration"]["-process_labels"] = ""
        let details["set_pvt_configuration"]["-process_numbers"] = ""
        let details["set_pvt_configuration"]["-voltages"] = ""
        let details["set_pvt_configuration"]["-temperatures"] = ""
        let details["set_pvt_configuration"]["-add"] = "(Create a new rule)"
        let details["set_pvt_configuration"]["-name"] = "(Give the new rule a specific name)"
        let details["set_pvt_configuration"]["-rule"] = "(Change the current rule)"
   let details["set_rail_integrity_strategy"]={}
        let details["set_rail_integrity_strategy"]["-allow_stacked_endpoint_vias_outside_of_overlapping_area"] = ""
        let details["set_rail_integrity_strategy"]["-area_edge_condition"] = ""
        let details["set_rail_integrity_strategy"]["-core"] = "((default false))"
        let details["set_rail_integrity_strategy"]["-cut_merged_shape"] = "((default false))"
        let details["set_rail_integrity_strategy"]["-discontinuous_connection_directionality"] = ""
        let details["set_rail_integrity_strategy"]["-discontinuous_connection_threshold"] = ""
        let details["set_rail_integrity_strategy"]["-enable_discontinuous_connection_check"] = ""
        let details["set_rail_integrity_strategy"]["-error_data"] = "()"
        let details["set_rail_integrity_strategy"]["-exclude_macros"] = "()"
        let details["set_rail_integrity_strategy"]["-exclude_cell_masters"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_pins_by_cell"] = ""
        let details["set_rail_integrity_strategy"]["-existing_stacked_via_check_mode"] = ""
        let details["set_rail_integrity_strategy"]["-ideal_sourced_dangling_vias"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_conn_view_eeq_for_physical_connectivity_tracing"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_discontinuous_connection_object_types"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_discontinuous_connection_routing_layers"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_discontinuous_connection_shape_types"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_minimum_via_criterion"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_other_pg_net_shapes"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_other_shape_net_types"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_pins_by_cell_type"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_pin_shape_layers"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_routing_blockage_layers"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_routing_blockages"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_small_overlapping_area"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_touching_floating_pin_shape_errors"] = ""
        let details["set_rail_integrity_strategy"]["-ignore_via_enclosure_shape"] = ""
        let details["set_rail_integrity_strategy"]["-macros"] = "()"
        let details["set_rail_integrity_strategy"]["-max_via_distance_along_parallel_wires"] = ""
        let details["set_rail_integrity_strategy"]["-merge_same_layer_shapes"] = ""
        let details["set_rail_integrity_strategy"]["-missing_via_net_shape_direction"] = ""
        let details["set_rail_integrity_strategy"]["-missing_via_rule"] = "()"
        let details["set_rail_integrity_strategy"]["-filter_layer_net_shapes"] = ""
        let details["set_rail_integrity_strategy"]["-nets"] = "()"
        let details["set_rail_integrity_strategy"]["-non_ideal_sourced_floating_shapes"] = ""
        let details["set_rail_integrity_strategy"]["-no_stack"] = "((default false))"
        let details["set_rail_integrity_strategy"]["-override_conn_view_eeq_class_to_interpret_as_same_class"] = ""
        let details["set_rail_integrity_strategy"]["-pg_pin_floating_connection_check"] = ""
        let details["set_rail_integrity_strategy"]["-polygon"] = "()"
        let details["set_rail_integrity_strategy"]["-exclude_polygon"] = "()"
        let details["set_rail_integrity_strategy"]["-pg_regions"] = "()"
        let details["set_rail_integrity_strategy"]["-use_conn_view"] = "((default false))"
        let details["set_rail_integrity_strategy"]["-via_existence_check_merge_via_cut"] = ""
        let details["set_rail_integrity_strategy"]["-via_existence_check_partially_enclosed"] = ""
        let details["set_rail_integrity_strategy"]["-voltage_areas"] = "()"
   let details["set_ref_libs"]={}
        let details["set_ref_libs"]["-library"] = "(Library name)"
        let details["set_ref_libs"]["-ref_libs"] = "(Reference library list)"
        let details["set_ref_libs"]["-use_technology_lib"] = ""
        let details["set_ref_libs"]["-add"] = "(Add library reference path)"
        let details["set_ref_libs"]["-before"] = "(Add reference before library)"
        let details["set_ref_libs"]["-remove"] = "(Remove library reference)"
        let details["set_ref_libs"]["-clear"] = "(Remove all library references)"
        let details["set_ref_libs"]["-rebind"] = "(Rebind library references)"
   let details["set_reference"]={}
        let details["set_reference"]["-design"] = "(Top design for finding objects)"
        let details["set_reference"]["-block"] = "(New reference block)"
        let details["set_reference"]["-to_block"] = "(New reference block)"
        let details["set_reference"]["-to_module"] = "(New reference module)"
        let details["set_reference"]["-of_object"] = "(Old reference block)"
        let details["set_reference"]["-reference"] = "(Old reference name)"
        let details["set_reference"]["-pin_map"] = "(Map old pins to new ports by name)"
        let details["set_reference"]["-pin_rebind"] = "(Pin rebind style: default is 'safe': "
        let details["set_reference"]["-pin_verbose"] = "(Verbose pin operations)"
   let details["set_related_supply_net"]={}
        let details["set_related_supply_net"]["-object_list"] = ""
        let details["set_related_supply_net"]["-power"] = ""
        let details["set_related_supply_net"]["-ground"] = ""
   let details["set_report_configuration"]={}
        let details["set_report_configuration"]["-report"] = "(Name of the report)"
        let details["set_report_configuration"]["-columns"] = ""
        let details["set_report_configuration"]["-filler_string"] = ""
        let details["set_report_configuration"]["-overflow_method"] = ""
        let details["set_report_configuration"]["-dynamic_width"] = ""
        let details["set_report_configuration"]["-default"] = "(Revert to default report configuration)"
   let details["set_retention"]={}
        let details["set_retention"]["-domain"] = "(Specify the power domain of the strategy)"
        let details["set_retention"]["-elements"] = "(Specify design elements to which this strategy is applied)"
        let details["set_retention"]["-retention_power_net"] = ""
        let details["set_retention"]["-retention_ground_net"] = ""
        let details["set_retention"]["-retention_supply_set"] = ""
        let details["set_retention"]["-no_retention"] = "(No retention)"
        let details["set_retention"]["-save_condition"] = ""
        let details["set_retention"]["-restore_condition"] = ""
        let details["set_retention"]["-retention_condition"] = ""
        let details["set_retention"]["-save_signal"] = ""
        let details["set_retention"]["-restore_signal"] = ""
        let details["set_retention"]["-update"] = "(Update previously defined retention strategy)"
   let details["set_retention_control"]={}
        let details["set_retention_control"]["-domain"] = "(Specify the power domain of the strategy)"
        let details["set_retention_control"]["-save_signal"] = ""
        let details["set_retention_control"]["-restore_signal"] = ""
        let details["set_retention_control"]["-assert_r_mutex"] = ""
        let details["set_retention_control"]["-assert_s_mutex"] = ""
        let details["set_retention_control"]["-assert_rs_mutex"] = ""
   let details["set_retention_elements"]={}
        let details["set_retention_elements"]["-elements"] = "(Specify the retention element list)"
   let details["set_route_opt_target_endpoints"]={}
        let details["set_route_opt_target_endpoints"]["-setup_endpoints"] = ""
        let details["set_route_opt_target_endpoints"]["-setup_timing"] = ""
        let details["set_route_opt_target_endpoints"]["-hold_endpoints"] = ""
        let details["set_route_opt_target_endpoints"]["-hold_timing"] = ""
        let details["set_route_opt_target_endpoints"]["-ldrc_objects"] = ""
        let details["set_route_opt_target_endpoints"]["-scenario"] = "(Default scenario name)"
        let details["set_route_opt_target_endpoints"]["-reset"] = "(Reset)"
   let details["set_routing_rule"]={}
        let details["set_routing_rule"]["-rule"] = "(Non-default routing rule to assign)"
        let details["set_routing_rule"]["-default_rule"] = "(To assign the default rule)"
        let details["set_routing_rule"]["-no_rule"] = "(To assign no rule, allowing tool to auto-assign a rule)"
        let details["set_routing_rule"]["-min_routing_layer"] = ""
        let details["set_routing_rule"]["-max_routing_layer"] = ""
        let details["set_routing_rule"]["-min_layer_mode"] = "(Minimum routing layer mode: "
        let details["set_routing_rule"]["-max_layer_mode"] = "(Maximum routing layer mode: "
        let details["set_routing_rule"]["-min_layer_mode_soft_cost"] = ""
        let details["set_routing_rule"]["-max_layer_mode_soft_cost"] = ""
        let details["set_routing_rule"]["-min_layer_is_user"] = ""
        let details["set_routing_rule"]["-max_layer_is_user"] = ""
        let details["set_routing_rule"]["-clear"] = "(To clear values on the nets)"
   let details["set_rp_group_options"]={}
        let details["set_rp_group_options"]["-tiling_type"] = ""
        let details["set_rp_group_options"]["-group_orientation"] = ""
        let details["set_rp_group_options"]["-anchor_corner"] = ""
        let details["set_rp_group_options"]["-x_offset"] = "(X offset)"
        let details["set_rp_group_options"]["-y_offset"] = "(Y offset)"
        let details["set_rp_group_options"]["-anchor_row"] = ""
        let details["set_rp_group_options"]["-anchor_column"] = ""
        let details["set_rp_group_options"]["-alignment"] = ""
        let details["set_rp_group_options"]["-move_effort"] = ""
        let details["set_rp_group_options"]["-pin_name"] = ""
        let details["set_rp_group_options"]["-optimization_restriction"] = ""
        let details["set_rp_group_options"]["-rp_only_keepout_margin"] = ""
        let details["set_rp_group_options"]["-place_around_fixed_cells"] = ""
        let details["set_rp_group_options"]["-utilization"] = ""
        let details["set_rp_group_options"]["-allow_non_rp_cells"] = "(Placement of non RP cells on empty space of rp group)"
        let details["set_rp_group_options"]["-allow_non_rp_cells_on_blockages"] = ""
   let details["set_scenario_status"]={}
        let details["set_scenario_status"]["-setup"] = "(Control setup analysis)"
        let details["set_scenario_status"]["-hold"] = "(Control hold analysis)"
        let details["set_scenario_status"]["-leakage_power"] = ""
        let details["set_scenario_status"]["-dynamic_power"] = ""
        let details["set_scenario_status"]["-max_transition"] = ""
        let details["set_scenario_status"]["-max_capacitance"] = ""
        let details["set_scenario_status"]["-min_capacitance"] = ""
        let details["set_scenario_status"]["-cell_em"] = ""
        let details["set_scenario_status"]["-signal_em"] = ""
        let details["set_scenario_status"]["-active"] = "(Allow specified analysis types to happen)"
        let details["set_scenario_status"]["-all"] = "(Turn on all analysis types)"
        let details["set_scenario_status"]["-none"] = "(Turn off all analysis types)"
   let details["set_scope"]={}
   let details["set_segment_budget_constraints"]={}
        let details["set_segment_budget_constraints"]["-delay"] = "(Delay to attach to the segment)"
        let details["set_segment_budget_constraints"]["-remove"] = "(Remove the specified constraint)"
        let details["set_segment_budget_constraints"]["-from"] = "(Pin on budget block where segment starts)"
        let details["set_segment_budget_constraints"]["-to"] = "(Pin on budget block where segment ends)"
        let details["set_segment_budget_constraints"]["-rule"] = "(Name of a rule for calculating delay)"
   let details["set_sense"]={}
        let details["set_sense"]["-type"] = "(Specify type of sense: Values: clock, data)"
        let details["set_sense"]["-positive"] = "(Specify positive unate (non-inverting) clock sense)"
        let details["set_sense"]["-negative"] = "(Specify negative unate (inverting) clock sense)"
        let details["set_sense"]["-stop_propagation"] = "(Stop propagation from specified pins)"
        let details["set_sense"]["-clock_leaf"] = "(Specify that the pin is a clock consumer)"
        let details["set_sense"]["-pulse"] = "(Specify pulse clock sense: "
        let details["set_sense"]["-clocks"] = "(List of clocks)"
   let details["set_shaping_options"]={}
        let details["set_shaping_options"]["-min_channel_size"] = ""
        let details["set_shaping_options"]["-guard_band_size"] = ""
        let details["set_shaping_options"]["-utilization_slack"] = ""
        let details["set_shaping_options"]["-keep_top_level_together"] = ""
        let details["set_shaping_options"]["-add_channel_blockages"] = ""
        let details["set_shaping_options"]["-reset"] = "(Specify to reset to all default values)"
   let details["set_si_delay_analysis"]={}
        let details["set_si_delay_analysis"]["-victims"] = "(List of nets as victim)"
        let details["set_si_delay_analysis"]["-aggressors"] = ""
        let details["set_si_delay_analysis"]["-exclude"] = "(Exclude nets for crosstalk)"
        let details["set_si_delay_analysis"]["-ignore_arrival"] = ""
   let details["set_signal_io_constraints"]={}
        let details["set_signal_io_constraints"]["-io_guide_object"] = ""
        let details["set_signal_io_constraints"]["-constraint"] = ""
        let details["set_signal_io_constraints"]["-file"] = ""
   let details["set_site_array_stack_order"]={}
        let details["set_site_array_stack_order"]["-above"] = "(Name or collection of a site array)"
        let details["set_site_array_stack_order"]["-below"] = "(Name or collection of a site array)"
        let details["set_site_array_stack_order"]["-raise"] = "(raise site array by one position)"
        let details["set_site_array_stack_order"]["-lower"] = "(lower site array by one position)"
        let details["set_site_array_stack_order"]["-top"] = "(raise site array to the top of the stack)"
        let details["set_site_array_stack_order"]["-bottom"] = "(lower site array to the bottom of the stack)"
   let details["set_size_only"]={}
        let details["set_size_only"]["-all_instances"] = "(Process all other cells similar to the given cells)"
   let details["set_snap_setting"]={}
        let details["set_snap_setting"]["-enabled"] = "(snapping state)"
        let details["set_snap_setting"]["-class"] = "(snap object class: "
        let details["set_snap_setting"]["-snap"] = "(snap type for given object class: "
        let details["set_snap_setting"]["-cursor_edge"] = "(snap cursor to object edges)"
        let details["set_snap_setting"]["-object_edge"] = "(snap object to object edges)"
        let details["set_snap_setting"]["-edge_radius"] = "(edge search radius: "
        let details["set_snap_setting"]["-user_grid"] = "(current user grid)"
        let details["set_snap_setting"]["-preferred_track"] = ""
        let details["set_snap_setting"]["-fix_orientation"] = ""
        let details["set_snap_setting"]["-macro_by_color"] = ""
        let details["set_snap_setting"]["-default"] = "(Reset all options to default state)"
   let details["set_starrc_in_design"]={}
        let details["set_starrc_in_design"]["-config"] = "(config file to set for StarRC in design)"
   let details["set_supernet_exceptions"]={}
        let details["set_supernet_exceptions"]["-pins"] = "(Pins whch are to be set to supernet transparent)"
        let details["set_supernet_exceptions"]["-disable_cells"] = ""
   let details["set_svf"]={}
        let details["set_svf"]["-append"] = "(Append guidance to existing directory)"
        let details["set_svf"]["-replace"] = "(Replace directory if it already exists)"
        let details["set_svf"]["-off"] = "(Stop recording guidance and close all files)"
   let details["set_switching_activity"]={}
        let details["set_switching_activity"]["-modes"] = "(Set activity for specified modes)"
        let details["set_switching_activity"]["-corners"] = "(Set activity for specified corners)"
        let details["set_switching_activity"]["-scenarios"] = "(Set activity for specified scenarios)"
        let details["set_switching_activity"]["-path_sources"] = ""
        let details["set_switching_activity"]["-state_condition"] = ""
        let details["set_switching_activity"]["-base_clock"] = ""
        let details["set_switching_activity"]["-static_probability"] = ""
        let details["set_switching_activity"]["-toggle_rate"] = ""
        let details["set_switching_activity"]["-period"] = "(Related clock frequency in Hertz (cycles per second))"
   let details["set_target_library_subset"]={}
        let details["set_target_library_subset"]["-objects"] = "(Hierarchical cells on which to apply the subset)"
        let details["set_target_library_subset"]["-top"] = "(To apply the subset on the top block)"
        let details["set_target_library_subset"]["-data"] = "(To indicate subset constrains only data paths)"
        let details["set_target_library_subset"]["-clock"] = "(To indicate subset constrains only clock paths)"
        let details["set_target_library_subset"]["-dont_use"] = "(Library cells to not use)"
        let details["set_target_library_subset"]["-only_here"] = "(Library cells to allow here but not in other places)"
   let details["set_technology"]={}
        let details["set_technology"]["-node"] = "(Technology node name (12, 7))"
   let details["set_temperature"]={}
        let details["set_temperature"]["-min"] = "(min temperature)"
        let details["set_temperature"]["-corners"] = "(List of corners)"
        let details["set_temperature"]["-object_list"] = ""
        let details["set_temperature"]["-clear"] = "(Remove existing settings)"
   let details["set_threshold_voltage_group_type"]={}
        let details["set_threshold_voltage_group_type"]["-type"] = "(Vth type: "
   let details["set_timing_derate"]={}
        let details["set_timing_derate"]["-cell_delay"] = "(Specify derate factor for cell delays)"
        let details["set_timing_derate"]["-cell_check"] = "(Specify derate factor for cell timing checks)"
        let details["set_timing_derate"]["-net_delay"] = "(Specify derate factor for nets)"
        let details["set_timing_derate"]["-data"] = "(Specify derate factor for data paths)"
        let details["set_timing_derate"]["-clock"] = "(Specify derate factor for clock paths)"
        let details["set_timing_derate"]["-early"] = "(Specify early derate factor)"
        let details["set_timing_derate"]["-late"] = "(Specify late derate factor)"
        let details["set_timing_derate"]["-rise"] = "(Specify rise derate factor)"
        let details["set_timing_derate"]["-fall"] = "(Specify fall derate factor)"
        let details["set_timing_derate"]["-min"] = "(Ignored)"
        let details["set_timing_derate"]["-max"] = "(Ignored)"
        let details["set_timing_derate"]["-aocvm_guardband"] = "(Specify AOCVM GuardBand)"
        let details["set_timing_derate"]["-pocvm_guardband"] = "(Specify POCVM GuardBand)"
        let details["set_timing_derate"]["-pocvm_coefficient_scale_factor"] = ""
        let details["set_timing_derate"]["-static"] = "(Specify derate factor for non-delta delays.)"
        let details["set_timing_derate"]["-dynamic"] = "(Specify derate factor for delta delays.)"
        let details["set_timing_derate"]["-increment"] = "(Specify incremental derate factor)"
        let details["set_timing_derate"]["-variation"] = "(Specify derate factor for statistical delays only. Option currenty ignored)"
        let details["set_timing_derate"]["-corners"] = "(List of corners)"
   let details["set_timing_paths_disabled_blocks"]={}
        let details["set_timing_paths_disabled_blocks"]["-all_sub_blocks"] = "(Ignore internal timing paths in all sub-blocks )"
   let details["set_track_constraint"]={}
        let details["set_track_constraint"]["-block"] = ""
        let details["set_track_constraint"]["-layer"] = ""
        let details["set_track_constraint"]["-grid"] = ""
        let details["set_track_constraint"]["-offset"] = ""
        let details["set_track_constraint"]["-origin"] = "(The region in which the constraint applies: "
        let details["set_track_constraint"]["-track_direction"] = ""
        let details["set_track_constraint"]["-mask"] = ""
        let details["set_track_constraint"]["-label"] = "(A label identifying the given constraint)"
   let details["set_user_units"]={}
        let details["set_user_units"]["-input"] = "(Set the user units for data input)"
        let details["set_user_units"]["-output"] = "(Set the user units for data output)"
        let details["set_user_units"]["-type"] = "(Unit type: "
        let details["set_user_units"]["-value"] = "(Unit value)"
   let details["set_via_def"]={}
        let details["set_via_def"]["-vias"] = "(Names or collection of vias to change via def)"
        let details["set_via_def"]["-via_def"] = "(Simple via definition)"
        let details["set_via_def"]["-pitch"] = ""
        let details["set_via_def"]["-size"] = "(Number of rows and columns in a simple array via)"
   let details["set_via_ladder_constraints"]={}
        let details["set_via_ladder_constraints"]["-pins"] = "(Collection or names of pins)"
   let details["set_via_ladder_rules"]={}
        let details["set_via_ladder_rules"]["-master_pin_map"] = ""
        let details["set_via_ladder_rules"]["-master_pin_map_file"] = ""
        let details["set_via_ladder_rules"]["-all_instances_of"] = ""
        let details["set_via_ladder_rules"]["-default_ladders"] = ""
        let details["set_via_ladder_rules"]["-all_clock_outputs"] = "(false|true)]"
        let details["set_via_ladder_rules"]["-all_clock_inputs"] = "(false|true)]"
        let details["set_via_ladder_rules"]["-all_pins_driving"] = ""
        let details["set_via_ladder_rules"]["-remove_all_rules"] = "(If this option is specified, all the rules will be removed.)"
   let details["set_via_ladder_spacing"]={}
        let details["set_via_ladder_spacing"]["-cells"] = ""
        let details["set_via_ladder_spacing"]["-lib_cells"] = ""
        let details["set_via_ladder_spacing"]["-distance"] = ""
   let details["set_view_switch_list"]={}
        let details["set_view_switch_list"]["-library"] = "(Library to set view switch list of)"
        let details["set_view_switch_list"]["-design"] = "(Design to set view switch list of)"
        let details["set_view_switch_list"]["-global"] = "(To set the global view switch list)"
   let details["set_virtual_pad"]={}
        let details["set_virtual_pad"]["-net"] = "(Power or ground net)"
        let details["set_virtual_pad"]["-coordinate"] = "(Specify coordinates of the virtual pad)"
        let details["set_virtual_pad"]["-layer"] = "(Specify layer of the virtual tap)"
   let details["set_voltage"]={}
        let details["set_voltage"]["-min"] = "(min voltage)"
        let details["set_voltage"]["-dynamic"] = "(dynamic voltage)"
        let details["set_voltage"]["-min_dynamic"] = "(min dynamic voltage)"
        let details["set_voltage"]["-corners"] = "(List of corners)"
        let details["set_voltage"]["-object_list"] = ""
        let details["set_voltage"]["-cell"] = "(Cell instance (ignored))"
        let details["set_voltage"]["-pg_pin_name"] = "(Name of cell pg pin (ignored))"
   let details["set_voltage_area"]={}
        let details["set_voltage_area"]["-add_power_domains"] = ""
        let details["set_voltage_area"]["-remove_power_domains"] = ""
        let details["set_voltage_area"]["-power"] = "(power supply_net of this voltage_area)"
        let details["set_voltage_area"]["-ground"] = "(ground supply_net of this voltage_area)"
        let details["set_voltage_area"]["-add_cells"] = "(Cells to be added to this voltage_area)"
        let details["set_voltage_area"]["-remove_cells"] = ""
        let details["set_voltage_area"]["-remove_all_cells"] = "(Remove all cells from this voltage_area)"
        let details["set_voltage_area"]["-is_fixed"] = "(Set the voltage_area location as fixed)"
        let details["set_voltage_area"]["-merge_regions"] = "(Merge abutted and overlapped regions)"
        let details["set_voltage_area"]["-name"] = ""
   let details["set_voltage_area_shape"]={}
        let details["set_voltage_area_shape"]["-add_cells"] = "(Cells to be added to this voltage_area_shape)"
        let details["set_voltage_area_shape"]["-remove_cells"] = ""
        let details["set_voltage_area_shape"]["-remove_all_cells"] = "(Remove all cells from this voltage_area_shape)"
        let details["set_voltage_area_shape"]["-raise"] = "(raise shape by one position)"
        let details["set_voltage_area_shape"]["-lower"] = "(lower shape by one position)"
        let details["set_voltage_area_shape"]["-top"] = "(raise shape to the top of the position stack)"
        let details["set_voltage_area_shape"]["-bottom"] = "(lower shape to the bottom of the position stack)"
        let details["set_voltage_area_shape"]["-above"] = ""
        let details["set_voltage_area_shape"]["-below"] = ""
   let details["set_vsdc"]={}
        let details["set_vsdc"]["-append"] = "(Append guidance to existing file)"
        let details["set_vsdc"]["-replace"] = "(Replace file if it already exists)"
        let details["set_vsdc"]["-off"] = "(Stop recording guidance and close the file)"
   let details["set_vt_filler_rule"]={}
        let details["set_vt_filler_rule"]["-filler_cells"] = ""
        let details["set_vt_filler_rule"]["-vt_type"] = "(the vts to set the cell to)"
        let details["set_vt_filler_rule"]["-silent"] = "(Specifies whether additional information is printed)"
        let details["set_vt_filler_rule"]["-quiet"] = "(Specifies whether additional information is printed)"
   let details["set_working_design"]={}
        let details["set_working_design"]["-push"] = "(Cell to be pushed to)"
        let details["set_working_design"]["-pop"] = "(Pop current design out of stack)"
        let details["set_working_design"]["-level"] = "(Level to pop design stack: "
   let details["set_working_design_stack"]={}
   let details["shape_blocks"]={}
        let details["shape_blocks"]["-channels"] = ""
        let details["shape_blocks"]["-constraint_file"] = ""
        let details["shape_blocks"]["-incremental"] = ""
        let details["shape_blocks"]["-pg_strategy"] = ""
        let details["shape_blocks"]["-host_options"] = ""
   let details["signoff_calculate_hier_antenna_property"]={}
        let details["signoff_calculate_hier_antenna_property"]["-diffusion_layers"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-top_cell_pin_only"] = "(false|true)]"
        let details["signoff_calculate_hier_antenna_property"]["-treat_source_drain_as_diodes"] = "(false|true)]"
        let details["signoff_calculate_hier_antenna_property"]["-report_diodes"] = "(false|true)]"
        let details["signoff_calculate_hier_antenna_property"]["-poly_layers"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-contact_layers"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-gate_class1_marking_layers"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-gate_class2_marking_layers"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-gate_class3_marking_layers"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-v0_layers_between_m1_m0"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-m0_layers_for_poly_connection"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-m0_layers_for_diffusion_connection"] = ""
        let details["signoff_calculate_hier_antenna_property"]["-contact_layers_between_m0_diffusion"] = ""
   let details["signoff_check_design"]={}
        let details["signoff_check_design"]["-short_with_metal_fill"] = "(false|true)]"
        let details["signoff_check_design"]["-read_frame_view"] = ""
   let details["signoff_check_drc"]={}
        let details["signoff_check_drc"]["-error_data"] = ""
        let details["signoff_check_drc"]["-select_layers"] = ""
        let details["signoff_check_drc"]["-check_all_runset_layers"] = "(false|true)]"
        let details["signoff_check_drc"]["-auto_eco"] = "(false|true)]"
        let details["signoff_check_drc"]["-pre_eco_design"] = ""
        let details["signoff_check_drc"]["-coordinates"] = ""
        let details["signoff_check_drc"]["-excluded_coordinates"] = ""
        let details["signoff_check_drc"]["-select_rules"] = ""
        let details["signoff_check_drc"]["-unselect_rules"] = ""
   let details["signoff_create_metal_fill"]={}
        let details["signoff_create_metal_fill"]["-mode"] = "(overwrite|add|remove|replace)]"
        let details["signoff_create_metal_fill"]["-select_layers"] = ""
        let details["signoff_create_metal_fill"]["-all_runset_layers"] = "(false|true)]"
        let details["signoff_create_metal_fill"]["-coordinates"] = ""
        let details["signoff_create_metal_fill"]["-excluded_coordinates"] = ""
        let details["signoff_create_metal_fill"]["-nets"] = ""
        let details["signoff_create_metal_fill"]["-timing_preserve_setup_slack_threshold"] = ""
        let details["signoff_create_metal_fill"]["-auto_eco"] = "(false|true)]"
        let details["signoff_create_metal_fill"]["-pre_eco_design"] = ""
        let details["signoff_create_metal_fill"]["-track_fill"] = "(off|generic|list|<foundry_node>)]"
        let details["signoff_create_metal_fill"]["-remove_by_rule"] = "(off|ndr|max_density_threshold|drc)]"
        let details["signoff_create_metal_fill"]["-fill_all_tracks"] = "(false|true)]"
        let details["signoff_create_metal_fill"]["-report_density"] = ""
        let details["signoff_create_metal_fill"]["-output_colored_fill"] = "(false|true)]"
        let details["signoff_create_metal_fill"]["-track_fill_parameter_file"] = "(auto|generate_file_only|<custom_params_file>]"
   let details["signoff_fix_drc"]={}
        let details["signoff_fix_drc"]["-start_repair_loop"] = ""
        let details["signoff_fix_drc"]["-max_number_repair_loop"] = ""
        let details["signoff_fix_drc"]["-coordinates"] = ""
        let details["signoff_fix_drc"]["-excluded_coordinates"] = ""
        let details["signoff_fix_drc"]["-nets"] = ""
        let details["signoff_fix_drc"]["-timing_preserve_setup_slack_threshold"] = ""
        let details["signoff_fix_drc"]["-select_rules"] = ""
        let details["signoff_fix_drc"]["-unselect_rules"] = ""
   let details["signoff_fix_isolated_via"]={}
        let details["signoff_fix_isolated_via"]["-check_only"] = "(false|true)]"
        let details["signoff_fix_isolated_via"]["-error_data"] = ""
        let details["signoff_fix_isolated_via"]["-save_design"] = "(false|true)]"
        let details["signoff_fix_isolated_via"]["-update_track_fill"] = "(false|true)]"
        let details["signoff_fix_isolated_via"]["-track_fill_runset_include_file"] = ""
   let details["signoff_report_metal_density"]={}
        let details["signoff_report_metal_density"]["-select_layers"] = ""
        let details["signoff_report_metal_density"]["-coordinates"] = ""
        let details["signoff_report_metal_density"]["-output"] = "(output file to generate report)"
        let details["signoff_report_metal_density"]["-starting_point"] = "(Starting point for density windows. Default is lower left cornet of chip boundary bbox.)"
   let details["size_cell"]={}
        let details["size_cell"]["-lib_cell"] = "(New lib_cell used to size cells)"
        let details["size_cell"]["-max_distance_to_spare_cell"] = ""
        let details["size_cell"]["-not_spare_cell_aware"] = ""
   let details["sizeof_collection"]={}
   let details["snap_cells_to_block_grid"]={}
        let details["snap_cells_to_block_grid"]["-designs"] = "(Specify the block designs)"
        let details["snap_cells_to_block_grid"]["-grid"] = "(Specify the block grid)"
        let details["snap_cells_to_block_grid"]["-cells"] = "(Specify the block instances to snap)"
   let details["snap_object_shapes"]={}
        let details["snap_object_shapes"]["-grid"] = "(grid to use for snapping)"
        let details["snap_object_shapes"]["-left"] = ""
        let details["snap_object_shapes"]["-right"] = ""
        let details["snap_object_shapes"]["-bottom"] = ""
        let details["snap_object_shapes"]["-top"] = "(Specifies snapping for all top edges: "
        let details["snap_object_shapes"]["-edge_number"] = "(Specifies edge number to be snapped: "
        let details["snap_object_shapes"]["-edge_policy"] = ""
   let details["snap_objects"]={}
   let details["sort_collection"]={}
        let details["sort_collection"]["-descending"] = "(Sort in descending order)"
        let details["sort_collection"]["-dictionary"] = "(Sort strings dictionary order.)"
   let details["source"]={}
        let details["source"]["-echo"] = "(Echo all commands)"
        let details["source"]["-continue_on_error"] = "(Don't stop script on errors)"
        let details["source"]["-verbose"] = "(Display intermediate results)"
   let details["split_clock_cells"]={}
        let details["split_clock_cells"]["-cells"] = "(list of cells to be split)"
        let details["split_clock_cells"]["-loads"] = ""
   let details["split_constraints"]={}
        let details["split_constraints"]["-modes"] = "(Modes to write; default is all modes)"
        let details["split_constraints"]["-corners"] = "(Corners to write; default is all corners)"
        let details["split_constraints"]["-design_subblocks"] = ""
        let details["split_constraints"]["-hier_abstract_subblocks"] = ""
        let details["split_constraints"]["-output"] = "(Directory for output files; default is ./split)"
        let details["split_constraints"]["-force"] = "(Overwrite old directory if it exists)"
        let details["split_constraints"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["split_constraints"]["-compress"] = "(File compression method: "
        let details["split_constraints"]["-sdc_only"] = "(Split SDC only)"
        let details["split_constraints"]["-upf_only"] = "(Split UPF only)"
   let details["split_fanout"]={}
        let details["split_fanout"]["-lib_cell"] = ""
        let details["split_fanout"]["-driver"] = "(Driver pin)"
        let details["split_fanout"]["-net"] = "(Net which need to be buffered)"
        let details["split_fanout"]["-hierarchy"] = "(hierarchy to insert buffer)"
        let details["split_fanout"]["-on_route"] = "(Turn on on_route split_fanout)"
        let details["split_fanout"]["-respect_blockages"] = "(whether respect blockages and macros)"
        let details["split_fanout"]["-max_fanout"] = ""
        let details["split_fanout"]["-max_distance_for_incomplete_route"] = ""
        let details["split_fanout"]["-loads"] = "(List of loads to be buffered)"
        let details["split_fanout"]["-net_prefix"] = ""
        let details["split_fanout"]["-cell_prefix"] = ""
   let details["split_multibit"]={}
        let details["split_multibit"]["-cells"] = "(multibit cells to be de-banked)"
        let details["split_multibit"]["-lib_cells"] = ""
        let details["split_multibit"]["-path_groups"] = ""
        let details["split_multibit"]["-slack_threshold"] = ""
        let details["split_multibit"]["-exclude_instance"] = ""
   let details["split_objects"]={}
        let details["split_objects"]["-line"] = "(split object shape by line)"
        let details["split_objects"]["-rect"] = "(split object shape by rectangle)"
        let details["split_objects"]["-ignore_end_cap"] = "(ignore end caps when splitting wires)"
        let details["split_objects"]["-gap"] = "(split gap)"
        let details["split_objects"]["-gap_min_spacing"] = "(min sapcing as split gap)"
   let details["split_polygons"]={}
        let details["split_polygons"]["-objects"] = "(Use as input geometry)"
        let details["split_polygons"]["-output"] = "(Specifies the format of output as either geo_mask or poly_rect)"
        let details["split_polygons"]["-split"] = "(Specifies the orientation of the fracture lines along which to split: "
   let details["split_rdl_routes"]={}
        let details["split_rdl_routes"]["-nets"] = ""
        let details["split_rdl_routes"]["-nets_in_file"] = ""
        let details["split_rdl_routes"]["-mode"] = "(same_layer|adjacent_layer)]"
        let details["split_rdl_routes"]["-widths"] = ""
        let details["split_rdl_routes"]["-spacings"] = ""
        let details["split_rdl_routes"]["-number_of_routes"] = ""
        let details["split_rdl_routes"]["-from_layers"] = ""
        let details["split_rdl_routes"]["-to_layers"] = ""
        let details["split_rdl_routes"]["-via_interval"] = ""
        let details["split_rdl_routes"]["-objects"] = ""
   let details["spread_objects"]={}
        let details["spread_objects"]["-anchor"] = "(names or collection of anchor objects)"
        let details["spread_objects"]["-parent"] = "(spread to parent)"
        let details["spread_objects"]["-from"] = "(spread from point)"
        let details["spread_objects"]["-to"] = "(spread to point)"
        let details["spread_objects"]["-vertical"] = "(vertical spread)"
        let details["spread_objects"]["-margin"] = "(consider keepout margins or guard bands)"
   let details["spread_spare_cells"]={}
        let details["spread_spare_cells"]["-cells"] = "(List of cells)"
        let details["spread_spare_cells"]["-voltage_areas"] = ""
        let details["spread_spare_cells"]["-boundary"] = ""
        let details["spread_spare_cells"]["-ignore_blockage_types"] = ""
        let details["spread_spare_cells"]["-density_aware_ratio"] = ""
   let details["spread_wires"]={}
        let details["spread_wires"]["-timing_preserve_nets"] = ""
        let details["spread_wires"]["-timing_preserve_setup_slack_threshold"] = ""
        let details["spread_wires"]["-timing_preserve_hold_slack_threshold"] = ""
        let details["spread_wires"]["-min_jog_length"] = ""
        let details["spread_wires"]["-min_jog_spacing_by_layer_name"] = ""
        let details["spread_wires"]["-pitch"] = "(Number of pitches to spread on either side of the wire, default is 0.5)"
   let details["start_busplan_gui"]={}
   let details["start_gui"]={}
        let details["start_gui"]["-no_windows"] = "(set flag not to load windows for this cmd)"
        let details["start_gui"]["-file"] = "(file to source on gui_start)"
   let details["stop_gui"]={}
   let details["suppress_message"]={}
   let details["swap_objects"]={}
   let details["synthesize_clock_trees"]={}
        let details["synthesize_clock_trees"]["-clocks"] = "(List of clocks)"
        let details["synthesize_clock_trees"]["-postroute"] = "(run post route CTO)"
        let details["synthesize_clock_trees"]["-propagate_only"] = "(purge ideal clocks attributes and propagate clocks only)"
        let details["synthesize_clock_trees"]["-routed_clock_stage"] = ""
   let details["synthesize_clock_trunk_endpoints"]={}
        let details["synthesize_clock_trunk_endpoints"]["-clocks"] = "(List of clocks)"
        let details["synthesize_clock_trunk_endpoints"]["-blocks"] = ""
        let details["synthesize_clock_trunk_endpoints"]["-estimate_timing"] = "(Run virtual timing optimization)"
        let details["synthesize_clock_trunk_endpoints"]["-host_options"] = ""
        let details["synthesize_clock_trunk_endpoints"]["-work_dir"] = "(Specify the directory for block scripts and log files)"
   let details["synthesize_clock_trunks"]={}
        let details["synthesize_clock_trunks"]["-clock"] = "(List of clocks)"
   let details["synthesize_multisource_clock_subtrees"]={}
        let details["synthesize_multisource_clock_subtrees"]["-clocks"] = "(synthesize subtrees of these clocks)"
        let details["synthesize_multisource_clock_subtrees"]["-from"] = ""
        let details["synthesize_multisource_clock_subtrees"]["-to"] = ""
        let details["synthesize_multisource_clock_subtrees"]["-list_only"] = "(returns a list of all flow steps: preprocess, merge, optimize, route_clock, refine)"
   let details["synthesize_multisource_clock_taps"]={}
        let details["synthesize_multisource_clock_taps"]["-clocks"] = "(consider tap option sets belonging to these clocks)"
   let details["synthesize_multisource_global_clock_trees"]={}
        let details["synthesize_multisource_global_clock_trees"]["-nets"] = "(List of global clock tree nets)"
        let details["synthesize_multisource_global_clock_trees"]["-lib_cells"] = ""
        let details["synthesize_multisource_global_clock_trees"]["-prefix"] = "(prefix for created instances)"
        let details["synthesize_multisource_global_clock_trees"]["-roots"] = "(List of global clock tree roots)"
        let details["synthesize_multisource_global_clock_trees"]["-leaves"] = "(List of global clock tree leaves)"
        let details["synthesize_multisource_global_clock_trees"]["-skip_pin_connections"] = ""
        let details["synthesize_multisource_global_clock_trees"]["-use_zroute_for_pin_connections"] = ""
   let details["transform_polygons"]={}
        let details["transform_polygons"]["-objects"] = "(Use as input geometry)"
        let details["transform_polygons"]["-coordinate"] = "(Relative coordinate to shift geometry by)"
        let details["transform_polygons"]["-orientation"] = ""
        let details["transform_polygons"]["-inverse"] = "(Inverts the provided transformation)"
   let details["trim_pg_mesh"]={}
        let details["trim_pg_mesh"]["-nets"] = "(List of power or ground nets)"
        let details["trim_pg_mesh"]["-types"] = "(Object types for trimming)"
        let details["trim_pg_mesh"]["-layers"] = ""
        let details["trim_pg_mesh"]["-trim_to"] = ""
        let details["trim_pg_mesh"]["-drc"] = "(DRC option for trimming: "
        let details["trim_pg_mesh"]["-undo"] = "(restore trimmed shapes and vias)"
        let details["trim_pg_mesh"]["-verbose"] = "(Verbose option for trimming: none | dangling | drc | {dangling drc})"
        let details["trim_pg_mesh"]["-shapes"] = "(Object shapes for trimming)"
   let details["unalias"]={}
   let details["uncommit_block"]={}
        let details["uncommit_block"]["-verbose"] = "(Show detailed information)"
        let details["uncommit_block"]["-type"] = ""
        let details["uncommit_block"]["-remove_design"] = "(remove design after physical hierarchy is removed)"
        let details["uncommit_block"]["-design"] = ""
   let details["undo"]={}
        let details["undo"]["-check_only"] = "(Report result without doing anything)"
        let details["undo"]["-marker"] = "(Marker to undo back to)"
        let details["undo"]["-levels"] = "(Levels of commands to undo back to)"
        let details["undo"]["-silent"] = "(Print no messages)"
   let details["ungroup_cells"]={}
        let details["ungroup_cells"]["-all"] = "(Ungroup all hierarchical cells in current module)"
        let details["ungroup_cells"]["-flatten"] = "(Flatten all levels of hierarchy)"
        let details["ungroup_cells"]["-simple_names"] = "(Do not use hierarchy separator in names)"
   let details["uniquify"]={}
        let details["uniquify"]["-verbose"] = "(Show detailed information)"
        let details["uniquify"]["-uniquify_children"] = "(Include children instances for uniquification)"
   let details["uniquify_block"]={}
        let details["uniquify_block"]["-library"] = "(Library for the new design)"
   let details["unsuppress_message"]={}
   let details["update_constraint_mapping_file"]={}
        let details["update_constraint_mapping_file"]["-remove_all"] = "(Remove all constraint files from all blocks)"
        let details["update_constraint_mapping_file"]["-remove_types"] = ""
        let details["update_constraint_mapping_file"]["-remove_blocks"] = "(Remove constraints in the block constraint map for specified blocks)"
   let details["update_timing"]={}
        let details["update_timing"]["-full"] = "(Update entire design from scratch)"
   let details["upf_version"]={}
   let details["verify_rail_integrity"]={}
        let details["verify_rail_integrity"]["-integrity_layout_strategies"] = ""
        let details["verify_rail_integrity"]["-script_only"] = "((default false))"
   let details["verify_via_ladders"]={}
        let details["verify_via_ladders"]["-shift_vias_on_transition_layers"] = "(false|true)]"
        let details["verify_via_ladders"]["-nets"] = "(the nets for via ladder verification (default all))"
   let details["which"]={}
   let details["widen_wires"]={}
        let details["widen_wires"]["-timing_preserve_nets"] = ""
        let details["widen_wires"]["-timing_preserve_setup_slack_threshold"] = ""
        let details["widen_wires"]["-timing_preserve_hold_slack_threshold"] = ""
        let details["widen_wires"]["-spreading_widening_relative_weight"] = ""
        let details["widen_wires"]["-widen_widths_by_layer_name"] = ""
   let details["win_select_objects"]={}
        let details["win_select_objects"]["-slct_targets"] = ""
        let details["win_select_objects"]["-slct_targets_operation"] = ""
        let details["win_select_objects"]["-create_slct_buses"] = "(bool)"
        let details["win_select_objects"]["-radius"] = "(Radius from pick point to select in (for _pins and _ports))"
        let details["win_select_objects"]["-at"] = "(Select an object at the specified point)"
        let details["win_select_objects"]["-within"] = "(Match objects names within specified rectangle)"
        let details["win_select_objects"]["-line"] = "(Match objects names intersected by specified line)"
        let details["win_select_objects"]["-again_at"] = "(Repeat last -at selection)"
        let details["win_select_objects"]["-index"] = "(Index of objects at point)"
        let details["win_select_objects"]["-visible"] = "(Select objects marked as visible with win_set_select_class command)"
        let details["win_select_objects"]["-intersect"] = "(select intersecting objects with specified rectangle)"
        let details["win_select_objects"]["-root"] = "(Root instance to start selection at)"
   let details["win_set_filter"]={}
        let details["win_set_filter"]["-class"] = "(Object class)"
        let details["win_set_filter"]["-stop_level"] = "(Level in hierarchy to stop searching)"
        let details["win_set_filter"]["-start_level"] = "(Level in hierararchy to start searching)"
        let details["win_set_filter"]["-user_filter_cmd"] = ""
        let details["win_set_filter"]["-user_filter"] = "(Enable user filter cmd)"
        let details["win_set_filter"]["-expand_cell_types"] = ""
        let details["win_set_filter"]["-highlighted_only"] = ""
        let details["win_set_filter"]["-filter"] = "(Object filter)"
        let details["win_set_filter"]["-layer"] = "(Object layer)"
        let details["win_set_filter"]["-visible"] = "(Specified filters are for visible objects. By default the filters are for selectable objects.)"
   let details["win_set_select_class"]={}
        let details["win_set_select_class"]["-all"] = "(Allow selection of all classes)"
        let details["win_set_select_class"]["-visible"] = "(Specified classes are for visible objects. By default the classes are for selectable objects.)"
   let details["write_aif"]={}
        let details["write_aif"]["-use_port_name"] = "(Write port connection instead of net connection of the bump)"
        let details["write_aif"]["-hierarchy"] = "(Consider bumps across all hierarchy levels)"
        let details["write_aif"]["-bumps"] = ""
   let details["write_app_var"]={}
        let details["write_app_var"]["-output"] = "(File to write script to)"
        let details["write_app_var"]["-all"] = "(Write default values too)"
        let details["write_app_var"]["-only_changed_vars"] = "(Only write changed variables)"
   let details["write_blackbox_timing_script"]={}
        let details["write_blackbox_timing_script"]["-qtm_format"] = "(Write out blackbox timing data in QTM format)"
        let details["write_blackbox_timing_script"]["-qtm_directory"] = ""
   let details["write_budgets"]={}
        let details["write_budgets"]["-blocks"] = "(List of cell instances to write budgets for)"
        let details["write_budgets"]["-top"] = "(Write a budget for the top level)"
        let details["write_budgets"]["-full_budget_blocks"] = ""
        let details["write_budgets"]["-design_subblocks"] = ""
        let details["write_budgets"]["-hier_abstract_subblocks"] = ""
        let details["write_budgets"]["-shell_subblocks"] = ""
        let details["write_budgets"]["-output"] = "(Directory to hold budget files; default is ./budgets)"
        let details["write_budgets"]["-force"] = "(Overwrite old directory if it exists)"
        let details["write_budgets"]["-verbose"] = "(Write verbose warning messages)"
        let details["write_budgets"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["write_budgets"]["-compress"] = "(File compression method: "
   let details["write_busplans"]={}
        let details["write_busplans"]["-implementation_script"] = ""
        let details["write_busplans"]["-multi_cycle_script"] = ""
        let details["write_busplans"]["-xml_file"] = "(Save busplan details in XML format)"
   let details["write_cell_expansion"]={}
        let details["write_cell_expansion"]["-output"] = "(Specify the file name for output)"
        let details["write_cell_expansion"]["-scale_factor"] = "(Specify the differnce in units between tools)"
   let details["write_def"]={}
        let details["write_def"]["-compress"] = "(File compression method: "
        let details["write_def"]["-units"] = ""
        let details["write_def"]["-include_tech_via_definitions"] = ""
        let details["write_def"]["-include"] = ""
        let details["write_def"]["-exclude"] = ""
        let details["write_def"]["-objects"] = "(Objects to output to the DEF file)"
        let details["write_def"]["-version"] = "(The file version: "
        let details["write_def"]["-convert_sites"] = ""
        let details["write_def"]["-via_as_fixed"] = "(Output all vias as fixed viasvia_as_fixed)"
        let details["write_def"]["-bus_delimiters"] = ""
        let details["write_def"]["-traverse_physical_hierarchy"] = ""
        let details["write_def"]["-no_marker_layer"] = "(Disable the writing of marker layers no_marker_layerno_marker_layer)"
        let details["write_def"]["-only_master_variant"] = "(Replace all variant instances by the master instances.master_instances_replacing_variantsmaster_instaces_replacing_variants)"
        let details["write_def"]["-include_physical_status"] = ""
        let details["write_def"]["-exclude_physical_status"] = ""
   let details["write_default_pg_pattern"]={}
        let details["write_default_pg_pattern"]["-type"] = "(list of pattern types)"
        let details["write_default_pg_pattern"]["-output_filename"] = ""
   let details["write_dff_trace_filters"]={}
        let details["write_dff_trace_filters"]["-overwrite"] = "(Overwrite file if it exists.)"
        let details["write_dff_trace_filters"]["-filename"] = "(Write patterns to this file)"
        let details["write_dff_trace_filters"]["-type"] = "(type of filter: net or pin: "
   let details["write_drc_error_data"]={}
        let details["write_drc_error_data"]["-error_data"] = ""
        let details["write_drc_error_data"]["-file_name"] = "(Error data XML file to which to write)"
        let details["write_drc_error_data"]["-overwrite"] = "(Overwrite any existing file by the same name)"
   let details["write_ems_rules"]={}
        let details["write_ems_rules"]["-rule"] = "(Pattern matching one or more user-defined rules)"
        let details["write_ems_rules"]["-all"] = "(Write all user-defined rules)"
        let details["write_ems_rules"]["-overwrite"] = "(Overwrites the file contents if it already exists)"
   let details["write_floorplan"]={}
        let details["write_floorplan"]["-include"] = ""
        let details["write_floorplan"]["-exclude"] = ""
        let details["write_floorplan"]["-output"] = "(Directory for output files; default is ./floorplan)"
        let details["write_floorplan"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["write_floorplan"]["-force"] = "(Allow use of existing directory)"
        let details["write_floorplan"]["-format"] = "(Target format; default is icc2: "
        let details["write_floorplan"]["-objects"] = "(List of objects to output)"
        let details["write_floorplan"]["-blocks"] = "(List of blocks to output)"
        let details["write_floorplan"]["-def_units"] = ""
        let details["write_floorplan"]["-compress"] = "(File compression method: "
        let details["write_floorplan"]["-add_def_dependencies"] = "(false|true)]"
        let details["write_floorplan"]["-def_version"] = ""
   let details["write_frame_options"]={}
        let details["write_frame_options"]["-library"] = "(library)"
        let details["write_frame_options"]["-block"] = "(frame block)"
        let details["write_frame_options"]["-output"] = "(output file name)"
        let details["write_frame_options"]["-format"] = "(icc2_lm_shell|icc2_shell)]"
   let details["write_gds"]={}
        let details["write_gds"]["-bus_delimiters"] = ""
        let details["write_gds"]["-library"] = "(name of the libray)"
        let details["write_gds"]["-design"] = "(name of the design to be exported)"
        let details["write_gds"]["-view"] = "(name of the design view to be exported: "
        let details["write_gds"]["-layer_map"] = ""
        let details["write_gds"]["-block_map"] = ""
        let details["write_gds"]["-hierarchy"] = ""
        let details["write_gds"]["-net_property"] = ""
        let details["write_gds"]["-instance_property"] = ""
        let details["write_gds"]["-pin_property"] = ""
        let details["write_gds"]["-via_matrix_property"] = ""
        let details["write_gds"]["-long_names"] = "(long names flag enable)"
        let details["write_gds"]["-flat_vias"] = "(flatten vias flag enable)"
        let details["write_gds"]["-compress"] = "(compress flag enable)"
        let details["write_gds"]["-lib_cell_view"] = "(lib cell view type: "
        let details["write_gds"]["-units"] = ""
        let details["write_gds"]["-foreign"] = "(use LEF foreign cell name as the structure name)"
        let details["write_gds"]["-output_pin"] = ""
        let details["write_gds"]["-ignore_cut_datatype_tbl_mapping"] = ""
        let details["write_gds"]["-propagate_pin_mask_to_via_metal"] = ""
        let details["write_gds"]["-mask_shifted_suffix"] = ""
        let details["write_gds"]["-mask_shifted_suffix_without_constraint"] = ""
        let details["write_gds"]["-keep_data_type"] = "(Keep ICC2 data type)"
        let details["write_gds"]["-use_block_name"] = "(Use block name instead of module name for top STR)"
        let details["write_gds"]["-layer_map_format"] = ""
        let details["write_gds"]["-write_default_layers"] = ""
        let details["write_gds"]["-layers"] = "(Layers which are to be written in the output GDSII file)"
        let details["write_gds"]["-fill"] = "(option to filter fill data: "
        let details["write_gds"]["-write_instance_via_mask"] = ""
        let details["write_gds"]["-connect_below_cut_metal"] = ""
        let details["write_gds"]["-output_net_text"] = "(Specify if text is to be written for a net-shape)"
        let details["write_gds"]["-merge_files"] = ""
        let details["write_gds"]["-rename_cell"] = ""
        let details["write_gds"]["-merge_conflict_suffix"] = ""
        let details["write_gds"]["-merge_gds_top_cell"] = ""
        let details["write_gds"]["-merge_overwrite_conflicting_cell"] = ""
        let details["write_gds"]["-disable_output_mask_layers"] = ""
        let details["write_gds"]["-write_instance_blockage_mask"] = ""
        let details["write_gds"]["-exclude_empty_block"] = "(exclude empty blocks)"
        let details["write_gds"]["-allow_design_mismatch"] = ""
        let details["write_gds"]["-no_marker_layer"] = "(Disables generation of marker layers)"
        let details["write_gds"]["-switch_view_list"] = ""
        let details["write_gds"]["-bbox_list"] = "(define the bbox list per layer)"
   let details["write_io_constraints"]={}
        let details["write_io_constraints"]["-filename"] = ""
        let details["write_io_constraints"]["-format"] = "(Specifies the format used to generated io constraints)"
   let details["write_lef"]={}
        let details["write_lef"]["-library"] = "(Library from which the LEF file will be written; default is current library)"
        let details["write_lef"]["-design"] = "(Design from which the LEF file will be written)"
        let details["write_lef"]["-include"] = ""
        let details["write_lef"]["-properties"] = ""
        let details["write_lef"]["-slice_polygon"] = "(slice polygon to rectangles)"
        let details["write_lef"]["-version"] = ""
   let details["write_lib_package"]={}
        let details["write_lib_package"]["-library"] = "(name of the library to be packed)"
        let details["write_lib_package"]["-blocks"] = "(List of blocks to pack)"
        let details["write_lib_package"]["-exclude_ref_libs"] = ""
        let details["write_lib_package"]["-exclude_design_view"] = ""
        let details["write_lib_package"]["-verbose"] = "(Writes the log while saving a session checkpoint)"
   let details["write_macro_relative_location"]={}
        let details["write_macro_relative_location"]["-file"] = "(Specifies the output file name)"
        let details["write_macro_relative_location"]["-hierarchical"] = "(output hierarchical)"
   let details["write_matching_types"]={}
        let details["write_matching_types"]["-file_name"] = "(Required option to specify a file name for the output file)"
        let details["write_matching_types"]["-from_existing_assignment"] = ""
   let details["write_name_map"]={}
   let details["write_net_estimation_rules"]={}
        let details["write_net_estimation_rules"]["-script"] = "(Name of script to write)"
        let details["write_net_estimation_rules"]["-format"] = "(Format of output (tcl or xml))"
        let details["write_net_estimation_rules"]["-net_estimation_rule"] = ""
   let details["write_oasis"]={}
        let details["write_oasis"]["-bus_delimiters"] = ""
        let details["write_oasis"]["-library"] = "(name of the libray)"
        let details["write_oasis"]["-design"] = "(name of the design to be exported)"
        let details["write_oasis"]["-view"] = "(name of the design view to be exported: "
        let details["write_oasis"]["-lib_cell_view"] = "(lib cell view type: "
        let details["write_oasis"]["-fill"] = "(option to filter fill data: "
        let details["write_oasis"]["-layer_map"] = ""
        let details["write_oasis"]["-layer_map_format"] = ""
        let details["write_oasis"]["-block_map"] = ""
        let details["write_oasis"]["-hierarchy"] = ""
        let details["write_oasis"]["-units"] = ""
        let details["write_oasis"]["-net_property"] = ""
        let details["write_oasis"]["-instance_property"] = ""
        let details["write_oasis"]["-pin_property"] = ""
        let details["write_oasis"]["-via_matrix_property"] = ""
        let details["write_oasis"]["-keep_data_type"] = "(Keep ICC2 data type)"
        let details["write_oasis"]["-compress"] = ""
        let details["write_oasis"]["-output_pin"] = ""
        let details["write_oasis"]["-flat_vias"] = "(flatten vias flag enable)"
        let details["write_oasis"]["-foreign"] = "(use LEF foreign cell name as the structure name)"
        let details["write_oasis"]["-ignore_cut_datatype_tbl_mapping"] = ""
        let details["write_oasis"]["-propagate_pin_mask_to_via_metal"] = ""
        let details["write_oasis"]["-mask_shifted_suffix"] = ""
        let details["write_oasis"]["-mask_shifted_suffix_without_constraint"] = ""
        let details["write_oasis"]["-use_block_name"] = "(Use block name instead of module name for top STR)"
        let details["write_oasis"]["-write_default_layers"] = ""
        let details["write_oasis"]["-layers"] = "(Layers which are to be written in the output GDSII file)"
        let details["write_oasis"]["-write_instance_via_mask"] = ""
        let details["write_oasis"]["-connect_below_cut_metal"] = ""
        let details["write_oasis"]["-output_net_text"] = "(Specify if text is to be written for a net-shape)"
        let details["write_oasis"]["-merge_files"] = ""
        let details["write_oasis"]["-rename_cell"] = ""
        let details["write_oasis"]["-merge_conflict_suffix"] = ""
        let details["write_oasis"]["-merge_oasis_top_cell"] = ""
        let details["write_oasis"]["-merge_overwrite_conflicting_cell"] = ""
        let details["write_oasis"]["-write_instance_blockage_mask"] = ""
        let details["write_oasis"]["-allow_design_mismatch"] = ""
        let details["write_oasis"]["-no_marker_layer"] = "(Disables generation of marker layers)"
        let details["write_oasis"]["-switch_view_list"] = ""
        let details["write_oasis"]["-bbox_list"] = "(define the bbox list per layer)"
   let details["write_parasitics"]={}
        let details["write_parasitics"]["-output"] = "(output parasitics to spef file)"
        let details["write_parasitics"]["-no_name_mapping"] = "(no name mapping in SPEF output)"
        let details["write_parasitics"]["-compress"] = "(write out compressed(GZIP) SPEF output )"
        let details["write_parasitics"]["-hierarchical"] = "(write out hierarchical spef)"
   let details["write_pin_constraints"]={}
        let details["write_pin_constraints"]["-file_name"] = "(Specifies the constraint file name)"
        let details["write_pin_constraints"]["-topological_map"] = "(Write out topological map constraints into constraint file name"
        let details["write_pin_constraints"]["-physical_pin_constraint"] = ""
        let details["write_pin_constraints"]["-nets"] = "(Write pin constraints that associated with nets.)"
        let details["write_pin_constraints"]["-pins"] = "(write pin constraints that associated with pins.)"
        let details["write_pin_constraints"]["-ports"] = ""
        let details["write_pin_constraints"]["-cells"] = ""
        let details["write_pin_constraints"]["-bundles"] = ""
        let details["write_pin_constraints"]["-exclude_nets"] = ""
        let details["write_pin_constraints"]["-self"] = "(Only write out pin constraint for current design)"
        let details["write_pin_constraints"]["-bundle_pin_constraint"] = ""
        let details["write_pin_constraints"]["-from_existing_pins"] = "(Use existed pin placement results to generate pin constraints file)"
   let details["write_rail_integrity_strategy"]={}
        let details["write_rail_integrity_strategy"]["-output"] = "()"
   let details["write_routes"]={}
        let details["write_routes"]["-output"] = "(specifies an output file name)"
        let details["write_routes"]["-nets"] = ""
        let details["write_routes"]["-objects"] = ""
   let details["write_rp_groups"]={}
        let details["write_rp_groups"]["-all"] = "(Write all RP groups)"
        let details["write_rp_groups"]["-hierarchical"] = "(Write RP groups recursively too. Applicable only with rp_group_list)"
        let details["write_rp_groups"]["-create"] = "(Write create_rp_group and set_rp_group_options command only.)"
        let details["write_rp_groups"]["-cell"] = "(Write add_to_rp_groups command for cell objects only)"
        let details["write_rp_groups"]["-blockage"] = "(Write add_to_rp_groups command for rp_blockage objects only)"
        let details["write_rp_groups"]["-rp_group"] = "(Write add_to_rp_groups command for rp_group objects only)"
        let details["write_rp_groups"]["-nosplit"] = "(Write full command in single line. Do not split the line.)"
        let details["write_rp_groups"]["-file_name"] = "(Write RP constraints to this file)"
   let details["write_saif"]={}
        let details["write_saif"]["-duration"] = ""
        let details["write_saif"]["-cells"] = "(A list of the instances for which SAIF is to be generated.)"
        let details["write_saif"]["-no_hierarchy"] = "(Writes out the SAIF file non-hierarchically.)"
        let details["write_saif"]["-propagated"] = "(Propagates the switching activity before writing out.)"
        let details["write_saif"]["-exclude_sdpd"] = "(Does not write the SDPD info in SAIF file)"
        let details["write_saif"]["-switching_activity_types"] = ""
        let details["write_saif"]["-scenarios"] = "(Scenarios for which to write SAIF)"
        let details["write_saif"]["-modes"] = "(write SAIF for specified modes)"
        let details["write_saif"]["-corners"] = "(write saif for specified corners)"
   let details["write_sanity_check_point"]={}
        let details["write_sanity_check_point"]["-stage"] = "(Report stage values: setup, placement)"
        let details["write_sanity_check_point"]["-output"] = "(output file for sanity check)"
   let details["write_script"]={}
        let details["write_script"]["-modes"] = "(Modes to write; default is all modes)"
        let details["write_script"]["-corners"] = "(Corners to write; default is all corners)"
        let details["write_script"]["-include"] = ""
        let details["write_script"]["-exclude"] = ""
        let details["write_script"]["-format"] = "(Target format; default is icc2: "
        let details["write_script"]["-output"] = "(Directory for output files; default is ./wscript)"
        let details["write_script"]["-force"] = "(Overwrite existing output directory)"
        let details["write_script"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["write_script"]["-compress"] = "(File compression method: "
   let details["write_sdc"]={}
        let details["write_sdc"]["-mode"] = "(Name of the mode to write; default is current mode)"
        let details["write_sdc"]["-corner"] = "(Name of the corner to write; default is current corner)"
        let details["write_sdc"]["-scenario"] = "(Name of the scenario to write; default is current scenario)"
        let details["write_sdc"]["-nosplit"] = "(Don't split lines if column overflows)"
        let details["write_sdc"]["-compress"] = "(File compression method: "
        let details["write_sdc"]["-include"] = ""
        let details["write_sdc"]["-exclude"] = ""
        let details["write_sdc"]["-version"] = "(SDC file version; default is latest: "
        let details["write_sdc"]["-output"] = "(Output file name)"
   let details["write_shadow_eco"]={}
        let details["write_shadow_eco"]["-command_style"] = "(default: icc2)]"
        let details["write_shadow_eco"]["-reporting_style"] = "(default: design_based)]"
        let details["write_shadow_eco"]["-output"] = ""
        let details["write_shadow_eco"]["-nets"] = "(List of selected nets for shadow scripts creation)"
        let details["write_shadow_eco"]["-cells"] = "(List of selected cells for shadow scripts creation)"
        let details["write_shadow_eco"]["-set_shadow_status"] = "(Set shadow status in the ECO script)"
        let details["write_shadow_eco"]["-disable_undo"] = "(Disable Undo history in the ECO script)"
        let details["write_shadow_eco"]["-self"] = "(Top design only)"
   let details["write_taps"]={}
        let details["write_taps"]["-file"] = "(File to be written to)"
   let details["write_tech_file"]={}
        let details["write_tech_file"]["-library"] = "(Library from which the technology file to be written; default is current tech)"
   let details["write_verilog"]={}
        let details["write_verilog"]["-compress"] = "(File compression method: "
        let details["write_verilog"]["-top_module_first"] = "(Write top module first)"
        let details["write_verilog"]["-hierarchy"] = "(Write modules in this scope: "
        let details["write_verilog"]["-split_bus"] = "(Write bus as single bits)"
        let details["write_verilog"]["-include"] = ""
        let details["write_verilog"]["-exclude"] = ""
        let details["write_verilog"]["-force_reference"] = ""
        let details["write_verilog"]["-force_no_reference"] = ""
        let details["write_verilog"]["-switch_view_list"] = ""
        let details["write_verilog"]["-only_master_variant"] = "(Replace all variant instances by the master instances.master_instances_replacing_variantsmaster_instaces_replacing_variants)"
   let details["write_virtual_pad_file"]={}
   let details["CmdSpec"]={}
   let details["LoadBLT"]={}
   let details["LoadLib"]={}
   let details["LoadLib_high"]={}
   let details["LoadNewFlowManagerBuilder"]={}
   let details["NflTclFindTheFullPath"]={}
   let details["POST_all_steps"]={}
   let details["P_all_inputs_minus_clocks"]={}
   let details["P_apply_scon"]={}
   let details["P_astro_upsize_script"]={}
        let details["P_astro_upsize_script"]["-vio_report"] = "(Violation report from PrimeTime )"
        let details["P_astro_upsize_script"]["-fix_ratio"] = "(Ratio)"
        let details["P_astro_upsize_script"]["-out"] = "(Output file name)"
   let details["P_back2back"]={}
        let details["P_back2back"]["-out"] = "(Output file name)"
   let details["P_cell_usage"]={}
        let details["P_cell_usage"]["-out"] = "(Output file name)"
   let details["P_connect_net_to_pin_of_cell"]={}
        let details["P_connect_net_to_pin_of_cell"]["-net"] = "(Name of net of the current design to be connected to pin of a cell)"
        let details["P_connect_net_to_pin_of_cell"]["-pin"] = "(Name of pin of a cell)"
   let details["P_continue"]={}
        let details["P_continue"]["-snapshot"] = "(Take a snapshot of the calling script/procedure)"
        let details["P_continue"]["-scr"] = "(Name of procedure or absolute path & filename of script)"
   let details["P_create_port"]={}
   let details["P_create_unique_object_name"]={}
        let details["P_create_unique_object_name"]["-object"] = "(Object for which the unique name will be used: "
        let details["P_create_unique_object_name"]["-basename"] = "(Base name of the object, this will be cat'ed with an integer to make the object name)"
        let details["P_create_unique_object_name"]["-start_integer"] = ""
        let details["P_create_unique_object_name"]["-max_integer"] = "(The integer will be incremented to this limit, if a unique object name is not found by then, an empty string will be returned (default: 1000000))"
        let details["P_create_unique_object_name"]["-no_warning"] = "(Suppress warning message if '-max_integer' limit was reached without creating a unique object name)"
   let details["P_debug"]={}
   let details["P_drv_cell"]={}
   let details["P_echo"]={}
   let details["P_elapsed_time"]={}
        let details["P_elapsed_time"]["-start"] = "(Start task tag)"
        let details["P_elapsed_time"]["-end"] = "(End task tag)"
        let details["P_elapsed_time"]["-mesg"] = "(message)"
        let details["P_elapsed_time"]["-timestamp"] = "(Execute P_timestamp before calculating time)"
        let details["P_elapsed_time"]["-quiet"] = "(Do not echo any messages)"
   let details["P_error"]={}
   let details["P_fatal"]={}
   let details["P_find_common_collection"]={}
   let details["P_find_file_ext"]={}
        let details["P_find_file_ext"]["-ext"] = "(List of extensions)"
        let details["P_find_file_ext"]["-tag"] = "(Tag for the file)"
        let details["P_find_file_ext"]["-only"] = "(Look for tag file only)"
   let details["P_find_proc"]={}
        let details["P_find_proc"]["-tag"] = "(Tag for the procedure)"
        let details["P_find_proc"]["-only"] = "(Look for tag procedure only)"
   let details["P_get_best_driver"]={}
        let details["P_get_best_driver"]["-ref"] = "(Reference name)"
        let details["P_get_best_driver"]["-ref_pin"] = "(Reference pin name)"
        let details["P_get_best_driver"]["-load"] = "(load)"
   let details["P_get_cells"]={}
   let details["P_get_children"]={}
   let details["P_get_clock_pins"]={}
   let details["P_get_clockgate_clock_pins"]={}
   let details["P_get_clockgate_enable_pins"]={}
   let details["P_get_clockgate_output_pins"]={}
   let details["P_get_clocks"]={}
   let details["P_get_data_pins"]={}
   let details["P_get_design_name"]={}
   let details["P_get_enable_pins"]={}
   let details["P_get_hier_scon"]={}
   let details["P_get_lib"]={}
   let details["P_get_libcells"]={}
   let details["P_get_libpins"]={}
   let details["P_get_license"]={}
   let details["P_get_makevars"]={}
   let details["P_get_nets"]={}
   let details["P_get_object_pins"]={}
   let details["P_get_objects"]={}
   let details["P_get_output_pins"]={}
   let details["P_get_pins"]={}
   let details["P_get_ports"]={}
   let details["P_get_preset_pins"]={}
   let details["P_get_ref_name"]={}
   let details["P_get_reset_pins"]={}
   let details["P_get_scon_from_rtl"]={}
        let details["P_get_scon_from_rtl"]["-rtlp"] = "(Path to Local RTL)"
        let details["P_get_scon_from_rtl"]["-rtlm"] = "(RTL Model Name)"
        let details["P_get_scon_from_rtl"]["-sdm"] = "(SD Model)"
        let details["P_get_scon_from_rtl"]["-latest"] = "(To copy to latest tree also)"
   let details["P_get_scr_proc_name"]={}
   let details["P_get_si_pins"]={}
   let details["P_get_so_pins"]={}
   let details["P_get_variable_val"]={}
   let details["P_hookup_port"]={}
        let details["P_hookup_port"]["-port"] = "(Name of port to be hooked up)"
        let details["P_hookup_port"]["-pin"] = "(Name of pin of the cell to be hooked up)"
        let details["P_hookup_port"]["-no_hier"] = "(Dont connect ports to pins on sub designs of current design)"
   let details["P_info"]={}
   let details["P_interrupt"]={}
        let details["P_interrupt"]["-scr"] = "(Script file to use)"
   let details["P_is_DC"]={}
   let details["P_is_ENCOUNTER"]={}
   let details["P_is_FE"]={}
   let details["P_is_ICC"]={}
   let details["P_is_ICC2"]={}
   let details["P_is_MAGMA"]={}
   let details["P_is_MG"]={}
   let details["P_is_PC"]={}
   let details["P_is_PSYN"]={}
   let details["P_is_PT"]={}
   let details["P_is_SNPS"]={}
   let details["P_is_collection"]={}
   let details["P_is_synopsys_tool"]={}
   let details["P_lminus"]={}
   let details["P_process_high_fanout_signal"]={}
   let details["P_process_synchronizer_cells"]={}
   let details["P_proj_analyze"]={}
        let details["P_proj_analyze"]["-type"] = "(Source format: "
        let details["P_proj_analyze"]["-design"] = "(Design Name)"
        let details["P_proj_analyze"]["-base"] = "(Base Name)"
        let details["P_proj_analyze"]["-src"] = "(Source code)"
        let details["P_proj_analyze"]["-inc"] = "(Verilog include files)"
        let details["P_proj_analyze"]["-prm"] = "(Param/file)"
        let details["P_proj_analyze"]["-hier"] = "(Relace all occurences throughout hier)"
        let details["P_proj_analyze"]["-pkg"] = "(Package)"
   let details["P_proj_change_names"]={}
        let details["P_proj_change_names"]["-rule"] = "(Name of the rule, all rules are applied by default)"
        let details["P_proj_change_names"]["-nohier"] = "(Apply rule only to this design, not hierarchical.)"
        let details["P_proj_change_names"]["-verbose"] = "(Apply rule only to this design, not hierarchical.)"
   let details["P_put_scan_attributes"]={}
   let details["P_read_lib_db"]={}
   let details["P_rename_soft_macro"]={}
        let details["P_rename_soft_macro"]["-prefix"] = "(Prefix to use when changing name, default is G_DESIGN_NAME)"
   let details["P_report_logic_levels"]={}
   let details["P_rpt_unmapped"]={}
        let details["P_rpt_unmapped"]["-output"] = "(Name of output file)"
   let details["P_run_cmd"]={}
   let details["P_save_tmp_db"]={}
   let details["P_seal_cmd"]={}
   let details["P_set_disable"]={}
   let details["P_set_fix_multiple_port_nets"]={}
        let details["P_set_fix_multiple_port_nets"]["-nohier"] = "(Apply rule only to this design, not hierarchical.)"
   let details["P_set_fp"]={}
   let details["P_set_maxdelay"]={}
   let details["P_set_mcp"]={}
        let details["P_set_mcp"]["-type"] = "(Analysis type: "
        let details["P_set_mcp"]["-reference"] = "(Clock to move: "
        let details["P_set_mcp"]["-edge"] = "(Apply to edge: "
        let details["P_set_mcp"]["-from"] = "(Apply to paths from )"
        let details["P_set_mcp"]["-rise_from"] = "(Apply to paths rising from only)"
        let details["P_set_mcp"]["-fall_from"] = "(Apply to paths falling from only)"
        let details["P_set_mcp"]["-to"] = "(Apply to paths to)"
        let details["P_set_mcp"]["-rise_to"] = "(Apply to paths rising to only)"
        let details["P_set_mcp"]["-fall_to"] = "(Apply to paths falling to only)"
        let details["P_set_mcp"]["-through"] = "(Apply to paths through)"
        let details["P_set_mcp"]["-rise_through"] = ""
        let details["P_set_mcp"]["-fall_through"] = ""
   let details["P_set_mindelay"]={}
   let details["P_sid"]={}
   let details["P_sod"]={}
   let details["P_source_proj_setup"]={}
        let details["P_source_proj_setup"]["-force"] = "(Works with 'default_setup'. Source it AFTER project setup)"
        let details["P_source_proj_setup"]["-before"] = "(Works with 'default_setup'. Source 'default_setup' BEFORE project setup)"
   let details["P_split"]={}
        let details["P_split"]["-str"] = "(String to split)"
        let details["P_split"]["-char"] = "(Character at which to split at)"
        let details["P_split"]["-count"] = "(Split at what count)"
        let details["P_split"]["-l2r"] = "(Count left to right)"
   let details["P_store_syn_vars"]={}
        let details["P_store_syn_vars"]["-group"] = "(Synopsys variable group (default: all))"
        let details["P_store_syn_vars"]["-proc"] = "(Name of the restore procedure (default: P_restore_syn_vars))"
   let details["P_swap_srflop"]={}
        let details["P_swap_srflop"]["-lib"] = "(Library to look at for getting sr and nsr flops)"
        let details["P_swap_srflop"]["-srflop_list"] = ""
        let details["P_swap_srflop"]["-log"] = "(File to write which contains a list of all cells which were swapped)"
   let details["P_timestamp"]={}
        let details["P_timestamp"]["-prefix"] = "(String to print before the date)"
        let details["P_timestamp"]["-quiet"] = "(Do not echo the timestamp)"
   let details["P_true"]={}
   let details["P_unloaded_regs"]={}
   let details["P_warning"]={}
   let details["T_absName"]={}
   let details["T_check_vars"]={}
   let details["T_chmod"]={}
   let details["T_closeLog"]={}
   let details["T_cp"]={}
   let details["T_debug"]={}
   let details["T_debugF"]={}
   let details["T_debugS"]={}
   let details["T_diff"]={}
   let details["T_dumpState"]={}
   let details["T_error"]={}
   let details["T_errorF"]={}
   let details["T_eval"]={}
   let details["T_existSet"]={}
   let details["T_fatal"]={}
   let details["T_fatalF"]={}
   let details["T_fileCheck"]={}
   let details["T_fileCheckP"]={}
   let details["T_fstring"]={}
   let details["T_fstring_add_index"]={}
   let details["T_fstring_det_range"]={}
   let details["T_getLineCount"]={}
   let details["T_getScrDir"]={}
   let details["T_getScrName"]={}
   let details["T_getSubName"]={}
   let details["T_gets"]={}
   let details["T_info"]={}
   let details["T_isNumber"]={}
   let details["T_lcommon"]={}
   let details["T_lminus"]={}
   let details["T_ln"]={}
   let details["T_lreverse"]={}
   let details["T_lsearch"]={}
   let details["T_lunique"]={}
   let details["T_mkdir"]={}
   let details["T_mputs"]={}
   let details["T_openLog"]={}
   let details["T_parseArgs"]={}
   let details["T_parseStatus"]={}
   let details["T_printUsage"]={}
   let details["T_printVar"]={}
   let details["T_printVarDebug"]={}
   let details["T_puts"]={}
   let details["T_readWriteStatus"]={}
   let details["T_remove_start_end_spaces"]={}
   let details["T_reset_T_Quiet"]={}
   let details["T_rm"]={}
   let details["T_sel2list"]={}
   let details["T_set_T_Quiet"]={}
   let details["T_setarr"]={}
   let details["T_singleList"]={}
   let details["T_spin"]={}
   let details["T_split"]={}
   let details["T_touch"]={}
   let details["T_true"]={}
   let details["T_unset"]={}
   let details["T_unsetIndex"]={}
   let details["T_warning"]={}
   let details["T_warningF"]={}
   let details["__h2t_create_shape_icc2"]={}
   let details["__h2t_create_trunk_snps"]={}
   let details["__h2t_get_pin_port_layer_width"]={}
   let details["__h2t_get_port_pin_layer_width"]={}
   let details["__h2t_process_layerless_pin_port"]={}
   let details["__h2t_set_custom_attr"]={}
   let details["_h2t_apply_nets_order"]={}
   let details["_h2t_format_bbox"]={}
   let details["_h2t_process_opts"]={}
   let details["_load_Oratcl"]={}
   let details["_load_tclreadline"]={}
   let details["aH"]={}
   let details["aV"]={}
   let details["add_attribute"]={}
   let details["add_exception_clm_from_fifoentry"]={}
   let details["add_exception_on_gasket_flops"]={}
   let details["add_exception_on_lane_in_flops"]={}
   let details["add_exception_on_stepdown_flops"]={}
   let details["add_post_stage"]={}
   let details["add_post_step"]={}
   let details["add_pre_stage"]={}
   let details["add_pre_step"]={}
   let details["add_set_sense_to_bypass_mux"]={}
   let details["als_add_to_last_command"]={}
   let details["als_change_highlight"]={}
        let details["als_change_highlight"]["-add"] = "(Add)"
        let details["als_change_highlight"]["-remove"] = "(Remove)"
        let details["als_change_highlight"]["-color"] = "(Color)"
   let details["als_get_highlight"]={}
        let details["als_get_highlight"]["-color"] = "(Color)"
   let details["als_history_grep"]={}
   let details["als_list_attributes_grep"]={}
   let details["als_load_aliases"]={}
   let details["als_pop_from_cell"]={}
   let details["als_print_all_connected"]={}
   let details["als_print_collection"]={}
        let details["als_print_collection"]["-attribute"] = "(Name of attribute. Default: full_name)"
        let details["als_print_collection"]["-annotate"] = "(Annotate driver/receiver. Default: None)"
   let details["als_print_list"]={}
        let details["als_print_list"]["-range"] = "(Range list to print)"
   let details["als_push_to_cell"]={}
   let details["als_stages"]={}
   let details["als_steps"]={}
   let details["analyze_timing_correlation"]={}
        let details["analyze_timing_correlation"]["-work_dir"] = "(Directory for output files, Reuse existing data if directory already exists)"
        let details["analyze_timing_correlation"]["-delay_calculation_style"] = ""
        let details["analyze_timing_correlation"]["-si_enable_analysis"] = ""
        let details["analyze_timing_correlation"]["-waveform_analysis_mode"] = ""
        let details["analyze_timing_correlation"]["-enable_ccs_rcv_cap"] = ""
        let details["analyze_timing_correlation"]["-overwrite_work_dir"] = "(Initially overwrite existing work_dir)"
        let details["analyze_timing_correlation"]["-clear_work_dir"] = "(Overwrite existing work_dir on completion)"
        let details["analyze_timing_correlation"]["-save_pt_session"] = "(Save PrimeTime-Sessions for later use. Saved-directory will be named as <work_dir>/saved_session/<block>_<scenario>_<pt_version>_auto.save_session)"
        let details["analyze_timing_correlation"]["-use_pt_save_session"] = "(Reuse existing PrimeTime-save-Sessions. Expects session to be named as <work_dir>/saved_session/<block>_<scenario>_<pt_version>_auto.save_session)"
        let details["analyze_timing_correlation"]["-disable_compatibility_settings"] = ""
        let details["analyze_timing_correlation"]["-enable_compatibility_settings"] = ""
        let details["analyze_timing_correlation"]["-verbose"] = "(Show more details about command execution)"
        let details["analyze_timing_correlation"]["-pass_rate_threshold"] = ""
        let details["analyze_timing_correlation"]["-scenarios"] = ""
        let details["analyze_timing_correlation"]["-script_only"] = "(Write the auto-scripts files only.)"
        let details["analyze_timing_correlation"]["-pt_pre_link_script"] = ""
        let details["analyze_timing_correlation"]["-pt_post_link_script"] = ""
        let details["analyze_timing_correlation"]["-pt_user_script"] = ""
        let details["analyze_timing_correlation"]["-pt_search_path"] = ""
        let details["analyze_timing_correlation"]["-pt_exec_path"] = ""
   let details["append_var"]={}
   let details["apr_define_user_attributes"]={}
   let details["apr_duplicate_slos_return_hfn"]={}
   let details["apr_gen_latest_nlib_manifest"]={}
   let details["apr_get_aocvm_voltage_for_corner"]={}
   let details["apr_icc_ctsizer_run_flow"]={}
   let details["apr_icc_lr_run_flow"]={}
   let details["apr_icc_lrdp_run_flow"]={}
   let details["apr_lr_check_env_vars"]={}
   let details["apr_lr_overrride_tool_versions"]={}
   let details["apr_lr_ovr_tools"]={}
   let details["apr_lr_restore_saved_vars_and_tool_versions"]={}
   let details["apr_lr_setup_run_dir"]={}
   let details["apr_netlist"]={}
   let details["apr_pt_ctsizer_run_flow"]={}
   let details["apr_pt_lr_run_flow"]={}
   let details["apr_pt_lrdp_run_flow"]={}
   let details["apr_read_aocvm"]={}
        let details["apr_read_aocvm"]["-corner"] = "(Name of corner, usually max or min)"
        let details["apr_read_aocvm"]["-table"] = "(Pointer to AOCVM file)"
   let details["apr_reports"]={}
   let details["apr_run_rumba_flow"]={}
   let details["apr_save_stage"]={}
   let details["assign_track_in_bin"]={}
   let details["auto_execok"]={}
   let details["auto_import"]={}
   let details["auto_load"]={}
   let details["auto_load_index"]={}
   let details["auto_mkindex"]={}
   let details["auto_mkindex_old"]={}
   let details["auto_proc"]={}
   let details["auto_qualify"]={}
   let details["auto_reset"]={}
   let details["bab_create_new_mw_cell"]={}
   let details["block_grid"]={}
   let details["bound_to_lego"]={}
   let details["build_trunking_bboxes_for_fivr_dt62_right_fp"]={}
   let details["cP"]={}
   let details["cPx"]={}
   let details["cPy"]={}
   let details["calc_area"]={}
   let details["calculate_tracks"]={}
   let details["check_wires_for_pushdown"]={}
        let details["check_wires_for_pushdown"]["-nets"] = "(Nets to run push-down on for testing)"
   let details["checkerboard_horizontal"]={}
   let details["checkerboard_vertical"]={}
   let details["cips_source"]={}
   let details["clean_floorplan"]={}
   let details["clp"]={}
   let details["col_release_data"]={}
   let details["compare_checksum"]={}
        let details["compare_checksum"]["-icc2"] = "(Path to ICC2 checksums)"
        let details["compare_checksum"]["-pt"] = "(Path to PT checksums)"
   let details["convert_nets_for_swizzle"]={}
   let details["cp_block"]={}
   let details["cr_align_repeaters_to_trunks"]={}
        let details["cr_align_repeaters_to_trunks"]["-nets"] = "(list of nets to extract shapes)"
        let details["cr_align_repeaters_to_trunks"]["-layer"] = "(layer name of trunks)"
        let details["cr_align_repeaters_to_trunks"]["-repeater_name"] = "(repeater cell name pattern)"
        let details["cr_align_repeaters_to_trunks"]["-move_repeater_routing"] = ""
   let details["cr_boolean"]={}
   let details["cr_check_ports"]={}
   let details["cr_check_terminals"]={}
   let details["cr_checkerboard_repeaters"]={}
        let details["cr_checkerboard_repeaters"]["-nets"] = "(nets to drop repeaters)"
        let details["cr_checkerboard_repeaters"]["-repeater_collection"] = ""
        let details["cr_checkerboard_repeaters"]["-repeater_name_pattern"] = ""
        let details["cr_checkerboard_repeaters"]["-spread_mult"] = "(multiplier to spread checkerboarding out.  if 2 is passed, spreading will be 2x width or height of rptcell)"
        let details["cr_checkerboard_repeaters"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_complete_nets_detail"]={}
        let details["cr_complete_nets_detail"]["-nets"] = "(nets to complete)"
        let details["cr_complete_nets_detail"]["-shield"] = "(shield net)"
        let details["cr_complete_nets_detail"]["-shield_name"] = "(shield name)"
        let details["cr_complete_nets_detail"]["-min_layer"] = "(minimum layer for zroute to use for routing, default derived from trunks)"
        let details["cr_complete_nets_detail"]["-max_layer"] = "(maximum layer for zroute to use for routing, default derived from trunks)"
   let details["cr_complete_track_region"]={}
        let details["cr_complete_track_region"]["-pattern"] = "(track pattern name/s)"
        let details["cr_complete_track_region"]["-track_region"] = "(track region)"
        let details["cr_complete_track_region"]["-fill_trunk_name"] = "(net name assigned to fill trunk)"
   let details["cr_create_boundary_route_guide"]={}
   let details["cr_create_cover_routing_blockage"]={}
   let details["cr_create_finish_metal"]={}
        let details["cr_create_finish_metal"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["cr_create_finish_metal"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["cr_create_finish_metal"]["-backoff_override_value"] = ""
        let details["cr_create_finish_metal"]["-backoff"] = "(backoff)"
        let details["cr_create_finish_metal"]["-backoff_multiplier"] = "(need more than winWidth backoff, pass multiplier like (2) to get 2x minWidth)"
        let details["cr_create_finish_metal"]["-exclude_power"] = "(exclude power from checking obstructions)"
        let details["cr_create_finish_metal"]["-get_rid_of_min_width"] = ""
        let details["cr_create_finish_metal"]["-extra_min_width_shrink"] = ""
        let details["cr_create_finish_metal"]["-bbox"] = "(bounding box to fill within)"
        let details["cr_create_finish_metal"]["-color"] = "(color of your annotation for preview)"
        let details["cr_create_finish_metal"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_ladders"]={}
        let details["cr_create_ladders"]["-cells"] = "(collection of cells)"
        let details["cr_create_ladders"]["-pin"] = "(either in or out)"
        let details["cr_create_ladders"]["-layer_width_straps"] = "(list of , separated layer,width,number_of_straps, eg. m2,0.024,2 m3,0.024,5 m4,0.036,2 m5,0.040-0.042,2 m6,0.050,2 m7,0.056,2 )"
        let details["cr_create_ladders"]["-add_routing_blockage"] = ""
        let details["cr_create_ladders"]["-use_full_cell_bbox"] = "(instead of using pin bbox to drive ladder rungs, use cell bbox entirely)"
        let details["cr_create_ladders"]["-do_not_add_vias"] = "(by default vias will be added to each rung, if this is passed, vias will not be inserted)"
        let details["cr_create_ladders"]["-preview"] = "(do not create shapes, just draw annotations of shapes)"
   let details["cr_create_terminals"]={}
        let details["cr_create_terminals"]["-port_names"] = "(LIST of port names to create terminal for)"
        let details["cr_create_terminals"]["-terminal_names"] = "(LIST of port names to create terminal for)"
        let details["cr_create_terminals"]["-layer"] = "(layer name)"
        let details["cr_create_terminals"]["-width"] = "(width to tracks to use, track numbers are according to this width)"
        let details["cr_create_terminals"]["-track_num"] = "(track)"
        let details["cr_create_terminals"]["-track_step"] = "(track_step)"
        let details["cr_create_terminals"]["-center_coord"] = "(center-line coordinate, to be snapped to closest track)"
        let details["cr_create_terminals"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["cr_create_terminals"]["-edge"] = "(Edge of boundary to create terminal on.  Edge is a number 1-to-#of edges starting from Y of lower left corner and moving clockwise)"
        let details["cr_create_terminals"]["-term_length"] = "(Micron value of lenght of the terminal)"
        let details["cr_create_terminals"]["-term_length_multiplier"] = ""
        let details["cr_create_terminals"]["-lo"] = "(If Edge and depth is not supplied, the terminal will be floating, lo and hi values must be supplied)"
        let details["cr_create_terminals"]["-hi"] = "(If Edge and depth is not supplied, the terminal will be floating, lo and hi values must be supplied)"
        let details["cr_create_terminals"]["-shield"] = "(shield)"
        let details["cr_create_terminals"]["-shield_name"] = "(shield name)"
        let details["cr_create_terminals"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_terminals"]["-bbox"] = "(bounding box to create terminal)"
        let details["cr_create_terminals"]["-term_bbox"] = "(bounding box to create terminal)"
        let details["cr_create_terminals"]["-of_cell"] = "(instances of cell to be used to place terms, cell_name_expr)"
        let details["cr_create_terminals"]["-add_metal"] = "(create a metal shape underneath the terminal)"
        let details["cr_create_terminals"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["cr_create_terminals"]["-additional_attributes"] = ""
        let details["cr_create_terminals"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_track_region"]={}
        let details["cr_create_track_region"]["-pattern"] = "(track pattern name/s)"
        let details["cr_create_track_region"]["-track_region"] = "(track region to create tracks in)"
        let details["cr_create_track_region"]["-dont_delete_existing_tracks"] = ""
   let details["cr_create_track_shared_trunks"]={}
        let details["cr_create_track_shared_trunks"]["-nets"] = "(nets to track share)"
        let details["cr_create_track_shared_trunks"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["cr_create_track_shared_trunks"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["cr_create_track_shared_trunks"]["-track_num"] = "(track number to put trunks on)"
        let details["cr_create_track_shared_trunks"]["-find_free_tracks"] = "(finds free (un-obstructrd) tracks to trunk on)"
        let details["cr_create_track_shared_trunks"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_track_shared_trunks"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_track_shared_trunks"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horx or the bottom side if vertical)"
        let details["cr_create_track_shared_trunks"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the left side if horx or the bottom side if vertical)"
        let details["cr_create_track_shared_trunks"]["-to_trunk"] = "(specifies which net segments need to be connected to an existing trunk)"
        let details["cr_create_track_shared_trunks"]["-ref_obj"] = "(pin | port to be used to calculate track number, if track_num is supplied, ref_obj is ignored)"
        let details["cr_create_track_shared_trunks"]["-ref_net"] = "(the net to take the ref object from)"
        let details["cr_create_track_shared_trunks"]["-use_ref_obj_layer"] = "(take layer/width from the ref object, will override layer/width passed)"
        let details["cr_create_track_shared_trunks"]["-shield"] = "(shield net)"
        let details["cr_create_track_shared_trunks"]["-shield_name"] = "(shield name)"
        let details["cr_create_track_shared_trunks"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_track_shared_trunks"]["-ignore_boundary_guide"] = ""
        let details["cr_create_track_shared_trunks"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["cr_create_track_shared_trunks"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["cr_create_track_shared_trunks"]["-of_cells"] = "(instances of cells (and optioanl edges) to be used to calculate net bbox, cell_name_expr:t|b|l|r)"
        let details["cr_create_track_shared_trunks"]["-exclude_cells"] = "(instances of cells (and optioanl edges) to be excluded from calculation of net bbox, cell_name_expr:t|b|l|r)"
        let details["cr_create_track_shared_trunks"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_tracks_region"]={}
        let details["cr_create_tracks_region"]["-name"] = "(region name)"
        let details["cr_create_tracks_region"]["-layer"] = "(layer name)"
        let details["cr_create_tracks_region"]["-pattern"] = "(track pattern tag)"
        let details["cr_create_tracks_region"]["-bbox"] = "(bounding box of the track region in microns. If -bbox is speified, -anchor -extend -of_track_width options are ignored)"
        let details["cr_create_tracks_region"]["-of_track_width"] = "(consider tracks of theat width when specifying anchor and extend)"
        let details["cr_create_tracks_region"]["-anchor"] = "(bbox anchor, can be {X Y}-location in micron|patterns track number|Lego track number|Duplo track number)"
        let details["cr_create_tracks_region"]["-extend"] = "(bbox extend, can be {Width Heigh} in micron|number of patterns tracks|number of Legos|number of Duplos)"
   let details["cr_create_trunk"]={}
        let details["cr_create_trunk"]["-nets"] = "(LIST of nets to create wire for)"
        let details["cr_create_trunk"]["-layer"] = "(layer name)"
        let details["cr_create_trunk"]["-width"] = "(width to tracks to use, track numbers are according to this width)"
        let details["cr_create_trunk"]["-num_wires"] = "(number of wires to create per net)"
        let details["cr_create_trunk"]["-gravity"] = "(trunk gravity: driver<,offset> | receiver<,offset> | cog<,offset> | '%-of-net_bbox'`<,offset>, optional offset value in micron)"
        let details["cr_create_trunk"]["-track_num"] = "(track)"
        let details["cr_create_trunk"]["-track_step"] = "(track_step)"
        let details["cr_create_trunk"]["-bbox"] = "(bounding box to create trunk within)"
        let details["cr_create_trunk"]["-shield"] = "(shield)"
        let details["cr_create_trunk"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunk"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunk"]["-find_free_tracks"] = "(finds free (un-obstructrd) tracks to trunk on)"
        let details["cr_create_trunk"]["-ignore_boundary_guides"] = ""
        let details["cr_create_trunk"]["-include_power_for_free_tracks"] = ""
        let details["cr_create_trunk"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunk"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunk"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)"
        let details["cr_create_trunk"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)"
        let details["cr_create_trunk"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["cr_create_trunk"]["-net_bbox_override"] = "(use provided bbox as net bbox, ignore net bbox)"
        let details["cr_create_trunk"]["-of_cells"] = "(instances of cells (and optioanl edges) to be used to calculate net bbox, cell_name_expr:t|b|l|r)"
        let details["cr_create_trunk"]["-exclude_cells"] = "(instances of cells (and optioanl edges) to be excluded from calculation of net bbox, cell_name_expr:t|b|l|r)"
        let details["cr_create_trunk"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunk_from_here_to_there"]={}
        let details["cr_create_trunk_from_here_to_there"]["-nets"] = "(list of nets to create trunk(s) for)"
        let details["cr_create_trunk_from_here_to_there"]["-nets_order"] = "(values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )"
        let details["cr_create_trunk_from_here_to_there"]["-zone"] = "(THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["cr_create_trunk_from_here_to_there"]["-channel"] = "(THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["cr_create_trunk_from_here_to_there"]["-bloat_zone"] = "(THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["cr_create_trunk_from_here_to_there"]["-bloat_channel"] = "(THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["cr_create_trunk_from_here_to_there"]["-topology"] = "(topology description as a list of legs that reference trunking channels and their layers/width/track|micron|p values)"
        let details["cr_create_trunk_from_here_to_there"]["-skip_tracks"] = "(rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)"
        let details["cr_create_trunk_from_here_to_there"]["-avoid_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )"
        let details["cr_create_trunk_from_here_to_there"]["-avoid_layers"] = "(list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )"
        let details["cr_create_trunk_from_here_to_there"]["-trim_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)"
        let details["cr_create_trunk_from_here_to_there"]["-cutout_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout)"
        let details["cr_create_trunk_from_here_to_there"]["-cutout_bloat"] = "(bloat cutout area in DR units, + to inflate, - to deflate)"
        let details["cr_create_trunk_from_here_to_there"]["-do_not_cutout_nets"] = "(list of nets to be ignored while performing cutout)"
        let details["cr_create_trunk_from_here_to_there"]["-swizzle"] = "(Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass \"swizzle_layer,location\")"
        let details["cr_create_trunk_from_here_to_there"]["-stepping"] = "(list of steppings per layer/width pairs, make sure to accomodate for shielding, e.g full - 3, half - 2)"
        let details["cr_create_trunk_from_here_to_there"]["-create_port"] = "(create port(s) from trunk(s))"
        let details["cr_create_trunk_from_here_to_there"]["-use_pin"] = "(Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))"
        let details["cr_create_trunk_from_here_to_there"]["-num_wires"] = "(number of trunks to create per net)"
        let details["cr_create_trunk_from_here_to_there"]["-track_overrides_pin"] = "(even if pin exists, use the track number passed)"
        let details["cr_create_trunk_from_here_to_there"]["-reuse_zone_tracks"] = "(THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)"
        let details["cr_create_trunk_from_here_to_there"]["-clean_zone_tracks"] = "(THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)"
        let details["cr_create_trunk_from_here_to_there"]["-clean_named_zone_tracks"] = ""
        let details["cr_create_trunk_from_here_to_there"]["-reuse_channel_tracks"] = ""
        let details["cr_create_trunk_from_here_to_there"]["-clean_channel_tracks"] = ""
        let details["cr_create_trunk_from_here_to_there"]["-shield"] = "(shield)"
        let details["cr_create_trunk_from_here_to_there"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunk_from_here_to_there"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunk_from_here_to_there"]["-edge_overhang"] = "(overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)"
        let details["cr_create_trunk_from_here_to_there"]["-edge_pullback"] = "(pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)"
        let details["cr_create_trunk_from_here_to_there"]["-edge_pullback_custom"] = ""
        let details["cr_create_trunk_from_here_to_there"]["-cutout_pullback"] = "(the list of 'start|end,layer,pullback', e.g. 'end,m10,100 start,m9,80 end,m8,-18'. pullback from cutout area as specified)"
        let details["cr_create_trunk_from_here_to_there"]["-shield_pullback"] = "(pullback shield trunk from edge half DR (per layer))"
        let details["cr_create_trunk_from_here_to_there"]["-wrong_way_metal"] = "(allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)"
        let details["cr_create_trunk_from_here_to_there"]["-snap_to_track"] = "(if topology is specified using micron value, snap coord to track for givem layer/width)"
        let details["cr_create_trunk_from_here_to_there"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["cr_create_trunk_from_here_to_there"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["cr_create_trunk_from_here_to_there"]["-include_power_for_free_tracks"] = ""
        let details["cr_create_trunk_from_here_to_there"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunk_from_here_to_there"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunk_from_here_to_there"]["-ignore_boundary_guides"] = ""
        let details["cr_create_trunk_from_here_to_there"]["-display_zone"] = "(THIS IS REPLACING -display_channel: will annotate channels/edges and track capacity based on list of layer/width comma seperated)"
        let details["cr_create_trunk_from_here_to_there"]["-display_channel"] = "(THIS GOT RETIRED, use -display_zone: will annotate channels/edges and track capacity based on list of layer/width comma seperated)"
        let details["cr_create_trunk_from_here_to_there"]["-clear_zone"] = "(remove zone annotations before re-displaying them)"
        let details["cr_create_trunk_from_here_to_there"]["-just_clear_zone"] = "(remove all zone annotations)"
        let details["cr_create_trunk_from_here_to_there"]["-custom_attr"] = "(list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )"
        let details["cr_create_trunk_from_here_to_there"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["cr_create_trunk_from_here_to_there"]["-log_track_number"] = "(reports track number that net was created on)"
        let details["cr_create_trunk_from_here_to_there"]["-clear"] = "(remove any existing shapes prior creating them)"
        let details["cr_create_trunk_from_here_to_there"]["-verbose"] = "(turn on printing of display_channel capacities)"
        let details["cr_create_trunk_from_here_to_there"]["-remove"] = "(remove any existing shapes do not create (for clean-up))"
        let details["cr_create_trunk_from_here_to_there"]["-preview"] = "(do not create shapes, just draw annotations of shapes)"
   let details["cr_create_trunk_on_track"]={}
        let details["cr_create_trunk_on_track"]["-nets"] = "(list of nets to create trunks for)"
        let details["cr_create_trunk_on_track"]["-layer"] = "(layer name)"
        let details["cr_create_trunk_on_track"]["-width"] = "(width to tracks to use, can be a comma-separated list of widths)"
        let details["cr_create_trunk_on_track"]["-track_num"] = "(track number(s) or x,y coordinate(s) that will be snapped to closest track of layer/width(s))"
        let details["cr_create_trunk_on_track"]["-track_step"] = "(track_step, if specified then the 1st element of tracks list is used as anchor and track list got re-calculated)"
        let details["cr_create_trunk_on_track"]["-num_wires"] = "(number of shapes to be created per net)"
        let details["cr_create_trunk_on_track"]["-bbox"] = "(bounding box used to calculate relative track number relative to the bbox)"
        let details["cr_create_trunk_on_track"]["-net_bbox_override"] = "(bounding box used to override nets bounding box: trunks will be cut/stratched to this bbox)"
        let details["cr_create_trunk_on_track"]["-net_path_area"] = "(similar to -bbox but trunks will be cut/stratched to the bbox only if net bbox is outside the area bbox)"
        let details["cr_create_trunk_on_track"]["-lo"] = "(override nets bounding box lo value: trunks will be cut/stratched to this value)"
        let details["cr_create_trunk_on_track"]["-hi"] = "(override nets bounding box lo value: trunks will be cut/stratched to this value)"
        let details["cr_create_trunk_on_track"]["-shield"] = "(shield)"
        let details["cr_create_trunk_on_track"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunk_on_track"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunk_on_track"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["cr_create_trunk_on_track"]["-include_power_for_free_tracks"] = ""
        let details["cr_create_trunk_on_track"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunk_on_track"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunk_on_track"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)"
        let details["cr_create_trunk_on_track"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)"
        let details["cr_create_trunk_on_track"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["cr_create_trunk_on_track"]["-of_cells"] = "(instances of cells (and optioanl edges) to be used to calculate net bbox, cell_name_expr:t|b|l|r)"
        let details["cr_create_trunk_on_track"]["-exclude_cells"] = "(instances of cells (and optioanl edges) to be excluded from calculation of net bbox, cell_name_expr:t|b|l|r)"
        let details["cr_create_trunk_on_track"]["-ignore_boundary_guides"] = ""
        let details["cr_create_trunk_on_track"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["cr_create_trunk_on_track"]["-delete"] = "(clear before annotating the track)"
        let details["cr_create_trunk_on_track"]["-group"] = "(group name for wire)"
        let details["cr_create_trunk_on_track"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunk_straps_for_pins"]={}
        let details["cr_create_trunk_straps_for_pins"]["-nets"] = "(nets to create trunk straps)"
        let details["cr_create_trunk_straps_for_pins"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["cr_create_trunk_straps_for_pins"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["cr_create_trunk_straps_for_pins"]["-of_cells"] = "(cells (instances of macros) and the side from which to extend pins, e.g. {cell1:r cell2:l cell3*:b})"
        let details["cr_create_trunk_straps_for_pins"]["-extension_distance"] = "(how far in microns to extend from ports)"
        let details["cr_create_trunk_straps_for_pins"]["-extension_direction"] = ""
        let details["cr_create_trunk_straps_for_pins"]["-route_type"] = "(route type to be set for resulting net shapes)"
        let details["cr_create_trunk_straps_for_pins"]["-shield"] = "(shield net)"
        let details["cr_create_trunk_straps_for_pins"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunk_straps_for_pins"]["-snap_to_track"] = "(snap trunk centerline to track, if not specified trunk will be extended from pin bbox exactly)"
        let details["cr_create_trunk_straps_for_pins"]["-do_not_check_shorts"] = "(do not check if obstrutions exist)"
        let details["cr_create_trunk_straps_for_pins"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunks_from_pin_to_pin"]={}
        let details["cr_create_trunks_from_pin_to_pin"]["-nets"] = "(nets to create trunks for)"
        let details["cr_create_trunks_from_pin_to_pin"]["-layer_legs"] = "(layers for which turns will be created on.  first layer will be drawn first, second is second etc.)"
        let details["cr_create_trunks_from_pin_to_pin"]["-extensions"] = "(list of how far to extend pins in microns, net bbox fraction, lego, duplo.  list corresponds with list of layers -1)"
        let details["cr_create_trunks_from_pin_to_pin"]["-shield"] = "(shield net)"
        let details["cr_create_trunks_from_pin_to_pin"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunks_from_pin_to_pin"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunks_from_pin_to_pin"]["-start_from"] = "(which pin to start from, either Low pin to High pin, LoHi (lowest y will be first leg) or High pin to Low pin, HiLo)"
        let details["cr_create_trunks_from_pin_to_pin"]["-dir_follows_sign"] = "(direction of the leg travel defined by the sign of the leg, not net bbox. i.e. 0.25 goes to the right/up, -0.25 goes to left/down)"
        let details["cr_create_trunks_from_pin_to_pin"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["cr_create_trunks_from_pin_to_pin"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["cr_create_trunks_from_pin_to_pin"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_pin_to_pin"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_pin_to_pin"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)"
        let details["cr_create_trunks_from_pin_to_pin"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)"
        let details["cr_create_trunks_from_pin_to_pin"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["cr_create_trunks_from_pin_to_pin"]["-return_track_info"] = "(returns a list of lists with net_name, track_number per layer/width)"
        let details["cr_create_trunks_from_pin_to_pin"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunks_from_pins_to_point"]={}
        let details["cr_create_trunks_from_pins_to_point"]["-nets"] = "(nets to create trunk from port)"
        let details["cr_create_trunks_from_pins_to_point"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["cr_create_trunks_from_pins_to_point"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["cr_create_trunks_from_pins_to_point"]["-extension_distance"] = "(how far to extend pins in microns or 'to_cell:cell_name' to extend to a closest edge of cell_name oe 'to_boundary' to extend to boundary edge)"
        let details["cr_create_trunks_from_pins_to_point"]["-extension_direction"] = "(which direction to extend off pin, either RIGHT_or_TOP or Left_or_Bottom)"
        let details["cr_create_trunks_from_pins_to_point"]["-create_terminals"] = "(create terminals on boundary if extention distance is to_boundary)"
        let details["cr_create_trunks_from_pins_to_point"]["-push_pins"] = "(create pins where iccpp_trunks cross cells)"
        let details["cr_create_trunks_from_pins_to_point"]["-pin_layer"] = "(layer pin should be on to extend off of)"
        let details["cr_create_trunks_from_pins_to_point"]["-min_layer"] = "(min layer name for pin trunks to be on, default is pin layer unless it is lower than min layer)"
        let details["cr_create_trunks_from_pins_to_point"]["-of_cells"] = "(cells (instances of macros) and the side from which to extend pins, e.g. {cell1:r cell2:l cell3*:b cell4*:0,0,10,10 bbox relative to cell origin})"
        let details["cr_create_trunks_from_pins_to_point"]["-shield"] = "(shield net)"
        let details["cr_create_trunks_from_pins_to_point"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunks_from_pins_to_point"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunks_from_pins_to_point"]["-snap_to_track"] = "(snap trunk centerline to track, if not specified trunk will be extended from pin bbox exactly)"
        let details["cr_create_trunks_from_pins_to_point"]["-do_not_check_shorts"] = "(do not check if obstrutions exist)"
        let details["cr_create_trunks_from_pins_to_point"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["cr_create_trunks_from_pins_to_point"]["-use_routespec"] = "(read routespec, find closest track for given port that matches NDR and layer and )"
        let details["cr_create_trunks_from_pins_to_point"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunks_from_pins_to_trunk"]={}
        let details["cr_create_trunks_from_pins_to_trunk"]["-nets"] = "(nets to create trunk from pin(s))"
        let details["cr_create_trunks_from_pins_to_trunk"]["-layer"] = "(layer name for trunks to be on)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-shield"] = "(shield net)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-min_layer"] = "(minimum layer for terminals to be considered (used to extend trunks from))"
        let details["cr_create_trunks_from_pins_to_trunk"]["-pin_direction"] = "(use only pins of specified direction)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-of_cells"] = "(instances of macros and the side from which to extend pins)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-offset_cell_pin"] = "(instances of macros and the side and the offset distance to modify pins bbox cella:b:-2)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-track_offset"] = "(offset (in track numbers) for a resulting trunk(s) to be placed on)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-include_power_for_free_tracks"] = ""
        let details["cr_create_trunks_from_pins_to_trunk"]["-cluster_proximity"] = "(micron value used to cluster receiver pins together, 0 means use each pin by itself)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-use_existing_shape"] = "(format: layer[,min_length] (e.g m5,80) extend to existing net shape on layer 'layer' that is optionaly longer then 'min_length' if no trunks are found)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["cr_create_trunks_from_pins_to_trunk"]["-use_routespec"] = "(read routespec, find closest track for given port that matches NDR and layer and )"
        let details["cr_create_trunks_from_pins_to_trunk"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunks_from_ports"]={}
        let details["cr_create_trunks_from_ports"]["-nets"] = "(nets to create trunk from port)"
        let details["cr_create_trunks_from_ports"]["-layer"] = "(use this layer for the trunk, not the port layer)"
        let details["cr_create_trunks_from_ports"]["-width"] = "(width of tracks to use)"
        let details["cr_create_trunks_from_ports"]["-min_layer"] = "(minimum layer for terminals to be considered (used to extend trunks from))"
        let details["cr_create_trunks_from_ports"]["-shield"] = "(shield net)"
        let details["cr_create_trunks_from_ports"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunks_from_ports"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunks_from_ports"]["-do_not_check_shorts"] = "(do not check if obstrutions exist)"
        let details["cr_create_trunks_from_ports"]["-extension_distance"] = "(how far in microns to extend from ports)"
        let details["cr_create_trunks_from_ports"]["-extension_direction"] = ""
        let details["cr_create_trunks_from_ports"]["-use_port_width"] = "(use port width, do not snap to track (assuming ports are on correct tracks))"
        let details["cr_create_trunks_from_ports"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["cr_create_trunks_from_ports"]["-include_power_for_free_tracks"] = ""
        let details["cr_create_trunks_from_ports"]["-ignore_boundary_guide"] = ""
        let details["cr_create_trunks_from_ports"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_ports"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_ports"]["-v_layer_override"] = "(overrides the vertical metal layer of port even if -layer is passed)"
        let details["cr_create_trunks_from_ports"]["-h_layer_override"] = "(overrides the horizontal metal layer of port even if -layer is passed)"
        let details["cr_create_trunks_from_ports"]["-backoff_from_ports"] = "(amount to offset from ports, should be value,layer)"
        let details["cr_create_trunks_from_ports"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)"
        let details["cr_create_trunks_from_ports"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)"
        let details["cr_create_trunks_from_ports"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["cr_create_trunks_from_ports"]["-use_routespec"] = "(read routespec, find closest track for given port that matches NDR and layer and )"
        let details["cr_create_trunks_from_ports"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_trunks_from_ports_to_trunk"]={}
        let details["cr_create_trunks_from_ports_to_trunk"]["-nets"] = "(nets to create trunk from port)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-layer"] = "(layer name for port trunks to be on)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-width"] = "(width of the track for trunks to be on)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-shield"] = "(shield net)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-shield_name"] = "(shield name)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-shield_type"] = "(type of shielding to preform)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-min_layer"] = "(min layer name for port trunks to be on, default is port layer unless it is lower than min layer)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-v_layer_override"] = "(overrides the vertical metal layer of port even if -layer is passed)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-h_layer_override"] = "(overrides the horizontal metal layer of port even if -layer is passed)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-pullback_lb"] = "(takes micron value. will cut back trunk for the end on the left side if horizontal or the bottom side if vertical)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-pullback_rt"] = "(takes micron value. will cut back trunk for the end on the right side if horizontal or the top side if vertical)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-backoff_from_ports"] = "(amount to offset from port)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-do_not_check_shorts"] = "(do not check if obstrutions exist)"
        let details["cr_create_trunks_from_ports_to_trunk"]["-use_routespec"] = "(read routespec, find closest track for given port that matches NDR and layer and )"
        let details["cr_create_trunks_from_ports_to_trunk"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_create_vias_for_custom_shields"]={}
        let details["cr_create_vias_for_custom_shields"]["-shield_nets"] = "(net names of custom shield nets)"
        let details["cr_create_vias_for_custom_shields"]["-shield_layers"] = "(list of layers that you have custom shields on, OPTIONAL - if not pass layers will be derived from layout)"
        let details["cr_create_vias_for_custom_shields"]["-advanced_drc_off"] = "(turn off advanced drc checking, this will most likely create vias that have drcs)"
        let details["cr_create_vias_for_custom_shields"]["-delete"] = "(remove vias)"
        let details["cr_create_vias_for_custom_shields"]["-tag"] = "(group name for vias, default is iccpp_preroute_sheild_vias)"
   let details["cr_create_vias_for_preroutes"]={}
        let details["cr_create_vias_for_preroutes"]["-nets"] = "(nets to drop vias on)"
        let details["cr_create_vias_for_preroutes"]["-from_layer"] = "(from layer name)"
        let details["cr_create_vias_for_preroutes"]["-to_layer"] = "(to layer name)"
        let details["cr_create_vias_for_preroutes"]["-bbox"] = "(bounding box to drop vias in for nets)"
        let details["cr_create_vias_for_preroutes"]["-advanced_drc_off"] = "(turn off advanced drc checking, this will most likely create vias that have drcs)"
        let details["cr_create_vias_for_preroutes"]["-delete"] = "(remove vias)"
        let details["cr_create_vias_for_preroutes"]["-tag"] = "(group name for vias, default is iccpp_preroute_vias)"
   let details["cr_create_wire_on_track"]={}
        let details["cr_create_wire_on_track"]["-layer"] = "(layer name)"
        let details["cr_create_wire_on_track"]["-net_name"] = "(LIST of nets to create wire for)"
        let details["cr_create_wire_on_track"]["-of_track_width"] = "(width to tracks to use, track numbers are according to this width)"
        let details["cr_create_wire_on_track"]["-track_num"] = "(track)"
        let details["cr_create_wire_on_track"]["-num_wires"] = "(number of wires to create per net)"
        let details["cr_create_wire_on_track"]["-track_step"] = "(track_step)"
        let details["cr_create_wire_on_track"]["-area_bbox"] = "(bounding box to create trunk within)"
        let details["cr_create_wire_on_track"]["-delete"] = "(clear before annotating the track)"
        let details["cr_create_wire_on_track"]["-group"] = "(group name for wire)"
        let details["cr_create_wire_on_track"]["-shield"] = "(shield)"
        let details["cr_create_wire_on_track"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["cr_create_wire_on_track"]["-shield_name"] = "(shield name)"
        let details["cr_create_wire_on_track"]["-adjust_wire"] = "(change wire lenght etc.)"
        let details["cr_create_wire_on_track"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_delete_track_region"]={}
        let details["cr_delete_track_region"]["-pattern"] = "(track pattern name/s)"
        let details["cr_delete_track_region"]["-track_region"] = "(track region to create tracks in)"
        let details["cr_delete_track_region"]["-reset_to_default"] = "(set track patterns back to default)"
   let details["cr_extract_track_shared_trunks"]={}
        let details["cr_extract_track_shared_trunks"]["-nets"] = "(list of nets to extract shapes)"
        let details["cr_extract_track_shared_trunks"]["-layer_from"] = "(layer name to extract shapes)"
        let details["cr_extract_track_shared_trunks"]["-width_from"] = "(shape width to extract shapes)"
        let details["cr_extract_track_shared_trunks"]["-min_length"] = "(min length of shape to be extracted, any shapes shorter will be skipped)"
        let details["cr_extract_track_shared_trunks"]["-layer_to"] = "(layer name to generate shapes)"
        let details["cr_extract_track_shared_trunks"]["-width_to"] = "(width to generate shapes)"
        let details["cr_extract_track_shared_trunks"]["-start_track_num"] = "(specifies start track number to be used in iTAR command to generate new trunks)"
        let details["cr_extract_track_shared_trunks"]["-preview"] = "(make iTAR commands to generate trunk previes not new trunks)"
        let details["cr_extract_track_shared_trunks"]["-output"] = "(file name that will contain iTAR commands to generate new trunks)"
   let details["cr_get_agressor_locations"]={}
        let details["cr_get_agressor_locations"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["cr_get_agressor_locations"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["cr_get_agressor_locations"]["-backoff_override_value"] = ""
        let details["cr_get_agressor_locations"]["-backoff"] = "(backoff)"
        let details["cr_get_agressor_locations"]["-backoff_multiplier"] = "(need more than winWidth backoff, pass multiplier like (2) to get 2x minWidth)"
        let details["cr_get_agressor_locations"]["-exclude_power"] = "(exclude power from checking obstructions)"
        let details["cr_get_agressor_locations"]["-get_rid_of_min_width"] = ""
        let details["cr_get_agressor_locations"]["-extra_min_width_shrink"] = ""
        let details["cr_get_agressor_locations"]["-bbox"] = "(bounding box to fill within)"
        let details["cr_get_agressor_locations"]["-color"] = "(color of your annotation for preview)"
        let details["cr_get_agressor_locations"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_is_odd"]={}
   let details["cr_place_repeaters"]={}
        let details["cr_place_repeaters"]["-nets"] = "(nets to drop repeaters)"
        let details["cr_place_repeaters"]["-layer"] = "(layer liat of trunk(s) to be repeated)"
        let details["cr_place_repeaters"]["-repeater_name"] = "(name of repeater cell to be inserted)"
        let details["cr_place_repeaters"]["-repeater_suffix"] = "(syffix to repeater cell and repeated net)"
        let details["cr_place_repeaters"]["-repeater_locations"] = "(list of exact locations {X Y} to drop repeaters)"
        let details["cr_place_repeaters"]["-repeater_cutlines"] = "(list of cutlines to calculate exact locations {X Y} (cutline intersection with trunk) to drop repeaters )"
        let details["cr_place_repeaters"]["-repeater_number"] = "(how many repeaters to place on path)"
        let details["cr_place_repeaters"]["-repeater_distance"] = "(the distance to insert repeaters: insert a repeater every micron value specified)"
        let details["cr_place_repeaters"]["-repeater_relative_cutlines"] = ""
        let details["cr_place_repeaters"]["-layer_weight"] = "(when -repeater_distance is specified define weight per layer to be applied to the distance value)"
        let details["cr_place_repeaters"]["-repeater_type"] = "(type of repeater:buffer (bfr) or inverter pair (inv))"
        let details["cr_place_repeaters"]["-append_suffix"] = "(appends a unique suffix to the post-repeater nets in addition to the auto-generated suffix)"
        let details["cr_place_repeaters"]["-of_cells"] = "(instances of cells to be used to calculate repeater net connections, cell_name_expr)"
        let details["cr_place_repeaters"]["-exclude_cells"] = "(instances of cells to be excluded from calculation of repeater net connections, cell_name_expr)"
        let details["cr_place_repeaters"]["-stagger_mult"] = "(spread repeaters in X direction by (repeater_width * st) when staggering or checkeboarding placed repeaters)"
        let details["cr_place_repeaters"]["-do_not_stagger"] = "(do not stagger or checkerboard placed repeaters)"
        let details["cr_place_repeaters"]["-remove"] = "(remove all repeaters on the net, reconnect net to the original state)"
        let details["cr_place_repeaters"]["-preview"] = "(do not create shapes, just annotate)"
   let details["cr_report_failed_trunks"]={}
        let details["cr_report_failed_trunks"]["-nets"] = "(List of nets to create trunks for)"
        let details["cr_report_failed_trunks"]["-layer"] = "(layer name, ex. m9)"
        let details["cr_report_failed_trunks"]["-width"] = "(width to tracks to use, track numbers are according to this width)"
   let details["cr_restore_itar_attributes_on_nets"]={}
        let details["cr_restore_itar_attributes_on_nets"]["-nets"] = "(nets to trim on)"
        let details["cr_restore_itar_attributes_on_nets"]["-user_attr"] = "(name of user attribute)"
   let details["cr_trim_antennas"]={}
        let details["cr_trim_antennas"]["-nets"] = "(nets to trim on)"
        let details["cr_trim_antennas"]["-user_attr"] = "(name of user attribute)"
   let details["cr_trunk_flopped_nets_p2p"]={}
        let details["cr_trunk_flopped_nets_p2p"]["-nets"] = "(List of nets to create trunks for)"
        let details["cr_trunk_flopped_nets_p2p"]["-vlayer"] = "(vertical layer name)"
        let details["cr_trunk_flopped_nets_p2p"]["-vwidth"] = "(vertical layer width width)"
        let details["cr_trunk_flopped_nets_p2p"]["-hlayer"] = "(horizontal layer name)"
        let details["cr_trunk_flopped_nets_p2p"]["-hwidth"] = "(horizontal layer width width)"
        let details["cr_trunk_flopped_nets_p2p"]["-main_trunk_layer"] = "(main trunk layer name)"
        let details["cr_trunk_flopped_nets_p2p"]["-main_trunk_ref_net"] = "(reference net, bbox of which is used to calculate main trunk location)"
        let details["cr_trunk_flopped_nets_p2p"]["-main_trunk_loc"] = "(main trunk location in ref net bbox % with offset, e.g. 0.5,-10 50% of net's bbox - 10 micron)"
        let details["cr_trunk_flopped_nets_p2p"]["-track_step"] = "(track step to create trunks for nets passed, start track is calculated from -main_trunk_loc)"
        let details["cr_trunk_flopped_nets_p2p"]["-start_from"] = "(which pin/port to start from, either Low pin to High pin, LoHi or High pin to Low pin, HiLo)"
        let details["cr_trunk_flopped_nets_p2p"]["-position_sequentials"] = "(how to position sequentials (move them): 'spread' or a list of name-XY for each)"
        let details["cr_trunk_flopped_nets_p2p"]["-repeater_name"] = "(name of repeater cell to be inserted)"
        let details["cr_trunk_flopped_nets_p2p"]["-repeater_locations"] = "(list of exact locations {X Y} to drop repeaters)"
        let details["cr_trunk_flopped_nets_p2p"]["-repeater_number"] = "(how many repeaters to place on path)"
        let details["cr_trunk_flopped_nets_p2p"]["-repeater_distance"] = "(the distance to insert repeaters: insert a repeater every micron value specified)"
        let details["cr_trunk_flopped_nets_p2p"]["-repeater_type"] = "(type of repeater:buffer (bfr) or inverter pair (inv))"
        let details["cr_trunk_flopped_nets_p2p"]["-preview"] = "(do not create shapes, just annotate)"
   let details["create_bs_upf"]={}
        let details["create_bs_upf"]["-blocks"] = "(blocks)"
        let details["create_bs_upf"]["-budget_shell_nlib"] = ""
        let details["create_bs_upf"]["-budget_shell_nlib_dir"] = ""
        let details["create_bs_upf"]["-debug"] = "(Enable Debug Output)"
   let details["create_cell_pin_fingers"]={}
   let details["create_constraint_file_header"]={}
   let details["create_ctp_block_constraints"]={}
   let details["create_fib_con_vias"]={}
   let details["create_gigfig_from_ply"]={}
   let details["create_marker_around"]={}
        let details["create_marker_around"]["-objects"] = "(Create markers around)"
        let details["create_marker_around"]["-micron"] = "(marker depth, default value is ZERO)"
   let details["create_offgrid_tracks_for_hip_pin"]={}
   let details["create_partition_tcon"]={}
   let details["create_pg_mesh_pattern"]={}
        let details["create_pg_mesh_pattern"]["-layers"] = ""
        let details["create_pg_mesh_pattern"]["-parameters"] = ""
        let details["create_pg_mesh_pattern"]["-via_rule"] = "(via rule between straps in this PG mesh pattern)"
   let details["crfm"]={}
   let details["cs"]={}
   let details["cul"]={}
   let details["decode_snps_version"]={}
   let details["delete_dice_diff_record_iter"]={}
   let details["delete_dice_key_iter"]={}
   let details["delite_save_stage"]={}
   let details["dice_annotation_get_allowed_values"]={}
   let details["dice_annotation_get_category"]={}
   let details["dice_annotation_get_changed_time_from_file"]={}
   let details["dice_annotation_get_choice_info"]={}
   let details["dice_annotation_get_choice_label"]={}
   let details["dice_annotation_get_default_sub_value"]={}
   let details["dice_annotation_get_default_value"]={}
   let details["dice_annotation_get_description"]={}
   let details["dice_annotation_get_html_description"]={}
   let details["dice_annotation_get_keys"]={}
   let details["dice_annotation_get_keys_with_value"]={}
   let details["dice_annotation_get_label"]={}
   let details["dice_annotation_get_last_changed_time"]={}
   let details["dice_annotation_get_name"]={}
   let details["dice_annotation_get_previous_value"]={}
   let details["dice_annotation_get_sub_value"]={}
   let details["dice_annotation_get_sub_value_allowed_values"]={}
   let details["dice_annotation_get_sub_value_data_type"]={}
   let details["dice_annotation_get_sub_value_info"]={}
   let details["dice_annotation_get_sub_value_label"]={}
   let details["dice_annotation_get_sub_value_tags"]={}
   let details["dice_annotation_get_type"]={}
   let details["dice_annotation_get_value"]={}
   let details["dice_annotation_get_value_from_file"]={}
   let details["dice_annotation_get_value_source"]={}
   let details["dice_annotation_get_value_source_from_file"]={}
   let details["dice_annotation_has_restricted_values"]={}
   let details["dice_annotation_has_strict_value_enforcement"]={}
   let details["dice_annotation_has_value"]={}
   let details["dice_annotation_has_value_from_file"]={}
   let details["dice_annotation_last_result_was_local"]={}
   let details["dice_annotation_remove_data"]={}
   let details["dice_annotation_revert_to_file"]={}
   let details["dice_annotation_set_default_value"]={}
   let details["dice_annotation_set_sub_value"]={}
   let details["dice_annotation_set_value"]={}
   let details["dice_clone_key"]={}
   let details["dice_constraint_get_allowed_values"]={}
   let details["dice_constraint_get_category"]={}
   let details["dice_constraint_get_changed_time_from_file"]={}
   let details["dice_constraint_get_choice_info"]={}
   let details["dice_constraint_get_choice_label"]={}
   let details["dice_constraint_get_default_sub_value"]={}
   let details["dice_constraint_get_default_value"]={}
   let details["dice_constraint_get_description"]={}
   let details["dice_constraint_get_html_description"]={}
   let details["dice_constraint_get_keys"]={}
   let details["dice_constraint_get_keys_with_value"]={}
   let details["dice_constraint_get_label"]={}
   let details["dice_constraint_get_last_changed_time"]={}
   let details["dice_constraint_get_name"]={}
   let details["dice_constraint_get_previous_value"]={}
   let details["dice_constraint_get_sub_value"]={}
   let details["dice_constraint_get_sub_value_allowed_values"]={}
   let details["dice_constraint_get_sub_value_data_type"]={}
   let details["dice_constraint_get_sub_value_info"]={}
   let details["dice_constraint_get_sub_value_label"]={}
   let details["dice_constraint_get_sub_value_tags"]={}
   let details["dice_constraint_get_type"]={}
   let details["dice_constraint_get_value"]={}
   let details["dice_constraint_get_value_from_file"]={}
   let details["dice_constraint_get_value_source"]={}
   let details["dice_constraint_get_value_source_from_file"]={}
   let details["dice_constraint_has_restricted_values"]={}
   let details["dice_constraint_has_strict_value_enforcement"]={}
   let details["dice_constraint_has_value"]={}
   let details["dice_constraint_has_value_from_file"]={}
   let details["dice_constraint_last_result_was_local"]={}
   let details["dice_constraint_remove_data"]={}
   let details["dice_constraint_revert_to_file"]={}
   let details["dice_constraint_set_default_value"]={}
   let details["dice_constraint_set_sub_value"]={}
   let details["dice_constraint_set_value"]={}
   let details["dice_data_type_get"]={}
   let details["dice_data_type_get_compressed_value"]={}
   let details["dice_data_type_get_name"]={}
   let details["dice_data_type_get_uncompressed_value"]={}
   let details["dice_data_type_is_valid_format"]={}
   let details["dice_data_type_is_valid_value"]={}
   let details["dice_diff_record_accept_candidate_info"]={}
   let details["dice_diff_record_accept_file_info"]={}
   let details["dice_diff_record_do_comparison"]={}
   let details["dice_diff_record_finish_comparison"]={}
   let details["dice_diff_record_get_annotation"]={}
   let details["dice_diff_record_get_constraint"]={}
   let details["dice_diff_record_get_diff_records"]={}
   let details["dice_diff_record_get_diff_records_iter"]={}
   let details["dice_diff_record_get_key"]={}
   let details["dice_diff_record_get_new_change_time"]={}
   let details["dice_diff_record_get_new_user_name"]={}
   let details["dice_diff_record_get_new_value"]={}
   let details["dice_diff_record_get_new_value_source"]={}
   let details["dice_diff_record_get_old_change_time"]={}
   let details["dice_diff_record_get_old_user_name"]={}
   let details["dice_diff_record_get_old_value"]={}
   let details["dice_diff_record_get_old_value_source"]={}
   let details["dice_diff_record_get_type"]={}
   let details["dice_diff_record_iter_add_filter_to_include_record"]={}
   let details["dice_diff_record_iter_clear_filters"]={}
   let details["dice_diff_record_iter_count"]={}
   let details["dice_diff_record_iter_empty"]={}
   let details["dice_diff_record_iter_get_next"]={}
   let details["dice_diff_record_iter_reset"]={}
   let details["dice_discard_cell"]={}
   let details["dice_get_annotation"]={}
   let details["dice_get_annotations"]={}
   let details["dice_get_configuration"]={}
   let details["dice_get_configurations"]={}
   let details["dice_get_constraint"]={}
   let details["dice_get_constraints"]={}
   let details["dice_get_data_type"]={}
   let details["dice_get_key"]={}
   let details["dice_get_key_types"]={}
   let details["dice_get_records"]={}
   let details["dice_key_add_key"]={}
   let details["dice_key_add_to_group"]={}
   let details["dice_key_attach_configuration"]={}
   let details["dice_key_clear_configuration"]={}
   let details["dice_key_get_alias"]={}
   let details["dice_key_get_all_keys"]={}
   let details["dice_key_get_attached_configuration"]={}
   let details["dice_key_get_attached_configuration_from_file"]={}
   let details["dice_key_get_cell_name"]={}
   let details["dice_key_get_configuration_name"]={}
   let details["dice_key_get_description"]={}
   let details["dice_key_get_file_keys_in_group"]={}
   let details["dice_key_get_groups"]={}
   let details["dice_key_get_keys_in_group"]={}
   let details["dice_key_get_keys_in_group_iter"]={}
   let details["dice_key_get_name"]={}
   let details["dice_key_get_type"]={}
   let details["dice_key_group_get_keys"]={}
   let details["dice_key_group_get_keys_of_type"]={}
   let details["dice_key_group_get_types"]={}
   let details["dice_key_group_has_type"]={}
   let details["dice_key_isa_key_group"]={}
   let details["dice_key_iter_count"]={}
   let details["dice_key_iter_empty"]={}
   let details["dice_key_iter_get_next"]={}
   let details["dice_key_iter_reset"]={}
   let details["dice_key_remove_all_keys"]={}
   let details["dice_key_remove_from_group"]={}
   let details["dice_key_remove_key"]={}
   let details["dice_key_set_alias"]={}
   let details["dice_key_set_configuration"]={}
   let details["dice_key_set_description"]={}
   let details["dice_key_set_name"]={}
   let details["dice_needs_to_save"]={}
   let details["dice_read_file"]={}
   let details["dice_record_get_allowed_values"]={}
   let details["dice_record_get_category"]={}
   let details["dice_record_get_changed_time_from_file"]={}
   let details["dice_record_get_choice_info"]={}
   let details["dice_record_get_choice_label"]={}
   let details["dice_record_get_default_sub_value"]={}
   let details["dice_record_get_default_value"]={}
   let details["dice_record_get_description"]={}
   let details["dice_record_get_html_description"]={}
   let details["dice_record_get_keys"]={}
   let details["dice_record_get_keys_with_value"]={}
   let details["dice_record_get_label"]={}
   let details["dice_record_get_last_changed_time"]={}
   let details["dice_record_get_name"]={}
   let details["dice_record_get_previous_value"]={}
   let details["dice_record_get_sub_value"]={}
   let details["dice_record_get_sub_value_allowed_values"]={}
   let details["dice_record_get_sub_value_data_type"]={}
   let details["dice_record_get_sub_value_info"]={}
   let details["dice_record_get_sub_value_label"]={}
   let details["dice_record_get_sub_value_tags"]={}
   let details["dice_record_get_type"]={}
   let details["dice_record_get_value"]={}
   let details["dice_record_get_value_from_file"]={}
   let details["dice_record_get_value_source"]={}
   let details["dice_record_get_value_source_from_file"]={}
   let details["dice_record_has_restricted_values"]={}
   let details["dice_record_has_strict_value_enforcement"]={}
   let details["dice_record_has_value"]={}
   let details["dice_record_has_value_from_file"]={}
   let details["dice_record_isa_annotation"]={}
   let details["dice_record_isa_constraint"]={}
   let details["dice_record_last_result_was_local"]={}
   let details["dice_record_remove_data"]={}
   let details["dice_record_revert_to_file"]={}
   let details["dice_record_set_default_value"]={}
   let details["dice_record_set_sub_value"]={}
   let details["dice_record_set_type"]={}
   let details["dice_record_set_value"]={}
   let details["dice_revert_to_file"]={}
   let details["dice_save_file"]={}
   let details["dice_write_copy_of_file"]={}
   let details["dice_write_file"]={}
   let details["dice_write_local_settings"]={}
   let details["disable_debug_msg"]={}
   let details["does_it_collide"]={}
   let details["dp_fn_eco_create_net_shape"]={}
   let details["dp_fn_eco_create_rename_eco_file"]={}
   let details["dp_fn_eco_create_terminal"]={}
   let details["dp_reports"]={}
   let details["dp_save_stage"]={}
   let details["dump_floorplan"]={}
   let details["duplicate_blockages_from_hard_type_to_hard_macro_type"]={}
   let details["eB"]={}
   let details["eL"]={}
   let details["eR"]={}
   let details["eT"]={}
   let details["ebb_bbox_poly"]={}
   let details["edm"]={}
   let details["enable_debug_msg"]={}
   let details["even_or_odd"]={}
   let details["exec_cp"]={}
   let details["expand_bus"]={}
   let details["expand_if_gvar_is_array"]={}
   let details["exprs"]={}
   let details["extract_post"]={}
   let details["extract_pre"]={}
   let details["extract_star"]={}
   let details["fclego"]={}
   let details["fclego_hier"]={}
   let details["fcommand"]={}
   let details["find_clock_name_and_frequency"]={}
   let details["fix_bs_nlib"]={}
   let details["fix_min_libraries"]={}
   let details["fix_module_name"]={}
   let details["flatLappend"]={}
   let details["flatLinsert"]={}
   let details["flow_checker"]={}
   let details["flow_lib_setup"]={}
   let details["fs"]={}
   let details["fusion_reports"]={}
   let details["fusion_save_stage"]={}
   let details["ga"]={}
   let details["generate_structural_raw_rpt"]={}
   let details["generate_structural_raw_rpt_for_unit"]={}
   let details["getTerminatedProcess"]={}
   let details["get_abutted_clock_nets"]={}
   let details["get_clock_boundary_cell"]={}
   let details["get_clock_driving_cell"]={}
   let details["get_constraint_file_by_keyword"]={}
   let details["get_description_from_help"]={}
   let details["get_die_area"]={}
   let details["get_die_area2"]={}
   let details["get_filler_cell_from_icv_def"]={}
   let details["get_hier"]={}
   let details["get_info"]={}
   let details["get_leaf"]={}
   let details["get_non_abutted_clock_pins"]={}
   let details["get_object_name"]={}
   let details["get_options_from_help"]={}
   let details["get_options_from_man"]={}
   let details["get_power_domain_elements"]={}
   let details["get_proc_source"]={}
   let details["get_proc_source_history"]={}
   let details["get_tmp_var"]={}
   let details["get_track_capacity"]={}
   let details["get_track_capacity_from_100"]={}
   let details["get_unix_variable"]={}
   let details["get_visa_clock_stamp_pin"]={}
   let details["getenv"]={}
   let details["getsome_buffers"]={}
   let details["getvar"]={}
        let details["getvar"]["-quiet"] = "(Does not error when the var is not defined)"
        let details["getvar"]["-names"] = "(Returns the array indexes (similar to array names)"
        let details["getvar"]["-nosubst"] = "(Does not run subst on the return value)"
   let details["gh2"]={}
   let details["gh_cjb"]={}
   let details["glist_search_and_insert"]={}
   let details["gnb"]={}
   let details["gnnl"]={}
   let details["greph"]={}
   let details["gs"]={}
   let details["gsn"]={}
   let details["gui_change_layer"]={}
        let details["gui_change_layer"]["-object"] = "(Objects to change the layer of)"
        let details["gui_change_layer"]["-layer"] = "(Layer to use)"
   let details["gui_change_via_def"]={}
        let details["gui_change_via_def"]["-via"] = "(Vias to change the via def)"
        let details["gui_change_via_def"]["-via_def"] = "(New simple via definition)"
   let details["gui_change_via_size"]={}
        let details["gui_change_via_size"]["-via"] = "(Vias to change the number of row or columns)"
        let details["gui_change_via_size"]["-rows"] = "(Number of rows)"
        let details["gui_change_via_size"]["-columns"] = "(Number of columns)"
   let details["gui_get_setting"]={}
        let details["gui_get_setting"]["-window"] = "(The target window to apply this setting.)"
        let details["gui_get_setting"]["-setting"] = "(The name of the setting to get.)"
        let details["gui_get_setting"]["-list"] = "(When specified the list of settings is returned.)"
   let details["gui_highlight_nets_of_selected"]={}
        let details["gui_highlight_nets_of_selected"]["-flylines"] = "(highlight flylines instead of shapes)"
   let details["gui_select_bounds_of_selected"]={}
   let details["gui_select_bundles_of_selected"]={}
   let details["gui_select_cells_of_selected"]={}
   let details["gui_select_connected_net_shapes"]={}
        let details["gui_select_connected_net_shapes"]["-hierarchical"] = "(trace nets across block boundaries)"
        let details["gui_select_connected_net_shapes"]["-cross_net"] = "(trace shapes across different nets)"
   let details["gui_select_connected_rdl_net_shapes"]={}
   let details["gui_select_connections_of_selected"]={}
   let details["gui_select_constraint_groups_of_selected"]={}
   let details["gui_select_input_connections_of_selected"]={}
   let details["gui_select_macros_of_selected"]={}
   let details["gui_select_matching_types_of_selected"]={}
   let details["gui_select_mib_cells_of_selected"]={}
   let details["gui_select_mib_connections_of_selected"]={}
   let details["gui_select_net_buses_of_selected"]={}
   let details["gui_select_net_routing_of_selected"]={}
   let details["gui_select_net_shapes_of_selected"]={}
   let details["gui_select_net_vias_of_selected"]={}
   let details["gui_select_nets_of_selected"]={}
        let details["gui_select_nets_of_selected"]["-hierarchical"] = "(trace nets across block boundaries)"
   let details["gui_select_objects_of_selected_edit_group"]={}
   let details["gui_select_output_connections_of_selected"]={}
   let details["gui_select_port_buses_of_selected"]={}
   let details["gui_select_ports_of_selected_power_supply_nets"]={}
   let details["gui_select_power_domains_of_selected"]={}
   let details["gui_select_primary_power_supply_nets_of_selected"]={}
   let details["gui_select_routing_corridors_of_selected"]={}
   let details["gui_select_rp_blockages_of_selected"]={}
   let details["gui_select_rp_groups_of_selected"]={}
   let details["gui_select_shapes_of_selected"]={}
   let details["gui_select_site_arrays_of_selected"]={}
   let details["gui_select_site_rows_of_selected"]={}
   let details["gui_select_supernets_of_selected"]={}
   let details["gui_select_terminals_of_selected"]={}
   let details["gui_select_topology_edges_of_selected"]={}
   let details["gui_select_topology_nodes_of_selected"]={}
   let details["gui_select_topology_of_selected"]={}
   let details["gui_select_tracks_of_selected"]={}
   let details["gui_select_voltage_areas_of_selected"]={}
   let details["gui_set_select_menu_adds_to_selection"]={}
        let details["gui_set_select_menu_adds_to_selection"]["-value"] = "(add to selection mode boolean flag)"
   let details["gui_set_setting"]={}
        let details["gui_set_setting"]["-window"] = "(The target window to apply this setting.)"
        let details["gui_set_setting"]["-setting"] = "(The name of the setting to set.)"
        let details["gui_set_setting"]["-value"] = "(The value of the setting.)"
   let details["gui_show_man_page"]={}
        let details["gui_show_man_page"]["-apropos"] = "(do apropos search for topic)"
        let details["gui_show_man_page"]["-html"] = "()"
   let details["h2t"]={}
        let details["h2t"]["-nets"] = "(list of nets to create trunk(s) for)"
        let details["h2t"]["-nets_order"] = "(values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )"
        let details["h2t"]["-zone"] = "(THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["h2t"]["-channel"] = "(THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["h2t"]["-bloat_zone"] = "(THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["h2t"]["-bloat_channel"] = "(THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["h2t"]["-topology"] = "(topology description as a list of legs that reference trunking channels and their layers/width/track|micron|p values)"
        let details["h2t"]["-skip_tracks"] = "(rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)"
        let details["h2t"]["-avoid_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )"
        let details["h2t"]["-avoid_layers"] = "(list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )"
        let details["h2t"]["-trim_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)"
        let details["h2t"]["-cutout_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)"
        let details["h2t"]["-cutout_bloat"] = "(bloat cutout area in DR units, + to inflate, - to deflate)"
        let details["h2t"]["-do_not_cutout_nets"] = "(list of nets to be ignored while performing cutout)"
        let details["h2t"]["-swizzle"] = "(Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass \"swizzle_layer,location\")"
        let details["h2t"]["-stepping"] = "(list of steppings per layer/width pairs, make sure to accomodate for shielding, e.g full - 3, half - 2)"
        let details["h2t"]["-create_port"] = "(create port(s) from trunk(s))"
        let details["h2t"]["-use_pin"] = "(Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))"
        let details["h2t"]["-num_wires"] = "(number of trunks to create per net)"
        let details["h2t"]["-track_overrides_pin"] = "(even if pin exists, use the track number passed)"
        let details["h2t"]["-reuse_zone_tracks"] = "(THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)"
        let details["h2t"]["-clean_zone_tracks"] = "(THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)"
        let details["h2t"]["-clean_named_zone_tracks"] = ""
        let details["h2t"]["-reuse_channel_tracks"] = ""
        let details["h2t"]["-clean_channel_tracks"] = ""
        let details["h2t"]["-shield"] = "(shield)"
        let details["h2t"]["-shield_name"] = "(shield name)"
        let details["h2t"]["-shield_type"] = "(type of shielding to preform)"
        let details["h2t"]["-edge_overhang"] = "(overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)"
        let details["h2t"]["-edge_pullback"] = "(pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)"
        let details["h2t"]["-edge_pullback_custom"] = ""
        let details["h2t"]["-cutout_pullback"] = "(the list of 'start|end,layer,pullback', e.g. 'end,m10,100 start,m9,80 end,m8,-18'. pullback from cutout area as specified)"
        let details["h2t"]["-shield_pullback"] = "(pullback shield trunk from edge half DR (per layer))"
        let details["h2t"]["-wrong_way_metal"] = "(allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)"
        let details["h2t"]["-snap_to_track"] = "(if topology is specified using micron value, snap coord to track for givem layer/width)"
        let details["h2t"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["h2t"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["h2t"]["-include_power_for_free_tracks"] = ""
        let details["h2t"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["h2t"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["h2t"]["-ignore_boundary_guides"] = ""
        let details["h2t"]["-display_zone"] = "(THIS IS REPLACING -display_channel: will annotate channels/edges and track capacity based on list of layer/width comma seperated)"
        let details["h2t"]["-display_channel"] = "(THIS GOT RETIRED, use -display_zone: will annotate channels/edges and track capacity based on list of layer/width comma seperated)"
        let details["h2t"]["-clear_zone"] = "(remove zone annotations before re-displaying them)"
        let details["h2t"]["-just_clear_zone"] = "(remove all zone annotations)"
        let details["h2t"]["-custom_attr"] = "(list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )"
        let details["h2t"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["h2t"]["-log_track_number"] = "(reports track number that net was created on)"
        let details["h2t"]["-clear"] = "(remove any existing shapes prior creating them)"
        let details["h2t"]["-verbose"] = "(turn on printing of display_channel capacities)"
        let details["h2t"]["-remove"] = "(remove any existing shapes do not create (for clean-up))"
        let details["h2t"]["-preview"] = "(do not create shapes, just draw annotations of shapes)"
   let details["heal_bboxes_after_convert_from_polygon"]={}
   let details["hlb"]={}
   let details["hnb"]={}
   let details["ib"]={}
   let details["icc2_dump_icc_mcmm_config"]={}
        let details["icc2_dump_icc_mcmm_config"]["-outdir"] = "(output file name)"
        let details["icc2_dump_icc_mcmm_config"]["-regsub_from_to_file"] = ""
   let details["iccpp_adjust_bbox_to_min_length"]={}
   let details["iccpp_com_annotate_rule_based_track_info"]={}
        let details["iccpp_com_annotate_rule_based_track_info"]["-layer"] = "(layer name)"
        let details["iccpp_com_annotate_rule_based_track_info"]["-bbox"] = "(bounding box to annotabe tracks within)"
        let details["iccpp_com_annotate_rule_based_track_info"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_annotate_rule_based_track_info"]["-width"] = "(track width)"
        let details["iccpp_com_annotate_rule_based_track_info"]["-group"] = "(annotation group name)"
   let details["iccpp_com_display_tracks"]={}
   let details["iccpp_com_empty_tracks_in_bbox"]={}
   let details["iccpp_com_get_rule_based_track_capacity"]={}
        let details["iccpp_com_get_rule_based_track_capacity"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_capacity"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_capacity"]["-layer"] = "(layer name)"
   let details["iccpp_com_get_rule_based_track_info"]={}
        let details["iccpp_com_get_rule_based_track_info"]["-layer"] = "(layer name)"
   let details["iccpp_com_get_rule_based_track_info_flat"]={}
        let details["iccpp_com_get_rule_based_track_info_flat"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat"]["-text_annotation"] = "(do text annotation for tracks)"
   let details["iccpp_com_get_rule_based_track_info_flat_cntr"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_cntr"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr"]["-exclude_bbox"] = "(list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr"]["-text_annotation"] = "(do text annotation for tracks)"
   let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]["-exclude_bbox"] = "(list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"]["-skip_tracks"] = "(rule to skip tracks, e.g m9,10,3-7-9 meaning out of each 10 tracks skip 3d, 7th and 9th)"
   let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]["-exclude_bbox"] = "(list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"]["-skip_tracks"] = "(rule to skip tracks, e.g m9,10,3-7-9 meaning out of each 10 tracks skip 3d, 7th and 9th)"
   let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]["-exclude_bbox"] = "(list of bounding boxes 'xl_1:yl_1:xh_1:yh_1 xl_2:yl_2:xh_2:yh_2 ...' to be excluded from geting tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"]["-skip_tracks"] = "(rule to skip tracks, e.g m9,10,3-7-9 meaning out of each 10 tracks skip 3d, 7th and 9th)"
   let details["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"]["-text_annotation"] = "(do text annotation for tracks)"
   let details["iccpp_com_get_rule_based_track_info_flat_simple"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_simple"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_simple"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_simple"]["-layer"] = "(layer name)"
   let details["iccpp_com_get_rule_based_track_info_flat_width_h2t"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t"]["-text_annotation"] = "(do text annotation for tracks)"
   let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"]["-layer"] = "(layer name)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"]["-text_annotation"] = "(do text annotation for tracks)"
   let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"]={}
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"]["-cutline"] = "(cut-line to annotabe tracks crossing)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"]["-width"] = "(track width)"
        let details["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"]["-layer"] = "(layer name)"
   let details["iccpp_com_track_num_to_track_info"]={}
        let details["iccpp_com_track_num_to_track_info"]["-bbox"] = "(bounding box to get tracks within)"
        let details["iccpp_com_track_num_to_track_info"]["-width"] = "(track width)"
        let details["iccpp_com_track_num_to_track_info"]["-layer"] = "(layer name)"
        let details["iccpp_com_track_num_to_track_info"]["-track_num"] = "(LIST of track numbers)"
        let details["iccpp_com_track_num_to_track_info"]["-display"] = "(annotate the track(s))"
        let details["iccpp_com_track_num_to_track_info"]["-clear"] = "(clear before annotating the track)"
        let details["iccpp_com_track_num_to_track_info"]["-centerline"] = "(display track as centerline)"
        let details["iccpp_com_track_num_to_track_info"]["-group"] = "(annotation group name)"
   let details["iccpp_com_xy_to_track_info"]={}
        let details["iccpp_com_xy_to_track_info"]["-layer"] = "(layer name)"
        let details["iccpp_com_xy_to_track_info"]["-width"] = "(track width)"
        let details["iccpp_com_xy_to_track_info"]["-point"] = "(LIST of cordinates of point(s) on canvas X Y)"
        let details["iccpp_com_xy_to_track_info"]["-nets"] = "(LIST of nets associated with XY points passes thru -point option)"
        let details["iccpp_com_xy_to_track_info"]["-bbox"] = "(bounding box to annotabe tracks within)"
        let details["iccpp_com_xy_to_track_info"]["-display"] = "(annotate the track)"
        let details["iccpp_com_xy_to_track_info"]["-clear"] = "(clear before annotating the track)"
        let details["iccpp_com_xy_to_track_info"]["-centerline"] = "(display track as centerline)"
        let details["iccpp_com_xy_to_track_info"]["-snap_to_dir"] = "(direction to snap coord to track, values are:  ld == snap to left/down or ru == snap to right/up)"
        let details["iccpp_com_xy_to_track_info"]["-group"] = "(annotation group name)"
        let details["iccpp_com_xy_to_track_info"]["-dont_init_spreading"] = "(intialize track spreading cache outside of this call)"
   let details["iccpp_cr_create_term_from_bbox"]={}
        let details["iccpp_cr_create_term_from_bbox"]["-layer"] = "(layer name)"
        let details["iccpp_cr_create_term_from_bbox"]["-term_name"] = "(name of terminal to create)"
        let details["iccpp_cr_create_term_from_bbox"]["-port_name"] = "(name of port to create)"
        let details["iccpp_cr_create_term_from_bbox"]["-track"] = "(track)"
        let details["iccpp_cr_create_term_from_bbox"]["-area_bbox"] = "(bounding box to create term within)"
        let details["iccpp_cr_create_term_from_bbox"]["-net_bbox"] = "(already calculated net_bbox so use it)"
        let details["iccpp_cr_create_term_from_bbox"]["-delete"] = "(clear before annotating the track)"
        let details["iccpp_cr_create_term_from_bbox"]["-group"] = "(group name for wire)"
        let details["iccpp_cr_create_term_from_bbox"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_term_from_bbox"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_term_from_bbox"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_term_from_bbox"]["-associate_shield_nets"] = ""
        let details["iccpp_cr_create_term_from_bbox"]["-preview"] = "(do not create shapes, just annotate)"
        let details["iccpp_cr_create_term_from_bbox"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_term_from_bbox"]["-add_metal"] = "(add metal underneath terminal)"
   let details["iccpp_cr_create_trunk_from_here_to_there"]={}
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-nets"] = "(list of nets to create trunk(s) for)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-nets_order"] = "(values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-zone"] = "(THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', zone is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-channel"] = "(THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-bloat_zone"] = "(THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-bloat_channel"] = "(THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-topology"] = "(topology description as a list of legs that reference trunking channels and their layers/width/track numbers or exisiting trunks)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-skip_tracks"] = "(rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-avoid_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-avoid_layers"] = "(list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-trim_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-cutout_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-cutout_bloat"] = "(bloat cutout area in DR units, + to inflate, - to deflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-do_not_cutout_nets"] = "(list of nets to be ignored while performing cutout)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-stepping"] = "(list of steppings per topology leg)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-swizzle"] = "(Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass \"swizzle_layer,location\")"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-create_port"] = "(create port(s) from trunk(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-use_pin"] = "(Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-edge_overhang"] = "(overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-edge_pullback"] = "(pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-edge_pullback_custom"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-cutout_pullback"] = "(the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-shield_pullback"] = "(pullback shield trunk from edge half DR (per layer))"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-wrong_way_metal"] = "(allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-snap_to_track"] = "(if topology is specified using micron value, snap coord to track for givem layer/width)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-reuse_zone_tracks"] = "(THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-clean_zone_tracks"] = "(THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-clean_named_zone_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-reuse_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-clean_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-include_power_for_free_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-ignore_boundary_guides"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-custom_attr"] = "(list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-log_track_number"] = "(reports track number that net was created on)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-clear"] = "(remove any existing shapes/annotations prior to creating them)"
        let details["iccpp_cr_create_trunk_from_here_to_there"]["-preview"] = "(do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]={}
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-nets"] = "(list of nets to create trunk(s) for)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-nets_order"] = "(values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-zone"] = "(THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-channel"] = "(THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-bloat_zone"] = "(THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-bloat_channel"] = "(THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-topology"] = "(topology description as a list of legs that reference trunking zones and their layers/width/track numbers or exisiting trunks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-skip_tracks"] = "(rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-avoid_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-avoid_layers"] = "(list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-trim_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-cutout_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-cutout_bloat"] = "(bloat cutout area in DR units, + to inflate, - to deflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-do_not_cutout_nets"] = "(list of nets to be ignored while performing cutout)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-swizzle"] = "(Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass \"swizzle_layer,location\")"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-stepping"] = "(list of steppings per topology leg)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-create_port"] = "(create port(s) from trunk(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-use_pin"] = "(Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-edge_overhang"] = "(overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-edge_pullback"] = "(pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-edge_pullback_custom"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-cutout_pullback"] = "(the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-shield_pullback"] = "(pullback shield trunk from edge half DR (per layer))"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-wrong_way_metal"] = "(allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-snap_to_track"] = "(if topology is specified using micron value, snap coord to track for givem layer/width)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-reuse_zone_tracks"] = "(THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-clean_zone_tracks"] = "(THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-clean_named_zone_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-reuse_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-clean_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-include_power_for_free_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-ignore_boundary_guides"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-custom_attr"] = "(list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-log_track_number"] = "(reports track number that net was created on)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-clear"] = "(remove any existing shapes/annotations prior to creating them)"
        let details["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"]["-preview"] = "(do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]={}
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-nets"] = "(list of nets to create trunk(s) for)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-nets_order"] = "(values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-zone"] = "(THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-channel"] = "(THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-bloat_zone"] = "(THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-bloat_channel"] = "(THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-topology"] = "(topology description as a list of legs that reference trunking zones and their layers/width/track numbers or exisiting trunks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-skip_tracks"] = "(rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-avoid_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-avoid_layers"] = "(list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-swizzle"] = "(Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass \"swizzle_layer,location\")"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-stepping"] = "(list of steppings per topology leg)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-create_port"] = "(create port(s) from trunk(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-use_pin"] = "(Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-edge_overhang"] = "(overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-edge_pullback"] = "(pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-edge_pullback_custom"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-cutout_pullback"] = "(the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-shield_pullback"] = "(pullback shield trunk from edge half DR (per layer))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-wrong_way_metal"] = "(allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-snap_to_track"] = "(if topology is specified using micron value, snap coord to track for givem layer/width)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-reuse_zone_tracks"] = "(THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-clean_zone_tracks"] = "(THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-clean_named_zone_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-reuse_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-clean_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-include_power_for_free_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-ignore_boundary_guides"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-custom_attr"] = "(list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-log_track_number"] = "(reports track number that net was created on)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-clear"] = "(remove any existing shapes/annotations prior to creating them)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"]["-preview"] = "(do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]={}
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-nets"] = "(list of nets to create trunk(s) for)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-nets_order"] = "(values 'interleave|reverse|expand,bit|etc.' interleave nets, e.g. -nets 'a[0:7] b[0:7]' will result in 'a[0] b[0] ... [a[7] b[7]' )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-zone"] = "(THIS IS REPLACING -channel: list of named trunking zones, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-channel"] = "(THIS GOT RETIRED, use -zone: list of named trunking channels, e.g. 'ch1:my_cell_1 ch2:slice/right_cell', channel is absolute bbox (or cell_name) or  net(s) bbox))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-bloat_zone"] = "(THIS IS REPLACING -bloat_channel: inflates bbox of net(s) member of  the channel: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-bloat_channel"] = "(THIS GOT RETIRED, use -bloat_zone: inflates bbox of net(s) member of  the zone: 'ch,10.06,-2.6' bloats ch1 bbox 10.06 micron in X direction and -2.6 micron in Y direction)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-topology"] = "(topology description as a list of legs that reference trunking channels and their layers/width/track numbers or exisiting trunks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-skip_tracks"] = "(rule to skip tracks, e.g 'm8,9,5 m9,10,3-7-9' meaning out of each 10 tracks for m9 skip 3d, 7th and 9th)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-avoid_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to avoid, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any track within these bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-avoid_layers"] = "(list of ,-separated layers per each element of -avoid_area list. Any track for these layers within -avoid_area bboxes will be skipped )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-trim_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to trim trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk outside this area will be trimmed with 1/2 DR deflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-cutout_area"] = "(list cells/absolte bbox-es/relative (to cells) bboxes to be used to cutout trunks, 'mdf* 18694.8000:0.0000:19595.5200:1184.8320 sprtile33,0:0:200:200 sprtile43,0:0:200:200' any trunk inside this area will be cutout with 1/2 DR inflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-cutout_bloat"] = "(bloat cutout area in DR units, + to inflate, - to deflate)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-do_not_cutout_nets"] = "(list of nets to be ignored while performing cutout)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-swizzle"] = "(Takes pairs of nets and does a one track jog/swizzle/twisted pair route, if list of nets is passed, will do every two one after another. must pass \"swizzle_layer,location\")"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-stepping"] = "(list of steppings per topology leg)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-create_port"] = "(create port(s) from trunk(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-use_pin"] = "(Use edge pin(s) for specified chnnels to override layer/width/location (track|micron) for edge topology definition(s))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-edge_overhang"] = "(overhangs an edge. used to creates pins on edges after pushing trunks down the hierary, can't be use with -edge_pullback and/or -edge_pullback_custom)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-edge_pullback"] = "(pullback from edge half DR (per layer), can't be use with -edge_pullback_custom and/or -edge_overhang)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-edge_pullback_custom"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-cutout_pullback"] = "(the list of 'layer,pullback' e.g. 'm10,100 m9,80 m8,-18'. pullback from cutout area as specified)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-shield_pullback"] = "(pullback shield trunk from edge half DR (per layer))"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-wrong_way_metal"] = "(allow wrong way metal, value is list of layer names for which wrong direction shapes are generated)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-snap_to_track"] = "(if topology is specified using micron value, snap coord to track for givem layer/width)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-do_not_check_shorts"] = "(do not check if track has obstructions)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-reuse_zone_tracks"] = "(THIS IS REPLACING -reuse_channel_tracks: do not fetch tracks for channel, re-use from previous call)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-clean_zone_tracks"] = "(THIS IS REPLACING -clean_channel_tracks: remove tracks cache, all consecutive call will have to fetch tracks for channel)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-clean_named_zone_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-reuse_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-clean_channel_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-find_free_tracks"] = "(finds free (un-obstructed) tracks to trunk on)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-include_power_for_free_tracks"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-v_track_freedom"] = "(expands the X-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-h_track_freedom"] = "(expands the Y-direction search distance outside net bbox in microns to find free tracks)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-ignore_boundary_guides"] = ""
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-custom_attr"] = "(list of shape attributes 'attr_name attr_val'| 'attr_name' assumed bool==1, that will be added to shapes of trunks, )"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-custom_tag"] = "(an internal tag that will be added to a trunk, DO NOT use it in user scripts)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-log_track_number"] = "(reports track number that net was created on)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-clear"] = "(remove any existing shapes/annotations prior to creating them)"
        let details["iccpp_cr_create_trunk_from_here_to_there_with_shielding"]["-preview"] = "(do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunks_from_pin_to_pin"]={}
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-nets"] = "(nets to complete)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-extensions"] = "(list of how far to extend pins in microns, net bbox fraction, lego, duplo.  list coresponds with list of layers -1)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-start_from"] = "(which pin to start from, either Low pin to High pin, LoHi (lowest y will be first leg) or High pin to Low pin, HiLo)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-layer_legs"] = "(layers and widths for which turns will be created on, e.g. 'm9:1.4,2.8 m8:1.0'. first layer/width will be drawn first, second second etc.)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-dir_follows_sign"] = "(direction of the leg travel defined by the sign of the leg, not net bbox. i.e. 0.25 goes to the right/up, -0.25 goes to left/down)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-preview"] = "(Do not create shapes, just annotate)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunks_from_pin_to_pin"]["-shield_type"] = "(type of shielding to preform)"
   let details["iccpp_cr_create_trunks_from_pins_to_point"]={}
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-nets"] = "(nets to complete)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-width"] = "(width of the reack for layer name for pin trunks to be on)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-min_layer"] = "(layer name)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-pin_layer"] = "(list of layer name(s) that pin(s) should be on to extend off of)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-of_cells"] = "(instances of macros and the side from which to extend pins)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-shield"] = "(shield net)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-snap_to_track"] = "(snap trunk centerline to track, if not specified trunk will be extended from pin bbox exactly)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-create_terminals"] = "(create terminals on boundary if extention distance is to_boundary)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-push_pins"] = "(create pins where iccpp_trunks cross cells)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-extention_distance"] = "(how far in microns to extend pins or to_cell:cell_name)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-extention_direction"] = "(direction to extend pins, either Left_or_Bottom|lb or Right_or_Top|tr)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_trunks_from_pins_to_point"]["-preview"] = "(Do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunks_from_pins_to_trunk"]={}
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-min_layer"] = "(layer name)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-nets"] = "(nets to complete)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-width"] = "(width of the reack for layer name for pin trunks to be on)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-shield"] = "(shield net)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-pin_direction"] = "(use only pins of specified direction)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-cluster_proximity"] = "(micron value used to cluster receiver pins together, 0 means use each pin by itself)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-of_cells"] = "(instances of macros and the side from which to extend pins)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-offset_cell_pin"] = "(instances of macros and the side and the offset distance to modify pins bbox cella:b:-2)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-track_offset"] = "(offset (in track numbers) for a resulting trunk(s) to be placed on)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-use_existing_shape"] = "(format: layer[,min_length] (e.g m5,80) extend to existing net shape on layer 'layer' that is optionaly longer then 'min_length' if no trunks are found)"
        let details["iccpp_cr_create_trunks_from_pins_to_trunk"]["-preview"] = "(Do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunks_from_ports"]={}
        let details["iccpp_cr_create_trunks_from_ports"]["-nets"] = "(nets to complete)"
        let details["iccpp_cr_create_trunks_from_ports"]["-layer"] = "(use this layer not the port layer)"
        let details["iccpp_cr_create_trunks_from_ports"]["-width"] = "(width of tracks to use)"
        let details["iccpp_cr_create_trunks_from_ports"]["-min_layer"] = "(minimum layer for terminals to be considered (used to extend trunks from))"
        let details["iccpp_cr_create_trunks_from_ports"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_trunks_from_ports"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunks_from_ports"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunks_from_ports"]["-backoff_from_ports"] = "(amount to offset from port)"
        let details["iccpp_cr_create_trunks_from_ports"]["-extention_distance"] = "(how far in microns to extend from ports)"
        let details["iccpp_cr_create_trunks_from_ports"]["-extention_direction"] = ""
        let details["iccpp_cr_create_trunks_from_ports"]["-use_port_width"] = "(use port width, do not snap to track (assuming ports are on correct tracks))"
        let details["iccpp_cr_create_trunks_from_ports"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_trunks_from_ports"]["-preview"] = "(Do not create shapes, just annotate)"
   let details["iccpp_cr_create_trunks_from_ports_to_trunk"]={}
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-nets"] = "(nets to complete)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-width"] = "(width of the reack for layer name for pin trunks to be on)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-min_layer"] = "(minimum layer for terminals to be considered (used to extend trunks from))"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-backoff_from_ports"] = "(amount to offset from port)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_trunks_from_ports_to_trunk"]["-preview"] = "(Do not create shapes, just annotate)"
   let details["iccpp_cr_create_wire_from_net_bbox"]={}
        let details["iccpp_cr_create_wire_from_net_bbox"]["-layer"] = "(layer name)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-net_name"] = "(net to create wire for)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-track"] = "(track)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-area_bbox"] = "(bounding box to create trunk within)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-net_bbox"] = "(already calculated net_bbox so use it)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-delete"] = "(clear before annotating the track)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-group"] = "(group name for wire)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-associate_shield_nets"] = ""
        let details["iccpp_cr_create_wire_from_net_bbox"]["-preview"] = "(do not create shapes, just annotate)"
        let details["iccpp_cr_create_wire_from_net_bbox"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
   let details["iccpp_cr_create_wire_from_net_bbox_h2t"]={}
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-layer"] = "(layer name)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-width"] = "(wire width)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-net_name"] = "(net to create wire for)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-track"] = "(track)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-area_bbox"] = "(bounding box to create trunk within)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-net_bbox"] = "(already calculated net_bbox so use it)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-delete"] = "(clear before annotating the track)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-group"] = "(group name for wire)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-associate_shield_nets"] = ""
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-preview"] = "(do not create shapes, just annotate)"
        let details["iccpp_cr_create_wire_from_net_bbox_h2t"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
   let details["iccpp_cr_create_wire_from_net_bbox_with_track"]={}
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-layer"] = "(layer name)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-net_name"] = "(net to create wire for)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-track"] = "(track)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-area_bbox"] = "(bounding box to create trunk within)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-net_bbox"] = "(already calculated net_bbox so use it)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-delete"] = "(clear before annotating the track)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-group"] = "(group name for wire)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-shield"] = "(shield)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-associate_shield_nets"] = ""
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-do_not_check_shorts"] = "(do not check if obstructions exist)"
        let details["iccpp_cr_create_wire_from_net_bbox_with_track"]["-preview"] = "(do not create shapes, just annotate)"
   let details["iccpp_cr_place_flops"]={}
        let details["iccpp_cr_place_flops"]["-nets"] = "(nets to drop repeaters)"
        let details["iccpp_cr_place_flops"]["-repeater_name"] = "(name of repeater cell to be incerted)"
        let details["iccpp_cr_place_flops"]["-layer"] = "(layer of trunk to be repeated)"
        let details["iccpp_cr_place_flops"]["-xy"] = "(exact location {X Y} to drop repeater)"
        let details["iccpp_cr_place_flops"]["-repeater_number"] = "(how many repeaters to place on path)"
        let details["iccpp_cr_place_flops"]["-repeater_distance"] = "(the distance to insert repeaters: insert a repeater every micron value specifiedhow much to disect length of layer to place repeaters)"
        let details["iccpp_cr_place_flops"]["-layer_weight"] = "(when -repeater_distance is specified define weight per layer to be applied to the distance value)"
   let details["iccpp_cr_remove_user_shape_antennas"]={}
        let details["iccpp_cr_remove_user_shape_antennas"]["-nets"] = "(nets to trim)"
   let details["iccpp_cr_remove_vias_for_preroutes"]={}
        let details["iccpp_cr_remove_vias_for_preroutes"]["-layer"] = "(layer name to nuke vias from)"
        let details["iccpp_cr_remove_vias_for_preroutes"]["-nets"] = "(nets to nuke vias on)"
        let details["iccpp_cr_remove_vias_for_preroutes"]["-tag"] = "(group name for vias, default is iccpp_preroute_vias)"
   let details["iccpp_cr_track_shared_trunks"]={}
        let details["iccpp_cr_track_shared_trunks"]["-nets"] = "(nets to track share)"
        let details["iccpp_cr_track_shared_trunks"]["-shield"] = "(shield net)"
        let details["iccpp_cr_track_shared_trunks"]["-shield_name"] = "(shield name)"
        let details["iccpp_cr_track_shared_trunks"]["-shield_type"] = "(type of shielding to preform)"
        let details["iccpp_cr_track_shared_trunks"]["-track_num"] = "(track number to put trunks on)"
        let details["iccpp_cr_track_shared_trunks"]["-layer"] = "(layer name for pin trunks to be on)"
        let details["iccpp_cr_track_shared_trunks"]["-width"] = "(width of the track for layer name for pin trunks to be on)"
        let details["iccpp_cr_track_shared_trunks"]["-to_trunk"] = "(specifies which net segments need to be connected to an existing trunk)"
        let details["iccpp_cr_track_shared_trunks"]["-ref_obj"] = "(pin | port to be used to calculate track number, if track num is supplied, ref_obj is ignored)"
        let details["iccpp_cr_track_shared_trunks"]["-ref_net"] = "(the net to take the ref object from)"
        let details["iccpp_cr_track_shared_trunks"]["-use_ref_obj_layer"] = "(take layer/width from the ref object, will overrride layer/width passed)"
        let details["iccpp_cr_track_shared_trunks"]["-do_not_check_shorts"] = "(do not check if obstrutions exist)"
        let details["iccpp_cr_track_shared_trunks"]["-complete_routing"] = "(finish routing of trunks with constrained zroute)"
        let details["iccpp_cr_track_shared_trunks"]["-preview"] = "(Do not create shapes, just annotate)"
   let details["iccpp_cr_trim_antennas"]={}
        let details["iccpp_cr_trim_antennas"]["-nets"] = "(nets to trim on)"
        let details["iccpp_cr_trim_antennas"]["-user_attr"] = "(name of user attribute)"
        let details["iccpp_cr_trim_antennas"]["-interactive"] = "(runs in interactive mode only due to issue with error message in route_group cmd)"
   let details["iccpp_cr_zroute_in_window"]={}
   let details["iccpp_create_ladders"]={}
   let details["iccpp_create_straps_snps"]={}
   let details["iccpp_create_zone_from_start_end_zones"]={}
   let details["iccpp_get_bbox_from_zone_type"]={}
   let details["iccpp_get_capacity_snps"]={}
   let details["iccpp_get_max_layer"]={}
   let details["iccpp_get_max_layer_from_layers_width"]={}
   let details["iccpp_get_pins_of_direction_of_cell"]={}
   let details["iccpp_ladders_get_cell_capacities"]={}
   let details["iccpp_launch_gui"]={}
   let details["iccpp_lw_2_l"]={}
   let details["idb"]={}
   let details["info_var"]={}
        let details["info_var"]["-type"] = "(Returns type of the parameter; does not work with -property)"
        let details["info_var"]["-is_array"] = "(Returns 1 if the variables is an array)"
        let details["info_var"]["-property"] = "(Returns user property for parameter)"
        let details["info_var"]["-defined"] = "(Returns 1 if the value was set)"
        let details["info_var"]["-history"] = "(Returns the history of parameter; )"
   let details["initDuetEnvVars"]={}
   let details["insert_clock_boundary_buffer"]={}
   let details["interleave_bus"]={}
   let details["is_abutting"]={}
   let details["is_false"]={}
   let details["is_fully_abutted_cell"]={}
   let details["is_odd"]={}
   let details["is_true"]={}
   let details["je_get_boundary_edge_coord"]={}
   let details["lappend_var"]={}
   let details["ldr_order_list"]={}
   let details["legox"]={}
   let details["legoy"]={}
   let details["libsetup_build_hip_lib_glob"]={}
   let details["libsetup_build_lib_glob"]={}
   let details["libsetup_find_relevant_hip_libs"]={}
   let details["libsetup_max_to_min_lib_regex"]={}
   let details["libsetup_wildcard_hip_voltage"]={}
   let details["libsetup_wildcard_voltage"]={}
   let details["list_of_configulate_gvars"]={}
   let details["listcomp"]={}
   let details["lminus"]={}
        let details["lminus"]["-exact"] = "(exact match)"
   let details["lminus_var"]={}
   let details["loadTpr"]={}
   let details["load_duet"]={}
   let details["load_duetX"]={}
   let details["load_duet_gui_pkg"]={}
   let details["load_duet_splash"]={}
   let details["load_duet_tcl"]={}
   let details["load_duettclreadline_package"]={}
   let details["load_ubm"]={}
   let details["loadvfs"]={}
   let details["lremove_var"]={}
   let details["ls"]={}
   let details["mO"]={}
   let details["match_net_delay_custom"]={}
   let details["mcmm_set_link_target_lib"]={}
   let details["mkdir_fresh"]={}
   let details["module_list"]={}
   let details["module_list_0"]={}
   let details["my1272fill"]={}
   let details["myevalcmd"]={}
   let details["myevalmsg"]={}
   let details["new_win"]={}
   let details["nypd_toolbox"]={}
   let details["orderBBOX"]={}
   let details["origin_to_lego"]={}
   let details["pa_create_parade_cmd_file"]={}
   let details["parseOptions"]={}
   let details["patch_gui_files"]={}
   let details["pdintent2spec"]={}
        let details["pdintent2spec"]["-pd_intent_file_path"] = ""
        let details["pdintent2spec"]["-blocks"] = "(User list of blocks to perform pdintent diff)"
   let details["pin_order"]={}
   let details["pin_order_hor"]={}
   let details["pkg_mkIndex"]={}
   let details["pp_gcbb"]={}
   let details["pre_stamp_stepdown_clock"]={}
   let details["print_debug"]={}
   let details["print_error"]={}
   let details["print_fatal"]={}
   let details["print_info"]={}
   let details["print_log"]={}
   let details["print_log_raw"]={}
   let details["print_message_info"]={}
        let details["print_message_info"]["-ids"] = "(List of message ids to report)"
        let details["print_message_info"]["-summary"] = "(Summarize diagnostics)"
   let details["print_time"]={}
        let details["print_time"]["-tag"] = "(Start/finish type: "
        let details["print_time"]["-stage"] = "(Print header type time stamp for stage)"
        let details["print_time"]["-msg"] = "(User message)"
   let details["print_vars"]={}
        let details["print_vars"]["-regexp"] = "(Regular expression filter)"
        let details["print_vars"]["-value"] = "(Print value too)"
        let details["print_vars"]["-print"] = "(Print the result)"
   let details["print_warning"]={}
   let details["printenv"]={}
   let details["proc_args"]={}
   let details["proc_body"]={}
   let details["process_ptlr_collaterals"]={}
   let details["prune_list"]={}
   let details["pv_import_library_attributes"]={}
   let details["pwrlite_estimate_power"]={}
   let details["pwrlite_gen_saif_all_units"]={}
        let details["pwrlite_gen_saif_all_units"]["-outdir"] = "(required arg; )"
        let details["pwrlite_gen_saif_all_units"]["-verilog"] = "(optional arg; default: write out a netlist; verilog pointer <file> )"
        let details["pwrlite_gen_saif_all_units"]["-delay_model"] = "(optional arg; default: zero; delay model to be used for gate level sim <string>)"
        let details["pwrlite_gen_saif_all_units"]["-testname"] = "(optional arg; test name to include in testlist )"
   let details["pwrlite_gen_unit_testlists"]={}
        let details["pwrlite_gen_unit_testlists"]["-testlist"] = "(required arg; )"
        let details["pwrlite_gen_unit_testlists"]["-outdir"] = "(optional arg; )"
        let details["pwrlite_gen_unit_testlists"]["-testname"] = "(optional arg; test name to include in testlist )"
   let details["pwrlite_generate_netattr"]={}
   let details["pwrlite_generate_saif"]={}
   let details["pwrlite_get_active_power"]={}
   let details["pwrlite_get_clock_power"]={}
   let details["pwrlite_open_file"]={}
   let details["pwrlite_process_testlist_file"]={}
   let details["pwrlite_rdt_process_args"]={}
   let details["pwrlite_report_power"]={}
   let details["pwrlite_saif_est_power"]={}
   let details["quit!"]={}
   let details["rb"]={}
   let details["rdt_add_additional_link_libs"]={}
   let details["rdt_add_env_var_to_result"]={}
   let details["rdt_add_post_stage"]={}
   let details["rdt_add_post_step"]={}
   let details["rdt_add_pre_stage"]={}
   let details["rdt_add_pre_step"]={}
   let details["rdt_add_priority_path"]={}
   let details["rdt_add_priority_path_cleanly"]={}
   let details["rdt_add_stage"]={}
   let details["rdt_add_step"]={}
   let details["rdt_all_steps_done"]={}
   let details["rdt_apr_generate_pv_cmd_file"]={}
   let details["rdt_call_configulate_local"]={}
        let details["rdt_call_configulate_local"]["-cmdline"] = "(Cmd to supply to configulate_local)"
        let details["rdt_call_configulate_local"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_call_configulate_local"]["-xml"] = "(Path o the xml file)"
   let details["rdt_call_polaris"]={}
   let details["rdt_check_stop_after"]={}
   let details["rdt_constrain_visa_logic"]={}
        let details["rdt_constrain_visa_logic"]["-scenario"] = "(Running for for specific scenario)"
   let details["rdt_continue_on_error"]={}
   let details["rdt_convert_seconds"]={}
   let details["rdt_convert_to_seconds"]={}
   let details["rdt_convert_units"]={}
        let details["rdt_convert_units"]["-value"] = "(Value to be converted)"
        let details["rdt_convert_units"]["-from"] = "(current unit: "
        let details["rdt_convert_units"]["-to"] = "(units to be converted to: "
   let details["rdt_copy_collateral"]={}
        let details["rdt_copy_collateral"]["-stage"] = "(Stage to copy)"
        let details["rdt_copy_collateral"]["-flow"] = "(Flow to copy)"
        let details["rdt_copy_collateral"]["-output_dir"] = "(outputs directory)"
        let details["rdt_copy_collateral"]["-file_type"] = "(file type (Eg spef,vg,upf)"
        let details["rdt_copy_collateral"]["-dssc_ver"] = "(MW Ver in DSSC for closure)"
   let details["rdt_custom_procs"]={}
   let details["rdt_done"]={}
        let details["rdt_done"]["-stage"] = "(stage name, defaults to global var G_CURRENT_STAGE)"
   let details["rdt_dont_use"]={}
   let details["rdt_dump_xml_files"]={}
   let details["rdt_error_handler"]={}
   let details["rdt_fail_on_error"]={}
   let details["rdt_fix_min_lib_nom_process"]={}
   let details["rdt_fix_min_libs_nom_process"]={}
   let details["rdt_format_configulate_lib_result"]={}
   let details["rdt_gen_parallel_rpts"]={}
        let details["rdt_gen_parallel_rpts"]["-stage"] = "(stage name)"
        let details["rdt_gen_parallel_rpts"]["-run_dir"] = "(stage name)"
   let details["rdt_gen_visa_hier_report"]={}
        let details["rdt_gen_visa_hier_report"]["-stage"] = "(Stage Tag)"
   let details["rdt_generate_rdt_log"]={}
   let details["rdt_get_all_corners"]={}
        let details["rdt_get_all_corners"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_all_corners"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
   let details["rdt_get_all_modes"]={}
        let details["rdt_get_all_modes"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_all_modes"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
   let details["rdt_get_all_scenarios"]={}
        let details["rdt_get_all_scenarios"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_all_scenarios"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
   let details["rdt_get_analysis_type_from_corner"]={}
   let details["rdt_get_block_data"]={}
        let details["rdt_get_block_data"]["-block_name"] = "(Blocks to get data for.Eg func_max,max. Default to all. Can give comma separated list)"
        let details["rdt_get_block_data"]["-keys"] = "(Keys to get block data for.Eg stdlib_type. Default to all. Can give comma separated list)"
        let details["rdt_get_block_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_block_data"]["-block"] = "(Block to search for block_data files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_block_data"]["-set_gvars"] = "(Set G_BLOCK_DETAILS for RDT instead of returning data)"
        let details["rdt_get_block_data"]["-debug"] = "(Print out the variables getting set to help debug)"
        let details["rdt_get_block_data"]["-noheaders"] = "(Print out/return only the value without the block_data+key information)"
   let details["rdt_get_block_list"]={}
        let details["rdt_get_block_list"]["-fval"] = "(Keys to get block data for.Eg stdlib_type. Default to all. Can give comma separated list)"
        let details["rdt_get_block_list"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_block_list"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
   let details["rdt_get_corner_default_voltage"]={}
   let details["rdt_get_corner_of_scenario"]={}
   let details["rdt_get_current_corner"]={}
   let details["rdt_get_current_mode"]={}
   let details["rdt_get_current_scenario"]={}
   let details["rdt_get_default_scenario"]={}
   let details["rdt_get_derate_data"]={}
        let details["rdt_get_derate_data"]["-model_type"] = "(Filter list of derate files by model_type)"
        let details["rdt_get_derate_data"]["-view"] = "(Filter list of derate files by view)"
        let details["rdt_get_derate_data"]["-variant"] = "(Filter list of derate files by variant)"
        let details["rdt_get_derate_data"]["-corner"] = "(Filter list of derate files by corner)"
        let details["rdt_get_derate_data"]["-grid_size"] = "(Filter list of derate files by grid size)"
        let details["rdt_get_derate_data"]["-analysis_type"] = ""
        let details["rdt_get_derate_data"]["-derate"] = "(Filter list of derate files by derate)"
        let details["rdt_get_derate_data"]["-alt"] = "(Filter list of derate files by alt)"
        let details["rdt_get_derate_data"]["-flow"] = "(Filter list of derate files by flow filter)"
        let details["rdt_get_derate_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_derate_data"]["-block"] = "(Default block is G_DESIGN if block doesnt exist)"
   let details["rdt_get_dont_use_list"]={}
        let details["rdt_get_dont_use_list"]["-groupfile"] = "()"
   let details["rdt_get_dont_use_reasons"]={}
        let details["rdt_get_dont_use_reasons"]["-groupfile"] = "()"
   let details["rdt_get_file_history"]={}
   let details["rdt_get_flow_status"]={}
   let details["rdt_get_g_corner_details_value"]={}
   let details["rdt_get_global_voltages"]={}
        let details["rdt_get_global_voltages"]["-corner"] = "(Corners search for rail information from for.Eg vcclow,vcchigh,nominal. Default to all. Can give comma separated list)"
   let details["rdt_get_lib_attribute_data"]={}
        let details["rdt_get_lib_attribute_data"]["-model_type"] = "(Filter list of library attribute files by model_type)"
        let details["rdt_get_lib_attribute_data"]["-view"] = "(Filter list of library attribute files by view)"
        let details["rdt_get_lib_attribute_data"]["-variant"] = "(Filter list of library attribute files by variant)"
        let details["rdt_get_lib_attribute_data"]["-alt"] = "(Filter list of library attribute files by alt)"
        let details["rdt_get_lib_attribute_data"]["-flow"] = "(Filter list of library attribute files by derate)"
        let details["rdt_get_lib_attribute_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_lib_attribute_data"]["-block"] = "(Default block is G_DESIGN if block doesnt exist)"
   let details["rdt_get_lib_basename"]={}
   let details["rdt_get_lib_data"]={}
        let details["rdt_get_lib_data"]["-model_type"] = "(Filter list of libraries by model_type)"
        let details["rdt_get_lib_data"]["-view"] = "(Filter list of libraries by view)"
        let details["rdt_get_lib_data"]["-cell_type"] = "(Filter list of libraries by cell_type)"
        let details["rdt_get_lib_data"]["-variant"] = "(Filter list of libraries by variants)"
        let details["rdt_get_lib_data"]["-alt_type"] = "(Filter list on alternate libs. Defaults to alt type default)"
        let details["rdt_get_lib_data"]["-corner"] = "(Corner to get libs for. Based on pvconditions.xml file)"
        let details["rdt_get_lib_data"]["-flow"] = "(Flow to get libs for. Based on flow_settings.xml file)"
        let details["rdt_get_lib_data"]["-block"] = "(Default block is G_DESIGN if block doesnt exist)"
        let details["rdt_get_lib_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_lib_data"]["-file"] = "(Filter list of libraries by file name)"
        let details["rdt_get_lib_data"]["-lib"] = "(Filter list of libraries based on lib_type)"
        let details["rdt_get_lib_data"]["-headers"] = "(Control the fields return for libraries, after applying filters)"
   let details["rdt_get_lib_settings_data"]={}
        let details["rdt_get_lib_settings_data"]["-flow"] = "(Set global variables for library setup based on flow)"
        let details["rdt_get_lib_settings_data"]["-settings_label"] = ""
        let details["rdt_get_lib_settings_data"]["-block"] = "(Default block is G_DESIGN if block doesnt exist)"
        let details["rdt_get_lib_settings_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_lib_settings_data"]["-headers"] = "(Setting to return a value for. For eg view. Required)"
        let details["rdt_get_lib_settings_data"]["-model_type"] = "(Set global variables for library setup based on model_type)"
        let details["rdt_get_lib_settings_data"]["-view"] = "(Set global variables for library setup based on view)"
        let details["rdt_get_lib_settings_data"]["-alt"] = "(Set global variables for library setup based on alt)"
        let details["rdt_get_lib_settings_data"]["-scenario"] = "(Set global variables for library setup based on scenario)"
   let details["rdt_get_lib_ver_data"]={}
        let details["rdt_get_lib_ver_data"]["-manifest"] = "(Instead of providing path to the library, provide path to the manifest file instead.)"
        let details["rdt_get_lib_ver_data"]["-library"] = "(Library for which to get version information about. Default is all.)"
        let details["rdt_get_lib_ver_data"]["-print_libname"] = "(Append the lib_name for each library)"
        let details["rdt_get_lib_ver_data"]["-section"] = "(Section (subcategory) of each library to get version information about. Examples are path, attribute and derate. Default is all.)"
        let details["rdt_get_lib_ver_data"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block.)"
        let details["rdt_get_lib_ver_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required.)"
   let details["rdt_get_library_list"]={}
        let details["rdt_get_library_list"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block.)"
        let details["rdt_get_library_list"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required.)"
   let details["rdt_get_license"]={}
        let details["rdt_get_license"]["-wait"] = "(Time to wait between each query (default 60 seconds))"
        let details["rdt_get_license"]["-max_attempts"] = ""
   let details["rdt_get_logfile_length"]={}
   let details["rdt_get_logscan_pointer"]={}
   let details["rdt_get_min_max_corners_of"]={}
   let details["rdt_get_mode_of_scenario"]={}
   let details["rdt_get_parallel_rpts_done"]={}
   let details["rdt_get_parallel_rpts_pending"]={}
   let details["rdt_get_parallel_rpts_running"]={}
   let details["rdt_get_pdk_data"]={}
        let details["rdt_get_pdk_data"]["-fval"] = "(Filters to select the file by. Eg -fval view=tf,model_type=icc)"
        let details["rdt_get_pdk_data"]["-separator"] = "(Separator to use for configulate_local call)"
        let details["rdt_get_pdk_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_pdk_data"]["-headers"] = "(Data to return from the xml file based on the filters. Defaults to the path and file)"
   let details["rdt_get_pdk_settings"]={}
        let details["rdt_get_pdk_settings"]["-model_type"] = "(Filter list of derate files by model_type)"
        let details["rdt_get_pdk_settings"]["-stdlib_type"] = "(Filter list of derate files by stdlib_type)"
        let details["rdt_get_pdk_settings"]["-technology"] = "(Filter list of derate files by technology )"
        let details["rdt_get_pdk_settings"]["-view"] = "(Filter list of derate files by view)"
        let details["rdt_get_pdk_settings"]["-headers"] = "(List of headers to return values for using the filters)"
        let details["rdt_get_pdk_settings"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_pdk_settings"]["-block"] = "(Default block is G_DESIGN if block doesnt exist)"
   let details["rdt_get_pvc"]={}
        let details["rdt_get_pvc"]["-corner"] = "(Corners to get pvc data for.Eg vcclow,vcchigh,nominal. Default to all. Can give comma separated list)"
        let details["rdt_get_pvc"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_pvc"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_pvc"]["-debug"] = "(Print out the variables getting set to help debug)"
        let details["rdt_get_pvc"]["-set_gvars"] = "(Set G_CORNER_DETAILS for RDT instead of returning data)"
        let details["rdt_get_pvc"]["-noheaders"] = "(Print out/return only the value without the corner+key information)"
   let details["rdt_get_rail_voltage"]={}
        let details["rdt_get_rail_voltage"]["-corner"] = "(Corners search for rail information from for.Eg vcclow,vcchigh,nominal. Default to all. Can give comma separated list)"
        let details["rdt_get_rail_voltage"]["-rail"] = "(Rail to search for Voltage)"
        let details["rdt_get_rail_voltage"]["-min"] = "(Returns min voltage. If format is vcc:1.05:1.15,min returns second field (1.15). If no second field, it returns first field(1.05))"
   let details["rdt_get_relevant_scenario_data"]={}
        let details["rdt_get_relevant_scenario_data"]["-scenario"] = "(Scenarios to get data for.Eg func_max,max. Default to all. Can give comma separated list)"
        let details["rdt_get_relevant_scenario_data"]["-keys"] = "(Keys to get scenario data for.Eg analysis_type. Can give comma separated list)"
        let details["rdt_get_relevant_scenario_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_relevant_scenario_data"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
   let details["rdt_get_relevant_scenarios"]={}
        let details["rdt_get_relevant_scenarios"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_relevant_scenarios"]["-primary"] = "(whether to query for the primary scenario)"
        let details["rdt_get_relevant_scenarios"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_relevant_scenarios"]["-flow"] = "(name of the flow to query in MCMM)"
   let details["rdt_get_scenario_data"]={}
        let details["rdt_get_scenario_data"]["-scenario"] = "(Scenarios to get data for.Eg func_max,max. Default to all. Can give comma separated list)"
        let details["rdt_get_scenario_data"]["-keys"] = "(Keys to get scenario data for.Eg analysis_Type. Default to all. Can give comma separated list)"
        let details["rdt_get_scenario_data"]["-work_dir"] = "(Will default to WARD. Add a full path to directory if a new one is required)"
        let details["rdt_get_scenario_data"]["-block"] = "(Block to search for pv conditions files for. Embedded in name of xml file. Defaults to environment variable block)"
        let details["rdt_get_scenario_data"]["-set_gvars"] = "(Set G_SCENARIO_DETAILS for RDT instead of returning data)"
        let details["rdt_get_scenario_data"]["-debug"] = "(Print out the variables getting set to help debug)"
        let details["rdt_get_scenario_data"]["-noheaders"] = "(Print out/return only the value without the scenario+key information)"
   let details["rdt_get_scr_proc_name"]={}
   let details["rdt_get_step_metrics"]={}
   let details["rdt_get_subflow_load_stage"]={}
   let details["rdt_icv_polaris"]={}
   let details["rdt_is_parent_stage_complete"]={}
   let details["rdt_is_step_done"]={}
   let details["rdt_is_valid_stage"]={}
   let details["rdt_is_xml_file_empty"]={}
        let details["rdt_is_xml_file_empty"]["-xml"] = "(XML File to test if empty)"
   let details["rdt_kill_parallel_rpts"]={}
   let details["rdt_lib_setup"]={}
   let details["rdt_list_flow"]={}
        let details["rdt_list_flow"]["-sources"] = "(Prints the source file of the step procedures)"
   let details["rdt_list_signoff_stages"]={}
   let details["rdt_list_stages"]={}
   let details["rdt_list_steps"]={}
        let details["rdt_list_steps"]["-sources"] = "(Prints the source file of the step procedures)"
        let details["rdt_list_steps"]["-print"] = "(Enable formated printing)"
   let details["rdt_logscan_fail"]={}
   let details["rdt_lower_scons_with_hier"]={}
   let details["rdt_map_LV_syn_clock"]={}
   let details["rdt_mark_stage"]={}
        let details["rdt_mark_stage"]["-stage"] = "(stage name)"
        let details["rdt_mark_stage"]["-step_sequence"] = ""
        let details["rdt_mark_stage"]["-memory"] = "(step memory used)"
        let details["rdt_mark_stage"]["-duration"] = "(step duration)"
   let details["rdt_mem_diff"]={}
   let details["rdt_mem_get_stamp"]={}
   let details["rdt_mem_set"]={}
   let details["rdt_mem_to_string"]={}
   let details["rdt_parse_block_setup"]={}
   let details["rdt_print_configulate_calls"]={}
   let details["rdt_print_configulate_gvars"]={}
   let details["rdt_print_error"]={}
   let details["rdt_print_gvar_history"]={}
   let details["rdt_print_info"]={}
   let details["rdt_print_proc_source"]={}
   let details["rdt_print_reports"]={}
   let details["rdt_print_scripts_search_path"]={}
   let details["rdt_print_step_footer"]={}
   let details["rdt_print_step_header"]={}
   let details["rdt_print_warn"]={}
   let details["rdt_printvar"]={}
   let details["rdt_proc_source"]={}
   let details["rdt_record_procs"]={}
   let details["rdt_remove_stage"]={}
        let details["rdt_remove_stage"]["-flow"] = "(The name of the flow to modify (apr, syn, etc))"
        let details["rdt_remove_stage"]["-stage"] = "(The stage name to remove)"
   let details["rdt_remove_step"]={}
        let details["rdt_remove_step"]["-name"] = "(The stage.step to remove)"
   let details["rdt_reorder_link_library_with_max_lib_first"]={}
   let details["rdt_replace_cornerdetails"]={}
   let details["rdt_replace_cornerdetails_dotprocess"]={}
   let details["rdt_report_dont_use"]={}
        let details["rdt_report_dont_use"]["-cell"] = "(Library cell name to report dont_use reason)"
   let details["rdt_report_stage_status"]={}
   let details["rdt_reset_logscan_pointer"]={}
        let details["rdt_reset_logscan_pointer"]["-line"] = "(Line number to set)"
        let details["rdt_reset_logscan_pointer"]["-unset"] = "(unset pointer)"
   let details["rdt_reset_stage"]={}
   let details["rdt_return_lib_vt_type"]={}
   let details["rdt_run_CheckDiskSpace"]={}
   let details["rdt_run_for_active_scenarios"]={}
   let details["rdt_run_for_all_scenarios"]={}
   let details["rdt_run_logscan"]={}
        let details["rdt_run_logscan"]["-aux_rules"] = "(auxiliary rules file if present, uses ${-aux_rules}.rules)"
        let details["rdt_run_logscan"]["-check_only"] = "(Only check whether logscan files present)"
        let details["rdt_run_logscan"]["-skip_logfile_header_lines"] = ""
        let details["rdt_run_logscan"]["-rules"] = "(rules {sets rules file = ${-rules}.rules})"
        let details["rdt_run_logscan"]["-summary_file"] = "(output summary file {default=${logfiles(0)}.sum})"
        let details["rdt_run_logscan"]["-logfiles"] = "(logfile(s) to run rule checks on)"
   let details["rdt_run_lv"]={}
   let details["rdt_run_multiple_sessions"]={}
        let details["rdt_run_multiple_sessions"]["-mode"] = "(ICV jobs can run on local/netbatch: "
        let details["rdt_run_multiple_sessions"]["-os"] = "(Machine operating system type(for netbatch): "
        let details["rdt_run_multiple_sessions"]["-bits"] = "(Number of bits of Machine (for netbatch): "
        let details["rdt_run_multiple_sessions"]["-rundir"] = "(Directory where the fill job will run.  Default is {pwd}/)"
   let details["rdt_run_pending_parallel_rpt"]={}
   let details["rdt_run_signoff"]={}
   let details["rdt_run_step"]={}
   let details["rdt_save_attributes"]={}
        let details["rdt_save_attributes"]["-flow_status"] = "(returns the list of executed stages)"
        let details["rdt_save_attributes"]["-stage"] = "(stage name)"
        let details["rdt_save_attributes"]["-step_attr"] = "(value for step attribute - only updated is -change_step is set)"
        let details["rdt_save_attributes"]["-stage_run"] = "(set if stage has run successfully - only used if -change_stage is set)"
        let details["rdt_save_attributes"]["-change_stage"] = "(set to update with stage_run status)"
        let details["rdt_save_attributes"]["-change_step"] = "(set to update with step_attr)"
        let details["rdt_save_attributes"]["-parent_run"] = "(Gets status from the parent run being executed. Useful for rdt parallel runs)"
   let details["rdt_scenario_timing_constraints"]={}
        let details["rdt_scenario_timing_constraints"]["-scenario"] = "(Loading timing constraints for specific scenario)"
   let details["rdt_sd_scenario_path_care"]={}
   let details["rdt_set_mcmm_config"]={}
   let details["rdt_signoff_status"]={}
        let details["rdt_signoff_status"]["-stage"] = "(Signoff stage to get status for)"
   let details["rdt_source_if_exists"]={}
        let details["rdt_source_if_exists"]["-require"] = "(Indicates the file is required)"
        let details["rdt_source_if_exists"]["-display"] = "(Displays the list of files with complete paths (without sourcing them) in the order they will be sourced)"
        let details["rdt_source_if_exists"]["-inclusive"] = "(Enabling this switch will source all the files found in seaach path)"
        let details["rdt_source_if_exists"]["-local"] = "(Sources the file locally, within the context of the executing procedure)"
        let details["rdt_source_if_exists"]["-silent"] = "(Do not print any messages)"
   let details["rdt_source_if_exists_in_scenario"]={}
        let details["rdt_source_if_exists_in_scenario"]["-scenario"] = "(Scenario name)"
        let details["rdt_source_if_exists_in_scenario"]["-require"] = "(Indicates the file is required)"
        let details["rdt_source_if_exists_in_scenario"]["-display"] = "(Displays the list of files with complete paths (without sourcing them) in the order they will be sourced)"
        let details["rdt_source_if_exists_in_scenario"]["-inclusive"] = "(Enabling this switch will source all the files found in serach path)"
        let details["rdt_source_if_exists_in_scenario"]["-local"] = "(Sources the file locally, with-in the context of the executing procedure)"
        let details["rdt_source_if_exists_in_scenario"]["-silent"] = "(Do not print any messages)"
   let details["rdt_source_project_if_exists"]={}
   let details["rdt_split_text_line"]={}
   let details["rdt_start"]={}
   let details["rdt_status"]={}
        let details["rdt_status"]["-stage"] = "(stage name)"
        let details["rdt_status"]["-leaf"] = "(Display leaf level status of the flow)"
        let details["rdt_status"]["-par_rpts"] = "(Display report information also)"
   let details["rdt_step_run_status"]={}
        let details["rdt_step_run_status"]["-stage"] = "(stage name)"
        let details["rdt_step_run_status"]["-step_attr"] = "(value for step attribute - only updated is -change_step is set)"
        let details["rdt_step_run_status"]["-stage_run"] = "(set if stage has run successfully - only used if -change_stage is set)"
        let details["rdt_step_run_status"]["-change_stage"] = "(set to update with stage_run status)"
        let details["rdt_step_run_status"]["-change_step"] = "(set to update with step_attr)"
   let details["rdt_step_search_and_insert"]={}
   let details["rdt_timing_constraints"]={}
        let details["rdt_timing_constraints"]["-scenario"] = "(Loading timing constraints for specific scenario)"
   let details["rdt_update_pv_search_path"]={}
   let details["rdt_visa_additional_mco"]={}
   let details["rdt_visa_extract_visa_hierarchy"]={}
   let details["rdt_visa_extract_visa_level"]={}
   let details["rdt_visa_get_probe_signal"]={}
   let details["rdt_visa_physical_report"]={}
   let details["rdt_visa_rtl_check"]={}
   let details["rdt_visa_trace_check_iso_levelshifter"]={}
   let details["rdt_visa_trace_connectivity"]={}
   let details["rdt_visa_trace_connectivity_return_pin"]={}
   let details["rdt_wrap"]={}
        let details["rdt_wrap"]["-stage"] = "(The name of the stage to create the pre or post procedure for)"
        let details["rdt_wrap"]["-step"] = "(The name of the step to create the pre or post procedure for)"
        let details["rdt_wrap"]["-body"] = "(The body of the procedure to create)"
        let details["rdt_wrap"]["-pre"] = "(This is a pre procedure)"
        let details["rdt_wrap"]["-post"] = "(This is a post procedure)"
        let details["rdt_wrap"]["-disable"] = "(This is to disable a pre or post procedure at block level)"
   let details["rdt_xml_2_mcmm_config"]={}
   let details["rdt_zip_files"]={}
        let details["rdt_zip_files"]["-stage"] = "(stage name)"
        let details["rdt_zip_files"]["-logs"] = "(enabling this option zips the log files)"
        let details["rdt_zip_files"]["-reports"] = "(enabling this option zips the reports)"
   let details["reconnect_fishbone_style_power_switch"]={}
        let details["reconnect_fishbone_style_power_switch"]["-sw_cells"] = ""
        let details["reconnect_fishbone_style_power_switch"]["-ctrl_pin_name"] = ""
        let details["reconnect_fishbone_style_power_switch"]["-ack_pin_name"] = ""
   let details["reconstruct_topo"]={}
   let details["remove_duplicate_timing_contexts"]={}
        let details["remove_duplicate_timing_contexts"]["-analyze_only"] = "(only perform minimization analysis)"
        let details["remove_duplicate_timing_contexts"]["-exclude_group_path_directives"] = ""
   let details["remove_pre_stamp_stepdown_clock"]={}
   let details["remove_shapes_over_cell"]={}
   let details["remove_unambiguous_pins"]={}
   let details["report_active_debug_codes"]={}
   let details["report_custom_power_data"]={}
        let details["report_custom_power_data"]["-cell_internals_data_file"] = ""
        let details["report_custom_power_data"]["-stdcell_regex"] = "(Provide a regular expression to match the reference names of leaf cells which are standard cells.  If not provided, they are found using means other than naming convention.)"
        let details["report_custom_power_data"]["-outdir"] = "(Output directory to create reports in, defaults to $PWD)"
        let details["report_custom_power_data"]["-unswitched_limit"] = ""
        let details["report_custom_power_data"]["-cust_rpt_module_file"] = ""
        let details["report_custom_power_data"]["-no_io"] = "(Exclude cells in fanin/fanout cones of IO ports of the block (both clock and data).)"
        let details["report_custom_power_data"]["-help"] = "(Get this help information.)"
   let details["report_hierarchical_z"]={}
        let details["report_hierarchical_z"]["-rootCell"] = "(The cell it's hierarchy will be reported. (default: The loaded design))"
        let details["report_hierarchical_z"]["-outDir"] = "(The output directory to write the reports to. (default: \".\"))"
        let details["report_hierarchical_z"]["-maxDepth"] = "(The max hierarchical depth to report (default is 6))"
        let details["report_hierarchical_z"]["-attributes"] = "(The attributes which will appear in the report (default: tg_{hvt,svt,nominal}_{n,p}_device_total_width))"
        let details["report_hierarchical_z"]["-block"] = "(The design it's hierarchy will be reported. (must argument))"
        let details["report_hierarchical_z"]["-stage"] = "(The design stage to add the report into. (default: syn_final))"
   let details["report_visa_clocks"]={}
   let details["reset_origin"]={}
   let details["reset_origin_move_block"]={}
   let details["reset_origin_top"]={}
   let details["restore_correlation_status"]={}
   let details["return_proc_source"]={}
   let details["rhz_fill_power_domains"]={}
   let details["rhz_fill_stdcells_data"]={}
   let details["rhz_generate_reports"]={}
   let details["rhz_get_cells_at_depth"]={}
   let details["rhz_vectorian_add"]={}
   let details["rhz_vectorian_mult"]={}
   let details["rls_table"]={}
        let details["rls_table"]["-title"] = "(title to print before table - no formatting)"
        let details["rls_table"]["-table"] = "(table data - is a list of lists)"
        let details["rls_table"]["-header"] = "(table header titles:"
        let details["rls_table"]["-repeat_header"] = ""
        let details["rls_table"]["-format"] = "(list of format styles for table columns)"
        let details["rls_table"]["-breaks"] = "(include break lines?)"
        let details["rls_table"]["-spacious"] = ""
        let details["rls_table"]["-no_separator"] = "(no vertical separator?)"
        let details["rls_table"]["-width_limit"] = ""
        let details["rls_table"]["-offset"] = ""
        let details["rls_table"]["-to"] = "(set output file handle instead of STDOUT)"
        let details["rls_table"]["-file"] = "(set output file name instead of STDOUT)"
        let details["rls_table"]["-footer"] = "(footer to print after table - no formatting)"
        let details["rls_table"]["-csv_mode"] = "(write out a csv rather than an actual table"
   let details["rls_table_echo"]={}
   let details["roundto"]={}
   let details["routePins"]={}
   let details["routeTerm"]={}
   let details["runRDT"]={}
        let details["runRDT"]["-init"] = "(initialize flow -> restart from beginning)"
        let details["runRDT"]["-load"] = "(load design flow from this stage)"
        let details["runRDT"]["-subflow"] = "(Execute a defined subflow instead of the standard flow)"
        let details["runRDT"]["-no_run"] = "()"
        let details["runRDT"]["-mark_loaded_stage"] = "(Added along with the -load of a stage to automatically mark the loaded stage. Usefui to overcome logscan errors)"
        let details["runRDT"]["-start"] = "(start the run from specified stage )"
        let details["runRDT"]["-stop"] = "(stop design flow after this stage or stage.step)"
        let details["runRDT"]["-signoff"] = "(signoff flow to be run. Supported flows are in signoff_procs.tcl file)"
        let details["runRDT"]["-stage"] = "(run next stage only)"
        let details["runRDT"]["-step"] = "(run next step only)"
        let details["runRDT"]["-jump"] = "(jump to 'step' within the current stage (else if integer move step +forward or -reverse))"
        let details["runRDT"]["-standalone"] = "(run specified standalone design flow)"
        let details["runRDT"]["-load_path"] = "(Specify the location of starting db. Provide a complete path to database)"
        let details["runRDT"]["-load_cel"] = "(Specify the  cel in starting  db that you want to load . Provide only the name of the cel along with the path to database from -load_path)"
        let details["runRDT"]["-reset_ebb_libs"] = "(Specify If the link and reference libs needs to be reset)"
        let details["runRDT"]["-reset_start_stage"] = "(reset all the stages from start to final)"
   let details["run_rdtpv"]={}
   let details["sL"]={}
   let details["sN"]={}
   let details["sW"]={}
   let details["save_correlation_status"]={}
   let details["sb"]={}
   let details["sd_abstract_to_design"]={}
   let details["sd_abstract_to_frame"]={}
   let details["sd_add_diffcheck"]={}
        let details["sd_add_diffcheck"]["-layer_name"] = ""
        let details["sd_add_diffcheck"]["-include_macro_refs"] = ""
        let details["sd_add_diffcheck"]["-outputview"] = ""
        let details["sd_add_diffcheck"]["-phase"] = "(negative straddles boundary {default=positive}: "
        let details["sd_add_diffcheck"]["-pitch"] = "(layer pitch {default=0.084})"
        let details["sd_add_diffcheck"]["-width"] = "(layer width {default=0.028})"
        let details["sd_add_diffcheck"]["-skip"] = "(skip diffcheck generation {default=0, do not skip}: "
   let details["sd_add_dop_diode"]={}
   let details["sd_add_halo_metals"]={}
        let details["sd_add_halo_metals"]["-no_partition_twire"] = "(Don't add transition shapes or PG on the partition boundary)"
   let details["sd_add_polycheck"]={}
        let details["sd_add_polycheck"]["-layer_name"] = ""
        let details["sd_add_polycheck"]["-datatype"] = "(datatype for layer_num - requires layer_num is defined {default use polycheck layer_datatype})"
        let details["sd_add_polycheck"]["-include_macro_refs"] = ""
        let details["sd_add_polycheck"]["-outputview"] = ""
        let details["sd_add_polycheck"]["-phase"] = "(negative straddles boundary {default=positive}: "
        let details["sd_add_polycheck"]["-pitch"] = "(layer pitch {default=0.140})"
        let details["sd_add_polycheck"]["-width"] = "(layer width {default=0.042})"
        let details["sd_add_polycheck"]["-skip"] = "(skip polycheck generation {default=0, do not skip}: "
   let details["sd_add_routing_blockage_for_boundary"]={}
        let details["sd_add_routing_blockage_for_boundary"]["-for_create_strap_only"] = ""
   let details["sd_add_routing_blockage_for_macro"]={}
        let details["sd_add_routing_blockage_for_macro"]["-additional_blkg"] = "(To create additional blockage around EBB/Macros based on G_PWR_ADDITIONAL_BLOCKAGE_FOR_CUSTOM & G_PWR_ADDITIONAL_BLOCKAGE_FOR_MACRO )"
   let details["sd_add_routing_blockage_for_va"]={}
        let details["sd_add_routing_blockage_for_va"]["-for_create_strap_only"] = ""
   let details["sd_aon_pg_hookup"]={}
        let details["sd_aon_pg_hookup"]["-cells"] = "(Specify the aon cells to insert via ladder)"
        let details["sd_aon_pg_hookup"]["-incremental"] = "(Run pg hookup for newly added aon cells only)"
        let details["sd_aon_pg_hookup"]["-logtag"] = "(Add log tag)"
        let details["sd_aon_pg_hookup"]["-constraint_only"] = "(Setting constraints only)"
   let details["sd_aon_pg_route"]={}
   let details["sd_append_uin_parameters"]={}
   let details["sd_apply_hip_pdn"]={}
   let details["sd_base_layer_fill"]={}
   let details["sd_base_layer_fill_step"]={}
   let details["sd_base_layer_populate_lib"]={}
   let details["sd_base_layer_populate_templates"]={}
   let details["sd_base_layer_remove"]={}
   let details["sd_base_layer_update_templates"]={}
   let details["sd_block_clock_opt"]={}
   let details["sd_block_place_opt"]={}
   let details["sd_block_priority_route"]={}
   let details["sd_block_route"]={}
   let details["sd_block_user_priority_route"]={}
   let details["sd_bottom_up_run_parallel_job"]={}
        let details["sd_bottom_up_run_parallel_job"]["-script_name"] = "(name of script to execute, include full-path to script)"
        let details["sd_bottom_up_run_parallel_job"]["-work_dir"] = "(name of working directory where run_block_script jobs will be managed)"
   let details["sd_boundary_fiducial_cells"]={}
   let details["sd_calculate_gridpattern"]={}
   let details["sd_call_diamond"]={}
   let details["sd_change_names"]={}
   let details["sd_channel_add_buffer_on_route"]={}
        let details["sd_channel_add_buffer_on_route"]["-nets"] = "(Channel nets to insert repeaters)"
        let details["sd_channel_add_buffer_on_route"]["-min_layer"] = "(Minimum layer for routing use)"
        let details["sd_channel_add_buffer_on_route"]["-max_layer"] = "(Maximum layer for routing use)"
        let details["sd_channel_add_buffer_on_route"]["-repeater"] = "(Repeater name for add-buffer-on-route use)"
        let details["sd_channel_add_buffer_on_route"]["-distance"] = "(Repeater distance for add-buffer-on-route use)"
        let details["sd_channel_add_buffer_on_route"]["-vialadder"] = "(Via ladder constraints)"
        let details["sd_channel_add_buffer_on_route"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_channel_block_recipe"]={}
        let details["sd_channel_block_recipe"]["-ports"] = "(Ports to trace and place/route channel cells. Default: All/G_CHANNEL_PORT_LIST(BLOCK))"
        let details["sd_channel_block_recipe"]["-backoff"] = "(Placement backoff from port. Default: 1.0um/G_CHANNEL_BACKOFF(BLOCK))"
        let details["sd_channel_block_recipe"]["-keep_reps"] = "(Do not remove existing repeaters. Default: Remove/G_CHANNEL_KEEP_REPEATERS(BLOCK))"
        let details["sd_channel_block_recipe"]["-min_layer"] = "(Minimum layer for routing use. Default: G_MIN_ROUTING_LAYER/G_CHANNEL_MIN_LAYER(BLOCK))"
        let details["sd_channel_block_recipe"]["-max_layer"] = "(Maximum layer for routing use. Default: G_MAX_ROUTING_LAYER/G_CHANNEL_MAX_LAYER(BLOCK))"
        let details["sd_channel_block_recipe"]["-widths"] = "(Routing layer-width list {la wa lb wb ...} for wide wire routing)"
        let details["sd_channel_block_recipe"]["-use_gcr"] = "(Run GCR routing. Default: ZRoute/G_GCR_ROUTE)"
        let details["sd_channel_block_recipe"]["-repeater"] = "(Repeater name for add-buffer-on-route use. Default: G_CHANNEL_REPEATER(BLOCK))"
        let details["sd_channel_block_recipe"]["-distance"] = "(Repeater distance for add-buffer-on-route use. Default: LookUp/G_CHANNEL_REPEATER_DISTANCE(BLOCK))"
        let details["sd_channel_block_recipe"]["-vialadder"] = "(Via ladder default constraints. Default: G_CHANNEL_VIA_LADDER_DEFAULT_CONSTRAINTS/G_CHANNEL_VIA_LADDER_CONSTRAINTS(REF_NAME))"
        let details["sd_channel_block_recipe"]["-steps"] = "(Steps to run: {place route abor}. Default: All/G_CHANNEL_STEPS(BLOCK))"
        let details["sd_channel_block_recipe"]["-save_steps"] = "(Save intermediate steps in the flow. Default: None/G_CHANNEL_SAVE_STEPS(BLOCK))"
        let details["sd_channel_block_recipe"]["-debug"] = "(Used specifically for GCR debug. Default: G_GCR_DEBUG)"
        let details["sd_channel_block_recipe"]["-verbose"] = "(Print more information. Default: None/G_CHANNEL_VERBOSE)"
   let details["sd_channel_blocks"]={}
   let details["sd_channel_get_nets"]={}
   let details["sd_channel_place_cells"]={}
        let details["sd_channel_place_cells"]["-ports"] = "(Ports to trace and place channel cells)"
        let details["sd_channel_place_cells"]["-backoff"] = "(Placement backoff from port. Default: At Port)"
        let details["sd_channel_place_cells"]["-keep_reps"] = "(Do Not remove repeaters. Default: Remove)"
        let details["sd_channel_place_cells"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_channel_place_cells_based_on_route"]={}
        let details["sd_channel_place_cells_based_on_route"]["-ports"] = "(Ports to trace and place channel cells)"
        let details["sd_channel_place_cells_based_on_route"]["-min_layer"] = "(Minimum layer for routing use)"
        let details["sd_channel_place_cells_based_on_route"]["-max_layer"] = "(Maximum layer for routing use)"
        let details["sd_channel_place_cells_based_on_route"]["-widths"] = "(Routing layer-width list for wide wire routing)"
        let details["sd_channel_place_cells_based_on_route"]["-first_distance"] = ""
        let details["sd_channel_place_cells_based_on_route"]["-keep_reps"] = "(Do Not remove repeaters. Default: Remove)"
        let details["sd_channel_place_cells_based_on_route"]["-use_gcr"] = "(Run GCR router. Default is Z-route route_group)"
   let details["sd_channel_priority_route"]={}
        let details["sd_channel_priority_route"]["-cells"] = "(Channel cells to route)"
        let details["sd_channel_priority_route"]["-min_layer"] = "(Minimum layer for routing use)"
        let details["sd_channel_priority_route"]["-max_layer"] = "(Maximum layer for routing use)"
        let details["sd_channel_priority_route"]["-widths"] = "(Routing layer-width list for wide wire routing)"
        let details["sd_channel_priority_route"]["-use_gcr"] = "(Run GCT routing. Default: Global Route)"
        let details["sd_channel_priority_route"]["-vialadder"] = "(Via ladder constraints)"
        let details["sd_channel_priority_route"]["-debug"] = "(Used specifically for GCR debug. Default: None)"
        let details["sd_channel_priority_route"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_channel_remove_repeaters"]={}
        let details["sd_channel_remove_repeaters"]["-supernet"] = "(Supernet)"
        let details["sd_channel_remove_repeaters"]["-port"] = "(Port)"
   let details["sd_channel_snap_cell_plc_at_coord"]={}
   let details["sd_checkProcess"]={}
   let details["sd_check_block_abutment"]={}
   let details["sd_check_cell_area"]={}
   let details["sd_check_fib_con"]={}
   let details["sd_check_pin_placement"]={}
   let details["sd_check_stitch_xmim"]={}
   let details["sd_check_terminals"]={}
   let details["sd_clean_up_block_level_power_hookup"]={}
   let details["sd_clean_up_routing_blockage_groups"]={}
   let details["sd_clk_load"]={}
   let details["sd_clk_ndr_shielding"]={}
   let details["sd_clk_push"]={}
   let details["sd_clk_route"]={}
   let details["sd_clk_shielding"]={}
   let details["sd_clock_cleanup"]={}
   let details["sd_commit_blocks"]={}
        let details["sd_commit_blocks"]["-same_lib"] = "(Force commit of blocks in same library)"
   let details["sd_commit_blocks_same_lib"]={}
   let details["sd_connect_ackport"]={}
        let details["sd_connect_ackport"]["-rev_pin"] = "(Receive pin)"
        let details["sd_connect_ackport"]["-drv_pin"] = "(Drive pin)"
   let details["sd_connect_aon_supply_pins"]={}
        let details["sd_connect_aon_supply_pins"]["-cells"] = "(List of cells)"
        let details["sd_connect_aon_supply_pins"]["-force"] = "(If given, existing cells connections will be disconnected and re-connected)"
   let details["sd_connect_ebb_enables"]={}
        let details["sd_connect_ebb_enables"]["-va_name"] = "(Voltage name)"
        let details["sd_connect_ebb_enables"]["-reset_based_on_upf"] = "(Reset G_ vars based on upf values)"
   let details["sd_connect_pg_net"]={}
   let details["sd_connect_power_switch_enables"]={}
   let details["sd_constraints"]={}
   let details["sd_consume_io_constraints"]={}
   let details["sd_create_aabb_region"]={}
   let details["sd_create_analog_pg_template"]={}
        let details["sd_create_analog_pg_template"]["-file"] = "(Specifies template file name)"
        let details["sd_create_analog_pg_template"]["-layers"] = "(Specifies layers list)"
   let details["sd_create_analog_power_strap"]={}
        let details["sd_create_analog_power_strap"]["-pg_regions"] = "(create grid on analog pg regions)"
   let details["sd_create_and_place_slos_logic"]={}
   let details["sd_create_and_swap_abstracts"]={}
   let details["sd_create_backoff_layer_blockage"]={}
   let details["sd_create_backoff_layer_blockage_per_block"]={}
   let details["sd_create_bbox_analog_power_strategies"]={}
        let details["sd_create_bbox_analog_power_strategies"]["-pg_region"] = ""
        let details["sd_create_bbox_analog_power_strategies"]["-nets"] = ""
        let details["sd_create_bbox_analog_power_strategies"]["-bbox"] = "(Specify the bounding box to create grid. Format {{xl yl} {xh yh}})"
        let details["sd_create_bbox_analog_power_strategies"]["-grid_template"] = ""
        let details["sd_create_bbox_analog_power_strategies"]["-recreate_template"] = "(recreate pg template for calling standalone call)"
        let details["sd_create_bbox_analog_power_strategies"]["-layers"] = "(layers that need to be created)"
   let details["sd_create_black_box"]={}
   let details["sd_create_black_box_by_default"]={}
   let details["sd_create_black_box_pins"]={}
   let details["sd_create_boundary_power_blockage"]={}
   let details["sd_create_compl_pgr_blockage"]={}
   let details["sd_create_custom_grid_vars"]={}
        let details["sd_create_custom_grid_vars"]["-va"] = "(list of gas station voltage area names)"
        let details["sd_create_custom_grid_vars"]["-pgr"] = "(list pg region names)"
   let details["sd_create_custom_power_strap"]={}
        let details["sd_create_custom_power_strap"]["-pg_region"] = ""
        let details["sd_create_custom_power_strap"]["-net"] = "(Supply net name)"
        let details["sd_create_custom_power_strap"]["-bbox"] = "(Specify the bounding box to create grid. Format {{xl yl} {xh yh}}, if specified pg_region will be created)"
        let details["sd_create_custom_power_strap"]["-grid_template"] = ""
   let details["sd_create_diffcheck"]={}
   let details["sd_create_dir"]={}
        let details["sd_create_dir"]["-dir"] = "(name of directory to createt)"
   let details["sd_create_dr_blockage_around_object"]={}
   let details["sd_create_gas_station_wrapper"]={}
   let details["sd_create_halo_id"]={}
   let details["sd_create_hierarchical_power_strap"]={}
   let details["sd_create_m0_power_straps_fill"]={}
   let details["sd_create_macro_on_boundary_blockage"]={}
   let details["sd_create_path_groups"]={}
        let details["sd_create_path_groups"]["-modes"] = "(run for specific modes list)"
   let details["sd_create_patterns"]={}
        let details["sd_create_patterns"]["-pattern"] = "(Specify the patterns used for pattern creation)"
        let details["sd_create_patterns"]["-outfile"] = "(Specify output file-name for writing patterns file)"
        let details["sd_create_patterns"]["-region"] = "(Specify the regions used for pattern creation. Default: None)"
        let details["sd_create_patterns"]["-add_net_type"] = "(Add net type into the track spec of the pattern. Default: None)"
        let details["sd_create_patterns"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_create_physical_only_modules"]={}
   let details["sd_create_pin_pairings"]={}
   let details["sd_create_pins_for_power_continuity"]={}
   let details["sd_create_placement_abstracts"]={}
   let details["sd_create_polycheck"]={}
   let details["sd_create_port_polygon_for_terminals"]={}
   let details["sd_create_power"]={}
   let details["sd_create_power_straps"]={}
        let details["sd_create_power_straps"]["-no_vias"] = "(Turn off power via creation)"
        let details["sd_create_power_straps"]["-layers"] = "(Generate power straps for specified layers only)"
        let details["sd_create_power_straps"]["-custom_only"] = "(Generate macro and custom rails only)"
        let details["sd_create_power_straps"]["-strategy_only"] = "(Generate pg strategy only)"
        let details["sd_create_power_straps"]["-custom_tags"] = "(Generate power straps for specified custom tags only)"
   let details["sd_create_power_straps_m0"]={}
        let details["sd_create_power_straps_m0"]["-keep_to_macro"] = "(Keep this space to macro on left and right)"
        let details["sd_create_power_straps_m0"]["-keep_to_bnd"] = "(Keep space to boundary of top level (width of vert halo))"
        let details["sd_create_power_straps_m0"]["-m0_width"] = "(Create m0 of this width)"
        let details["sd_create_power_straps_m0"]["-m2width_ts"] = "(Min metal2 width threshold)"
        let details["sd_create_power_straps_m0"]["-remove_only"] = "(Remove existed m0)"
   let details["sd_create_prBoundary"]={}
   let details["sd_create_pwr_blkg_from_objs"]={}
   let details["sd_create_region_id"]={}
   let details["sd_create_region_tracks"]={}
   let details["sd_create_stdcell_fillers"]={}
   let details["sd_create_stub_upf"]={}
   let details["sd_create_timing_abstracts"]={}
   let details["sd_create_timing_arcs_on_unconstrained_pins"]={}
   let details["sd_create_top_va_pg_blockage"]={}
        let details["sd_create_top_va_pg_blockage"]["-hierarchical"] = "(Process all VA in all hierarchy)"
   let details["sd_create_trackfill_config"]={}
        let details["sd_create_trackfill_config"]["-out_dir"] = "(Output directory)"
        let details["sd_create_trackfill_config"]["-layers"] = "(List of layers to fill)"
   let details["sd_create_tracks"]={}
        let details["sd_create_tracks"]["-pattern"] = "(Specify the patterns used for track creation)"
        let details["sd_create_tracks"]["-dont_delete"] = "(Does not delete the existent tracks)"
        let details["sd_create_tracks"]["-reserved"] = "(Create the reserved tracks)"
        let details["sd_create_tracks"]["-layer"] = "(Specify the layer to create track. If the layer defined in pattern does not match, it will be skipped)"
        let details["sd_create_tracks"]["-width"] = "(Specify the width to create track. If the width defined in pattern does not match, it will be skipped. Used for wide wire routing)"
        let details["sd_create_tracks"]["-skip_pg_track"] = "(Skip generating tracks for power rail)"
        let details["sd_create_tracks"]["-bounding_box"] = ""
        let details["sd_create_tracks"]["-exclusive"] = "(Create track for exclusive creation)"
        let details["sd_create_tracks"]["-tag"] = "(Add tag to track)"
   let details["sd_create_tracks_for_hip_pins"]={}
        let details["sd_create_tracks_for_hip_pins"]["-cells"] = "(Cells to insert track on their pins.)"
        let details["sd_create_tracks_for_hip_pins"]["-layers"] = "(Pin's layers.)"
        let details["sd_create_tracks_for_hip_pins"]["-pins"] = "(Pin name to create tracks on it.)"
   let details["sd_create_tracks_for_offgrid_pins"]={}
   let details["sd_create_twire_corner_blockage"]={}
   let details["sd_create_uin"]={}
        let details["sd_create_uin"]["-out_dir"] = "(Output directory to save uin files)"
        let details["sd_create_uin"]["-type"] = "(Type of UIN files to be created)"
        let details["sd_create_uin"]["-layers"] = "(List of layers to fill)"
   let details["sd_create_uin_gridpattern"]={}
   let details["sd_create_uin_icv"]={}
   let details["sd_create_uin_layers"]={}
   let details["sd_create_uin_parameters"]={}
   let details["sd_create_uin_v_layers"]={}
   let details["sd_create_va_pg_blockage"]={}
   let details["sd_create_visa_bound"]={}
   let details["sd_create_xmim_lib"]={}
   let details["sd_ctm_bumesh"]={}
   let details["sd_ctm_clone_clock_gadget"]={}
   let details["sd_ctm_create_dop_clocks"]={}
   let details["sd_ctm_create_dops"]={}
   let details["sd_ctm_detail_route"]={}
   let details["sd_ctm_dop_enable_scan_repeater_duplication"]={}
   let details["sd_ctm_dop_enable_split"]={}
   let details["sd_ctm_enable_buffering"]={}
   let details["sd_ctm_fishbone_route"]={}
   let details["sd_ctm_initialize"]={}
   let details["sd_ctm_level_balance"]={}
   let details["sd_ctm_merge"]={}
   let details["sd_ctm_optimize"]={}
   let details["sd_ctm_post_setup"]={}
   let details["sd_ctm_postroute_sizing"]={}
   let details["sd_ctm_remove_dop_clocks"]={}
   let details["sd_ctm_reports"]={}
   let details["sd_ctm_route_dops"]={}
        let details["sd_ctm_route_dops"]["-dop_nets"] = "(DOP nets - default all CTMESH dop nets)"
        let details["sd_ctm_route_dops"]["-dirty_mode"] = "(Allow DRCs for debug)"
   let details["sd_ctm_set_clock_latency"]={}
   let details["sd_ctm_set_visa_exceptions"]={}
   let details["sd_ctm_sizing"]={}
   let details["sd_ctp_create_clock_pins_at_block_center"]={}
   let details["sd_cts"]={}
   let details["sd_cts_ccd"]={}
   let details["sd_cts_exceptions_for_icc"]={}
   let details["sd_cts_params"]={}
   let details["sd_cts_rename_cts_punch_port"]={}
   let details["sd_cts_route_options"]={}
   let details["sd_cts_setup"]={}
   let details["sd_cts_store_hier_clk_pin_drivers"]={}
   let details["sd_cts_trace_fain_to_first_ctech"]={}
   let details["sd_customize_budgets"]={}
   let details["sd_ddh"]={}
   let details["sd_define_icc_wrappers"]={}
   let details["sd_define_user_attributes"]={}
   let details["sd_design_to_abstract"]={}
   let details["sd_detect_netlist_ecos"]={}
   let details["sd_dont_use"]={}
   let details["sd_dop_cts"]={}
   let details["sd_drc_bnd_spc_kor"]={}
   let details["sd_dump_pdfx_power_connections"]={}
   let details["sd_duplicate_slos"]={}
   let details["sd_eco_apply_changelist"]={}
   let details["sd_eco_boundary_cells"]={}
        let details["sd_eco_boundary_cells"]["-target_obj_boundary_list"] = ""
        let details["sd_eco_boundary_cells"]["-action"] = "(Option to remove or add boundary cells: "
        let details["sd_eco_boundary_cells"]["-direction"] = "(Specify inside or outside given bbox update the boundary cells "
   let details["sd_eco_clk_repair"]={}
   let details["sd_eco_connect_assignbuf_ceco"]={}
   let details["sd_eco_connect_net_ceco"]={}
   let details["sd_eco_create_port_ceco"]={}
   let details["sd_eco_gen_changelist"]={}
   let details["sd_eco_legalize"]={}
   let details["sd_eco_optimize"]={}
   let details["sd_eco_place_pins"]={}
   let details["sd_eco_place_unplaced_cells"]={}
   let details["sd_eco_rc_to_icc2_changelist"]={}
        let details["sd_eco_rc_to_icc2_changelist"]["-rc_changelist"] = "(Pointer to input RC changelist file)"
        let details["sd_eco_rc_to_icc2_changelist"]["-icc2_changelist"] = "(Pointer to the output ICC changelist file)"
   let details["sd_eco_remove_dfm"]={}
   let details["sd_eco_reset_dfm_stages"]={}
   let details["sd_eco_route"]={}
   let details["sd_eco_save_pre_eco_state"]={}
   let details["sd_eco_scan_repair"]={}
   let details["sd_eco_tieoff"]={}
   let details["sd_enable_abstract_cmds"]={}
   let details["sd_enable_hold_fixing"]={}
   let details["sd_endcap_cells"]={}
   let details["sd_estimate_timing"]={}
   let details["sd_estimate_timing_pre_checks"]={}
   let details["sd_expand_all_mi_block_pg_blockages"]={}
   let details["sd_extend_macro_pins_on_boundary"]={}
   let details["sd_extract_collaterals_for_capr_sapr"]={}
   let details["sd_extraction_options_setup"]={}
        let details["sd_extraction_options_setup"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_fdr_constraints"]={}
        let details["sd_fdr_constraints"]["-scenarios"] = "(list of scenarios to run for, by default run for all scenarios)"
        let details["sd_fdr_constraints"]["-out_path"] = "(output directory for override tcl file(s))"
   let details["sd_fdr_get_physical_clock"]={}
   let details["sd_fdr_map_all_clocked_fdrs"]={}
   let details["sd_fdr_read_attributes_file"]={}
   let details["sd_fdr_read_clock_sources"]={}
   let details["sd_fdr_set_attributes"]={}
   let details["sd_fdr_write_vrlg_attr"]={}
        let details["sd_fdr_write_vrlg_attr"]["-outfile"] = "(Output file name)"
        let details["sd_fdr_write_vrlg_attr"]["-flow"] = "(flow name)"
   let details["sd_fib_cells"]={}
   let details["sd_fib_con"]={}
   let details["sd_fill"]={}
   let details["sd_fill_get_keepout_cells_list"]={}
   let details["sd_fill_mark_hv_nets"]={}
   let details["sd_fill_post_process"]={}
   let details["sd_fill_run_calibre"]={}
   let details["sd_fill_run_dfm"]={}
   let details["sd_fill_run_icc"]={}
   let details["sd_fill_run_icv"]={}
   let details["sd_fill_run_qea"]={}
   let details["sd_find_accessible_tap"]={}
        let details["sd_find_accessible_tap"]["-cell"] = "(Cell requiring tap)"
        let details["sd_find_accessible_tap"]["-tap_cells"] = "(Specify particular tap cells to be searched (default: G_TAP_CELL))"
        let details["sd_find_accessible_tap"]["-direction"] = "(Specify which direction (left/right/both) to search for taps (default: both))"
        let details["sd_find_accessible_tap"]["-distance"] = "(Specify the max distance allowed between the cell and the tap (default: G_TAP_MAX_SPACING/2))"
        let details["sd_find_accessible_tap"]["-nwell_break_refs"] = ""
        let details["sd_find_accessible_tap"]["-nwell_break_names"] = ""
   let details["sd_find_closest_cell"]={}
        let details["sd_find_closest_cell"]["-cell"] = "(Cell from which the closest cell is to be found)"
        let details["sd_find_closest_cell"]["-ref_cells"] = "(Ref names of cells to be searched)"
        let details["sd_find_closest_cell"]["-inst_names"] = ""
        let details["sd_find_closest_cell"]["-direction"] = "(Specify which direction (left/right/both) to search for the cells (default: both))"
        let details["sd_find_closest_cell"]["-distance"] = "(Specify the max distance allowed between the cell and the tap (default: G_TAP_MAX_SPACING/2))"
        let details["sd_find_closest_cell"]["-include_variants"] = "(Specify whether variants of the ref names provided should also be checked)"
   let details["sd_find_unique_bound_name"]={}
   let details["sd_fix_ipb"]={}
   let details["sd_floorplan_design"]={}
   let details["sd_fn_assign_srsn_per_net_groups"]={}
   let details["sd_fn_cache_constraint_mapping_file"]={}
   let details["sd_fn_calculate_track_region"]={}
        let details["sd_fn_calculate_track_region"]["-coordinate"] = "(Coordinate of original region)"
        let details["sd_fn_calculate_track_region"]["-cell"] = "(Lower level block name)"
   let details["sd_fn_check_fix_illegal_name"]={}
   let details["sd_fn_convert_ps_pg_grid"]={}
   let details["sd_fn_create_black_box"]={}
   let details["sd_fn_create_black_box_abstract"]={}
   let details["sd_fn_create_black_box_initialize_and_hollow"]={}
   let details["sd_fn_create_black_box_pin_constraints"]={}
   let details["sd_fn_create_black_box_source_pdintent"]={}
   let details["sd_fn_create_black_box_timing"]={}
   let details["sd_fn_create_block_host_options"]={}
   let details["sd_fn_create_feedthru_supplies"]={}
   let details["sd_fn_create_gas_station_wrapper"]={}
   let details["sd_fn_create_keepout_margin"]={}
   let details["sd_fn_create_partition_bbox_abstract"]={}
   let details["sd_fn_create_stub_upf"]={}
        let details["sd_fn_create_stub_upf"]["-stub_modules"] = "(stub modules)"
        let details["sd_fn_create_stub_upf"]["-upf_dir"] = "(input upf directory)"
        let details["sd_fn_create_stub_upf"]["-outdir"] = "(output stub upf directory)"
   let details["sd_fn_create_track_check_edge"]={}
        let details["sd_fn_create_track_check_edge"]["-points"] = "(location)"
        let details["sd_fn_create_track_check_edge"]["-bounding_box"] = ""
        let details["sd_fn_create_track_check_edge"]["-direction"] = "(Direction : X or Y)"
        let details["sd_fn_create_track_check_edge"]["-index"] = "(Index of point in the list)"
        let details["sd_fn_create_track_check_edge"]["-exclusive"] = "(Index of point in the list)"
   let details["sd_fn_create_wire_on_power_track"]={}
   let details["sd_fn_duplicate_terminal"]={}
        let details["sd_fn_duplicate_terminal"]["-terms"] = ""
        let details["sd_fn_duplicate_terminal"]["-port"] = "(Specifies port related to the terminal)"
        let details["sd_fn_duplicate_terminal"]["-attr"] = "(Specifies attribute to attached to the new terminal)"
   let details["sd_fn_eco_concat_verilog_file"]={}
        let details["sd_fn_eco_concat_verilog_file"]["-out_file"] = "()"
        let details["sd_fn_eco_concat_verilog_file"]["-v_list"] = "()"
        let details["sd_fn_eco_concat_verilog_file"]["-v_files"] = "()"
   let details["sd_fn_eco_count_sequence_diff"]={}
   let details["sd_fn_eco_create_bus"]={}
   let details["sd_fn_eco_data_analysis_max_string_match"]={}
   let details["sd_fn_eco_data_analysis_string_match"]={}
   let details["sd_fn_eco_dump_net_shape"]={}
   let details["sd_fn_eco_dump_terminals"]={}
   let details["sd_fn_eco_get_ignore_modules"]={}
   let details["sd_fn_eco_get_latters_diff"]={}
   let details["sd_fn_eco_get_pin_nets"]={}
   let details["sd_fn_eco_get_string_match"]={}
   let details["sd_fn_eco_rename_advisory"]={}
   let details["sd_fn_eco_write_ref_data"]={}
   let details["sd_fn_execute_run_block_script"]={}
   let details["sd_fn_find_dangling_partition_pins"]={}
   let details["sd_fn_find_excluded_nets_for_place_pins"]={}
   let details["sd_fn_fix_upf_for_icc"]={}
   let details["sd_fn_found_input_upf_files"]={}
   let details["sd_fn_gas_station_unwrap_hier"]={}
   let details["sd_fn_gen_budgets"]={}
   let details["sd_fn_get_custom_polygons"]={}
   let details["sd_fn_get_io_connected_cells"]={}
        let details["sd_fn_get_io_connected_cells"]["-type"] = "(receive or driver)"
        let details["sd_fn_get_io_connected_cells"]["-net"] = "(Net name)"
   let details["sd_fn_get_pg_geo_of_pgr_va"]={}
   let details["sd_fn_get_ref_libs"]={}
   let details["sd_fn_hack_split_constraints_upf"]={}
   let details["sd_fn_hier_commit_upf"]={}
   let details["sd_fn_ideal_network"]={}
   let details["sd_fn_insert_level_shifter"]={}
        let details["sd_fn_insert_level_shifter"]["-power"] = "(power)"
   let details["sd_fn_load_black_box_upf"]={}
   let details["sd_fn_load_incremental_upf"]={}
   let details["sd_fn_parse_log_file_to_find_out_failed_jobs"]={}
   let details["sd_fn_pg_calculate_alt_pwrgrid_config"]={}
   let details["sd_fn_place"]={}
   let details["sd_fn_place_cell"]={}
   let details["sd_fn_place_global_dic_cells"]={}
        let details["sd_fn_place_global_dic_cells"]["-dic_distance"] = "(User defined relative distance to keep between DICs. Default is got from central var G_DIC_DIST)"
        let details["sd_fn_place_global_dic_cells"]["-num_dics"] = "(User defined number of DIC pairs expected in design. Default is calculated based on core area)"
        let details["sd_fn_place_global_dic_cells"]["-remove_existing"] = "(User defined boolean switch if want to remove existing DIC cells and start afresh. Default OFF)"
   let details["sd_fn_place_global_fid_cells"]={}
        let details["sd_fn_place_global_fid_cells"]["-global_fid_distance"] = ""
        let details["sd_fn_place_global_fid_cells"]["-num_global_fids"] = "(User defined number of global FIDs expected in design. Default is calculated based on core area)"
        let details["sd_fn_place_global_fid_cells"]["-remove_existing"] = "(User defined boolean switch if want to remove existing global FID cells and start afresh. Default OFF)"
   let details["sd_fn_propagate_driver_supply"]={}
   let details["sd_fn_propagate_soft_macro_pg_terminal"]={}
   let details["sd_fn_ps_connect_top_pg"]={}
        let details["sd_fn_ps_connect_top_pg"]["-cells"] = "(Specify the ps cells to insert via ladder)"
   let details["sd_fn_ps_create_rb_on_pg"]={}
        let details["sd_fn_ps_create_rb_on_pg"]["-layers"] = "(Specify the layers to check)"
        let details["sd_fn_ps_create_rb_on_pg"]["-cell"] = "(Specify the ps cell to insert via ladder)"
        let details["sd_fn_ps_create_rb_on_pg"]["-net"] = "(Specify the ps net to insert via ladder)"
   let details["sd_fn_pvt_setup"]={}
        let details["sd_fn_pvt_setup"]["-corner"] = "(corner name)"
        let details["sd_fn_pvt_setup"]["-analysis"] = "(analysis type (max/min): "
   let details["sd_fn_read_block_tcl_files"]={}
   let details["sd_fn_read_pspec"]={}
   let details["sd_fn_remove_extract_layer_constraints"]={}
   let details["sd_fn_remove_twire_shorts"]={}
   let details["sd_fn_remove_wiretracks_and_power_straps"]={}
   let details["sd_fn_reports_pspec"]={}
   let details["sd_fn_restore_srsn"]={}
   let details["sd_fn_run_a_command_on_blocks"]={}
        let details["sd_fn_run_a_command_on_blocks"]["-command"] = "(name of the TCL command to be executed)"
   let details["sd_fn_run_block_script"]={}
   let details["sd_fn_run_parallel_set_of_commands_on_block"]={}
        let details["sd_fn_run_parallel_set_of_commands_on_block"]["-command_list"] = ""
        let details["sd_fn_run_parallel_set_of_commands_on_block"]["-blocks"] = "(names of blocks)"
   let details["sd_fn_run_step"]={}
   let details["sd_fn_save_srsn"]={}
   let details["sd_fn_save_user_attributes"]={}
        let details["sd_fn_save_user_attributes"]["-outfile"] = "(File name)"
   let details["sd_fn_set_td_type_for_tsvs"]={}
   let details["sd_fn_setup_ctp_config"]={}
   let details["sd_fn_source_icc_file"]={}
        let details["sd_fn_source_icc_file"]["-infile"] = "(Input file)"
        let details["sd_fn_source_icc_file"]["-outfile"] = "(output file)"
        let details["sd_fn_source_icc_file"]["-tag"] = "(Procedure tag)"
   let details["sd_fn_synthesize_clock_trunks"]={}
   let details["sd_fn_template_based_partition_bbt"]={}
        let details["sd_fn_template_based_partition_bbt"]["-partition"] = "(Collection or list of partition to create bbt. Default: Selected)"
   let details["sd_fn_update_block_netlist"]={}
   let details["sd_for_each_block_fib_cells"]={}
   let details["sd_for_each_block_local_fiducial_cells"]={}
   let details["sd_for_each_block_tap_cells"]={}
   let details["sd_fp_boundary_size_check"]={}
   let details["sd_frame_to_abstract"]={}
   let details["sd_gcr_create_commands"]={}
        let details["sd_gcr_create_commands"]["-nets"] = "(Nets to set gcr min/max layer workaround)"
        let details["sd_gcr_create_commands"]["-outfile"] = "(Specify output file-name for writing gcr commands)"
        let details["sd_gcr_create_commands"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["sd_gcr_create_commands"]["-strip_pg_mesh"] = "(Remove PG mesh during design readin. Default: Do not remove PG mesh)"
        let details["sd_gcr_create_commands"]["-bus_with_signal_flow"] = ""
        let details["sd_gcr_create_commands"]["-quick_route"] = "(Route with no converge passes to speedup runtime. Default: Route with converge passes)"
        let details["sd_gcr_create_commands"]["-trunk_only"] = "(Route on preferred layers only. Default: Route on preferred layers and other layers to access pins)"
        let details["sd_gcr_create_commands"]["-skip_pre_checking"] = "(Skip pre-checking for pin access issues. Default: Check)"
        let details["sd_gcr_create_commands"]["-debug"] = "(Add report command to print out details of each route. Default: Do not print report for each net)"
        let details["sd_gcr_create_commands"]["-devtest"] = "(DO NOT USE!!! Developer testing switch ONLY. Default: PRD)"
   let details["sd_gcr_create_patterns"]={}
        let details["sd_gcr_create_patterns"]["-outfile"] = "(Specify output file-name for writing patterns file)"
        let details["sd_gcr_create_patterns"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["sd_gcr_create_patterns"]["-add_net_type"] = "(Add net type into the track spec of the pattern. Default: None)"
        let details["sd_gcr_create_patterns"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_gcr_dump_bus_constraints"]={}
        let details["sd_gcr_dump_bus_constraints"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["sd_gcr_dump_bus_constraints"]["-outfile"] = "(Specify output file-name for GCR bus constraint file)"
        let details["sd_gcr_dump_bus_constraints"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_gcr_pin_analysis_debug"]={}
        let details["sd_gcr_pin_analysis_debug"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
        let details["sd_gcr_pin_analysis_debug"]["-outfile"] = "(Specify output file-name for debug report. Default: <block>_check_pin_access_debug.rpt)"
        let details["sd_gcr_pin_analysis_debug"]["-standalone"] = "(Standalone pin access reporting. Default: None)"
        let details["sd_gcr_pin_analysis_debug"]["-return"] = "(Return nets instead. Default: ErrCount)"
   let details["sd_gcr_routing_summary"]={}
        let details["sd_gcr_routing_summary"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
        let details["sd_gcr_routing_summary"]["-outfile"] = "(Specify output file-name for summary report. Default: <block>_GCR_routing_summary.rpt)"
   let details["sd_gen_budgets"]={}
   let details["sd_gen_mw_from_icc2"]={}
   let details["sd_gen_spef"]={}
   let details["sd_generate_critical_nets"]={}
        let details["sd_generate_critical_nets"]["-net_threshold"] = ""
        let details["sd_generate_critical_nets"]["-slack_lesser_than"] = ""
        let details["sd_generate_critical_nets"]["-max_paths"] = "(Total number of timing paths to generate. Default is 2000000 (2e6))"
        let details["sd_generate_critical_nets"]["-add_options"] = ""
   let details["sd_generate_icv_netlist"]={}
   let details["sd_generate_pg_template"]={}
        let details["sd_generate_pg_template"]["-file"] = "(Template file name)"
        let details["sd_generate_pg_template"]["-macro"] = "(Create template for macro)"
        let details["sd_generate_pg_template"]["-no_vias"] = "(Turn off power via creation)"
        let details["sd_generate_pg_template"]["-custom_only"] = "(Turn off power via creation)"
        let details["sd_generate_pg_template"]["-no_stack_vias"] = "(Turn off stack via)"
        let details["sd_generate_pg_template"]["-layers"] = "(Generate power straps for specified layers only)"
   let details["sd_get_boundary_cells_from_gvar"]={}
        let details["sd_get_boundary_cells_from_gvar"]["-boundary_type_list"] = "(List of boundary cells with the GVARs of cell and orientation info)"
        let details["sd_get_boundary_cells_from_gvar"]["-layer"] = "(Layer To use for while expanding the GVAR)"
   let details["sd_get_bus_layers_widths"]={}
        let details["sd_get_bus_layers_widths"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_get_fill_layers"]={}
   let details["sd_get_gvars"]={}
   let details["sd_get_keepout_cells_list"]={}
   let details["sd_get_macro_metal_layers"]={}
        let details["sd_get_macro_metal_layers"]["-macro_refs"] = "(List of macro names)"
        let details["sd_get_macro_metal_layers"]["-hml_type"] = "(Type for metal layer query, G_HEML, G_HPML or G_HSML)"
        let details["sd_get_macro_metal_layers"]["-macro_info"] = "(Array that will contain metal layer info per macro)"
   let details["sd_get_normalized_pattern"]={}
        let details["sd_get_normalized_pattern"]["-pattern"] = "(Specify the pattern)"
        let details["sd_get_normalized_pattern"]["-mult"] = "(Specify the pattern multipler)"
        let details["sd_get_normalized_pattern"]["-pitch"] = "(Pattern pitch)"
        let details["sd_get_normalized_pattern"]["-add_net_type"] = "(Add net type into the track spec of the pattern. Default: None)"
        let details["sd_get_normalized_pattern"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_get_pattern_from_track_def"]={}
        let details["sd_get_pattern_from_track_def"]["-track_def"] = "(Specify the track definition)"
        let details["sd_get_pattern_from_track_def"]["-add_net_type"] = "(Add net type into the track spec of the pattern. Default: None)"
        let details["sd_get_pattern_from_track_def"]["-verbose"] = "(Print more information. Default: None)"
   let details["sd_get_process_dot_num"]={}
   let details["sd_get_trackfill_process"]={}
   let details["sd_get_twire_config"]={}
        let details["sd_get_twire_config"]["-use_pg_nets"] = ""
        let details["sd_get_twire_config"]["-uses_aon_nets"] = ""
   let details["sd_get_twire_edge_polygons"]={}
        let details["sd_get_twire_edge_polygons"]["-layers"] = "(Only compute edge polygons for the specified layers)"
   let details["sd_gridpattern_period"]={}
   let details["sd_hier_apply_netlist_ecos"]={}
   let details["sd_hier_insert_boundary_cells"]={}
   let details["sd_hier_insert_ps_cells"]={}
   let details["sd_hier_macro_pin_expose_to_block"]={}
   let details["sd_hier_place"]={}
   let details["sd_hier_ps_stitching"]={}
   let details["sd_hier_push_down_pg"]={}
   let details["sd_hier_push_pg_blockage"]={}
   let details["sd_hier_set_up_rows"]={}
   let details["sd_hierarchy_owner_wrapper"]={}
   let details["sd_ideal_network"]={}
   let details["sd_import_def"]={}
   let details["sd_import_die_file"]={}
   let details["sd_import_vars"]={}
   let details["sd_incr_stdcell_power_hookup"]={}
        let details["sd_incr_stdcell_power_hookup"]["-area"] = "(use defined area for hookup removal/insertion)"
        let details["sd_incr_stdcell_power_hookup"]["-cells"] = "(use area defined by cells boundary)"
   let details["sd_init_place"]={}
   let details["sd_init_rpd"]={}
   let details["sd_input_port_diode"]={}
   let details["sd_insert_boundary_cells"]={}
   let details["sd_insert_decaps"]={}
   let details["sd_insert_fillers"]={}
   let details["sd_insert_level_shifter"]={}
   let details["sd_insert_ps_cells"]={}
   let details["sd_insert_ps_cells_around_macro"]={}
        let details["sd_insert_ps_cells_around_macro"]["-va"] = "(voltage area for ps cell)"
   let details["sd_insert_ps_delay_cell"]={}
   let details["sd_insert_top_block_dic_cells"]={}
   let details["sd_insert_top_block_global_fid_cells"]={}
   let details["sd_io_placement"]={}
   let details["sd_iss_verify"]={}
   let details["sd_iss_verify_check"]={}
   let details["sd_iwsdb_close_tmp_lib"]={}
   let details["sd_iwsdb_open_tmp_lib_and_block"]={}
   let details["sd_iwsdb_recalc_offset_for_uin_gridpattern"]={}
   let details["sd_iwsdb_return_parallel_libs"]={}
   let details["sd_lbist_constraints"]={}
        let details["sd_lbist_constraints"]["-scenarios"] = "(run for list of scenarios, by default running for all scenarios)"
   let details["sd_legalize_placement"]={}
   let details["sd_limit_template_layers"]={}
        let details["sd_limit_template_layers"]["-tags"] = ""
        let details["sd_limit_template_layers"]["-excl_tags"] = ""
        let details["sd_limit_template_layers"]["-layers"] = "(include layers, mutual exclusive with excl_layers)"
        let details["sd_limit_template_layers"]["-excl_layers"] = "(exclude layers, mutual exclusive with layers)"
   let details["sd_load_aocvm"]={}
   let details["sd_load_aocvm_gcd"]={}
        let details["sd_load_aocvm_gcd"]["-corner"] = "(Name of corner, usually max or min)"
        let details["sd_load_aocvm_gcd"]["-timing_mode"] = "(Timing analysis mode: hold or setup)"
   let details["sd_load_aocvm_legacy"]={}
        let details["sd_load_aocvm_legacy"]["-corner"] = "(Name of corner, usually max or min)"
        let details["sd_load_aocvm_legacy"]["-voltage"] = "(Voltage for corner)"
        let details["sd_load_aocvm_legacy"]["-timing_mode"] = "(Timing analysis mode: hold or setup)"
        let details["sd_load_aocvm_legacy"]["-vt_list"] = "(List of valid VT types: ln, nn, etc)"
   let details["sd_load_app_option_info"]={}
   let details["sd_load_base_db_for_eco"]={}
   let details["sd_load_block_timing"]={}
   let details["sd_load_incremental_srsn"]={}
   let details["sd_load_incremental_upf"]={}
   let details["sd_load_io_placement"]={}
   let details["sd_load_macro_placement"]={}
   let details["sd_load_ocvm"]={}
   let details["sd_load_pg_grid"]={}
   let details["sd_load_pocvm"]={}
   let details["sd_load_post_split_constraints"]={}
   let details["sd_load_pre_defined_shapes_for_blocks"]={}
   let details["sd_load_routing_blockage_groups"]={}
   let details["sd_load_td_routes"]={}
   let details["sd_load_tm"]={}
   let details["sd_load_tracks"]={}
   let details["sd_load_upf"]={}
   let details["sd_local_fiducial_cells"]={}
   let details["sd_lr_check_env_vars"]={}
   let details["sd_lr_overrride_tool_versions"]={}
   let details["sd_lr_ovr_tools"]={}
   let details["sd_lr_restore_saved_vars_and_tool_versions"]={}
   let details["sd_lr_setup_run_dir"]={}
   let details["sd_macro_pin_expose_to_block"]={}
   let details["sd_macro_placement"]={}
   let details["sd_macropowerswitchorder"]={}
        let details["sd_macropowerswitchorder"]["-inputPortPattern"] = ""
        let details["sd_macropowerswitchorder"]["-outputPortPattern"] = ""
        let details["sd_macropowerswitchorder"]["-va_name"] = "(Voltage name)"
        let details["sd_macropowerswitchorder"]["-drive_p"] = "(Drive pin)"
   let details["sd_man_page"]={}
   let details["sd_mark_critical_nets_for_qea_fill"]={}
        let details["sd_mark_critical_nets_for_qea_fill"]["-nets"] = "(List or collection of nets to be marked as critical for qea fill)"
   let details["sd_mbist_constraints"]={}
        let details["sd_mbist_constraints"]["-scenarios"] = "(run for list of scenarios, by default running for all scenarios)"
   let details["sd_mcmm_analyze_existing_labels"]={}
   let details["sd_mcmm_corners_setup"]={}
   let details["sd_mcmm_create_scenarios_and_status"]={}
   let details["sd_mcmm_get_corner_default_voltage"]={}
   let details["sd_mcmm_get_corner_of_scenario"]={}
   let details["sd_mcmm_get_corner_priority_search_path"]={}
   let details["sd_mcmm_get_corners_from_map"]={}
   let details["sd_mcmm_get_default_scenario"]={}
   let details["sd_mcmm_get_mode_of_scenario"]={}
   let details["sd_mcmm_get_mode_priority_search_path"]={}
   let details["sd_mcmm_get_process_label"]={}
   let details["sd_mcmm_get_process_number"]={}
   let details["sd_mcmm_get_scenario_constraint_files"]={}
   let details["sd_mcmm_get_scenario_from_corner"]={}
   let details["sd_mcmm_get_scenario_priority_search_path"]={}
   let details["sd_mcmm_is_compatible_mode"]={}
   let details["sd_mcmm_match_ebb_label"]={}
   let details["sd_mcmm_match_ebb_label_from_dror"]={}
   let details["sd_mcmm_match_library_labels_to_spec"]={}
   let details["sd_mcmm_match_stdlib_label"]={}
   let details["sd_mcmm_match_stdlib_label_from_dror"]={}
   let details["sd_mcmm_post_setup_source"]={}
   let details["sd_mcmm_report_and_verify_pvt"]={}
   let details["sd_mcmm_set_corner_constraints"]={}
        let details["sd_mcmm_set_corner_constraints"]["-corners"] = "(list of corners to run for, default is all)"
   let details["sd_mcmm_set_max_transition"]={}
   let details["sd_mcmm_set_mode_constraints"]={}
        let details["sd_mcmm_set_mode_constraints"]["-modes"] = "(list of modes to run for, default is all)"
   let details["sd_mcmm_set_parasitics_parameters"]={}
        let details["sd_mcmm_set_parasitics_parameters"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_mcmm_set_process_labels_numbers"]={}
        let details["sd_mcmm_set_process_labels_numbers"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_mcmm_set_scenario_constraints"]={}
        let details["sd_mcmm_set_scenario_constraints"]["-scenarios"] = "(list of scenarios to run for, default is all)"
   let details["sd_mcmm_set_temperature"]={}
        let details["sd_mcmm_set_temperature"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_mcmm_set_voltage"]={}
        let details["sd_mcmm_set_voltage"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_mcmm_set_voltage_by_source"]={}
        let details["sd_mcmm_set_voltage_by_source"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_mcmm_setup"]={}
        let details["sd_mcmm_setup"]["-keep_existing_scenarios"] = ""
        let details["sd_mcmm_setup"]["-skip_loading_constraints"] = ""
   let details["sd_mcmm_setup_from_file"]={}
   let details["sd_mcmm_source_constraints_file"]={}
        let details["sd_mcmm_source_constraints_file"]["-filename"] = "(file name to source)"
        let details["sd_mcmm_source_constraints_file"]["-logfile"] = "(log file name)"
        let details["sd_mcmm_source_constraints_file"]["-flags"] = "(flags passed to rdt_source_if_exists)"
   let details["sd_mcmm_source_translated_icc_sdc_file"]={}
   let details["sd_mcmm_timing_constraints"]={}
        let details["sd_mcmm_timing_constraints"]["-scenarios"] = "(list of scenarios to run for, default is all)"
        let details["sd_mcmm_timing_constraints"]["-modes"] = "(list of modes to run for, default is all)"
        let details["sd_mcmm_timing_constraints"]["-corners"] = "(list of corners to run for, default is all)"
   let details["sd_mcmm_verify_corner_name_type"]={}
   let details["sd_merge_layout_files"]={}
        let details["sd_merge_layout_files"]["-oasis"] = "(Specify the input oasis file.)"
        let details["sd_merge_layout_files"]["-gds"] = "(Specify the input gds file.)"
        let details["sd_merge_layout_files"]["-cell"] = "(Specify top cell in the input layout file.)"
        let details["sd_merge_layout_files"]["-merge_list"] = ""
        let details["sd_merge_layout_files"]["-units"] = "(Specify the length precision.)"
        let details["sd_merge_layout_files"]["-compress"] = "(Specify if the layout file is compressed)"
   let details["sd_metal_pre_fill"]={}
   let details["sd_module_placement"]={}
   let details["sd_n_site_cycling"]={}
   let details["sd_need_m0cid_remapping"]={}
   let details["sd_open_block"]={}
   let details["sd_open_library"]={}
        let details["sd_open_library"]["-load"] = "(Loads a library based on a tag)"
        let details["sd_open_library"]["-lib"] = "(Library to be opened)"
        let details["sd_open_library"]["-block"] = "(Block to be opened; default G_DESIGN_NAME)"
        let details["sd_open_library"]["-init"] = "(Create the library and design (G_DESIGN_NAME))"
        let details["sd_open_library"]["-dont_copy"] = "(Does not copy the lib to design_LIB)"
        let details["sd_open_library"]["-readonly"] = "(Open the library in read only mode)"
        let details["sd_open_library"]["-reset_references"] = "(Reset the references)"
        let details["sd_open_library"]["-update_techfile"] = "(Update the tech file)"
        let details["sd_open_library"]["-update_design_tech"] = "(Update tech file and tlu+)"
        let details["sd_open_library"]["-keep_all_blocks"] = "(Do not delete the non-opened blocks from library)"
   let details["sd_opportunistic_lfid_cells"]={}
   let details["sd_outputs"]={}
   let details["sd_outputs_aon_pg_net"]={}
   let details["sd_outputs_box_file"]={}
        let details["sd_outputs_box_file"]["-output_file"] = "(Specify the location of the output file)"
   let details["sd_outputs_create_abstract"]={}
   let details["sd_outputs_data_for_extraction"]={}
        let details["sd_outputs_data_for_extraction"]["-input_lib"] = "(Pointer to input nlib)"
        let details["sd_outputs_data_for_extraction"]["-output_lib"] = "(Pointer to output lib)"
        let details["sd_outputs_data_for_extraction"]["-update_hips"] = "(Update the hip references-Ensure you have run noble -populate to get latest hip_list.tcl in WARD/collateral/rtl)"
        let details["sd_outputs_data_for_extraction"]["-generate_boxfile"] = "(Generates the boxfile as a part of the FC pushdown call)"
   let details["sd_outputs_def"]={}
   let details["sd_outputs_def_dct"]={}
   let details["sd_outputs_def_redhawk"]={}
   let details["sd_outputs_fdr_write_vrlg_attr"]={}
   let details["sd_outputs_floorplan_tcl"]={}
   let details["sd_outputs_frame"]={}
   let details["sd_outputs_gds"]={}
   let details["sd_outputs_icv_netlist"]={}
   let details["sd_outputs_iwsdb_write_donut"]={}
   let details["sd_outputs_lef"]={}
   let details["sd_outputs_macro_floorplan"]={}
   let details["sd_outputs_oas"]={}
   let details["sd_outputs_outputs_for_icc"]={}
   let details["sd_outputs_pb_floorplan"]={}
   let details["sd_outputs_saif"]={}
   let details["sd_outputs_scandef"]={}
   let details["sd_outputs_sdc"]={}
   let details["sd_outputs_spef"]={}
   let details["sd_outputs_upf_etm"]={}
   let details["sd_outputs_upf_out"]={}
   let details["sd_outputs_verilog"]={}
   let details["sd_outputs_verilog_w_power"]={}
   let details["sd_outputs_xyv"]={}
   let details["sd_pg_calculate_blockage"]={}
        let details["sd_pg_calculate_blockage"]["-domain_name"] = "(Specify the domain name of upf design)"
        let details["sd_pg_calculate_blockage"]["-custom_pg"] = "(Include custom powergrid)"
   let details["sd_pg_calculate_custom_grid_blockage"]={}
        let details["sd_pg_calculate_custom_grid_blockage"]["-polygon"] = "(Specify the polygon of the custom grid)"
        let details["sd_pg_calculate_custom_grid_blockage"]["-no_softmacro_blockage"] = ""
   let details["sd_pg_regions"]={}
   let details["sd_pg_set_strategy"]={}
        let details["sd_pg_set_strategy"]["-va"] = "(voltage area)"
        let details["sd_pg_set_strategy"]["-block"] = "(blocks)"
        let details["sd_pg_set_strategy"]["-net"] = "(net name)"
        let details["sd_pg_set_strategy"]["-tag"] = "(strategy tag name)"
        let details["sd_pg_set_strategy"]["-blockages"] = "(specify blockage for the power grid)"
        let details["sd_pg_set_strategy"]["-va_mode"] = "(create strategy base on va area instead of design boundary)"
        let details["sd_pg_set_strategy"]["-pg_pin"] = "(create_pg_pins)"
        let details["sd_pg_set_strategy"]["-custom_tags"] = "(Generate power strategies for specified custom tags only)"
   let details["sd_pg_via0_via1_insertion"]={}
        let details["sd_pg_via0_via1_insertion"]["-dirty_mode"] = "(Insert missing vias)"
   let details["sd_place"]={}
   let details["sd_place_custom_2pass"]={}
   let details["sd_place_exploration"]={}
   let details["sd_place_hier_pins"]={}
   let details["sd_place_pins"]={}
        let details["sd_place_pins"]["-nets"] = "(Nets to run place-pins on for testing)"
   let details["sd_place_refine"]={}
   let details["sd_placement_blockage"]={}
   let details["sd_polaris_call"]={}
   let details["sd_post_cts_opt"]={}
   let details["sd_post_cts_setup"]={}
   let details["sd_post_priority_route_report"]={}
        let details["sd_post_priority_route_report"]["-nets"] = "(Nets to report on priority route)"
        let details["sd_post_priority_route_report"]["-use_gcr"] = "(Report from GCR priority routing. Default: ZRoute)"
        let details["sd_post_priority_route_report"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
   let details["sd_post_pushdown_clean_up"]={}
   let details["sd_postplace_spare_cells"]={}
   let details["sd_postprocss_verilog_netlist"]={}
   let details["sd_postroute_tap_insertion"]={}
   let details["sd_power_hookup_search_repair"]={}
   let details["sd_power_switching_activity"]={}
   let details["sd_pre_clock_route"]={}
   let details["sd_pre_priority_route_report"]={}
        let details["sd_pre_priority_route_report"]["-nets"] = "(Nets to report on priority route)"
        let details["sd_pre_priority_route_report"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
   let details["sd_prep_collateral_for_pt"]={}
   let details["sd_preroute"]={}
   let details["sd_priority_create_shields"]={}
        let details["sd_priority_create_shields"]["-nets"] = "(Nets to priority create-shields. Default: All)"
        let details["sd_priority_create_shields"]["-post_gcr"] = "(Post GCR shield modification. Default: None)"
   let details["sd_priority_place_hier_pins"]={}
   let details["sd_priority_route"]={}
        let details["sd_priority_route"]["-nets"] = "(Nets to priority route. Default: All Constrained/G_GCR_SPECIFIC_CONSTRAINTS_ONLY + G_USER_PRIORITY_NETS_FILE)"
        let details["sd_priority_route"]["-shield_only"] = "(Run shielding-only on priority routes. Default: G_PRIORITY_SHIELD_ONLY/Both)"
        let details["sd_priority_route"]["-use_gcr"] = "(Run GCR for priority routing. Default: G_GCR_ROUTE/ZRoute)"
        let details["sd_priority_route"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
        let details["sd_priority_route"]["-gcr_specific_constr_only"] = ""
        let details["sd_priority_route"]["-gcr_route_clocks"] = "(Do not filter-out HFN clock nets for GCR routing. Default: G_GCR_ROUTE_CLOCKS)"
        let details["sd_priority_route"]["-gcr_skip_pre_checking"] = ""
        let details["sd_priority_route"]["-gcr_strip_pg_mesh"] = "(Remove PG mesh during design readin. Default: Do not remove PG mesh)"
        let details["sd_priority_route"]["-gcr_effort"] = "(Route effort: quick==quick-route, trunk==trunk-only, full==full-route. Default: G_GCR_EFFORT/full)"
        let details["sd_priority_route"]["-gcr_keep_session"] = "(ONLY use to keep GCR session loaded when there is a real need to run multiple times and close on last call. Default: Close)"
        let details["sd_priority_route"]["-gcr_avoid_PG_tracks"] = "(Add net type into the track spec of the pattern and avoid using PG tracks. Default: None)"
        let details["sd_priority_route"]["-debug"] = "(Used specifically for GCR debug. Default: G_PRIORITY_DEBUG)"
        let details["sd_priority_route"]["-verbose"] = "(Print more information. Default: None)"
        let details["sd_priority_route"]["-devtest"] = "(DO NOT USE!!! Developer testing switch ONLY. Default: PRD)"
   let details["sd_priority_route_group"]={}
        let details["sd_priority_route_group"]["-nets"] = "(Nets to priority group-route)"
   let details["sd_process_dcszo_cells"]={}
   let details["sd_process_ptlr_collaterals"]={}
   let details["sd_propagate_driver_supply"]={}
   let details["sd_propagate_pg_terminal"]={}
   let details["sd_ps_handle_dangling_ack_net"]={}
        let details["sd_ps_handle_dangling_ack_net"]["-drv_pin"] = "(Pin to drive the ps chain hier ack pin)"
        let details["sd_ps_handle_dangling_ack_net"]["-ps_ack_port_net"] = ""
        let details["sd_ps_handle_dangling_ack_net"]["-ps_ack_port"] = ""
        let details["sd_ps_handle_dangling_ack_net"]["-is_top_level_port"] = ""
   let details["sd_ps_pg_hookup"]={}
        let details["sd_ps_pg_hookup"]["-cells"] = "(Specify the ps cells to insert via ladder)"
   let details["sd_ps_pg_hookup_use_cfg"]={}
        let details["sd_ps_pg_hookup_use_cfg"]["-cells"] = "(Use to specify individual cells, otherwise operation is performed on all cells)"
        let details["sd_ps_pg_hookup_use_cfg"]["-connect_layer"] = "(Specify the ungated layer to hookup. Default is m5)"
        let details["sd_ps_pg_hookup_use_cfg"]["-incremental"] = "(Run the power switch power hookup in incremental mode on newly added PS cells)"
        let details["sd_ps_pg_hookup_use_cfg"]["-ps_pin_name"] = ""
   let details["sd_ps_remove_hookup"]={}
        let details["sd_ps_remove_hookup"]["-cells"] = "(Specify the ps cells to insert via ladder)"
   let details["sd_ps_report_chain_info"]={}
   let details["sd_ps_snap_placement"]={}
   let details["sd_ps_stitching"]={}
   let details["sd_pt_ctsizer_run_flow"]={}
   let details["sd_pt_lr_run_flow"]={}
   let details["sd_pt_lrdp_run_flow"]={}
   let details["sd_pteco_apr_eco_setting"]={}
   let details["sd_pteco_fixer"]={}
   let details["sd_push_down_pg"]={}
   let details["sd_pushdown"]={}
   let details["sd_pushdown_pv_voltage_map"]={}
   let details["sd_pwr_hookup_interity_check"]={}
        let details["sd_pwr_hookup_interity_check"]["-max_tracks_for_gcn_in_cell"] = ""
        let details["sd_pwr_hookup_interity_check"]["-max_tracks_for_m0_in_cell"] = ""
        let details["sd_pwr_hookup_interity_check"]["-checker_max_tracks_for_gcn"] = ""
        let details["sd_pwr_hookup_interity_check"]["-checker_max_tracks_for_m0"] = ""
   let details["sd_qea_fill_critical_net_flow"]={}
   let details["sd_read_design"]={}
        let details["sd_read_design"]["-force_full_view"] = "(Force reading of full verilog - full view)"
   let details["sd_read_design_for_delite"]={}
   let details["sd_read_design_for_planning"]={}
   let details["sd_read_design_for_split_constraints"]={}
   let details["sd_read_layout_file"]={}
        let details["sd_read_layout_file"]["-oasis"] = ""
        let details["sd_read_layout_file"]["-cell"] = "(Specify top cell name in input oasis)"
        let details["sd_read_layout_file"]["-type"] = "(Specify dfm run type)"
   let details["sd_read_netspec"]={}
   let details["sd_read_pin_constraints_in_tcl_format"]={}
   let details["sd_read_pin_constraints_in_topo_format"]={}
   let details["sd_read_pspec"]={}
   let details["sd_read_pushdown_cells"]={}
   let details["sd_read_pushdown_content"]={}
   let details["sd_read_pushdown_routes_and_blockages"]={}
   let details["sd_read_pv_voltage_mapfile"]={}
   let details["sd_read_tspec"]={}
   let details["sd_read_upf"]={}
   let details["sd_read_user_collateral"]={}
   let details["sd_read_voltage_tcl_file"]={}
   let details["sd_reconcile_tintent"]={}
   let details["sd_regen_budgets"]={}
   let details["sd_remove_aon_pg_hookup"]={}
        let details["sd_remove_aon_pg_hookup"]["-cells"] = "(Specify the aon cells to insert via ladder)"
   let details["sd_remove_critical_nets_for_qea_fill"]={}
   let details["sd_remove_donut"]={}
   let details["sd_remove_icc_wrappers"]={}
   let details["sd_remove_level_shifter"]={}
   let details["sd_remove_pg_pins_based_on_user_input"]={}
   let details["sd_remove_priority_routes"]={}
        let details["sd_remove_priority_routes"]["-nets"] = "(Nets to remove priority routes)"
   let details["sd_remove_top_gas_station_wrapper"]={}
   let details["sd_replace_module_netlist"]={}
   let details["sd_report_pin_constraints"]={}
   let details["sd_report_pin_placement_qor"]={}
   let details["sd_reports_app_options"]={}
   let details["sd_reports_area"]={}
   let details["sd_reports_check_legality"]={}
   let details["sd_reports_check_mv_design"]={}
   let details["sd_reports_check_pin_placement"]={}
   let details["sd_reports_check_routes"]={}
   let details["sd_reports_clk_cap_histogram"]={}
   let details["sd_reports_clk_latency"]={}
   let details["sd_reports_clk_local_skew"]={}
   let details["sd_reports_clk_local_skew_histogram"]={}
   let details["sd_reports_clk_skew"]={}
   let details["sd_reports_clk_structure"]={}
   let details["sd_reports_clk_transition"]={}
   let details["sd_reports_clock"]={}
   let details["sd_reports_clock_drc_violators"]={}
   let details["sd_reports_clock_tree_summary"]={}
   let details["sd_reports_config_vars"]={}
   let details["sd_reports_design_check"]={}
   let details["sd_reports_design_qor"]={}
   let details["sd_reports_design_report"]={}
   let details["sd_reports_macro_data"]={}
   let details["sd_reports_max_fanout_vio"]={}
   let details["sd_reports_pdfx_content"]={}
   let details["sd_reports_pdfx_power_connections"]={}
   let details["sd_reports_pg_connectivity"]={}
   let details["sd_reports_pg_drc"]={}
   let details["sd_reports_pin_placement_qor"]={}
   let details["sd_reports_ps_chain_info"]={}
   let details["sd_reports_pspec"]={}
   let details["sd_reports_qor"]={}
   let details["sd_reports_secondary_power_bounds"]={}
   let details["sd_reports_threshold_voltage_group"]={}
   let details["sd_reports_vio_all"]={}
   let details["sd_reports_vio_max_no_clock_expanded_nworst_100"]={}
   let details["sd_reports_vio_max_nworst_100"]={}
   let details["sd_reports_vio_min_no_clock_expanded_nworst_100"]={}
   let details["sd_reports_vio_min_nworst_100"]={}
   let details["sd_reports_zeroRC_timing"]={}
   let details["sd_reset_library"]={}
   let details["sd_restore_input_port_diode_connections"]={}
   let details["sd_restore_pre_abstract_cmds"]={}
   let details["sd_restore_user_default_app_options"]={}
   let details["sd_route"]={}
   let details["sd_route_add_via_ladders"]={}
        let details["sd_route_add_via_ladders"]["-allow_drcs"] = ""
        let details["sd_route_add_via_ladders"]["-report_tag"] = "(Report stage tag.)"
   let details["sd_route_global"]={}
   let details["sd_route_opt"]={}
   let details["sd_rpd_post_place"]={}
   let details["sd_run_adr"]={}
   let details["sd_run_conformal_check"]={}
        let details["sd_run_conformal_check"]["-run_check"] = "(optional argument to run actual conformal check, default only shell shell executable file is generated)"
   let details["sd_run_health_check"]={}
   let details["sd_run_parallel_job"]={}
        let details["sd_run_parallel_job"]["-script_name"] = "(name of scripts to execute, include full-path to script)"
        let details["sd_run_parallel_job"]["-cells"] = "(collection of cells for which script will run)"
        let details["sd_run_parallel_job"]["-blocks"] = "(collection of blocks for which script will run)"
        let details["sd_run_parallel_job"]["-work_dir"] = "(name of working directory where run_block_script jobs will be managed)"
        let details["sd_run_parallel_job"]["-host_options"] = ""
        let details["sd_run_parallel_job"]["-run_order"] = "(top_down or bottom_up or all)"
        let details["sd_run_parallel_job"]["-var_list"] = "(list_of_variable_value_pairs)"
        let details["sd_run_parallel_job"]["-detach"] = "(detach)"
   let details["sd_run_rumba_flow"]={}
   let details["sd_save_input_port_diode_connections"]={}
   let details["sd_save_user_default_app_options"]={}
   let details["sd_seq_chain_alignment"]={}
        let details["sd_seq_chain_alignment"]["-anchors"] = "(Ports or pins that are startpoints for the chains)"
        let details["sd_seq_chain_alignment"]["-corridor"] = "(Routing corridor object that is created in the database)"
        let details["sd_seq_chain_alignment"]["-run_place_pins"] = "(Switch to enable place_pins command run after all constraints are set)"
   let details["sd_ser_insertion"]={}
   let details["sd_set_antenna_rules"]={}
   let details["sd_set_attributes"]={}
   let details["sd_set_boundary_for_logical_black_box"]={}
   let details["sd_set_boundary_insertion_variables"]={}
   let details["sd_set_detail_route_shape_use_and_physical_status"]={}
        let details["sd_set_detail_route_shape_use_and_physical_status"]["-shape_use"] = "(Shape-use to set from detail-route shape-use. Default: user_route)"
        let details["sd_set_detail_route_shape_use_and_physical_status"]["-phys_status"] = ""
        let details["sd_set_detail_route_shape_use_and_physical_status"]["-nets"] = "(Nets to set shape-use from detail-route. Default: All)"
        let details["sd_set_detail_route_shape_use_and_physical_status"]["-layers"] = "(List of layers to set shape-use and physical-status. Default: All)"
   let details["sd_set_freeze_port_constraints"]={}
        let details["sd_set_freeze_port_constraints"]["-remove"] = "(remove all freeze port settings)"
        let details["sd_set_freeze_port_constraints"]["-type"] = "(data/clock/all )"
   let details["sd_set_gvars_from_array"]={}
   let details["sd_set_hierarchy_owner"]={}
   let details["sd_set_host_options"]={}
   let details["sd_set_io_preroute_constraints"]={}
        let details["sd_set_io_preroute_constraints"]["-ports"] = "(List of port to check)"
        let details["sd_set_io_preroute_constraints"]["-min_layer_constraint"] = ""
        let details["sd_set_io_preroute_constraints"]["-max_layer_constraint"] = ""
        let details["sd_set_io_preroute_constraints"]["-use_ndr"] = "(Use ndr for the net. Default is not use)"
   let details["sd_set_is_ft_noconn"]={}
   let details["sd_set_is_ft_noconn_for_block"]={}
   let details["sd_set_is_td"]={}
   let details["sd_set_layer_costs"]={}
        let details["sd_set_layer_costs"]["-costlist"] = "(Specify a complete list {via1 via2 ... via9  m0 m1 ... m10})"
        let details["sd_set_layer_costs"]["-reset"] = "(Reset layer costs back to defaults)"
   let details["sd_set_min_max_ignored_layers"]={}
   let details["sd_set_multi_vtlibs"]={}
   let details["sd_set_parent_bbox"]={}
   let details["sd_set_pg_td_true"]={}
   let details["sd_set_pocvm_coeff_scale_factor"]={}
   let details["sd_set_pocvm_guardband"]={}
   let details["sd_set_preroute_constraints"]={}
   let details["sd_set_priority_route_options"]={}
        let details["sd_set_priority_route_options"]["-use_gcr"] = "(Set GCR route options. Default: ZRoute)"
        let details["sd_set_priority_route_options"]["-trunk_only"] = "(Route on preferred layers only. Default: Route on preferred layers and other layers to access pins)"
   let details["sd_set_routing_direction"]={}
   let details["sd_set_tile_symmetry"]={}
   let details["sd_set_vt_groups"]={}
   let details["sd_set_wiretracks"]={}
   let details["sd_setup_ctp_config"]={}
   let details["sd_setup_macro_placement_constraints"]={}
   let details["sd_setup_parasitic_tech"]={}
   let details["sd_setup_placement_constraints"]={}
   let details["sd_setup_xmim"]={}
   let details["sd_shape_blocks"]={}
   let details["sd_shell_budgets"]={}
   let details["sd_skew_groups_for_icc"]={}
   let details["sd_snap_macro_placement"]={}
        let details["sd_snap_macro_placement"]["-pushdown"] = "(Enable and control snapping for pushdowns)"
   let details["sd_source_caliber_cbc_files"]={}
   let details["sd_spare_cells"]={}
   let details["sd_split_constraints"]={}
   let details["sd_split_ps_chain"]={}
        let details["sd_split_ps_chain"]["-domain_name"] = "(List of power domain names to split the chain)"
        let details["sd_split_ps_chain"]["-control_signal"] = "(List of control signal names of \"a\" chain of above power domains in the same order)"
        let details["sd_split_ps_chain"]["-use_g_var_libcell"] = "(Uses G_POWER_SWITCH_CELL instead of upf lib cell)"
   let details["sd_stdcell_power_hookup"]={}
   let details["sd_stitch_from_mapfile"]={}
   let details["sd_stitch_physically_shorted_pins"]={}
   let details["sd_stitch_xmim"]={}
   let details["sd_swap_design_and_remove_abstract"]={}
   let details["sd_swap_macrohalos_heml4"]={}
        let details["sd_swap_macrohalos_heml4"]["-macros"] = "(to query blocks info for all macros)"
   let details["sd_switch_to_donut"]={}
   let details["sd_synthesize_clock_trunks"]={}
   let details["sd_tap_cells"]={}
   let details["sd_td_handler"]={}
   let details["sd_test_budgets"]={}
   let details["sd_tho_off"]={}
   let details["sd_tho_on"]={}
   let details["sd_tho_place"]={}
   let details["sd_time_derate_setup"]={}
        let details["sd_time_derate_setup"]["-corners"] = "(list of corners to work on, default is all)"
   let details["sd_tm_attach_attribute"]={}
   let details["sd_tm_create_terminal_blockage_on_boundary"]={}
   let details["sd_tm_get_boundary"]={}
   let details["sd_tm_popup"]={}
        let details["sd_tm_popup"]["-disable_mim"] = "(Dont process MIM Cap layers)"
   let details["sd_tm_route_terminal_blockage_on_boundary"]={}
        let details["sd_tm_route_terminal_blockage_on_boundary"]["-layer"] = "(Layers to be processed)"
        let details["sd_tm_route_terminal_blockage_on_boundary"]["-rects"] = "(Rectangle withtin which termianls/blockages are created)"
        let details["sd_tm_route_terminal_blockage_on_boundary"]["-only_blockages"] = "(If only blockages to create)"
   let details["sd_tm_write_collateral"]={}
        let details["sd_tm_write_collateral"]["-generate_def"] = "(To generate DEF file(both bu_tm & td_tm) : Default is .tcl format)"
        let details["sd_tm_write_collateral"]["-disable_mim"] = "(Dont process MIM Cap layers)"
        let details["sd_tm_write_collateral"]["-skip_bu_tm"] = "(In case if you want to generate only td_tm you can disable generating bu_tm with this option)"
        let details["sd_tm_write_collateral"]["-dont_delete_top_metals"] = ""
        let details["sd_tm_write_collateral"]["-convert_term_to_shape"] = ""
        let details["sd_tm_write_collateral"]["-deleteCurrentLayerTM"] = ""
   let details["sd_undo_pteco_apr_eco_setting"]={}
   let details["sd_update_local_config_for_mcmm_run"]={}
   let details["sd_update_uin_keepout_cells"]={}
   let details["sd_upf_setup"]={}
   let details["sd_uv_fill"]={}
   let details["sd_vcx250_fill"]={}
   let details["sd_vector_swap"]={}
   let details["sd_via1_size"]={}
   let details["sd_via_color"]={}
   let details["sd_visa_set_clock_exceptions"]={}
   let details["sd_visa_trace_connectivity"]={}
   let details["sd_voltage_areas"]={}
   let details["sd_waitForICVComplete"]={}
   let details["sd_write_collateral"]={}
   let details["sd_write_collateral_for_block"]={}
        let details["sd_write_collateral_for_block"]["-block"] = "(Name of the block for which collateral is being written)"
        let details["sd_write_collateral_for_block"]["-formats"] = "(List of formats to write collaterals)"
        let details["sd_write_collateral_for_block"]["-cache_dir"] = "(Directory with cached collateral info)"
   let details["sd_write_dp2apr_hand_shaking_ndm"]={}
   let details["sd_write_evr_collateral"]={}
   let details["sd_write_evr_collateral_for_one_cell"]={}
        let details["sd_write_evr_collateral_for_one_cell"]["-cell"] = "(Cell to write collateral for)"
        let details["sd_write_evr_collateral_for_one_cell"]["-layers"] = "(List of layers to write EVR collateral for)"
        let details["sd_write_evr_collateral_for_one_cell"]["-file_name"] = "(File name)"
   let details["sd_write_icv_netlist"]={}
   let details["sd_write_iss_cmdfile"]={}
   let details["sd_write_layout_file"]={}
        let details["sd_write_layout_file"]["-output_file"] = ""
        let details["sd_write_layout_file"]["-cell"] = "(Specify the cell for the layout file. Default is the current open cel)"
        let details["sd_write_layout_file"]["-lib"] = "(Specify the lib for the cell to include in the layout file. Default is the current open ndm library)"
        let details["sd_write_layout_file"]["-compress"] = "(Specify if layout file to be compressed.  Oasis is compressed by default)"
        let details["sd_write_layout_file"]["-skip_fill_output"] = "(Specify if fill data should be skipped)"
        let details["sd_write_layout_file"]["-use_donut"] = "(Enable using donut models for sub blocks)"
        let details["sd_write_layout_file"]["-ignore_blocks"] = ""
        let details["sd_write_layout_file"]["-rename_cell"] = ""
        let details["sd_write_layout_file"]["-output_net_text"] = "(Specify if text is to be written for a net-shape)"
        let details["sd_write_layout_file"]["-create_port_for_terminals"] = ""
   let details["sd_write_macro_spice"]={}
   let details["sd_write_oas2ndm"]={}
        let details["sd_write_oas2ndm"]["-input_oasis_file"] = ""
        let details["sd_write_oas2ndm"]["-input_top_cell"] = ""
        let details["sd_write_oas2ndm"]["-ndm_lib_cell"] = ""
        let details["sd_write_oas2ndm"]["-ndm_lib_name"] = ""
        let details["sd_write_oas2ndm"]["-ndm_lib_path"] = ""
        let details["sd_write_oas2ndm"]["-fillcell"] = "(Specify if oas write to FILL view)"
        let details["sd_write_oas2ndm"]["-rundir"] = "(run directory)"
   let details["sd_write_verilog_netlist"]={}
   let details["sd_zt_brb_on_cell_pin_ends"]={}
   let details["sd_zt_brb_on_pin_ends"]={}
        let details["sd_zt_brb_on_pin_ends"]["-pin"] = "(Pin to add routing blockages on ends)"
   let details["sd_zt_create_brb_around_macro"]={}
        let details["sd_zt_create_brb_around_macro"]["-macro"] = "(generate brb for this macro)"
        let details["sd_zt_create_brb_around_macro"]["-back_off_half_dr"] = "(back_off brb half dr from boundary)"
   let details["sd_zt_create_fkp_over_macros"]={}
        let details["sd_zt_create_fkp_over_macros"]["-layers"] = "(layers to create fkp on)"
   let details["sd_zt_create_staggered_pin_triplets"]={}
        let details["sd_zt_create_staggered_pin_triplets"]["-layers"] = "(Specify layers to stagger boundary pins.)"
   let details["sd_zt_extend_power_staples_neighbors"]={}
        let details["sd_zt_extend_power_staples_neighbors"]["-terminals"] = "(Find neighbors of this non-staple terminal)"
        let details["sd_zt_extend_power_staples_neighbors"]["-zt_staple_ext"] = ""
   let details["sd_zt_extend_power_staples_to_boundary"]={}
        let details["sd_zt_extend_power_staples_to_boundary"]["-layers"] = "(Only extend on these layers)"
   let details["sd_zt_extend_power_staples_to_macros"]={}
        let details["sd_zt_extend_power_staples_to_macros"]["-layers"] = "(Only extend on these layers)"
   let details["sd_zt_get_dbbrg_layer_spacing"]={}
        let details["sd_zt_get_dbbrg_layer_spacing"]["-layer"] = "(Layer to calculate dbbrg spacing)"
   let details["sd_zt_neighbor_isolated_pins"]={}
        let details["sd_zt_neighbor_isolated_pins"]["-layers"] = "(Only run on isolated pins on these layers)"
        let details["sd_zt_neighbor_isolated_pins"]["-terminals"] = "(Specify terminals to fix. Default is for all terminals of specified layer)"
   let details["sd_zt_pull_back_boundary_terms"]={}
        let details["sd_zt_pull_back_boundary_terms"]["-layers"] = "(Pull-back terminals on these layers)"
   let details["sd_zt_query_term_neighbor"]={}
        let details["sd_zt_query_term_neighbor"]["-terminal"] = "(Find neighbor of this terminal)"
        let details["sd_zt_query_term_neighbor"]["-dir"] = "(Provide direction to look for neighbor: left/right/up/down)"
   let details["sd_zt_remove_brb_on_cell_pin_ends"]={}
   let details["sd_zt_stagger_pin_triplets"]={}
        let details["sd_zt_stagger_pin_triplets"]["-layer"] = "(Specify layer to stagger boundary pins.)"
        let details["sd_zt_stagger_pin_triplets"]["-length1"] = "(First terminal length)"
        let details["sd_zt_stagger_pin_triplets"]["-length2"] = "(Second terminal length)"
        let details["sd_zt_stagger_pin_triplets"]["-length3"] = "(Third terminal length)"
        let details["sd_zt_stagger_pin_triplets"]["-length4"] = "(Fourth terminal length)"
        let details["sd_zt_stagger_pin_triplets"]["-length5"] = "(Fifth terminal length)"
        let details["sd_zt_stagger_pin_triplets"]["-length6"] = "(Sixth terminal length.  Longest between length1, length2, length3, length4, length5 and lenght6 will be used to as first pin length in pattern. 2nd longest will be used as 2nd pin length and so on. )"
   let details["seed_pspecs"]={}
   let details["setDuetUser"]={}
   let details["set_hidden_app_var"]={}
   let details["set_info_var"]={}
        let details["set_info_var"]["-required"] = "(Variable needs to be set)"
        let details["set_info_var"]["-category"] = "(Step/procedure/category for the variable - default global)"
        let details["set_info_var"]["-caller"] = "(Procedure that uses the var (usually step procedure))"
        let details["set_info_var"]["-type"] = "(Type of the variable. Similar to the option used by setvar - default: string)"
        let details["set_info_var"]["-one_of"] = "(List of user specified value for the variable)"
   let details["set_m14_pg_config_by_direction"]={}
   let details["set_ssc_clock"]={}
        let details["set_ssc_clock"]["-from"] = "(name of the source register clock pin)"
        let details["set_ssc_clock"]["-to"] = "(port name at which you want to create generated clock)"
        let details["set_ssc_clock"]["-clock"] = "(name of the new generated clock)"
        let details["set_ssc_clock"]["-debug"] = "(enable debug message)"
   let details["set_ssc_data_read"]={}
        let details["set_ssc_data_read"]["-to"] = "(name of the source register )"
        let details["set_ssc_data_read"]["-from"] = "(name of the data port at which you want to create the check)"
        let details["set_ssc_data_read"]["-clock"] = "(name of the clock against which the check should be defined)"
        let details["set_ssc_data_read"]["-setup_args"] = "(setup value)"
        let details["set_ssc_data_read"]["-hold_args"] = "(hold value)"
        let details["set_ssc_data_read"]["-debug"] = "(enable debug message)"
        let details["set_ssc_data_read"]["-nofp"] = "(dont apply false paths)"
   let details["set_ssc_data_write"]={}
        let details["set_ssc_data_write"]["-from"] = "(name of the source register name or pin)"
        let details["set_ssc_data_write"]["-to"] = "(name of the data port at which you want to create the check)"
        let details["set_ssc_data_write"]["-clock"] = "(name of the clock against which the check should be defined)"
        let details["set_ssc_data_write"]["-setup_args"] = "(setup value)"
        let details["set_ssc_data_write"]["-hold_args"] = "(hold value)"
        let details["set_ssc_data_write"]["-debug"] = "(enable debug message)"
        let details["set_ssc_data_write"]["-nofp"] = "(dont apply false paths)"
   let details["set_ssc_top_get_par_name"]={}
   let details["set_ssc_top_get_unit_name"]={}
   let details["set_ssc_top_get_unit_par_names"]={}
   let details["set_tmp_var"]={}
   let details["set_unix_variable"]={}
   let details["setenv"]={}
   let details["setvar"]={}
        let details["setvar"]["-info"] = "(Information about the parameter)"
        let details["setvar"]["-constant"] = "(Value cannot be modified after setting)"
        let details["setvar"]["-type"] = "(Type of the parameter)"
        let details["setvar"]["-one_of"] = "(List of user specified value for the variable)"
        let details["setvar"]["-property"] = "(User property for parameter)"
        let details["setvar"]["-subst"] = "(Run subst before returning the value in getvar)"
        let details["setvar"]["-roulette"] = "(Values for roulette flow.)"
   let details["setvar_array"]={}
   let details["setvar_array_copy_partial"]={}
        let details["setvar_array_copy_partial"]["-from_array"] = "(Source array name)"
        let details["setvar_array_copy_partial"]["-from_tag"] = "(Source array key pattern)"
        let details["setvar_array_copy_partial"]["-to_array"] = "(Target array name)"
        let details["setvar_array_copy_partial"]["-to_tag"] = "(Target array key pattern)"
        let details["setvar_array_copy_partial"]["-clean"] = "(Cleanup target array first)"
   let details["sh"]={}
   let details["shell_debug"]={}
   let details["snps_version_at_least"]={}
   let details["snps_version_prior_to"]={}
   let details["snps_version_within"]={}
   let details["sort_bboxes_y_x_increasing"]={}
   let details["source_pkg_file"]={}
   let details["split_bins"]={}
   let details["ss_remove_net_routing"]={}
   let details["tclLog"]={}
   let details["tclPkgSetup"]={}
   let details["tclPkgUnknown"]={}
   let details["tcl_findLibrary"]={}
   let details["termWire"]={}
   let details["test_rst"]={}
   let details["tkerror"]={}
   let details["tm_container"]={}
   let details["unknown"]={}
   let details["unset_tmp_var"]={}
   let details["unsetenv"]={}
   let details["unsetvar"]={}
        let details["unsetvar"]["-array"] = "(Consider the parameter as an array)"
   let details["update_local_config_for_mcmm_run"]={}
   let details["v_mod_list"]={}
   let details["visa_clocks_in_path_groups"]={}
   let details["visa_constraints"]={}
   let details["visa_create_clock_and_constraints"]={}
   let details["visa_filter_clocks"]={}
   let details["visa_find_outlane_number"]={}
   let details["visa_get_unit_name"]={}
   let details["visa_setup_tool"]={}
   let details["visa_uncertainty"]={}
   let details["visa_uncertainty_post_cts"]={}
   let details["visa_uncertainty_post_process"]={}
   let details["visa_unset_tool"]={}
   let details["visa_write_need_visa_report"]={}
   let details["write_bound"]={}
   let details["write_checksum"]={}
        let details["write_checksum"]["-output_directory"] = ""
        let details["write_checksum"]["-type"] = "(Optional, one of the following checksum type \"library design parasitics constraints\". If this option is not used, all checksums are generated.)"
        let details["write_checksum"]["-scenario"] = "(Optional, scenario for which report needs to be generated; if not specified, will use current_scenario. This option should not be used for PT.)"
   let details["write_clock_trunks"]={}
        let details["write_clock_trunks"]["-clock"] = "(List of clocks for which to write the clock trunk.)"
        let details["write_clock_trunks"]["-file"] = "(File to write TCL commands to.)"
   let details["write_create_clock_for_feedthroughs"]={}
   let details["write_dim"]={}
   let details["write_hidden_app_var"]={}
   let details["write_inc_srsn_for_eco"]={}
        let details["write_inc_srsn_for_eco"]["-blocks"] = ""
   let details["write_placement"]={}
   let details["write_pt_checksum"]={}
        let details["write_pt_checksum"]["-pt_exec_path"] = "(Path to PT shell executable)"
        let details["write_pt_checksum"]["-pt_user_script"] = ""
        let details["write_pt_checksum"]["-output_directory"] = ""
        let details["write_pt_checksum"]["-type"] = "(Optional, one of the following checksum type \"library design parasitics constraints\". If this option is not used, all checksums are generated.)"
   let details["ATC_UTILS::change_mode"]={}
   let details["ATC_UTILS::check_write_correlation_files_status"]={}
   let details["ATC_UTILS::collect_endpoints_reports"]={}
   let details["ATC_UTILS::decode_pt_executable_version"]={}
   let details["ATC_UTILS::execute_cmd"]={}
   let details["ATC_UTILS::find_slew_collector_script"]={}
   let details["ATC_UTILS::generate_diagnose_endpoints_cmd"]={}
   let details["ATC_UTILS::get_most_critical_slack_endpoints"]={}
   let details["ATC_UTILS::get_significant_digits"]={}
   let details["ATC_UTILS::make_named_file"]={}
   let details["ATC_UTILS::parse_diagnose_options"]={}
   let details["ATC_UTILS::print_file"]={}
   let details["ATC_UTILS::process_diagnose_tasks"]={}
   let details["CLOCK_PLANNING_GUI::clean_data"]={}
   let details["CLOCK_PLANNING_GUI::cluster_terms"]={}
   let details["CLOCK_PLANNING_GUI::compute_color"]={}
   let details["CLOCK_PLANNING_GUI::compute_min_max_metric_values"]={}
   let details["CLOCK_PLANNING_GUI::compute_ocv_slack_degradation"]={}
   let details["CLOCK_PLANNING_GUI::compute_uncached_clocks"]={}
   let details["CLOCK_PLANNING_GUI::create_menu"]={}
   let details["CLOCK_PLANNING_GUI::create_single_menu"]={}
   let details["CLOCK_PLANNING_GUI::create_tk_clock_trunk_planning_manual_planning"]={}
   let details["CLOCK_PLANNING_GUI::do_fix_violations"]={}
   let details["CLOCK_PLANNING_GUI::do_trunk_buffering"]={}
   let details["CLOCK_PLANNING_GUI::find_cyclic_path"]={}
   let details["CLOCK_PLANNING_GUI::fix_violations"]={}
   let details["CLOCK_PLANNING_GUI::get_bucket"]={}
   let details["CLOCK_PLANNING_GUI::get_clock_trunk_cells"]={}
   let details["CLOCK_PLANNING_GUI::get_constraint_mappings"]={}
   let details["CLOCK_PLANNING_GUI::get_endpoint_latency"]={}
   let details["CLOCK_PLANNING_GUI::get_grandmaster_clock"]={}
   let details["CLOCK_PLANNING_GUI::get_interesting_clocks"]={}
   let details["CLOCK_PLANNING_GUI::get_pin_or_port"]={}
   let details["CLOCK_PLANNING_GUI::get_position_or_object"]={}
   let details["CLOCK_PLANNING_GUI::get_selected_clock_pins"]={}
   let details["CLOCK_PLANNING_GUI::get_test_info"]={}
   let details["CLOCK_PLANNING_GUI::get_trunk_command"]={}
   let details["CLOCK_PLANNING_GUI::get_vm_object"]={}
   let details["CLOCK_PLANNING_GUI::get_vm_object_hi"]={}
   let details["CLOCK_PLANNING_GUI::gui_add_clock_trunk_buffer"]={}
   let details["CLOCK_PLANNING_GUI::gui_synthesize_clock_trunk"]={}
   let details["CLOCK_PLANNING_GUI::has_selected_clock_pins"]={}
   let details["CLOCK_PLANNING_GUI::has_violations"]={}
   let details["CLOCK_PLANNING_GUI::is_buffer"]={}
   let details["CLOCK_PLANNING_GUI::is_clock_enabled"]={}
   let details["CLOCK_PLANNING_GUI::is_in_block"]={}
   let details["CLOCK_PLANNING_GUI::is_inf"]={}
   let details["CLOCK_PLANNING_GUI::is_repeater"]={}
   let details["CLOCK_PLANNING_GUI::map"]={}
   let details["CLOCK_PLANNING_GUI::mark_fanin"]={}
   let details["CLOCK_PLANNING_GUI::mark_fanout"]={}
   let details["CLOCK_PLANNING_GUI::num_format"]={}
   let details["CLOCK_PLANNING_GUI::print_columns"]={}
   let details["CLOCK_PLANNING_GUI::print_underlined"]={}
   let details["CLOCK_PLANNING_GUI::reload_clock_trunk_vm"]={}
   let details["CLOCK_PLANNING_GUI::safe_add"]={}
   let details["CLOCK_PLANNING_GUI::switch_to_clock"]={}
   let details["CLOCK_PLANNING_GUI::synthesize_clock_trunks_for_blocks"]={}
   let details["CLOCK_PLANNING_GUI::update_min_max"]={}
   let details["CLOCK_PLANNING_GUI::update_ocv_slack_degradation"]={}
   let details["CLOCK_PLANNING_GUI::write_clock_trunks"]={}
   let details["CORR::Stats"]={}
   let details["CORR::addInfo"]={}
   let details["CORR::computeStats"]={}
   let details["CORR::correl_histogram"]={}
   let details["CORR::doCorrel"]={}
   let details["CORR::get_args"]={}
   let details["CORR::mergeFile"]={}
   let details["CORR::preprocess"]={}
   let details["CORR::printDash"]={}
   let details["CORR::printHeader"]={}
   let details["CORR::printMetric"]={}
   let details["CORR::printQorHeader"]={}
   let details["CORR::printQorMetric"]={}
   let details["CORR::printShortMetric"]={}
   let details["CORR::showDetails"]={}
   let details["CORR::showShortSummary"]={}
   let details["CORR::showSummary"]={}
   let details["CORR::showSummaryNew"]={}
   let details["CORR::splitFile"]={}
   let details["CORR::splitMergeFile"]={}
   let details["Customize::CleanupBrowser"]={}
   let details["Customize::HierBrowserSelChangedCB"]={}
   let details["Customize::addContextOptions"]={}
   let details["Customize::addSlctTargetsOptions"]={}
   let details["Customize::begin_group_op"]={}
   let details["Customize::begin_group_up"]={}
   let details["Customize::end_group_op"]={}
   let details["Customize::end_group_up"]={}
   let details["Customize::find_executable"]={}
   let details["Customize::get_all_nets"]={}
   let details["Customize::get_attribute"]={}
   let details["Customize::get_attribute_slct"]={}
   let details["Customize::get_hier_browser_class"]={}
   let details["Customize::get_path_groups"]={}
   let details["Customize::get_timing_paths"]={}
   let details["Customize::get_user_hier_list"]={}
   let details["Customize::gui_get_float_attribute"]={}
   let details["Customize::netscape_is_running"]={}
   let details["Customize::openDesignList"]={}
   let details["Customize::parse_url"]={}
   let details["Customize::read_files_callback"]={}
   let details["Customize::recover_user_locale"]={}
   let details["Customize::source_tcl_file"]={}
   let details["DP_UTIL::all_block_cells"]={}
   let details["DP_UTIL::all_io_pads"]={}
   let details["DP_UTIL::all_macro_cells"]={}
   let details["DP_UTIL::captureWindow"]={}
   let details["DP_UTIL::captureWindowSub"]={}
   let details["DP_UTIL::delClass"]={}
   let details["DP_UTIL::delObject"]={}
   let details["DP_UTIL::destroyChildren"]={}
   let details["DP_UTIL::disableWidgets"]={}
   let details["DP_UTIL::enableWidgets"]={}
   let details["DP_UTIL::errPopup"]={}
   let details["DP_UTIL::getAbstractCells"]={}
   let details["DP_UTIL::getAbstracts"]={}
   let details["DP_UTIL::getAllAbstractCells"]={}
   let details["DP_UTIL::getAllBlockInsts"]={}
   let details["DP_UTIL::getHierBoundGroups"]={}
   let details["DP_UTIL::getIOCellsOfPorts"]={}
   let details["DP_UTIL::getLoadFile"]={}
   let details["DP_UTIL::getPinOrPort"]={}
   let details["DP_UTIL::getPortsOfCells"]={}
   let details["DP_UTIL::getSaveFile"]={}
   let details["DP_UTIL::getSelBlocks"]={}
   let details["DP_UTIL::getSelCells"]={}
   let details["DP_UTIL::getSelDataPins"]={}
   let details["DP_UTIL::getSelHierBoundGroups"]={}
   let details["DP_UTIL::getSelIOCells"]={}
   let details["DP_UTIL::getSelMacros"]={}
   let details["DP_UTIL::getSelPorts"]={}
   let details["DP_UTIL::getSystemIcon"]={}
   let details["DP_UTIL::getWattrSettings"]={}
   let details["DP_UTIL::guiDesignCheck"]={}
   let details["DP_UTIL::hidePalette"]={}
   let details["DP_UTIL::invokePalette"]={}
   let details["DP_UTIL::isEnabled"]={}
   let details["DP_UTIL::isPaletteVisible"]={}
   let details["DP_UTIL::msgPopup"]={}
   let details["DP_UTIL::okCancel"]={}
   let details["DP_UTIL::raiseWin"]={}
   let details["DP_UTIL::removeFromList"]={}
   let details["DP_UTIL::setBalloonHelp"]={}
   let details["DP_UTIL::showBalloonHelp"]={}
   let details["DP_UTIL::showStack"]={}
   let details["DP_UTIL::sourceDebFile"]={}
   let details["DP_UTIL::utilPopup"]={}
   let details["DP_UTIL::vbind"]={}
   let details["DP_UTIL::vbindAll"]={}
   let details["DP_UTIL::vdel"]={}
   let details["DP_UTIL::vdump"]={}
   let details["DP_UTIL::vgen"]={}
   let details["DP_UTIL::warnPopup"]={}
   let details["EMS::actLOW"]={}
   let details["EMS::mergeColl"]={}
   let details["EMS::rptTim"]={}
   let details["EMS::rptWindow"]={}
   let details["EVR::convert_evr_tcl_to_icc"]={}
        let details["EVR::convert_evr_tcl_to_icc"]["-replace"] = "(Replace input file with converted file)"
        let details["EVR::convert_evr_tcl_to_icc"]["-safe"] = "(Any unknown command is commented out)"
        let details["EVR::convert_evr_tcl_to_icc"]["-to"] = "(Output file path for converted file)"
   let details["EVR::cut_wires_cell"]={}
        let details["EVR::cut_wires_cell"]["-all"] = "(Includes C4 objects that are part of c4_id tag (c4bdrawn (c4), tv1, tm1), given -layer. Default, c4_id objects not touched)"
        let details["EVR::cut_wires_cell"]["-attributes_to_save"] = ""
        let details["EVR::cut_wires_cell"]["-attributes_to_add"] = ""
        let details["EVR::cut_wires_cell"]["-bloat"] = "(Bloat the cell polygon in microns)"
        let details["EVR::cut_wires_cell"]["-blockages"] = "(Include blockages in output files)"
        let details["EVR::cut_wires_cell"]["-bump_numbers"] = "(Return csv file that includes bump net names, numbers, x, and y. -nets ignored.)"
        let details["EVR::cut_wires_cell"]["-create_block"] = "(Create block declaration is not commented out)"
        let details["EVR::cut_wires_cell"]["-cut"] = "(Physically cut the wires inside the cell)"
        let details["EVR::cut_wires_cell"]["-dr"] = "(Cut wires according to dr rules. Wires cut at boundary will be ignored.)"
        let details["EVR::cut_wires_cell"]["-evr"] = "(Align saved output to cell location/rotation. Does not allow cut and remove)"
        let details["EVR::cut_wires_cell"]["-evr_cells"] = "(Add cell declaration in EVR of these cells. Empty string will use cellName argument instead)"
        let details["EVR::cut_wires_cell"]["-hier"] = "(Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)"
        let details["EVR::cut_wires_cell"]["-icc"] = "(Converts tcl output from ICC2 to ICC compatible code)"
        let details["EVR::cut_wires_cell"]["-multiple"] = "(Allow multiple cells to be used when otherwise an error would occur requiring user to pick an instance.)"
        let details["EVR::cut_wires_cell"]["-nets"] = "(Only run on specified nets)"
        let details["EVR::cut_wires_cell"]["-netlist"] = "(Use verilog netlist(s) to map netnames. See EVR::parse_netlist for more details)"
        let details["EVR::cut_wires_cell"]["-net_type_from_netname"] = ""
        let details["EVR::cut_wires_cell"]["-not_strict"] = "(Allow multiple cells to not be adjacent. Bbox created around all cells)"
        let details["EVR::cut_wires_cell"]["-pinconn_map"] = "(Use current layout to map current level net to pin name)"
        let details["EVR::cut_wires_cell"]["-pinlist"] = "(Use csv pinlist to map netnames. See EVR::parse_pinlist for more details)"
        let details["EVR::cut_wires_cell"]["-pinlist_lowercase"] = "(Converts all nets in pinlist to lowercase before mapping)"
        let details["EVR::cut_wires_cell"]["-port_to_net"] = "(Treats terminal objects as net objects. No port declaration in tcl file(s))"
        let details["EVR::cut_wires_cell"]["-remove"] = "(Removes all the shapes and vias inside the polygon)"
        let details["EVR::cut_wires_cell"]["-rcext"] = "(Like -evr, but cuts boundary wires so there is no overlap. Signal nets renamed to syn_fcl_<net>. All power is vss)"
        let details["EVR::cut_wires_cell"]["-save"] = "(Save layers inside cell to a file)"
        let details["EVR::cut_wires_cell"]["-terms"] = "(Include terminals objects)"
        let details["EVR::cut_wires_cell"]["-to"] = "(Save to folder location)"
        let details["EVR::cut_wires_cell"]["-to_file"] = "(Name of file prefix, i.e. $filename.evr.tcl)"
        let details["EVR::cut_wires_cell"]["-to_inst_name"] = "(Use instance name instead of cellname for file prefix)"
        let details["EVR::cut_wires_cell"]["-top_cell"] = "(Name of top level cell in netlist)"
   let details["EVR::find_all_cell_locations"]={}
        let details["EVR::find_all_cell_locations"]["-boundary"] = "(Return the boundary (string) of the cell)"
   let details["EVR::find_cell_hier"]={}
        let details["EVR::find_cell_hier"]["-boundary"] = "(Return the boundary (string) of the cell)"
   let details["EVR::find_cells"]={}
        let details["EVR::find_cells"]["-boundary"] = "(Return the boundary (string) of the cell)"
   let details["EVR::find_inst"]={}
        let details["EVR::find_inst"]["-boundary"] = "(Return the boundary (string) of the cell)"
   let details["EVR::get_cell_info"]={}
        let details["EVR::get_cell_info"]["-hier"] = "(Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)"
        let details["EVR::get_cell_info"]["-multiple"] = "(Allows for multiple cells to be returned)"
   let details["EVR::get_cell_poly"]={}
        let details["EVR::get_cell_poly"]["-bbox"] = "(Bbox (ANDs with cells). Can be string/geo_mask/shape)"
        let details["EVR::get_cell_poly"]["-boundary"] = "(Polygon (ANDs with cells). Can be string/geo_mask/shape)"
        let details["EVR::get_cell_poly"]["-hier"] = "(Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)"
        let details["EVR::get_cell_poly"]["-multiple"] = "(Allow multiple cells to be used when otherwise an error would occur requiring user to pick an instance.)"
   let details["EVR::parse_netlist"]={}
        let details["EVR::parse_netlist"]["-cell"] = "(Instance name of the subcell, i.e. partition inside soc.v. Only parses nets in that cell)"
        let details["EVR::parse_netlist"]["-top_cell"] = "(By default, all cell wires will always be parsed. Add -top_cell to only parse wires of top level cell (interface always parsed).)"
   let details["EVR::parse_pinlist"]={}
        let details["EVR::parse_pinlist"]["-lower"] = "(Make all nets lowercase (ignore case))"
        let details["EVR::parse_pinlist"]["-include_cell"] = "(Include the cell names in the mapping instead of just hip net)"
   let details["EVR::place_cell"]={}
        let details["EVR::place_cell"]["-inst"] = "(Instance name for the cell. Default is cellName)"
        let details["EVR::place_cell"]["-o"] = "(Orientation of the cell. Default is R0)"
        let details["EVR::place_cell"]["-dx"] = "(Offset x coordinate of the cell by this dx)"
        let details["EVR::place_cell"]["-dy"] = "(Offset y coordinate of the cell by this dy)"
        let details["EVR::place_cell"]["-replace"] = "(If the cell instance already exists in design, replace it. Otherwise existing cell is returned as is)"
        let details["EVR::place_cell"]["-view"] = "(View type of cell. Default is \"frame\")"
        let details["EVR::place_cell"]["-verbose"] = "(Display more information)"
   let details["EVR::place_cell_auto"]={}
        let details["EVR::place_cell_auto"]["-inst"] = "(Name to call the cell. Default is cellName)"
        let details["EVR::place_cell_auto"]["-hier"] = "(Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost or /soc)"
        let details["EVR::place_cell_auto"]["-optcell"] = "(Place this cell instead of one used for searching (cell). Useful if you have cell with a different name than the cell in the floorplan)"
        let details["EVR::place_cell_auto"]["-verbose"] = "(Display more information)"
        let details["EVR::place_cell_auto"]["-view"] = "(View type of the cell. Default is \"frame\")"
   let details["EVR::source_to"]={}
        let details["EVR::source_to"]["-cell"] = "(name of the cell or instance name for hierarchical cell)"
        let details["EVR::source_to"]["-create_block"] = "(Uses create_block and boundary in file generate a block view)"
        let details["EVR::source_to"]["-create_net"] = "(This will run create_net to ensure that all shapes are created under any netname)"
        let details["EVR::source_to"]["-layers"] = "(Only source wires with specified metal layers)"
        let details["EVR::source_to"]["-hier"] = "(Force proc to search for instance instead of cell. Automatically done to instances with hierarchical path, i.e. soc/par_usbhost)"
        let details["EVR::source_to"]["-nets"] = "(Only source wires with specified nets)"
        let details["EVR::source_to"]["-o"] = "(orientation of the wires. Default is R0)"
        let details["EVR::source_to"]["-dx"] = "(x coordinate for translating wire. Default is 0.)"
        let details["EVR::source_to"]["-dy"] = "(y coordinate for translating wire. Default is 0.)"
        let details["EVR::source_to"]["-term2wire"] = "(convert terms to wires)"
        let details["EVR::source_to"]["-tag"] = "(tag the objects with attribute (source_tag))"
   let details["GCR_DELAY_MATCH::additional_loop"]={}
   let details["GCR_DELAY_MATCH::calculate_formula"]={}
   let details["GCR_DELAY_MATCH::check_and_report_pass_result"]={}
   let details["GCR_DELAY_MATCH::cleanup"]={}
   let details["GCR_DELAY_MATCH::cleanup_data"]={}
   let details["GCR_DELAY_MATCH::clear_timing_start_points"]={}
   let details["GCR_DELAY_MATCH::delta_delay"]={}
   let details["GCR_DELAY_MATCH::delta_delay_length"]={}
   let details["GCR_DELAY_MATCH::do_ddr_lengthing_routing"]={}
   let details["GCR_DELAY_MATCH::do_delta_ddr_lengthing_routing"]={}
   let details["GCR_DELAY_MATCH::do_nets_timing_converge"]={}
   let details["GCR_DELAY_MATCH::do_unlen"]={}
   let details["GCR_DELAY_MATCH::enable_log"]={}
   let details["GCR_DELAY_MATCH::export_timing_start_points"]={}
   let details["GCR_DELAY_MATCH::get_a_and_b"]={}
   let details["GCR_DELAY_MATCH::get_achieve_pct"]={}
   let details["GCR_DELAY_MATCH::get_all_receiver_pins"]={}
   let details["GCR_DELAY_MATCH::get_avg_net_init_delay_length_value"]={}
   let details["GCR_DELAY_MATCH::get_corners"]={}
   let details["GCR_DELAY_MATCH::get_current_pass"]={}
   let details["GCR_DELAY_MATCH::get_detail_route_length"]={}
   let details["GCR_DELAY_MATCH::get_detail_route_length_gcr"]={}
   let details["GCR_DELAY_MATCH::get_detail_route_length_gcr_internal"]={}
   let details["GCR_DELAY_MATCH::get_lengthen_layer"]={}
   let details["GCR_DELAY_MATCH::get_log_file"]={}
   let details["GCR_DELAY_MATCH::get_match_bbox"]={}
   let details["GCR_DELAY_MATCH::get_net_init_delay_length_value"]={}
   let details["GCR_DELAY_MATCH::get_net_init_length_value"]={}
   let details["GCR_DELAY_MATCH::get_nets_beyond_pct"]={}
   let details["GCR_DELAY_MATCH::get_nets_delay_values"]={}
   let details["GCR_DELAY_MATCH::get_nets_for_lengthing"]={}
   let details["GCR_DELAY_MATCH::get_nets_highest_delay_delta_pct"]={}
   let details["GCR_DELAY_MATCH::get_real_target_pct"]={}
   let details["GCR_DELAY_MATCH::get_start_point_export_file"]={}
   let details["GCR_DELAY_MATCH::get_target_pct"]={}
   let details["GCR_DELAY_MATCH::get_timing_log_file"]={}
   let details["GCR_DELAY_MATCH::get_timing_report_file"]={}
   let details["GCR_DELAY_MATCH::get_timing_start_points"]={}
   let details["GCR_DELAY_MATCH::get_tmp_dir"]={}
   let details["GCR_DELAY_MATCH::get_working_nets"]={}
   let details["GCR_DELAY_MATCH::incr_match_index"]={}
   let details["GCR_DELAY_MATCH::init_formula"]={}
   let details["GCR_DELAY_MATCH::init_match_bbox"]={}
   let details["GCR_DELAY_MATCH::init_tmp_dir"]={}
   let details["GCR_DELAY_MATCH::lmax"]={}
   let details["GCR_DELAY_MATCH::lmin"]={}
   let details["GCR_DELAY_MATCH::match_index"]={}
   let details["GCR_DELAY_MATCH::max_string_length"]={}
   let details["GCR_DELAY_MATCH::puts_log"]={}
   let details["GCR_DELAY_MATCH::record_net_init_delay_length_values"]={}
   let details["GCR_DELAY_MATCH::report_nets_timing_result"]={}
   let details["GCR_DELAY_MATCH::report_pass_result"]={}
   let details["GCR_DELAY_MATCH::report_user_result"]={}
   let details["GCR_DELAY_MATCH::retrieve_nets_timing_result"]={}
   let details["GCR_DELAY_MATCH::set_achieve_pct"]={}
   let details["GCR_DELAY_MATCH::set_corners"]={}
   let details["GCR_DELAY_MATCH::set_current_pass"]={}
   let details["GCR_DELAY_MATCH::set_lengthen_layer"]={}
   let details["GCR_DELAY_MATCH::set_nets_delay_values"]={}
   let details["GCR_DELAY_MATCH::set_target_pct"]={}
   let details["GCR_DELAY_MATCH::set_timing_start_points"]={}
   let details["GCR_DELAY_MATCH::set_ur_uc"]={}
   let details["GCR_DELAY_MATCH::set_working_nets"]={}
   let details["GCR_DELAY_MATCH::start_nets_delay_match"]={}
   let details["GCR_DELAY_MATCH::update_delay_value_on_fly"]={}
   let details["GCR_DELAY_MATCH::update_formula"]={}
   let details["GCR_DELAY_MATCH::update_formula_by_pass"]={}
   let details["ICC2_CLOCK_TUNING::insert_clock_tuning_cells"]={}
   let details["InputConstChecker::write_checksum_internal"]={}
   let details["Misc::appendArgToCmd"]={}
   let details["Misc::appendArgsAndEval"]={}
   let details["Misc::appendArgsFromArray"]={}
   let details["Misc::appendBoolArgsFromArray"]={}
   let details["Misc::asClct"]={}
   let details["Misc::asSlctList"]={}
   let details["Misc::clearTransactionCache"]={}
   let details["Misc::computeChangeOptionInfo"]={}
   let details["Misc::copyNetlists"]={}
   let details["Misc::create_timing_path_clct"]={}
   let details["Misc::getSetTransactionCache"]={}
   let details["Misc::getTransactionCache"]={}
   let details["Misc::hasDesign"]={}
   let details["Misc::identity"]={}
   let details["Misc::init_window"]={}
   let details["Misc::isClct"]={}
   let details["Misc::normalize_bool"]={}
   let details["Misc::removeNetlists"]={}
   let details["Misc::reportSelection"]={}
   let details["Misc::setTransactionCache"]={}
   let details["Misc::setTransactionCallback"]={}
   let details["Misc::silence"]={}
   let details["Misc::trace1"]={}
   let details["Misc::traceIn"]={}
   let details["NYPD::CheckLegality"]={}
   let details["NYPD::DrawGridMap"]={}
   let details["NYPD::ECOLegalization"]={}
   let details["NYPD::GetUserDefineBBox"]={}
   let details["NYPD::GuiBrowseAppOptions"]={}
   let details["NYPD::GuiCheckRules"]={}
   let details["NYPD::GuiDefineExtBBox"]={}
   let details["NYPD::GuiRemoveAnnoations"]={}
   let details["NYPD::GuiSetAppOption"]={}
   let details["NYPD::GuiShowEditAppOptions"]={}
   let details["NYPD::GuiShowGridMap"]={}
   let details["NYPD::GuiShowMapIndex"]={}
   let details["NYPD::GuiToggleUseFullChip"]={}
   let details["NYPD::Toolbox"]={}
   let details["PGR::get_comp_pattern_commands"]={}
   let details["PGR::get_wire_pat_name_list"]={}
   let details["PGR::get_wire_pattern_commands"]={}
   let details["PGR::process_wire_pat_dir_layer"]={}
   let details["PGR::process_wire_pat_para"]={}
   let details["PGR::process_wire_pat_setting"]={}
   let details["PGR::test_multiple_layer"]={}
   let details["PTEP::dump_groupTbl"]={}
   let details["PTEP::parse_args"]={}
   let details["PTEP::parse_correl_file"]={}
   let details["PTEP::parse_file"]={}
   let details["PTEP::summarize_groups"]={}
   let details["PTEP::summarize_one_group"]={}
   let details["PTEP::wns_percentage"]={}
   let details["Qtcl::adjustCreateDialogOptions"]={}
   let details["Qtcl::createExpander"]={}
   let details["Qtcl::createHExpander"]={}
   let details["Qtcl::createVExpander"]={}
   let details["Qtcl::executeWithStandardCursor"]={}
   let details["Qtcl::filter_copy_paste"]={}
   let details["Qtcl::keycode"]={}
   let details["Qtcl::pretty_dump_print"]={}
   let details["above_fc::above_fc"]={}
        let details["above_fc::above_fc"]["-calc_dimensions_only"] = ""
        let details["above_fc::above_fc"]["-soc_lib"] = "(Full path to SoC ICC2 nlib database)"
        let details["above_fc::above_fc"]["-soc_name"] = "(The name of the top level SoC design)"
        let details["above_fc::above_fc"]["-pkgtop_name"] = "(The name for the top level above FC design)"
        let details["above_fc::above_fc"]["-edm_etch_combined"] = "(Set this option if EDM and ETCH are combined in one library, provide the path through -edm_lib option)"
        let details["above_fc::above_fc"]["-edm_lib"] = "(Full path to the EDM ndm file)"
        let details["above_fc::above_fc"]["-etch_lib"] = "(Full path to the ETCH ndm file)"
        let details["above_fc::above_fc"]["-dic_lib"] = "(Full path to the DIC ndm file)"
        let details["above_fc::above_fc"]["-shim_lib"] = "(Full path to the SHIM cell library file)"
        let details["above_fc::above_fc"]["-shim_12pp_cell"] = ""
        let details["above_fc::above_fc"]["-shim_8pp_cell"] = ""
        let details["above_fc::above_fc"]["-c4bump_lib"] = "(Full path to the C4 Bump cell library file)"
        let details["above_fc::above_fc"]["-c4_r1_cell"] = "(Name of the R1 C4 bump cell)"
        let details["above_fc::above_fc"]["-c4_r2_cell"] = "(Name of the R2 C4 bump cell)"
        let details["above_fc::above_fc"]["-die_file"] = "(Full path to the die file)"
        let details["above_fc::above_fc"]["-soc_edm_pins"] = "(Soc pin names to be connected to EDM ring)"
        let details["above_fc::above_fc"]["-edm_edm_pins"] = "(EDM ring pin names to be connected to SoC)"
   let details["above_fc::build_hier"]={}
   let details["above_fc::c4info_to_die_file_entry"]={}
   let details["above_fc::calc_dimensions"]={}
   let details["above_fc::create_edm"]={}
   let details["above_fc::create_shim"]={}
   let details["above_fc::fill_shim"]={}
   let details["above_fc::insert_dic_cells"]={}
   let details["above_fc::process_die_file"]={}
        let details["above_fc::process_die_file"]["-case"] = "(Maintains case sensitivity. Default all nets converted to lowercase)"
        let details["above_fc::process_die_file"]["-dx"] = "(Translate the die file by dx um)"
        let details["above_fc::process_die_file"]["-dy"] = "(Translate the die file by dy um)"
        let details["above_fc::process_die_file"]["-o"] = "(Rotate or flip die file. Options are R0, R90, R180, R270, MX, MXR90, MY, MYR90)"
        let details["above_fc::process_die_file"]["-pkgtop"] = "(Sets die at 0,0 without rotation from die_drawn2Final_transform)"
   let details["above_fc::propagate_bumps"]={}
        let details["above_fc::propagate_bumps"]["-pins"] = "(Collection of pins to propagate)"
        let details["above_fc::propagate_bumps"]["-default_layer"] = "(Layer to use in case of unknown layer)"
   let details["above_fc::read_die_file_cells"]={}
        let details["above_fc::read_die_file_cells"]["-case"] = "(Maintains case sensitivity. Default all nets converted to lowercase)"
        let details["above_fc::read_die_file_cells"]["-dx"] = "(Translate the die file by dx um)"
        let details["above_fc::read_die_file_cells"]["-dy"] = "(Translate the die file by dy um)"
        let details["above_fc::read_die_file_cells"]["-o"] = "(Rotate or flip die file. Options are R0, R90, R180, R270, MX, MXR90, MY, MYR90)"
        let details["above_fc::read_die_file_cells"]["-pkgtop"] = "(Sets die at 0,0 without rotation from die_drawn2Final_transform)"
   let details["auto_mkindex_parser::cleanup"]={}
   let details["auto_mkindex_parser::command"]={}
   let details["auto_mkindex_parser::commandInit"]={}
   let details["auto_mkindex_parser::fullname"]={}
   let details["auto_mkindex_parser::hook"]={}
   let details["auto_mkindex_parser::indexEntry"]={}
   let details["auto_mkindex_parser::init"]={}
   let details["auto_mkindex_parser::mkindex"]={}
   let details["auto_mkindex_parser::slavehook"]={}
   let details["boo::EOUT"]={}
   let details["boo::IOUT"]={}
   let details["c4bump::connect_hierarchical_pins"]={}
        let details["c4bump::connect_hierarchical_pins"]["-pin_name_list"] = "(List of pin names to connect.  Ports/pins/nets are created as necessary.)"
        let details["c4bump::connect_hierarchical_pins"]["-direction"] = "(Port/pin direction.  DEFAULT: in)"
        let details["c4bump::connect_hierarchical_pins"]["-type"] = "(Net type.  DEFAULT = signal: "
   let details["c4bump::generate_c4_bump_files"]={}
        let details["c4bump::generate_c4_bump_files"]["-library"] = "(Library path and name)"
        let details["c4bump::generate_c4_bump_files"]["-top_block"] = "(toplevel block)"
        let details["c4bump::generate_c4_bump_files"]["-input_path"] = "(Input path for partition TM1 files)"
        let details["c4bump::generate_c4_bump_files"]["-output_path"] = "(Output path for toplevel C4 bump files)"
   let details["c4bump::hier_connect_net_to_pin"]={}
        let details["c4bump::hier_connect_net_to_pin"]["-net"] = "(Net to be connected.  The net is created if it does not exist.)"
        let details["c4bump::hier_connect_net_to_pin"]["-pins"] = "(Leaf pins to be connected.  The pins must already exist.)"
        let details["c4bump::hier_connect_net_to_pin"]["-type"] = "(Net type.  DEFAULT = signal: "
   let details["c4bump::write_c4_bumps"]={}
   let details["c4bump::write_loc_for_field"]={}
        let details["c4bump::write_loc_for_field"]["-file"] = "(output file name)"
        let details["c4bump::write_loc_for_field"]["-depth"] = "(depth to extract to top-level loc file)"
        let details["c4bump::write_loc_for_field"]["-print"] = "(Print copy of output to screen.)"
        let details["c4bump::write_loc_for_field"]["-debug"] = "(Create a log file with data source of all block cells.)"
   let details["cleanup::change_wire_owner_net_to_match_shorted"]={}
   let details["cleanup::change_wire_via_owner_net_to_match_shorted"]={}
   let details["cleanup::convert_rectangles_to_wires"]={}
   let details["cleanup::convert_wires_to_routing_corridors"]={}
        let details["cleanup::convert_wires_to_routing_corridors"]["-match"] = "(Match wire dimensions. Default: Size)"
   let details["cleanup::create_terminals_matching_child_terminals"]={}
   let details["cleanup::create_terminals_matching_pins"]={}
        let details["cleanup::create_terminals_matching_pins"]["-layers"] = "(List of layers of which to create terminals only. Default: Pin-Layer)"
   let details["cleanup::create_terminals_matching_wires"]={}
   let details["cleanup::remove_duplicate_vias"]={}
        let details["cleanup::remove_duplicate_vias"]["-method"] = "(Specify either all or selected )"
        let details["cleanup::remove_duplicate_vias"]["-netname"] = "(Specify the net (a requirement for all method only) )"
   let details["cleanup::remove_null_shape_objects"]={}
        let details["cleanup::remove_null_shape_objects"]["-layers"] = "(List of layers to remove NULL shapes. Default: Interconnect)"
        let details["cleanup::remove_null_shape_objects"]["-force"] = "(Force remove NULL shapes. Default: Return Only)"
   let details["clk_bu::bbox_is_overlapping"]={}
   let details["clk_bu::bbox_of_objects"]={}
   let details["clk_bu::check_glbdrv_legs"]={}
        let details["clk_bu::check_glbdrv_legs"]["-cells"] = "(list of cells)"
   let details["clk_bu::clksrc_type"]={}
   let details["clk_bu::closest_site"]={}
   let details["clk_bu::common_cells"]={}
   let details["clk_bu::find_closest_site"]={}
   let details["clk_bu::get_bu_cells"]={}
   let details["clk_bu::get_cell_bbox"]={}
   let details["clk_bu::get_cells_info"]={}
   let details["clk_bu::get_cells_not_on_site"]={}
   let details["clk_bu::get_clk_bu_cells"]={}
   let details["clk_bu::get_clk_bu_pins"]={}
   let details["clk_bu::get_glbdrv_bu"]={}
   let details["clk_bu::get_hierarchical_pin"]={}
   let details["clk_bu::get_overlapped_cells"]={}
   let details["clk_bu::get_overlapped_hips"]={}
   let details["clk_bu::glbdrv_driver"]={}
   let details["clk_bu::glbdrv_receivers"]={}
   let details["clk_bu::is_cell_bbox_in_die"]={}
        let details["clk_bu::is_cell_bbox_in_die"]["-bbox"] = "(Bbox)"
   let details["clk_bu::is_clock_cell"]={}
   let details["clk_bu::is_glbdrv_on_site"]={}
   let details["clk_bu::is_skipped_hier"]={}
   let details["clk_bu::legalize_hard_macros"]={}
   let details["clk_bu::parse_unit_per_partition"]={}
   let details["clk_bu::print_clk_bu_feedback"]={}
   let details["clk_bu::print_clk_bu_spec_file"]={}
   let details["clk_bu::print_file_header"]={}
   let details["clk_bu::separate_cells"]={}
   let details["clk_bu::skip_std_cells"]={}
   let details["clk_bu::support_upf"]={}
   let details["clk_bu::wrip_off_pushdown_hier"]={}
   let details["clkpush::bbox_get_center"]={}
   let details["clkpush::break_assign_statements_for_pushdown"]={}
   let details["clkpush::cleanup_connectivity"]={}
   let details["clkpush::clk_decode_snps_version"]={}
   let details["clkpush::clk_getvar"]={}
   let details["clkpush::clk_load"]={}
   let details["clkpush::clk_print_msg"]={}
   let details["clkpush::clk_push"]={}
   let details["clkpush::clk_push_one_level"]={}
   let details["clkpush::clk_push_rename_nets"]={}
   let details["clkpush::clk_remove_pushdown_suffixes"]={}
   let details["clkpush::clk_snps_version_at_least"]={}
   let details["clkpush::clock_port_get_rtl_port_name"]={}
   let details["clkpush::create_clock_units"]={}
   let details["clkpush::create_clock_units_for_block"]={}
   let details["clkpush::create_clock_units_recursive"]={}
   let details["clkpush::cut_clock_routing_over_slaves"]={}
   let details["clkpush::disconnect_unrouted_clk_shadow_nets"]={}
   let details["clkpush::filter_pushdown_nets"]={}
   let details["clkpush::find_clock_inputs_for_remapping"]={}
   let details["clkpush::find_in_order_blocks"]={}
   let details["clkpush::find_outthrough_clock_routing"]={}
   let details["clkpush::fix_ls_verilog_violations"]={}
   let details["clkpush::force_pin_direction"]={}
   let details["clkpush::get_assign_mappings"]={}
   let details["clkpush::get_clk_dop_wrappers"]={}
   let details["clkpush::get_clk_unit_hiers_for_block"]={}
   let details["clkpush::get_clk_unit_rtl_port_name"]={}
   let details["clkpush::get_clock_cell_mi_mappings"]={}
   let details["clkpush::get_master_slaves_for_clocks"]={}
   let details["clkpush::get_partition_from_point"]={}
   let details["clkpush::get_point_in_hier"]={}
   let details["clkpush::load_data"]={}
   let details["clkpush::map_clock_inputs"]={}
   let details["clkpush::mark_clock_ports"]={}
   let details["clkpush::mark_dops_with_clock_type"]={}
   let details["clkpush::merge_clk_unit"]={}
   let details["clkpush::merge_clk_units_recursive"]={}
   let details["clkpush::print_clk_unit_info_for_block"]={}
   let details["clkpush::pushdown_clock_network"]={}
        let details["clkpush::pushdown_clock_network"]["-buffered_nets"] = "(buffered nets)"
        let details["clkpush::pushdown_clock_network"]["-clk_cells"] = "(clk cells)"
        let details["clkpush::pushdown_clock_network"]["-filter"] = "(filter text)"
        let details["clkpush::pushdown_clock_network"]["-unbuffered_nets"] = "(unbuffered nets)"
   let details["clkpush::reconnect_and_port_preserve_pins"]={}
   let details["clkpush::reconnect_and_port_unrouted_clk_shadow_nets"]={}
   let details["clkpush::reconnect_clk_in_partition"]={}
   let details["clkpush::reconnect_mi_merged"]={}
   let details["clkpush::remove_clock_data"]={}
   let details["clkpush::remove_clock_units_from_block"]={}
   let details["clkpush::remove_syn_iso_cell"]={}
   let details["clkpush::remove_syn_iso_from_cb2_ls"]={}
   let details["clkpush::rename_clock_unit_nets"]={}
   let details["clkpush::update_clkbuilder_upf_data"]={}
   let details["clkpush::update_clkbuilder_upf_data_for_block"]={}
   let details["clkpush::update_connectivity"]={}
   let details["clkpush::write_and_create_units"]={}
   let details["clock::check_clock_cells"]={}
        let details["clock::check_clock_cells"]["-clock_cells"] = "(Collection of clock cells)"
        let details["clock::check_clock_cells"]["-file"] = "(Report file name)"
        let details["clock::check_clock_cells"]["-verbose"] = "(Print all violators)"
   let details["clock::fix_clock_cell_vt"]={}
        let details["clock::fix_clock_cell_vt"]["-cells"] = "(Cells to swap)"
        let details["clock::fix_clock_cell_vt"]["-vt"] = "(Vt type identifier in cell name. Example: l or n)"
   let details["clock::get_clock_cells"]={}
        let details["clock::get_clock_cells"]["-clock"] = "(List of clocks)"
        let details["clock::get_clock_cells"]["-filter"] = "(Filter the dont_touch/fixed cells)"
   let details["clock::replace_nonclock_cells"]={}
        let details["clock::replace_nonclock_cells"]["-cells"] = "(Cells to swap)"
   let details["clock::resize_cells_to_valid_size"]={}
        let details["clock::resize_cells_to_valid_size"]["-cells"] = "(Cells to swap)"
   let details["coll::collection_to_list"]={}
   let details["coll::get_and_collection"]={}
   let details["coll::get_and_not_collection"]={}
   let details["coll::get_or_collection"]={}
   let details["coll::is_a_collection"]={}
   let details["coll::is_in_collection"]={}
   let details["coll::is_same_collection"]={}
   let details["collgen::add_net"]={}
        let details["collgen::add_net"]["-net"] = "(net to be created)"
        let details["collgen::add_net"]["-nettype"] = "(net type. DEFAULT: signal)"
   let details["collgen::add_port"]={}
        let details["collgen::add_port"]["-port"] = "(port to be created)"
        let details["collgen::add_port"]["-portdir"] = "(port direction)"
        let details["collgen::add_port"]["-porttype"] = "(port_type to set for -port)"
   let details["collgen::add_port_and_net"]={}
        let details["collgen::add_port_and_net"]["-port"] = "(port to be created)"
        let details["collgen::add_port_and_net"]["-portdir"] = "(port direction)"
        let details["collgen::add_port_and_net"]["-net"] = "(net to be created)"
        let details["collgen::add_port_and_net"]["-nettype"] = "(net_type to set for -net)"
        let details["collgen::add_port_and_net"]["-porttype"] = "(port_type to set for -port)"
   let details["collgen::cell_is_supernet_transparent"]={}
   let details["collgen::cgn_connect_net"]={}
        let details["collgen::cgn_connect_net"]["-net"] = "(net to be connected)"
        let details["collgen::cgn_connect_net"]["-pin"] = "(pin to be connected)"
   let details["collgen::check_cell_type"]={}
   let details["collgen::clean_out_buffer"]={}
   let details["collgen::cleanup_port"]={}
        let details["collgen::cleanup_port"]["-ports"] = "(List of port or hier pin names.)"
        let details["collgen::cleanup_port"]["-filter"] = "(apply filter for removing objects.)"
        let details["collgen::cleanup_port"]["-debug"] = "(Print out pins and buffers visited.)"
   let details["collgen::cleanup_port_recursive_trace"]={}
   let details["collgen::connect_port"]={}
        let details["collgen::connect_port"]["-ports"] = "(List of port and hierarchical pin names.)"
        let details["collgen::connect_port"]["-filehandle"] = "(File handle to write out to the file.)"
   let details["collgen::connect_port_recursive_trace"]={}
   let details["collgen::copy_lib_and_refs"]={}
        let details["collgen::copy_lib_and_refs"]["-no_refs"] = "(To NOT copy local references like (./inputs/*.ndm). Default: Copy)"
   let details["collgen::disconnect_lower_block_tie_off_ports"]={}
   let details["collgen::dump_floorplan"]={}
        let details["collgen::dump_floorplan"]["-objects"] = "(Collection of objects to write out.)"
        let details["collgen::dump_floorplan"]["-output_file"] = "(Output file name.)"
        let details["collgen::dump_floorplan"]["-format"] = "(Write out in icc or icc2 format. DEFAULT: icc2: "
   let details["collgen::dump_pin_constraints_for_selected"]={}
        let details["collgen::dump_pin_constraints_for_selected"]["-objects"] = "(Collection or list of ports/pins. Default: Selected)"
        let details["collgen::dump_pin_constraints_for_selected"]["-no_fts"] = "(Filter out FTs for write-out. Default: All)"
   let details["collgen::dump_routes"]={}
        let details["collgen::dump_routes"]["-objects"] = "(Collection of objects to write out.)"
        let details["collgen::dump_routes"]["-output_file"] = "(Output file name.)"
        let details["collgen::dump_routes"]["-format"] = "(Write out in icc or icc2 format. DEFAULT: icc2: "
   let details["collgen::dump_terminals_per_block"]={}
        let details["collgen::dump_terminals_per_block"]["-file_suffix"] = "(Suffix string to be used for each file name: e.g. ${block}$suffix)"
        let details["collgen::dump_terminals_per_block"]["-objects"] = "(Selected terminals, pins, or ports.  DEFAULT: All hierarchical terminals in current design.)"
        let details["collgen::dump_terminals_per_block"]["-outdir"] = "(Output directory to write the file(s).  DEFAULT: Current working directory.)"
   let details["collgen::exec_command"]={}
   let details["collgen::extract_modules_from_verilog_file"]={}
   let details["collgen::generate_formality_do_file"]={}
        let details["collgen::generate_formality_do_file"]["-file_name"] = "(name of formality do-file)"
   let details["collgen::generate_ft_driver_collateral"]={}
   let details["collgen::generate_lec_commands_per_block"]={}
   let details["collgen::generate_pushdown_hip_list"]={}
   let details["collgen::get_net_segments"]={}
   let details["collgen::get_tail_connectivity"]={}
        let details["collgen::get_tail_connectivity"]["-ports"] = "(Ports of the partition to trace.)"
        let details["collgen::get_tail_connectivity"]["-port_array"] = "(Empty port array variable that will be populated with port name and laod net name.)"
   let details["collgen::get_tail_connectivity_recursive"]={}
   let details["collgen::is_abutted"]={}
   let details["collgen::read_wrapper_shadow_eco"]={}
        let details["collgen::read_wrapper_shadow_eco"]["-input_dir"] = "(input dir shadow tcl file)"
   let details["collgen::reconnect_lower_block_tie_off_ports"]={}
   let details["collgen::reorder_port_order_for_lec_"]={}
   let details["collgen::set_ft_driver_attributes"]={}
   let details["collgen::set_td_type"]={}
        let details["collgen::set_td_type"]["-ports"] = "(Ports of the partition to mark/unmark with td_type value.)"
        let details["collgen::set_td_type"]["-td_type"] = "(td_type value. Required and mutually exclusive with -clear option.)"
        let details["collgen::set_td_type"]["-clear"] = "(Remove the td_type attribute.  Required and mutually exclusive with -td_type option.)"
   let details["collgen::set_td_type_recursive"]={}
   let details["collgen::split_blocks"]={}
        let details["collgen::split_blocks"]["-tlib"] = "(Target library to create a copy)"
        let details["collgen::split_blocks"]["-blocks"] = "(Target blocks list)"
        let details["collgen::split_blocks"]["-no_refs"] = "(To NOT copy local references like (./inputs/*.ndm). Default: Copy)"
   let details["collgen::trace_between"]={}
   let details["collgen::trace_from"]={}
   let details["collgen::trace_ft_driver_for_all_pins"]={}
   let details["collgen::trace_ft_driver_for_cell"]={}
   let details["collgen::trace_ft_driver_for_pinnames_"]={}
   let details["collgen::trace_ft_driver_for_pins_"]={}
   let details["collgen::write_clock_types_file"]={}
   let details["collgen::write_clock_types_file_from_attr_file"]={}
   let details["collgen::write_die_file_info"]={}
   let details["collgen::write_dop_map_file"]={}
   let details["collgen::write_feedthru_ports"]={}
   let details["collgen::write_ft_driver"]={}
   let details["collgen::write_ft_port_pair_"]={}
   let details["collgen::write_generic_dont_touch"]={}
   let details["collgen::write_hier_pg_def"]={}
   let details["collgen::write_logical_ports"]={}
   let details["collgen::write_macro_shell_verilog"]={}
        let details["collgen::write_macro_shell_verilog"]["-macro_list"] = "(list of macros to generate shell verilog)"
   let details["collgen::write_pg_def_for_block"]={}
   let details["collgen::write_pg_ports"]={}
   let details["collgen::write_shell_verilog"]={}
   let details["collgen::write_shell_verilog_for_design_library"]={}
   let details["collgen::write_syndp_inputs"]={}
   let details["collgen::write_td_subset_cells"]={}
        let details["collgen::write_td_subset_cells"]["-block"] = "(Name of current block.)"
        let details["collgen::write_td_subset_cells"]["-path"] = "(Path to default output file name)"
        let details["collgen::write_td_subset_cells"]["-td_type"] = "(Value of td_type attribute.)"
        let details["collgen::write_td_subset_cells"]["-output_file"] = "(Output file name. DEFAULT: ${block}_td_${td_type}_route_eco.tcl)"
   let details["collgen::write_td_subset_connectivity"]={}
        let details["collgen::write_td_subset_connectivity"]["-block"] = "(Name of current block.)"
        let details["collgen::write_td_subset_connectivity"]["-path"] = "(Path to default output file name)"
        let details["collgen::write_td_subset_connectivity"]["-td_type"] = "(Value of td_type attribute.)"
        let details["collgen::write_td_subset_connectivity"]["-output_file"] = "(Output file name. DEFAULT: ${block}_td_${td_type}_eco.tcl)"
   let details["collgen::write_td_subset_routes"]={}
        let details["collgen::write_td_subset_routes"]["-block"] = "(Name of current block.)"
        let details["collgen::write_td_subset_routes"]["-path"] = "(Path to default output file name)"
        let details["collgen::write_td_subset_routes"]["-td_type"] = "(Value of td_type attribute.)"
        let details["collgen::write_td_subset_routes"]["-output_file"] = "(Output file name. DEFAULT: ${block}_td_${td_type}_route_eco.tcl)"
   let details["collgen::write_track_region_config"]={}
   let details["collgen::write_wrapper_shadow_eco"]={}
        let details["collgen::write_wrapper_shadow_eco"]["-nets"] = "(nets)"
        let details["collgen::write_wrapper_shadow_eco"]["-output_dir"] = "(output dir shadow tcl file)"
        let details["collgen::write_wrapper_shadow_eco"]["-input_shadow_file"] = ""
        let details["collgen::write_wrapper_shadow_eco"]["-append_output"] = "(append to output file)"
   let details["common::check_error_counter"]={}
        let details["common::check_error_counter"]["-return_num"] = "(Return the number of errors only)"
   let details["common::close_log"]={}
   let details["common::disable_error_counter"]={}
   let details["common::enable_error_counter"]={}
   let details["common::format_msg"]={}
   let details["common::get_caller"]={}
   let details["common::open_log"]={}
   let details["common::print"]={}
   let details["comp::remove_icc_cmds_from_sdc_file"]={}
        let details["comp::remove_icc_cmds_from_sdc_file"]["-sdc_file"] = "(Input file)"
        let details["comp::remove_icc_cmds_from_sdc_file"]["-cmds_to_remove"] = "(ICC cmds not supported in ICC2 scheduled for removal)"
   let details["comp::translate_icc2_orientations"]={}
        let details["comp::translate_icc2_orientations"]["-file"] = "(Input file)"
   let details["comp::translate_icc2_vias_file"]={}
        let details["comp::translate_icc2_vias_file"]["-in_pg_vias_file"] = "(Input file)"
        let details["comp::translate_icc2_vias_file"]["-in_signal_vias_file"] = ""
        let details["comp::translate_icc2_vias_file"]["-outfile"] = "(output file)"
   let details["comp::translate_icc_dc_dont_touch_cells_file"]={}
        let details["comp::translate_icc_dc_dont_touch_cells_file"]["-infile"] = "(Input file)"
        let details["comp::translate_icc_dc_dont_touch_cells_file"]["-outfile"] = "(output file)"
   let details["comp::translate_icc_place_file"]={}
        let details["comp::translate_icc_place_file"]["-infile"] = "(Input file)"
        let details["comp::translate_icc_place_file"]["-outfile"] = "(output file)"
   let details["comp::translate_icc_route_file"]={}
        let details["comp::translate_icc_route_file"]["-infile"] = "(Input file)"
        let details["comp::translate_icc_route_file"]["-outfile"] = "(output file)"
   let details["comp::translate_icc_sdc_file"]={}
        let details["comp::translate_icc_sdc_file"]["-infile"] = "(Input file)"
        let details["comp::translate_icc_sdc_file"]["-outfile"] = "(output file)"
        let details["comp::translate_icc_sdc_file"]["-sdc_lib_mapping_file"] = ""
   let details["comp::translate_icc_track_file"]={}
        let details["comp::translate_icc_track_file"]["-infile"] = "(Input file)"
        let details["comp::translate_icc_track_file"]["-outfile"] = "(output file)"
   let details["ctm::balance_levels"]={}
        let details["ctm::balance_levels"]["-clk"] = "(Name of the clock)"
        let details["ctm::balance_levels"]["-level"] = "(Number of levels between cell and source)"
   let details["ctm::check_lib_constraints"]={}
        let details["ctm::check_lib_constraints"]["-clks"] = "(Clock names - default ctmesh clocks)"
   let details["ctm::clone_clock_gadget"]={}
   let details["ctm::ctmesh_save_step"]={}
   let details["ctm::disable_multi_clocks"]={}
        let details["ctm::disable_multi_clocks"]["-clks"] = "(Name of the clock source)"
   let details["ctm::duplicate_flop_chain"]={}
        let details["ctm::duplicate_flop_chain"]["-pins"] = "(Collection of pins driven by the logic tobe duplicated)"
        let details["ctm::duplicate_flop_chain"]["-bbox"] = "(Bounding box size)"
        let details["ctm::duplicate_flop_chain"]["-levels"] = "(No of levels to be duplicated)"
   let details["ctm::duplicate_instance"]={}
        let details["ctm::duplicate_instance"]["-inst"] = "(Instance to be duplicated)"
        let details["ctm::duplicate_instance"]["-pins"] = "(List of receivers of the original cell to be driven by the new cell)"
        let details["ctm::duplicate_instance"]["-suffix"] = "(Suffix)"
        let details["ctm::duplicate_instance"]["-prefix"] = "(Prefix; any suffix used will be ignored)"
        let details["ctm::duplicate_instance"]["-copy_user_attributes"] = ""
   let details["ctm::get_clock_cells"]={}
        let details["ctm::get_clock_cells"]["-clk"] = "(Name of the clock source or net)"
        let details["ctm::get_clock_cells"]["-group"] = "(Name of the DOP group)"
        let details["ctm::get_clock_cells"]["-level"] = "(number of levels between cell and source)"
   let details["ctm::get_clock_leaf_pins"]={}
        let details["ctm::get_clock_leaf_pins"]["-clk"] = "(Name of the clock or collection)"
        let details["ctm::get_clock_leaf_pins"]["-group"] = "(Name of the DOP group)"
        let details["ctm::get_clock_leaf_pins"]["-level"] = "(Number of levels from clock source)"
   let details["ctm::get_clock_leaves"]={}
        let details["ctm::get_clock_leaves"]["-clk"] = "(Name of the clock source (port))"
        let details["ctm::get_clock_leaves"]["-group"] = "(Name of the DOP group)"
        let details["ctm::get_clock_leaves"]["-level"] = "(number of levels between cell and source)"
   let details["ctm::get_clock_nets"]={}
        let details["ctm::get_clock_nets"]["-clk"] = "(Name of the clock source or net)"
        let details["ctm::get_clock_nets"]["-group"] = "(Name of the DOP group)"
        let details["ctm::get_clock_nets"]["-level"] = "(number of levels between cell and source)"
   let details["ctm::get_clock_var"]={}
        let details["ctm::get_clock_var"]["-quiet"] = "(Does not error when the var is not defined)"
        let details["ctm::get_clock_var"]["-clk"] = "(Clock name)"
   let details["ctm::get_exceptions"]={}
        let details["ctm::get_exceptions"]["-clk"] = "(Name of the clock source (port))"
        let details["ctm::get_exceptions"]["-group"] = "(Name of the DOP group)"
   let details["ctm::get_grid_nets"]={}
        let details["ctm::get_grid_nets"]["-clk"] = "(Name of the clock)"
        let details["ctm::get_grid_nets"]["-group"] = "(Name of DOP group)"
   let details["ctm::get_gridclk"]={}
        let details["ctm::get_gridclk"]["-master"] = "(Return the master clocks if the clocks are generated)"
   let details["ctm::get_non_buffer_driver"]={}
        let details["ctm::get_non_buffer_driver"]["-pins"] = "(name list or collection of pins)"
   let details["ctm::nominalize_clock_cells"]={}
        let details["ctm::nominalize_clock_cells"]["-clks"] = "(Clocks)"
   let details["ctm::remove_dangling_clock_cells"]={}
        let details["ctm::remove_dangling_clock_cells"]["-clks"] = "(Clocks)"
   let details["ctm::report_clock_levels"]={}
        let details["ctm::report_clock_levels"]["-clks"] = "(Name of the clock source or net)"
        let details["ctm::report_clock_levels"]["-groups"] = "(Name of the clock groups)"
   let details["ctm::set_exceptions"]={}
        let details["ctm::set_exceptions"]["-clocks"] = "(Clocks)"
        let details["ctm::set_exceptions"]["-stop_pins"] = "(Collection of stop pins)"
        let details["ctm::set_exceptions"]["-stop_cells"] = "(Collection of cells)"
        let details["ctm::set_exceptions"]["-ignore_pins"] = "(Collection of pins to ignore)"
        let details["ctm::set_exceptions"]["-ignore_gen_clocks"] = ""
   let details["ctm::set_ideal_latency"]={}
        let details["ctm::set_ideal_latency"]["-clk"] = "(Name of the clock)"
        let details["ctm::set_ideal_latency"]["-scenario"] = "(Name of the scenario)"
   let details["ctm::set_lib_constraints"]={}
   let details["ctm::set_spine_net_timing"]={}
        let details["ctm::set_spine_net_timing"]["-clk"] = "(Clock)"
   let details["ctm::set_stop_pins"]={}
        let details["ctm::set_stop_pins"]["-clocks"] = "(Clocks)"
        let details["ctm::set_stop_pins"]["-pins"] = "(Pins to set exceptions)"
   let details["ctm::stamp_gridnet_delays"]={}
        let details["ctm::stamp_gridnet_delays"]["-clks"] = "(Clocks)"
   let details["ctm::write_cell_delay_report"]={}
        let details["ctm::write_cell_delay_report"]["-clocks"] = "(Clocks)"
        let details["ctm::write_cell_delay_report"]["-file"] = "()"
   let details["ctm::write_latency_diff_report"]={}
        let details["ctm::write_latency_diff_report"]["-clocks"] = "(Clocks)"
        let details["ctm::write_latency_diff_report"]["-file"] = "()"
   let details["ctm::write_latency_expanded_report"]={}
        let details["ctm::write_latency_expanded_report"]["-clocks"] = "(Clocks)"
        let details["ctm::write_latency_expanded_report"]["-file"] = "()"
   let details["ctm::write_net_delay_report"]={}
        let details["ctm::write_net_delay_report"]["-clocks"] = "(Clocks)"
        let details["ctm::write_net_delay_report"]["-file"] = "()"
   let details["ctm::write_transition_report"]={}
        let details["ctm::write_transition_report"]["-clocks"] = "(Clocks)"
        let details["ctm::write_transition_report"]["-file"] = "()"
   let details["cts::add_cell_spacing_rule"]={}
   let details["cts::compute_partition_latency_targets"]={}
   let details["cts::create_par_latency_template"]={}
   let details["cts::expand_refs"]={}
        let details["cts::expand_refs"]["-return"] = "(Return the cells list)"
   let details["cts::generate_latency_target_reports"]={}
   let details["cts::get_clk_delay_per_par"]={}
   let details["cts::get_par_spec_latency"]={}
   let details["cts::remove_cell_spacing_rule"]={}
   let details["cts::set_constrainted_clock_max_transition"]={}
        let details["cts::set_constrainted_clock_max_transition"]["-clocks"] = "(Collection of clocks from current mode)"
        let details["cts::set_constrainted_clock_max_transition"]["-scenarios"] = "(Collection of scenarios)"
        let details["cts::set_constrainted_clock_max_transition"]["-max_tran"] = "(Max transition value)"
   let details["dfm::get_lib_base_paths"]={}
   let details["dfm::get_runset_from_env"]={}
   let details["dfm::get_runset_path_from_env"]={}
   let details["dfm::print_tool_vars"]={}
   let details["dfm::restore_icv"]={}
   let details["dfm::restore_icwbev"]={}
   let details["dfm::restore_tool"]={}
   let details["dfm::save_run_files"]={}
   let details["dfm::setup_icv"]={}
   let details["dfm::setup_icwbev"]={}
   let details["dfm::setup_rundir"]={}
   let details["dfm::setup_tmpdir"]={}
   let details["dfm::setup_tool"]={}
   let details["dfm::setup_workdir"]={}
   let details["dmm::create_ddh_config"]={}
   let details["dmm::report_ddh"]={}
        let details["dmm::report_ddh"]["-file"] = "(Name of report file)"
   let details["dmm::set_ddh_config"]={}
   let details["dnd::_load"]={}
   let details["dop::create_dop_strips_and_trunks"]={}
   let details["dop::create_new_dops"]={}
   let details["dop::get_dop_clocks"]={}
        let details["dop::get_dop_clocks"]["-type"] = "(List of clock types (ctmesh, cts, etc) - Default all)"
        let details["dop::get_dop_clocks"]["-force"] = "(Reload clock_types.tcl file)"
   let details["dop::get_dop_output_nets"]={}
        let details["dop::get_dop_output_nets"]["-group"] = "(DOP group name; default *)"
        let details["dop::get_dop_output_nets"]["-type"] = "(List of clock types (ctmesh, cts, etc) - Default all)"
        let details["dop::get_dop_output_nets"]["-clock"] = "(Name of the clock)"
        let details["dop::get_dop_output_nets"]["-force"] = "(Reload clock_types.tcl file)"
   let details["dop::get_dops"]={}
        let details["dop::get_dops"]["-group"] = "(Group name)"
        let details["dop::get_dops"]["-type"] = "(List of clock types, ctmesh cts - Default both)"
        let details["dop::get_dops"]["-clock"] = "(Name of the clock)"
        let details["dop::get_dops"]["-force"] = "(Reload clock_types.tcl file)"
   let details["dop::get_groups_of_clock"]={}
        let details["dop::get_groups_of_clock"]["-clk"] = "(Clock name)"
        let details["dop::get_groups_of_clock"]["-type"] = "(List of clock types, ctmesh cts - Default both)"
   let details["dop::get_master_dop_pin"]={}
        let details["dop::get_master_dop_pin"]["-dop_pins"] = "(Collection containing the DOP pins)"
        let details["dop::get_master_dop_pin"]["-exception_pins"] = ""
   let details["dop::get_ref_clock"]={}
        let details["dop::get_ref_clock"]["-group"] = "(Group name)"
   let details["dop::insert_dop_via_ladder"]={}
        let details["dop::insert_dop_via_ladder"]["-dop_pins"] = "(DOP pins - default all CTMESH dop pins)"
        let details["dop::insert_dop_via_ladder"]["-dop_nets"] = "(DOP nets - default all CTMESH dop nets)"
        let details["dop::insert_dop_via_ladder"]["-remove"] = "(Remove existing straps - default skip)"
        let details["dop::insert_dop_via_ladder"]["-allow_drcs"] = "(Allow drcs for debug)"
   let details["dop::legalize_dops"]={}
        let details["dop::legalize_dops"]["-dops"] = "(DOP cells to be legalized)"
        let details["dop::legalize_dops"]["-layer"] = "(Layer used for aligning the DOP cell - align the left edge of DOP to mx ground track)"
   let details["dop::read_clock_types"]={}
        let details["dop::read_clock_types"]["-force"] = "(Reread clock_types.tcl file)"
        let details["dop::read_clock_types"]["-file"] = "(Read this clock_types.tcl file)"
   let details["dop::reconnect_dop_taps"]={}
        let details["dop::reconnect_dop_taps"]["-taps"] = "(collection with tap cells)"
        let details["dop::reconnect_dop_taps"]["-dop_pins"] = "(Collection contaning the DOP pins)"
   let details["dop::shield_dop_nets"]={}
        let details["dop::shield_dop_nets"]["-dop_nets"] = "(DOP nets)"
        let details["dop::shield_dop_nets"]["-dirty_mode"] = "(Allow DRCs for debug)"
   let details["dop::snap_dops_to_m5_pg_grid"]={}
   let details["dop::sort_by_location"]={}
   let details["dop::update_dop_outnet_names"]={}
   let details["dp_notifier::attach"]={}
   let details["dp_notifier::detach"]={}
   let details["dp_notifier::notify"]={}
   let details["draw::add_text"]={}
        let details["draw::add_text"]["-location"] = "(location as {x y})"
        let details["draw::add_text"]["-text"] = "(Content of text)"
        let details["draw::add_text"]["-color"] = "(color of drawing. The default is white)"
        let details["draw::add_text"]["-width"] = "(width of drawing. The default is 4)"
   let details["draw::clear"]={}
   let details["draw::draw_alignment_edge"]={}
        let details["draw::draw_alignment_edge"]["-layer"] = "(layer name)"
        let details["draw::draw_alignment_edge"]["-color"] = "(specify the color. Default is yellow)"
        let details["draw::draw_alignment_edge"]["-edge"] = "(specify the left or right edge)"
   let details["draw::draw_bbox"]={}
        let details["draw::draw_bbox"]["-bbox"] = "(bbox)"
        let details["draw::draw_bbox"]["-color"] = "(color of drawing. The default is white)"
        let details["draw::draw_bbox"]["-width"] = "(width of drawing. The default is 2)"
        let details["draw::draw_bbox"]["-cross"] = "(draw a cross)"
   let details["draw::draw_edge"]={}
   let details["draw::draw_line"]={}
        let details["draw::draw_line"]["-points"] = "(list of points.)"
        let details["draw::draw_line"]["-color"] = "(color of drawing. The default is white)"
        let details["draw::draw_line"]["-width"] = "(width of drawing. The default is 4)"
        let details["draw::draw_line"]["-type"] = "(Show line type, line, arrow, polyline, polygon)"
   let details["draw::draw_polygon"]={}
        let details["draw::draw_polygon"]["-points"] = "(list of polygon points)"
        let details["draw::draw_polygon"]["-color"] = "(color of drawing. The default is white)"
        let details["draw::draw_polygon"]["-width"] = "(width of drawing. The default is 2)"
   let details["draw::draw_routing_track"]={}
        let details["draw::draw_routing_track"]["-layer"] = "(layer name)"
        let details["draw::draw_routing_track"]["-width"] = "(layer width. Default is all width)"
        let details["draw::draw_routing_track"]["-colors"] = "(Colors. Number should be atleast number of widths)"
   let details["draw::draw_voltage_area"]={}
   let details["dtDfm::V0_328_vss_fixing"]={}
        let details["dtDfm::V0_328_vss_fixing"]["-process_name"] = "(process name)"
        let details["dtDfm::V0_328_vss_fixing"]["-keepin_cells_list"] = ""
        let details["dtDfm::V0_328_vss_fixing"]["-write_def_file"] = ""
        let details["dtDfm::V0_328_vss_fixing"]["-power_name"] = "(Name of power rail (default = vcc))"
        let details["dtDfm::V0_328_vss_fixing"]["-ground_name"] = "(Name of ground rail (default = vss))"
        let details["dtDfm::V0_328_vss_fixing"]["-power_voltage_areas"] = ""
        let details["dtDfm::V0_328_vss_fixing"]["-ground_voltage_areas"] = ""
        let details["dtDfm::V0_328_vss_fixing"]["-contact_name"] = "(name of contact to place for v0_328 fixing)"
   let details["dtDfm::V0_328_vss_fixing_writeuin"]={}
   let details["dtDfm::copyFromSTMToTop"]={}
   let details["dtDfm::create_fill_vias"]={}
   let details["dtDfm::delete_all_fill"]={}
   let details["dtDfm::dummy__"]={}
   let details["dtDfm::fill_base_layer"]={}
        let details["dtDfm::fill_base_layer"]["-layer"] = "(Metal layer to fill - i.e. poly)"
        let details["dtDfm::fill_base_layer"]["-excludeKOR"] = "(Exclude KOR layer objs)"
        let details["dtDfm::fill_base_layer"]["-top_level_only_kor"] = ""
        let details["dtDfm::fill_base_layer"]["-korspX"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::fill_base_layer"]["-korspY"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::fill_base_layer"]["-keepout_cells_list"] = ""
        let details["dtDfm::fill_base_layer"]["-ply"] = "(Polygon region based fill, i.e {0.0,0.04 0.0,182.36 207.32,182.36 ...})"
        let details["dtDfm::fill_base_layer"]["-plys"] = "(Multiple polygon region based fill, i.e { {polygon1} {polygon2} ... })"
        let details["dtDfm::fill_base_layer"]["-near_fill_density_target"] = ""
        let details["dtDfm::fill_base_layer"]["-far_fill_density_target"] = ""
        let details["dtDfm::fill_base_layer"]["-density_window_size"] = ""
        let details["dtDfm::fill_base_layer"]["-density_window_y_size"] = ""
        let details["dtDfm::fill_base_layer"]["-density_window_x_offset"] = ""
        let details["dtDfm::fill_base_layer"]["-density_window_y_offset"] = ""
        let details["dtDfm::fill_base_layer"]["-density_window_x_stepping"] = ""
        let details["dtDfm::fill_base_layer"]["-density_window_y_stepping"] = ""
        let details["dtDfm::fill_base_layer"]["-density_boundary_assumption"] = ""
        let details["dtDfm::fill_base_layer"]["-density_kor_assumption"] = ""
        let details["dtDfm::fill_base_layer"]["-verbatim"] = "(Adds PXL code to UIN file verbatim)"
   let details["dtDfm::fill_base_layer_writeuin"]={}
   let details["dtDfm::fill_metal_icv"]={}
        let details["dtDfm::fill_metal_icv"]["-cellname"] = "(	Name of the cell on which fill is to be performed"
        let details["dtDfm::fill_metal_icv"]["-outputcellname"] = ""
        let details["dtDfm::fill_metal_icv"]["-viewname"] = "(Viewname of the cell"
        let details["dtDfm::fill_metal_icv"]["-techname"] = "(Techname of the cell"
        let details["dtDfm::fill_metal_icv"]["-property"] = "(Fill metal property info"
        let details["dtDfm::fill_metal_icv"]["-stub_property"] = ""
        let details["dtDfm::fill_metal_icv"]["-stubnet"] = "(Genesys specific feature: net name to be used for stubs"
        let details["dtDfm::fill_metal_icv"]["-layer"] = "(Metal layer to fill - i.e. metal2)"
        let details["dtDfm::fill_metal_icv"]["-do_ungridded_fill"] = "(Do ungridded fill)"
        let details["dtDfm::fill_metal_icv"]["-hybrid"] = "(Do hybrid fill)"
        let details["dtDfm::fill_metal_icv"]["-pattern"] = "(Pattern has the format triplet1:triplet2:....."
        let details["dtDfm::fill_metal_icv"]["-offset"] = "(Fill pattern offset wrt left/bottom boundary of the cell)"
        let details["dtDfm::fill_metal_icv"]["-break_pattern"] = ""
        let details["dtDfm::fill_metal_icv"]["-break_offset"] = "(Break pattern offset)"
        let details["dtDfm::fill_metal_icv"]["-break_min_length"] = "(Break pattern min length of wires to apply breaks to)"
        let details["dtDfm::fill_metal_icv"]["-transition_pattern"] = ""
        let details["dtDfm::fill_metal_icv"]["-transition_offset"] = "(Transition pattern offset)"
        let details["dtDfm::fill_metal_icv"]["-transition_period"] = "(Transition pattern period)"
        let details["dtDfm::fill_metal_icv"]["-grid_patterns"] = ""
        let details["dtDfm::fill_metal_icv"]["-break_patterns"] = ""
        let details["dtDfm::fill_metal_icv"]["-transition_patterns"] = ""
        let details["dtDfm::fill_metal_icv"]["-region_grids"] = "(region grids"
   let details["dtDfm::fill_metal_icv_checkcell"]={}
   let details["dtDfm::fill_metal_icv_end"]={}
   let details["dtDfm::fill_metal_icv_get_tech"]={}
   let details["dtDfm::fill_metal_icv_init"]={}
        let details["dtDfm::fill_metal_icv_init"]["-cellname"] = "(Name of the cell on which fill is to be performed)"
        let details["dtDfm::fill_metal_icv_init"]["-outputcellname"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-viewname"] = "(Viewname of the cell)"
        let details["dtDfm::fill_metal_icv_init"]["-techname"] = "(Techname of the cell)"
        let details["dtDfm::fill_metal_icv_init"]["-skip_output"] = "(Skip STM output)"
        let details["dtDfm::fill_metal_icv_init"]["-use_lnf_input"] = "(Uses LNF from disk as input format for the flow)"
        let details["dtDfm::fill_metal_icv_init"]["-save_workdir"] = "(Saves ICV work directory for debugging purpose)"
        let details["dtDfm::fill_metal_icv_init"]["-only_write_uin"] = "(When this option is used fill_metal_icv only writes out UIN file)"
        let details["dtDfm::fill_metal_icv_init"]["-streamlined"] = "(Do necessary setup to run streamlined metal/via fill"
        let details["dtDfm::fill_metal_icv_init"]["-text_extensions"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-do_final_texting"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-verbatim"] = "(Adds PXL code to UIN file verbatim: flexfill_fill_layers.rs)"
        let details["dtDfm::fill_metal_icv_init"]["-skip_dummy_250"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-no_tracks_file"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-explicit_parallel"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-launch_script"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-nbpool"] = "(Enable Netbatch on -explict_parallel max number of Netbatch jobs using pool specified (ie: pdx_dts))"
        let details["dtDfm::fill_metal_icv_init"]["-nbslot"] = "(Submit netbatch jobs to this specified queue slot (ie: cds))"
        let details["dtDfm::fill_metal_icv_init"]["-nbclass"] = "(Request this type of netbatch machine (default: SLES10_EM64T_16G))"
        let details["dtDfm::fill_metal_icv_init"]["-uindir"] = "(Location to save UIN files, default location <work_area_root_dir>/pds/uins)"
        let details["dtDfm::fill_metal_icv_init"]["-stream"] = "(Path to an existing stream file, skips generating a new stream file)"
        let details["dtDfm::fill_metal_icv_init"]["-fillinmw"] = "(ICC specific option: saves fill in MW)"
        let details["dtDfm::fill_metal_icv_init"]["-fillincelview"] = "(ICC specific option: saves fill in MW CEL view)"
        let details["dtDfm::fill_metal_icv_init"]["-mwoutpath"] = "(ICC specific option: directory in which MW library resides)"
        let details["dtDfm::fill_metal_icv_init"]["-mwlibrary"] = "(ICC specific option: MW library name)"
        let details["dtDfm::fill_metal_icv_init"]["-layer_map_for_mw"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-stubnet"] = "(Genesys specific option: net name to be used for stubs"
        let details["dtDfm::fill_metal_icv_init"]["-property"] = "(Genesys specific option: fill metal property info)"
        let details["dtDfm::fill_metal_icv_init"]["-stub_property"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-icv_options"] = "(List of options to be used with ICV)"
        let details["dtDfm::fill_metal_icv_init"]["-rename_nets"] = "(List of nets to be renamed { {from1 to1} {from2 to2} ... })"
        let details["dtDfm::fill_metal_icv_init"]["-netname_for_untexted_objects"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-skip_result_stm_output"] = ""
        let details["dtDfm::fill_metal_icv_init"]["-use_pds"] = "(Use PDS to launch ICV job; required to support netbatch in non -explict_parallel mode)"
        let details["dtDfm::fill_metal_icv_init"]["-run_mode"] = "(Specify this option as: [list mode1 mode2...].  The user is to provide non-conflicting modes.  The following modes are supported: vfill_w_min_density (default) vfill_w_no_breaking use_existing_uin verbatim_only_uin.)"
        let details["dtDfm::fill_metal_icv_init"]["-fast_read_fill_vias"] = "(Use alternative read in procedure for via fill only. Should only be used if filling via only and there is a large number of fill vias. This is a workaround for situations when reading in a large number of fill objects causes Genesys to hang)"
   let details["dtDfm::fill_metal_icv_print_error"]={}
   let details["dtDfm::fill_metal_icv_print_info"]={}
   let details["dtDfm::fill_metal_icv_readresults"]={}
   let details["dtDfm::fill_metal_icv_run_streamlined"]={}
        let details["dtDfm::fill_metal_icv_run_streamlined"]["-layers"] = "(list of fill layers)"
        let details["dtDfm::fill_metal_icv_run_streamlined"]["-layer_opts"] = "(list of opts for each layer)"
        let details["dtDfm::fill_metal_icv_run_streamlined"]["-prune_cells_lists"] = ""
        let details["dtDfm::fill_metal_icv_run_streamlined"]["-tiling_opts"] = "(list of tiling opts for each layer)"
   let details["dtDfm::fill_metal_icv_runflow"]={}
   let details["dtDfm::fill_metal_icv_saveas"]={}
   let details["dtDfm::fill_metal_icv_streamlined_writeuin"]={}
   let details["dtDfm::fill_metal_icv_write_break_pattern_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_cells_list_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_density_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_kor_options_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_kors_to_uin_whitebox_mode"]={}
   let details["dtDfm::fill_metal_icv_write_output_options_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_pattern_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_region_grids_option_value_pair_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_region_grids_to_uin"]={}
   let details["dtDfm::fill_metal_icv_write_transition_pattern_to_uin"]={}
   let details["dtDfm::fill_metal_icv_writeuin"]={}
   let details["dtDfm::fill_via_icv"]={}
        let details["dtDfm::fill_via_icv"]["-layers"] = "(Via layers to fill - i.e. {vcn, via2, via9})"
        let details["dtDfm::fill_via_icv"]["-fill_container_name"] = ""
        let details["dtDfm::fill_via_icv"]["-connect_to_existing_floating_metal"] = ""
        let details["dtDfm::fill_via_icv"]["-hv_nets"] = "(Names of the HV nets)"
        let details["dtDfm::fill_via_icv"]["-ehv_nets"] = "(Names of the EHV nets)"
        let details["dtDfm::fill_via_icv"]["-uhv_nets"] = "(Names of the UHV nets)"
        let details["dtDfm::fill_via_icv"]["-check_for_hv"] = "(Check for HV rules in via fill.)"
        let details["dtDfm::fill_via_icv"]["-use_drawn_kor"] = ""
        let details["dtDfm::fill_via_icv"]["-use_route_kor"] = ""
        let details["dtDfm::fill_via_icv"]["-use_fill_kor"] = ""
        let details["dtDfm::fill_via_icv"]["-use_global_kor"] = ""
        let details["dtDfm::fill_via_icv"]["-use_switch_id_kor"] = ""
        let details["dtDfm::fill_via_icv"]["-use_pod_density_windows"] = ""
        let details["dtDfm::fill_via_icv"]["-verbatim"] = "(Adds PXL code to UIN file verbatim)"
   let details["dtDfm::fill_via_icv_get_net_name_list"]={}
   let details["dtDfm::fill_via_icv_old"]={}
        let details["dtDfm::fill_via_icv_old"]["-cellname"] = "(Name of the cell on which fill is to be performed"
        let details["dtDfm::fill_via_icv_old"]["-viewname"] = "(Viewname of the cell"
        let details["dtDfm::fill_via_icv_old"]["-techname"] = "(Techname of the cell"
        let details["dtDfm::fill_via_icv_old"]["-property"] = "(Fill metal property info"
        let details["dtDfm::fill_via_icv_old"]["-stub_property"] = ""
        let details["dtDfm::fill_via_icv_old"]["-layer"] = "(Via layer to fill - i.e. via2)"
        let details["dtDfm::fill_via_icv_old"]["-hookup_regions"] = ""
   let details["dtDfm::fill_via_icv_runflow"]={}
   let details["dtDfm::fill_via_icv_write_hookup_regions_to_uin"]={}
   let details["dtDfm::fill_via_icv_writeuin"]={}
   let details["dtDfm::fill_via_icv_writeuin_vfill_layers"]={}
   let details["dtDfm::fix_v0pax_dfmg"]={}
        let details["dtDfm::fix_v0pax_dfmg"]["-layer"] = "(Via layer to fill - i.e. via1)"
        let details["dtDfm::fix_v0pax_dfmg"]["-keepin_cells_list"] = ""
        let details["dtDfm::fix_v0pax_dfmg"]["-keepout_cells_list"] = ""
        let details["dtDfm::fix_v0pax_dfmg"]["-keepout_cells_x_space"] = ""
        let details["dtDfm::fix_v0pax_dfmg"]["-keepout_cells_y_space"] = ""
        let details["dtDfm::fix_v0pax_dfmg"]["-excludeKOR"] = "(Exclude KOR layer objs)"
        let details["dtDfm::fix_v0pax_dfmg"]["-top_level_only_kor"] = ""
        let details["dtDfm::fix_v0pax_dfmg"]["-korspX"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::fix_v0pax_dfmg"]["-korspY"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::fix_v0pax_dfmg"]["-result_container_name"] = ""
   let details["dtDfm::fix_v0pax_dfmg_writeuin"]={}
   let details["dtDfm::fix_vcx250"]={}
        let details["dtDfm::fix_vcx250"]["-layer"] = "(Via layer to fill - i.e. via1)"
        let details["dtDfm::fix_vcx250"]["-keepin_cells_list"] = ""
        let details["dtDfm::fix_vcx250"]["-keepout_cells_list"] = ""
        let details["dtDfm::fix_vcx250"]["-keepout_cells_x_space"] = ""
        let details["dtDfm::fix_vcx250"]["-keepout_cells_y_space"] = ""
        let details["dtDfm::fix_vcx250"]["-excludeKOR"] = "(Exclude KOR layer objs)"
        let details["dtDfm::fix_vcx250"]["-top_level_only_kor"] = ""
        let details["dtDfm::fix_vcx250"]["-korspX"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::fix_vcx250"]["-korspY"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::fix_vcx250"]["-result_container_name"] = ""
   let details["dtDfm::fix_vcx250_writeuin"]={}
   let details["dtDfm::getPeriodFromPattern"]={}
   let details["dtDfm::get_cist_cmd_info"]={}
   let details["dtDfm::get_pxl_ply"]={}
   let details["dtDfm::interrupted"]={}
   let details["dtDfm::is_dg_layer"]={}
   let details["dtDfm::is_run_mode"]={}
   let details["dtDfm::is_via_layer"]={}
   let details["dtDfm::is_via_layer_by_name"]={}
   let details["dtDfm::keylexist"]={}
   let details["dtDfm::keylget"]={}
   let details["dtDfm::keylset"]={}
   let details["dtDfm::lremove"]={}
   let details["dtDfm::powerhookup"]={}
        let details["dtDfm::powerhookup"]["-process_name"] = "(process name)"
        let details["dtDfm::powerhookup"]["-top_level_only_kor"] = ""
        let details["dtDfm::powerhookup"]["-use_drawn_kor"] = ""
        let details["dtDfm::powerhookup"]["-use_route_kor"] = ""
        let details["dtDfm::powerhookup"]["-use_fill_kor"] = ""
        let details["dtDfm::powerhookup"]["-use_global_kor"] = ""
        let details["dtDfm::powerhookup"]["-drawn_kor_x_space"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::powerhookup"]["-drawn_kor_y_space"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::powerhookup"]["-dh_bonus_cells_list"] = ""
        let details["dtDfm::powerhookup"]["-force_hookup_cells_list"] = ""
        let details["dtDfm::powerhookup"]["-hookup_cell_names_list"] = ""
        let details["dtDfm::powerhookup"]["-hookup_cell_names_list_xn"] = ""
        let details["dtDfm::powerhookup"]["-icc2_mode"] = ""
        let details["dtDfm::powerhookup"]["-keepin_cells_list"] = ""
        let details["dtDfm::powerhookup"]["-keepout_cells_list"] = ""
        let details["dtDfm::powerhookup"]["-keepout_cells_x_space"] = ""
        let details["dtDfm::powerhookup"]["-keepout_cells_y_space"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_grid_count"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_empty_area"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_cells_area"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_avoid_drv"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_all_segments"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_drv_vias_cells_list"] = ""
        let details["dtDfm::powerhookup"]["-powerhookup_offset_locations"] = ""
        let details["dtDfm::powerhookup"]["-write_coord_file"] = ""
        let details["dtDfm::powerhookup"]["-write_def_file_prefix"] = ""
        let details["dtDfm::powerhookup"]["-write_user_shape_file"] = ""
        let details["dtDfm::powerhookup"]["-power_name"] = "(Name of power rail (default = vcc))"
        let details["dtDfm::powerhookup"]["-ground_name"] = "(Name of ground rail (default = vss))"
        let details["dtDfm::powerhookup"]["-power_pin_names"] = ""
        let details["dtDfm::powerhookup"]["-ground_pin_names"] = ""
        let details["dtDfm::powerhookup"]["-ground_rail_y_start"] = ""
        let details["dtDfm::powerhookup"]["-power_voltage_areas"] = ""
        let details["dtDfm::powerhookup"]["-ground_voltage_areas"] = ""
        let details["dtDfm::powerhookup"]["-dsn_core_areas"] = ""
        let details["dtDfm::powerhookup"]["-m2_rail_width"] = "(Width of m2 pwr/gnd rails)"
        let details["dtDfm::powerhookup"]["-cell_height"] = "(Height of single height stdcell)"
        let details["dtDfm::powerhookup"]["-v0_master"] = "(v0 via master)"
        let details["dtDfm::powerhookup"]["-v1_master"] = "(v1 via master)"
        let details["dtDfm::powerhookup"]["-hookup_via_settings"] = ""
        let details["dtDfm::powerhookup"]["-use_xll_grid"] = ""
        let details["dtDfm::powerhookup"]["-bndry_y_min"] = "(block boundary lower-y (default = 0.0))"
        let details["dtDfm::powerhookup"]["-disable_m1_row_jumpers"] = ""
        let details["dtDfm::powerhookup"]["-disable_dfm_bridging"] = ""
        let details["dtDfm::powerhookup"]["-enable_m0_ek_mode"] = ""
        let details["dtDfm::powerhookup"]["-add_zt_m1_extensions"] = ""
        let details["dtDfm::powerhookup"]["-max_tracks_for_gcn_in_cell"] = ""
        let details["dtDfm::powerhookup"]["-max_tracks_for_m0_in_cell"] = ""
        let details["dtDfm::powerhookup"]["-checker_max_tracks_for_gcn"] = ""
        let details["dtDfm::powerhookup"]["-checker_max_tracks_for_m0"] = ""
        let details["dtDfm::powerhookup"]["-limit_hookup_to_area"] = ""
        let details["dtDfm::powerhookup"]["-verbatim"] = "(Adds PXL code to UIN file verbatim, e.g. query_m0_text = true;)"
   let details["dtDfm::powerhookup_writeuin"]={}
   let details["dtDfm::powervia12dg"]={}
        let details["dtDfm::powervia12dg"]["-process_name"] = "(process name)"
        let details["dtDfm::powervia12dg"]["-keepout_cells_list"] = ""
        let details["dtDfm::powervia12dg"]["-power_nets"] = "(Name of power/ground rails)"
   let details["dtDfm::powervia12dg_writeuin"]={}
   let details["dtDfm::read_stm"]={}
        let details["dtDfm::read_stm"]["-from_cell"] = "(name of STM cell from which contents need to be read)"
        let details["dtDfm::read_stm"]["-from_view"] = "(view name of from_cell)"
        let details["dtDfm::read_stm"]["-to_cell"] = "(name of cell into which contents need to be read)"
        let details["dtDfm::read_stm"]["-to_view"] = "(view name of the to_cell)"
        let details["dtDfm::read_stm"]["-layers"] = "(list of fill layers)"
        let details["dtDfm::read_stm"]["-path"] = "(path to the input STM file)"
        let details["dtDfm::read_stm"]["-techname"] = "(Techname of the cell)"
        let details["dtDfm::read_stm"]["-stubnet"] = "(net to be assigned to stubs; by default the stubs are assigned syn* nets)"
        let details["dtDfm::read_stm"]["-property"] = "(propery to be assigned to fill metal)"
        let details["dtDfm::read_stm"]["-stub_property"] = ""
        let details["dtDfm::read_stm"]["-rename_nets"] = "(nets are renamed as per these specs"
        let details["dtDfm::read_stm"]["-netname_for_untexted_objects"] = ""
        let details["dtDfm::read_stm"]["-convert_to_bbox"] = ""
   let details["dtDfm::rename_nets"]={}
        let details["dtDfm::rename_nets"]["-mw_cellname"] = "(Name of the mw output cell)"
        let details["dtDfm::rename_nets"]["-nets_to_rename"] = ""
   let details["dtDfm::rename_nets_writeuin"]={}
   let details["dtDfm::reset_metal_fill_defaults_icv"]={}
   let details["dtDfm::reset_via_fill_defaults_icv"]={}
   let details["dtDfm::runFillFlow"]={}
   let details["dtDfm::set_metal_fill_defaults_icv"]={}
        let details["dtDfm::set_metal_fill_defaults_icv"]["-layers"] = "(metal layers for which these defaults should be set)"
        let details["dtDfm::set_metal_fill_defaults_icv"]["-excludeKOR"] = ""
        let details["dtDfm::set_metal_fill_defaults_icv"]["-korspX"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::set_metal_fill_defaults_icv"]["-korspY"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::set_metal_fill_defaults_icv"]["-half_dr_end_to_end"] = "()"
        let details["dtDfm::set_metal_fill_defaults_icv"]["-fill_length"] = "(Fill length)"
        let details["dtDfm::set_metal_fill_defaults_icv"]["-use_fill_markers"] = ""
        let details["dtDfm::set_metal_fill_defaults_icv"]["-consider_off_grid"] = ""
        let details["dtDfm::set_metal_fill_defaults_icv"]["-verbatim"] = "(Specify any uin option(s) string verbatim)"
   let details["dtDfm::set_via_fill_defaults_icv"]={}
        let details["dtDfm::set_via_fill_defaults_icv"]["-layers"] = "(Via layers for which these defaults should be set)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-excludeKOR"] = "(Exclude KOR layer objs)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-korspX"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-korspY"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-exclCells"] = "(Wild card expression for the names of cells"
        let details["dtDfm::set_via_fill_defaults_icv"]["-top_level_only_kor"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-fill_container_name"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-fill_net_names"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-hv_nets"] = "(Names of the HV nets)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-ehv_nets"] = "(Names of the EHV nets)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-uhv_nets"] = "(Names of the UHV nets)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_target"] = "(Via density target (a number between 0 and 1 e.g. 0.02 is 2%))"
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_window_size"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-fast_density"] = "(Use a simpler density algorithm to reduce memory / run time)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_fill_downto"] = "(Fill down to density as opposed up to to density)"
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_window_y_size"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_window_x_offset"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_window_y_offset"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_window_x_stepping"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_window_y_stepping"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_boundary_assumption"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-density_kor_assumption"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-iteration_count"] = "(Number of Via SG passes to maximize density (with deminising returns))"
        let details["dtDfm::set_via_fill_defaults_icv"]["-consider_hv_violations"] = ""
        let details["dtDfm::set_via_fill_defaults_icv"]["-icv_options"] = "(List of ICV options specific to this layer when run in -explicit_parallel mode (default: -norscache -dp8))"
        let details["dtDfm::set_via_fill_defaults_icv"]["-eco_region"] = "(ECO is performed in these polygon regions { {polygon1} {polygon2} ... })"
        let details["dtDfm::set_via_fill_defaults_icv"]["-verbatim"] = "(Adds PXL code to UIN file verbatim)"
   let details["dtDfm::upsz_via"]={}
        let details["dtDfm::upsz_via"]["-layer"] = "(Via layer to fill - i.e. via1)"
        let details["dtDfm::upsz_via"]["-keepin_cells_list"] = ""
        let details["dtDfm::upsz_via"]["-keepout_cells_list"] = ""
        let details["dtDfm::upsz_via"]["-keepout_cells_x_space"] = ""
        let details["dtDfm::upsz_via"]["-keepout_cells_y_space"] = ""
        let details["dtDfm::upsz_via"]["-excludeKOR"] = "(Exclude KOR layer objs)"
        let details["dtDfm::upsz_via"]["-top_level_only_kor"] = ""
        let details["dtDfm::upsz_via"]["-korspX"] = "(Fill to KOR X spacing in micron)"
        let details["dtDfm::upsz_via"]["-korspY"] = "(Fill to KOR Y spacing in micron)"
        let details["dtDfm::upsz_via"]["-result_container_name"] = ""
   let details["dtDfm::upsz_via_writeuin"]={}
   let details["dtDfm::wait_on_pds_job"]={}
   let details["dtDfm::writeKORsToUIN"]={}
   let details["dtDfm::writeRegionGrids"]={}
   let details["dtDfm::write_plys_to_uin"]={}
   let details["eco::backup_changelist"]={}
   let details["eco::backup_preeco_nlib"]={}
   let details["eco::capture_cell_changes"]={}
   let details["eco::checkpoint_save_and_report"]={}
   let details["eco::connect_ps_cells"]={}
   let details["eco::find_nearest_ps_cell"]={}
   let details["eco::get_added_cells"]={}
        let details["eco::get_added_cells"]["-skip_capture"] = "(Skip the capture step to save runtime)"
   let details["eco::get_added_or_modified_cells"]={}
        let details["eco::get_added_or_modified_cells"]["-skip_capture"] = "(Skip the capture step to save runtime)"
   let details["eco::get_modified_cells"]={}
        let details["eco::get_modified_cells"]["-skip_capture"] = "(Skip the capture step to save runtime)"
   let details["eco::get_variant_cells"]={}
        let details["eco::get_variant_cells"]["-skip_capture"] = "(Skip the capture step to save runtime)"
   let details["eco::insert_power_switches"]={}
        let details["eco::insert_power_switches"]["-boundary"] = "(polygon boundary to insert power switches)"
        let details["eco::insert_power_switches"]["-dont_snap"] = "(snap to pg)"
        let details["eco::insert_power_switches"]["-x_incr"] = "(X step value. Default is G_POWER_SWITCH_X_INCREMENT)"
        let details["eco::insert_power_switches"]["-y_incr"] = "(Y step value. Default is G_POWER_SWITCH_Y_INCREMENT)"
        let details["eco::insert_power_switches"]["-aon_connect"] = "(Do the physical AON pin connection for eco ps)"
        let details["eco::insert_power_switches"]["-dont_chain"] = "(Dont chain the eco ps to connect with the rest of the ps cells)"
   let details["eco::insert_ps_around_rp"]={}
        let details["eco::insert_ps_around_rp"]["-rp_bloat_x"] = "(X Width around RP boundary to insert PS cells. Default is G_POWER_SWITCH_X_INCREMENT/2)"
        let details["eco::insert_ps_around_rp"]["-rp_bloat_y"] = "(Y Height around  RP boundary to insert PS cells. Default is G_POWER_SWITCH_Y_INCREMENT/2)"
        let details["eco::insert_ps_around_rp"]["-ps_x_incr"] = "(X step value. Default is G_POWER_SWITCH_X_INCREMENT)"
        let details["eco::insert_ps_around_rp"]["-ps_y_incr"] = "(Y step value. Default is G_POWER_SWITCH_Y_INCREMENT)"
   let details["eco::reset_flow"]={}
   let details["eco::reset_identify_eco_attributes"]={}
   let details["eco::set_run_tag"]={}
   let details["eco::write_history_file"]={}
   let details["fcde_dm::NflTclFindTheFullPath"]={}
   let details["fcde_dm::load_udmpp_connan_tcl_files"]={}
   let details["fcde_dm::load_udmpp_libs"]={}
   let details["fcde_dm::load_udmpp_predecessors"]={}
   let details["fcde_dm::load_udmpp_regression_libs"]={}
   let details["fcde_dm::load_udmpp_tcl_files"]={}
   let details["fevcheck::generate_lec_do_file"]={}
        let details["fevcheck::generate_lec_do_file"]["-mode"] = "(determine if partitions are bboxed or not in Conformal run.: "
   let details["file::append"]={}
   let details["file::cmp_mtime"]={}
   let details["file::cp_files"]={}
   let details["file::create_icc_cmd_file"]={}
        let details["file::create_icc_cmd_file"]["-out_file"] = "(output file to return)"
        let details["file::create_icc_cmd_file"]["-log_file"] = "(log file)"
        let details["file::create_icc_cmd_file"]["-cmds"] = "(commands to run)"
        let details["file::create_icc_cmd_file"]["-exit"] = "(exit in the end)"
   let details["file::create_icc_setup_cmd_file"]={}
        let details["file::create_icc_setup_cmd_file"]["-project"] = "(setup project)"
        let details["file::create_icc_setup_cmd_file"]["-out_file"] = "(output file to return)"
        let details["file::create_icc_setup_cmd_file"]["-cmd_file"] = "(command file to run)"
        let details["file::create_icc_setup_cmd_file"]["-dbb"] = "(dbb name (default current dbb name))"
        let details["file::create_icc_setup_cmd_file"]["-ot"] = "(ot name (default current ot name))"
        let details["file::create_icc_setup_cmd_file"]["-ov"] = "(ov name (default current dir of work area name))"
        let details["file::create_icc_setup_cmd_file"]["-work_area_name"] = ""
        let details["file::create_icc_setup_cmd_file"]["-xterm"] = "(open in a new xterm (default not))"
        let details["file::create_icc_setup_cmd_file"]["-new_machine"] = "(open new machine with ssh (default use same machine))"
        let details["file::create_icc_setup_cmd_file"]["-machine"] = "(machine name (used only if -new_machine is on , default current machine name))"
        let details["file::create_icc_setup_cmd_file"]["-tool"] = "(open tool (default sd))"
        let details["file::create_icc_setup_cmd_file"]["-at"] = "(append tool)"
   let details["file::diff"]={}
   let details["file::dir_diff"]={}
   let details["file::is_line_comment"]={}
   let details["file::read_file"]={}
   let details["file::sort_files"]={}
   let details["file::touch_file"]={}
   let details["file::write_file"]={}
   let details["foveros::align_bump_objects_to_tsv"]={}
   let details["foveros::align_tsv_to_pd_intent"]={}
   let details["foveros::check_bump_objects_consistency"]={}
   let details["foveros::get_net"]={}
   let details["foveros::import_die_file"]={}
        let details["foveros::import_die_file"]["-case_sensitive"] = "(Maintains case sensitivity. Default all nets converted to lowercase)"
        let details["foveros::import_die_file"]["-dx"] = "(Translate coordinate dx in x direction)"
        let details["foveros::import_die_file"]["-dy"] = "(Translate coordinate dy in y direction)"
        let details["foveros::import_die_file"]["-orientation"] = ""
        let details["foveros::import_die_file"]["-auto_net_creation"] = "(Automatically create missing net for initial testing. Default is off)"
        let details["foveros::import_die_file"]["-diefile_netname_mapfile"] = ""
   let details["foveros::load_pd_intent"]={}
   let details["foveros::point_from_other_die"]={}
   let details["foveros::point_to_other_die"]={}
   let details["fp::backup_remove_hard_placement_blockages"]={}
   let details["fp::check_terminal_offgrid"]={}
        let details["fp::check_terminal_offgrid"]["-terminals"] = "(Terminals list )"
        let details["fp::check_terminal_offgrid"]["-fix"] = "(Fix width )"
   let details["fp::check_terminal_width"]={}
        let details["fp::check_terminal_width"]["-terminals"] = "(Terminals list )"
        let details["fp::check_terminal_width"]["-fix"] = "(Fix width )"
   let details["fp::check_voltage_area"]={}
        let details["fp::check_voltage_area"]["-logfile"] = "(Output log file)"
   let details["fp::create_ps_pg_grid"]={}
        let details["fp::create_ps_pg_grid"]["-cells"] = "(list of cells)"
        let details["fp::create_ps_pg_grid"]["-net_tag"] = "(Net to replace. Default is GND and PRIMARY)"
        let details["fp::create_ps_pg_grid"]["-layers"] = "(power grid layer)"
        let details["fp::create_ps_pg_grid"]["-grid_num"] = "(number of grid created in center. Default is all the grid in cell area)"
        let details["fp::create_ps_pg_grid"]["-grid_type"] = "(Convert to specified grid name)"
        let details["fp::create_ps_pg_grid"]["-indexes"] = "(Specifiy the indexes to convert)"
   let details["fp::create_routing_blockage_around_polygons"]={}
        let details["fp::create_routing_blockage_around_polygons"]["-layers"] = "(Layer list for which to create route guides)"
        let details["fp::create_routing_blockage_around_polygons"]["-poly"] = "(The Polygon around which the route guide is to be created)"
        let details["fp::create_routing_blockage_around_polygons"]["-margin"] = "(The margins for route guides around the polygon shape. Format is {x_inside y_inside} {x_outside y_outside})"
        let details["fp::create_routing_blockage_around_polygons"]["-enable_guides_on_boundary"] = ""
        let details["fp::create_routing_blockage_around_polygons"]["-prefix"] = "(Prefix of the route guide name. Default is POLY_RG)"
   let details["fp::create_routing_blockage_for_macro"]={}
        let details["fp::create_routing_blockage_for_macro"]["-layers"] = "(Specify the layers to create routing blockages around macro)"
   let details["fp::create_row"]={}
        let details["fp::create_row"]["-tiles"] = "(List of tile name which should be defined in techfile)"
        let details["fp::create_row"]["-flip_first_row"] = "(Flip the first row. Default is not flipping)"
   let details["fp::create_rows_for_bonus"]={}
        let details["fp::create_rows_for_bonus"]["-tilename"] = "(Bonus tile name which should be defined in techfile)"
        let details["fp::create_rows_for_bonus"]["-tileinfo"] = "(Specifiy the tile width and height)"
   let details["fp::create_rows_for_core"]={}
        let details["fp::create_rows_for_core"]["-tilename"] = "(Tile name which should be defined in techfile)"
        let details["fp::create_rows_for_core"]["-name"] = "(Custom name for the site rows to be named)"
        let details["fp::create_rows_for_core"]["-die_area"] = "(Create site rows starting from Die area, mainly used for designs with core/die area different ex: XN, XLLP, 1222/7nm designs)"
   let details["fp::create_ubump_driver"]={}
   let details["fp::define_custom_pg_config"]={}
        let details["fp::define_custom_pg_config"]["-tag"] = "(Custom PG area tag name.)"
        let details["fp::define_custom_pg_config"]["-tag_append"] = "(Custom PG area tag name. (Works exactly the same as -tag, but kept for compatibility.))"
        let details["fp::define_custom_pg_config"]["-reset"] = "(Reset custom PG variables.)"
        let details["fp::define_custom_pg_config"]["-custom_template"] = ""
        let details["fp::define_custom_pg_config"]["-bbox"] = "(Custom PG area coordinates. Can take multiple sets of coordinates, bbox and polygon.)"
        let details["fp::define_custom_pg_config"]["-vdd_net"] = "(Custom PG Power net.)"
        let details["fp::define_custom_pg_config"]["-vss_net"] = "(Custom PG Ground net. Do not set this unless you want to create a secondary VSS region)"
   let details["fp::extend_terminals"]={}
        let details["fp::extend_terminals"]["-ports"] = "(List of port to extend)"
        let details["fp::extend_terminals"]["-layers"] = "(List of layers to extend)"
   let details["fp::fix_voltage_area"]={}
   let details["fp::get_track_location"]={}
        let details["fp::get_track_location"]["-layer"] = "(Specify layer)"
        let details["fp::get_track_location"]["-width"] = "(Specify the width for the track. The default is defaultWidth for the layer)"
        let details["fp::get_track_location"]["-ignore_power"] = "(Ignore power track)"
        let details["fp::get_track_location"]["-dont_ignore_reserved_track"] = ""
        let details["fp::get_track_location"]["-all"] = "(Specify all width and track location info)"
        let details["fp::get_track_location"]["-skip_track_next_to_power"] = ""
   let details["fp::get_tracks_cross_bbox"]={}
        let details["fp::get_tracks_cross_bbox"]["-layer"] = "(Track layer)"
        let details["fp::get_tracks_cross_bbox"]["-bbox"] = "(Bounding box to check)"
        let details["fp::get_tracks_cross_bbox"]["-tracks"] = "(Track infomation for specified layer)"
        let details["fp::get_tracks_cross_bbox"]["-pitch"] = "(Track pitch. Default is 2)"
        let details["fp::get_tracks_cross_bbox"]["-endpoint_offset"] = ""
   let details["fp::is_boundary_terminal_layer"]={}
        let details["fp::is_boundary_terminal_layer"]["-layer"] = "(Layer name)"
   let details["fp::propagate_macro_pins_to_terminals"]={}
        let details["fp::propagate_macro_pins_to_terminals"]["-debug"] = "(Print cmd insted of actually create term)"
        let details["fp::propagate_macro_pins_to_terminals"]["-layers"] = "(Layers of pins and terminals)"
        let details["fp::propagate_macro_pins_to_terminals"]["-macros"] = "(List of macro cells for propagating pins, default all macros)"
        let details["fp::propagate_macro_pins_to_terminals"]["-convert_pg_pins"] = "(Find and make terms above PG macro pins. Default 0)"
        let details["fp::propagate_macro_pins_to_terminals"]["-all_pins"] = "(Find and make terms above all macro pins. Canceling -convert_pg_pins,-pins Default 0)"
        let details["fp::propagate_macro_pins_to_terminals"]["-pins"] = "(Collection of user defined macro pins to propagate)"
        let details["fp::propagate_macro_pins_to_terminals"]["-skip_mjc"] = "(Skip set must_join_class 1 on new terminals)"
        let details["fp::propagate_macro_pins_to_terminals"]["-for_framgen"] = "(List of layers that should be unconditionally exposed on macro pin)"
   let details["fp::pull_back_terminal_from_boundary"]={}
        let details["fp::pull_back_terminal_from_boundary"]["-port_list"] = "(List of port to extend)"
   let details["fp::pushdown_cells"]={}
        let details["fp::pushdown_cells"]["-cells"] = "(Specify the cells to reconcile VAs. Could be stdcells macros all or cells )"
   let details["fp::remove_overlapping_ps_cells"]={}
   let details["fp::restore_hard_placement_blockages"]={}
   let details["fp::write_voltage_area"]={}
        let details["fp::write_voltage_area"]["-gen_cmd"] = "(Generate command for creating voltage area. Default is to generate variable with region(polygon) info)"
        let details["fp::write_voltage_area"]["-outfile"] = "(Output files. Default is $env(WARD)/collateral/floorplan/$block.va.tcl)"
   let details["fp_edit::align_pins_from_selected"]={}
        let details["fp_edit::align_pins_from_selected"]["-pins"] = "(Port/Pins/Terminals collection to align. Default: Selected)"
        let details["fp_edit::align_pins_from_selected"]["-anchor"] = "(Used to force anchor on a certain object class. Default: None)"
   let details["fp_edit::align_shape_pins_from_selected"]={}
        let details["fp_edit::align_shape_pins_from_selected"]["-objects"] = "(Shape/Port/Pins/Terminals collection to align. Default: Selected)"
        let details["fp_edit::align_shape_pins_from_selected"]["-anchor"] = "(Used to force anchor on a certain object class. Default: None)"
   let details["fp_edit::calc_channel_width"]={}
        let details["fp_edit::calc_channel_width"]["-pattern"] = "(Defined routing pattern)"
        let details["fp_edit::calc_channel_width"]["-number_of_routes"] = ""
   let details["fp_edit::calc_path_width"]={}
        let details["fp_edit::calc_path_width"]["-bbox"] = "(Shape bbox )"
        let details["fp_edit::calc_path_width"]["-shape_dir"] = ""
   let details["fp_edit::calc_per_block_polygons"]={}
        let details["fp_edit::calc_per_block_polygons"]["-poly"] = "(Original polygon)"
   let details["fp_edit::change_width"]={}
        let details["fp_edit::change_width"]["-width"] = "(The new width for the selected pins)"
        let details["fp_edit::change_width"]["-shapes"] = "(Collection of shapes for width change)"
        let details["fp_edit::change_width"]["-pins"] = "(Collection of pins or ports for width change)"
        let details["fp_edit::change_width"]["-force"] = "(Force setting the exact specified width)"
        let details["fp_edit::change_width"]["-non_preferred"] = "(Change width of the route in non-preferred direction)"
   let details["fp_edit::check_shapes_match_pattern"]={}
        let details["fp_edit::check_shapes_match_pattern"]["-polygon"] = "(Shapes inside provided polygon will be checked )"
        let details["fp_edit::check_shapes_match_pattern"]["-pattern"] = "(Routing pattern to check against. Only shapes of the corresponding layer will be checked)"
        let details["fp_edit::check_shapes_match_pattern"]["-layer"] = "(Routing layer of the pattern)"
        let details["fp_edit::check_shapes_match_pattern"]["-update_width"] = "(Change the width of the mismatching shapes to the correct width)"
        let details["fp_edit::check_shapes_match_pattern"]["-snap_to_track"] = "(Snap off-grid shapes to the correct track)"
        let details["fp_edit::check_shapes_match_pattern"]["-return_offgrid"] = "(Function will return off-grid shapes. By default it returns collection of shapes with incorrect or updated width)"
        let details["fp_edit::check_shapes_match_pattern"]["-terminals"] = "(Check or snap terminals in addition to the routing shapes)"
   let details["fp_edit::construct_new_bbox_from_matching_pin_bbox_and_edge_and_direction"]={}
   let details["fp_edit::copy_mi_routing"]={}
        let details["fp_edit::copy_mi_routing"]["-master"] = "(Master cell)"
        let details["fp_edit::copy_mi_routing"]["-targets"] = "(Target cells)"
        let details["fp_edit::copy_mi_routing"]["-objects"] = "(Objects to copy)"
        let details["fp_edit::copy_mi_routing"]["-pin_map_file"] = ""
        let details["fp_edit::copy_mi_routing"]["-remove"] = "(Remove previous net routing)"
   let details["fp_edit::copy_shape_bbox"]={}
        let details["fp_edit::copy_shape_bbox"]["-shape"] = ""
        let details["fp_edit::copy_shape_bbox"]["-bbox"] = "(BBOX coords)"
   let details["fp_edit::count_routing_tracks"]={}
        let details["fp_edit::count_routing_tracks"]["-pattern"] = "(Defined routing pattern)"
        let details["fp_edit::count_routing_tracks"]["-range"] = "(Range to be covered bu tracks)"
   let details["fp_edit::create_abutted_pins"]={}
        let details["fp_edit::create_abutted_pins"]["-pins"] = "(Existing pins)"
        let details["fp_edit::create_abutted_pins"]["-direction"] = "(The direction in which abutted pins will be created: "
        let details["fp_edit::create_abutted_pins"]["-logical_pin_exists"] = "(Indicates that abutted pin exists logically)"
   let details["fp_edit::create_block_grids"]={}
   let details["fp_edit::create_boundary_terminals_from_shapes"]={}
        let details["fp_edit::create_boundary_terminals_from_shapes"]["-shapes"] = "(Collection of shapes )"
   let details["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"]={}
        let details["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"]["-direction"] = "(Direction in which to create pin guide (N|S|E|W): "
        let details["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"]["-layers"] = "(layers of pin_guide)"
        let details["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"]["-port"] = "(Port or Pin to create pin guides from. Default: Selected)"
        let details["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"]["-distance"] = "(Pin guide distance)"
        let details["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"]["-route_corridor"] = "(Create route_corridor instead of pin_guide. Default: pin_guide)"
   let details["fp_edit::create_pins_under_terminals"]={}
        let details["fp_edit::create_pins_under_terminals"]["-ports"] = "(Existing pins)"
        let details["fp_edit::create_pins_under_terminals"]["-logical_pin_exists"] = "(Indicates that abutted pin exists logically)"
   let details["fp_edit::create_port_terminal"]={}
        let details["fp_edit::create_port_terminal"]["-port"] = "(Port name )"
        let details["fp_edit::create_port_terminal"]["-layer"] = "(Layer for the terminal )"
        let details["fp_edit::create_port_terminal"]["-coord"] = "(Approximate coordinate for terminal location )"
        let details["fp_edit::create_port_terminal"]["-term_length"] = "(Terminal length )"
        let details["fp_edit::create_port_terminal"]["-snap_to_boundary"] = "(Create terminal on design boundary)"
        let details["fp_edit::create_port_terminal"]["-remove_existing_terminals"] = ""
   let details["fp_edit::create_projected_top_level_terminal_for_port"]={}
   let details["fp_edit::create_region_tracks"]={}
        let details["fp_edit::create_region_tracks"]["-patterns"] = "(List of Wide wire pattern names)"
        let details["fp_edit::create_region_tracks"]["-ratio"] = "(Every X's gutter will have wide wire region. Set to 1 to make the whole bbox a region, set to 2 to create ww region in every other gutter, etc.)"
        let details["fp_edit::create_region_tracks"]["-bbox"] = "(bbox coordinates where region tracks will be created)"
        let details["fp_edit::create_region_tracks"]["-file_name"] = "(File name where to dump the G_ variable setting for the region tracks creation)"
        let details["fp_edit::create_region_tracks"]["-tag"] = "(Unique tag prefix for the region track)"
        let details["fp_edit::create_region_tracks"]["-create_tracks"] = "(Set this option to get wide tracks created at the moment when this proc is executed)"
   let details["fp_edit::create_region_tracks_based_on_pins"]={}
        let details["fp_edit::create_region_tracks_based_on_pins"]["-pins"] = "(List of pins to identify routing patterns for)"
        let details["fp_edit::create_region_tracks_based_on_pins"]["-range"] = "(Coordinate range in the direction of the routing where region tracks will be created)"
        let details["fp_edit::create_region_tracks_based_on_pins"]["-file_name"] = "(File name where to dump the G_ variable setting for the region tracks creation)"
        let details["fp_edit::create_region_tracks_based_on_pins"]["-tag"] = "(Unique tag prefix for the region track)"
        let details["fp_edit::create_region_tracks_based_on_pins"]["-yes_filter"] = "(Regular expression to identify allowed patterns)"
        let details["fp_edit::create_region_tracks_based_on_pins"]["-no_filter"] = "(Regular expression to filter out not allowed patterns)"
        let details["fp_edit::create_region_tracks_based_on_pins"]["-visualize"] = "(Draw regions and pattern names)"
   let details["fp_edit::create_td_pin_shape"]={}
        let details["fp_edit::create_td_pin_shape"]["-shapes"] = "(Routing shapes)"
        let details["fp_edit::create_td_pin_shape"]["-bbox"] = "(BBox To cut out pin shapes from the routing shapes)"
        let details["fp_edit::create_td_pin_shape"]["-cell"] = "(Cell name for which the pins will be created)"
        let details["fp_edit::create_td_pin_shape"]["-keep_existing_pin_shapes"] = ""
   let details["fp_edit::create_td_pins_on_dangling_wires"]={}
        let details["fp_edit::create_td_pins_on_dangling_wires"]["-nets"] = "(Nets )"
        let details["fp_edit::create_td_pins_on_dangling_wires"]["-cells"] = "(Cell names for which the pins will be created)"
   let details["fp_edit::create_terminals_from_bbox"]={}
        let details["fp_edit::create_terminals_from_bbox"]["-layer"] = "(Layer to create terminal on)"
        let details["fp_edit::create_terminals_from_bbox"]["-port"] = "(Port or Pin to create terminal for. Default: Selected)"
        let details["fp_edit::create_terminals_from_bbox"]["-bbox"] = "(BBox to create terminal. Default: Region Tool Dialog)"
   let details["fp_edit::create_terminals_from_shapes"]={}
        let details["fp_edit::create_terminals_from_shapes"]["-shapes"] = "(Collection of shapes )"
        let details["fp_edit::create_terminals_from_shapes"]["-bbox_coord"] = "(Bbox coordinates )"
        let details["fp_edit::create_terminals_from_shapes"]["-rm_shapes"] = "(Option to remove the shapes after terminals are created)"
   let details["fp_edit::create_top_level_terminal"]={}
        let details["fp_edit::create_top_level_terminal"]["-net"] = "(Net name )"
        let details["fp_edit::create_top_level_terminal"]["-layer"] = "(Layer for the terminal )"
   let details["fp_edit::cut_shapes_by_bbox"]={}
        let details["fp_edit::cut_shapes_by_bbox"]["-shapes"] = "(Collection of shapes )"
        let details["fp_edit::cut_shapes_by_bbox"]["-bbox_coord"] = "(Bbox coordinates )"
        let details["fp_edit::cut_shapes_by_bbox"]["-rm_shapes"] = "(Option to remove the shapes after terminals are created)"
   let details["fp_edit::dump_block_boundaries"]={}
        let details["fp_edit::dump_block_boundaries"]["-cells"] = "(Collection of cells. Default: selected)"
   let details["fp_edit::extend_pins_to_side_and_preroute"]={}
        let details["fp_edit::extend_pins_to_side_and_preroute"]["-pins"] = "(Collection of pins to extend)"
        let details["fp_edit::extend_pins_to_side_and_preroute"]["-side"] = "(Top level boundary side where to create terminals: "
   let details["fp_edit::extend_shapes_to_boundary"]={}
        let details["fp_edit::extend_shapes_to_boundary"]["-side"] = "(Which boundary to extend to: "
        let details["fp_edit::extend_shapes_to_boundary"]["-shapes"] = "(Collection of shapes )"
   let details["fp_edit::extend_shapes_to_point"]={}
        let details["fp_edit::extend_shapes_to_point"]["-point"] = "(Point coordinates)"
        let details["fp_edit::extend_shapes_to_point"]["-shapes"] = "(Collection of shapes )"
   let details["fp_edit::find_combined_bbox_of_objects"]={}
   let details["fp_edit::find_edge_on_boundary_closest_to_point_in_a_direction"]={}
   let details["fp_edit::find_nearest_elem"]={}
   let details["fp_edit::find_pattern"]={}
        let details["fp_edit::find_pattern"]["-layer"] = "(Layer)"
        let details["fp_edit::find_pattern"]["-width"] = "(Width)"
        let details["fp_edit::find_pattern"]["-signal_only"] = "(Check only signal tracks)"
        let details["fp_edit::find_pattern"]["-quiet"] = "(Dont print on the screen, just return the results)"
   let details["fp_edit::focus_on_net"]={}
        let details["fp_edit::focus_on_net"]["-nets"] = "(Nets to focus on. Default: Selected)"
        let details["fp_edit::focus_on_net"]["-remove"] = "(Removes highlight for the specified net)"
   let details["fp_edit::get_legal_widths"]={}
   let details["fp_edit::get_relative_rotation"]={}
   let details["fp_edit::highlight_region_tracks"]={}
   let details["fp_edit::identify_pattern"]={}
        let details["fp_edit::identify_pattern"]["-layer"] = "(Layer)"
        let details["fp_edit::identify_pattern"]["-width_space_list"] = "(List of widths and spacings)"
   let details["fp_edit::identify_track_pattern_based_on_pins"]={}
        let details["fp_edit::identify_track_pattern_based_on_pins"]["-pins"] = "(List of pins to identify routing patterns for)"
        let details["fp_edit::identify_track_pattern_based_on_pins"]["-yes_filter"] = "(Regular expression to identify allowed patterns)"
        let details["fp_edit::identify_track_pattern_based_on_pins"]["-no_filter"] = "(Regular expression to filter out not allowed patterns)"
   let details["fp_edit::initialize_crt_legal_widths"]={}
   let details["fp_edit::is_gui_enabled"]={}
   let details["fp_edit::match_pattern"]={}
        let details["fp_edit::match_pattern"]["-patterns"] = "(List of pattern names)"
        let details["fp_edit::match_pattern"]["-width_space_list"] = "(List of widths and spacings)"
   let details["fp_edit::over_bump_routing"]={}
        let details["fp_edit::over_bump_routing"]["-bbox"] = "(Bbox that will contain the via ladder structure)"
        let details["fp_edit::over_bump_routing"]["-net"] = "(The net that shapes and vias will belong to)"
        let details["fp_edit::over_bump_routing"]["-list_of_patterns"] = ""
   let details["fp_edit::port_up_shapes"]={}
        let details["fp_edit::port_up_shapes"]["-shapes"] = "(Collection of shapes )"
   let details["fp_edit::project_pins_to_top_boundary"]={}
        let details["fp_edit::project_pins_to_top_boundary"]["-pins"] = "(Collection of pins to project to boundary. Default: selected)"
        let details["fp_edit::project_pins_to_top_boundary"]["-direction"] = "(Direction in which to route (N|S|E|W): "
   let details["fp_edit::push_down_pins"]={}
   let details["fp_edit::remove_shield_routes"]={}
   let details["fp_edit::remove_signal_routes"]={}
   let details["fp_edit::report_track_patterns"]={}
        let details["fp_edit::report_track_patterns"]["-layer"] = "(Layer)"
   let details["fp_edit::resize_shape"]={}
   let details["fp_edit::return_phys_connected_shapes_and_vias"]={}
   let details["fp_edit::route_aligned_ft_terminals"]={}
        let details["fp_edit::route_aligned_ft_terminals"]["-terminals"] = "(Collection of terminals to connect with their pair. Default: Selected)"
   let details["fp_edit::route_from_pins_given_direction_and_distance"]={}
        let details["fp_edit::route_from_pins_given_direction_and_distance"]["-pins"] = "(Collection of pins from which to create route segments. Default: selected)"
        let details["fp_edit::route_from_pins_given_direction_and_distance"]["-anchor_pin"] = ""
        let details["fp_edit::route_from_pins_given_direction_and_distance"]["-hlayer"] = "(Horizontal routing layer)"
        let details["fp_edit::route_from_pins_given_direction_and_distance"]["-vlayer"] = "(Vertical routing layer)"
        let details["fp_edit::route_from_pins_given_direction_and_distance"]["-direction"] = "(Direction in which to route (N|S|E|W): "
        let details["fp_edit::route_from_pins_given_direction_and_distance"]["-distance"] = "(Distance to rotue in direction. Distance in microns.)"
   let details["fp_edit::route_shape_by_shape"]={}
        let details["fp_edit::route_shape_by_shape"]["-pins"] = "(Collection of pins or ports to start routing from)"
        let details["fp_edit::route_shape_by_shape"]["-topo"] = "(List of <layer_name length width direction>. The direction can be <left|right|up|down>)"
   let details["fp_edit::route_signals_push_pins"]={}
        let details["fp_edit::route_signals_push_pins"]["-nets"] = "(Collection of nets to be routed)"
        let details["fp_edit::route_signals_push_pins"]["-bundle"] = "(Bundle of nets to be routed)"
        let details["fp_edit::route_signals_push_pins"]["-points"] = "(Routing topology points)"
        let details["fp_edit::route_signals_push_pins"]["-hlayer"] = "(Horizontal routing layer)"
        let details["fp_edit::route_signals_push_pins"]["-vlayer"] = "(Vertical routing layer)"
        let details["fp_edit::route_signals_push_pins"]["-hwidth"] = "(Horizontal routing width)"
        let details["fp_edit::route_signals_push_pins"]["-vwidth"] = "(Vertical routing width)"
        let details["fp_edit::route_signals_push_pins"]["-push_down_pins"] = "(To push down hierarchical pins based on routing)"
        let details["fp_edit::route_signals_push_pins"]["-is_td"] = "(is_td and is_preroute attributes will be set on shapes and vias)"
   let details["fp_edit::route_simple_topology"]={}
        let details["fp_edit::route_simple_topology"]["-nets"] = "(Collection of nets to be routed)"
   let details["fp_edit::set_cells_grid"]={}
        let details["fp_edit::set_cells_grid"]["-cells"] = "(selected|all|wildcard)"
        let details["fp_edit::set_cells_grid"]["-grid"] = "(HPML|Partition. Default: Partition)"
        let details["fp_edit::set_cells_grid"]["-snap"] = "(Snap cells to grid)"
   let details["fp_edit::snap_pins"]={}
        let details["fp_edit::snap_pins"]["-port"] = "(Aligns ports to their wires. If not specified can only align pins)"
        let details["fp_edit::snap_pins"]["-anchor"] = "(net/pin)"
        let details["fp_edit::snap_pins"]["-objects"] = "(pin/ports)"
   let details["fp_edit::snap_poly_to_zero"]={}
        let details["fp_edit::snap_poly_to_zero"]["-points"] = "(Polygon coordinates)"
   let details["fp_edit::sort_nets_based_on_pin_location"]={}
        let details["fp_edit::sort_nets_based_on_pin_location"]["-pins"] = "(Collection of pins or ports)"
        let details["fp_edit::sort_nets_based_on_pin_location"]["-direction"] = "(Routing direction of the pin layer: "
   let details["fp_edit::un_port_terminals"]={}
        let details["fp_edit::un_port_terminals"]["-ports"] = "(Collection of ports or terminals)"
   let details["fp_edit::update_to_min_length"]={}
        let details["fp_edit::update_to_min_length"]["-shapes"] = "(Shapes or terminals to be updated )"
   let details["fp_gcr::calc_all_pins_bbox"]={}
   let details["fp_gcr::gcr_group_routing"]={}
        let details["fp_gcr::gcr_group_routing"]["-nets"] = "(Nets to priority route)"
        let details["fp_gcr::gcr_group_routing"]["-group_size"] = "(Number of nets in each group for each routing loop. Default: All)"
        let details["fp_gcr::gcr_group_routing"]["-pref_step"] = "(Preferred layer-step specification to control layer usage {{<lay> <num>}}. Default: Effort)"
        let details["fp_gcr::gcr_group_routing"]["-effort"] = "(Uses pre-defined effort map to specification so router works harder on using higher-layers (low medium high). Default: medium)"
        let details["fp_gcr::gcr_group_routing"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
        let details["fp_gcr::gcr_group_routing"]["-debug"] = "(Used specifically for GCR debug. Default: G_PRIORITY_DEBUG)"
        let details["fp_gcr::gcr_group_routing"]["-verbose"] = "(Print more information. Default: None)"
   let details["fp_gcr::gcr_swizzle_routing"]={}
        let details["fp_gcr::gcr_swizzle_routing"]["-nets"] = "(Collection of nets which have flipped pin connectivity and all pins on the same layer)"
        let details["fp_gcr::gcr_swizzle_routing"]["-layer"] = "(Main layer for the net routing. It should match with the pin layer)"
        let details["fp_gcr::gcr_swizzle_routing"]["-jog_up"] = "(To jog with n+1 layer. By default jog with layer one below the specified main layer)"
   let details["fp_rpt::break_one_shape_and_reassign"]={}
        let details["fp_rpt::break_one_shape_and_reassign"]["-shape"] = "(Shape to break)"
        let details["fp_rpt::break_one_shape_and_reassign"]["-cut_line"] = "(Four coordinates defining the cut line)"
        let details["fp_rpt::break_one_shape_and_reassign"]["-new_net"] = "(Net to re-assign shapes after the break to)"
        let details["fp_rpt::break_one_shape_and_reassign"]["-original_net_side"] = ""
   let details["fp_rpt::break_wire_rename_net"]={}
        let details["fp_rpt::break_wire_rename_net"]["-nets"] = "(Collection or list of nets)"
        let details["fp_rpt::break_wire_rename_net"]["-cells"] = "(Collection or list of repeaters)"
        let details["fp_rpt::break_wire_rename_net"]["-original_net_side"] = ""
   let details["fp_rpt::calc_one_rpt_grid"]={}
   let details["fp_rpt::crawl_a_shape"]={}
   let details["fp_rpt::get_checker_coord"]={}
   let details["fp_rpt::get_timing_based_rpt_coord"]={}
        let details["fp_rpt::get_timing_based_rpt_coord"]["-net"] = "(Net name)"
        let details["fp_rpt::get_timing_based_rpt_coord"]["-delay"] = "(Delay in ps)"
        let details["fp_rpt::get_timing_based_rpt_coord"]["-start"] = "(Coordinate from which to start calculating the delay)"
   let details["fp_rpt::get_unique_cell_name_ind"]={}
   let details["fp_rpt::get_unique_net_name_ind"]={}
   let details["fp_rpt::get_unique_net_name_rpt_ind"]={}
   let details["fp_rpt::hc_check_cell_cbc_locations"]={}
   let details["fp_rpt::init_checker_rpt_grid"]={}
   let details["fp_rpt::insert_place_one_repeater"]={}
        let details["fp_rpt::insert_place_one_repeater"]["-net"] = "(Net to insert a repeater on)"
        let details["fp_rpt::insert_place_one_repeater"]["-new_net"] = "(New net name after the repeater)"
        let details["fp_rpt::insert_place_one_repeater"]["-shape"] = "(Shape to break)"
        let details["fp_rpt::insert_place_one_repeater"]["-rpt_name"] = "(Name of the new repeater cell)"
        let details["fp_rpt::insert_place_one_repeater"]["-buffer_lib_cell"] = ""
        let details["fp_rpt::insert_place_one_repeater"]["-inverter_lib_cell"] = ""
        let details["fp_rpt::insert_place_one_repeater"]["-rpt_location"] = "(Cooirdinate to place the repeater at)"
        let details["fp_rpt::insert_place_one_repeater"]["-rpt_orientation"] = ""
        let details["fp_rpt::insert_place_one_repeater"]["-original_net_side"] = ""
   let details["fp_rpt::is_odd_ind"]={}
   let details["fp_rpt::rpt_legalize_and_route_tails"]={}
        let details["fp_rpt::rpt_legalize_and_route_tails"]["-rpt_cells"] = "(List or collection of repeaters cells)"
        let details["fp_rpt::rpt_legalize_and_route_tails"]["-legalize"] = "(Run legalization)"
        let details["fp_rpt::rpt_legalize_and_route_tails"]["-route_tails"] = "(Run tail routing)"
   let details["fp_rpt::rpt_pwr_hookup"]={}
        let details["fp_rpt::rpt_pwr_hookup"]["-power_supply_net"] = ""
        let details["fp_rpt::rpt_pwr_hookup"]["-cells"] = "(Collection or list of repeaters)"
   let details["fp_rpt::sd_insert_rpt_bboxes"]={}
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-nets"] = "(Net names pattern)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-rpt_station_bboxes"] = ""
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-rpt_lib_cell"] = "(Repeater standard cell name)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-grid_width"] = "(Width of a single checker board grid rectangle)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-tail_routing"] = "(Run route_eco for tail routing)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-is_td"] = "(Sets is_td attribute on the repeater cells)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-on_top_hierarchy"] = "(Add buffer on highest hierarchical net of the given net)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-respect_gas_station"] = ""
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-respect_voltage_areas"] = ""
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-reset_structures"] = "(Reset internal arrays keeping information about previously inserted repeaters)"
        let details["fp_rpt::sd_insert_rpt_bboxes"]["-add_gnacs"] = "(Insert gnac on repeater input pin)"
   let details["fp_rpt::sd_insert_rpt_distance"]={}
        let details["fp_rpt::sd_insert_rpt_distance"]["-nets"] = "(Net names pattern)"
        let details["fp_rpt::sd_insert_rpt_distance"]["-rpt_lib_cell"] = "(Repeater standard cell name)"
        let details["fp_rpt::sd_insert_rpt_distance"]["-rpt_partitions"] = "(List of hierarchical cells where repeaters are allowd)"
        let details["fp_rpt::sd_insert_rpt_distance"]["-exclude_partitions"] = ""
        let details["fp_rpt::sd_insert_rpt_distance"]["-dump_command_line_only"] = ""
        let details["fp_rpt::sd_insert_rpt_distance"]["-legalize"] = "(Run cell legalization)"
        let details["fp_rpt::sd_insert_rpt_distance"]["-tail_routing"] = "(Run cell legalization and route_eco for tail routing)"
        let details["fp_rpt::sd_insert_rpt_distance"]["-is_td"] = "(Sets is_td attribute on the repeater cells)"
        let details["fp_rpt::sd_insert_rpt_distance"]["-on_top_hierarchy"] = "(Add buffer on highest hierarchical net of the given net)"
   let details["fp_rpt::sd_place_existing_rpt"]={}
        let details["fp_rpt::sd_place_existing_rpt"]["-cells"] = "(Ordered collection of cells to be placed)"
        let details["fp_rpt::sd_place_existing_rpt"]["-bbox"] = "(Bbox coordinates where to place cells)"
        let details["fp_rpt::sd_place_existing_rpt"]["-route_dir"] = "(Routing direction)"
        let details["fp_rpt::sd_place_existing_rpt"]["-grid_width"] = "(Width of one grid cell)"
        let details["fp_rpt::sd_place_existing_rpt"]["-grid_height_mult"] = ""
        let details["fp_rpt::sd_place_existing_rpt"]["-cells_in_grid"] = "(Number of cells in one grid column (for vertical routes) or row (for horizontal routes))"
   let details["fp_rpt::sd_place_existing_rpt_based_on_routes"]={}
        let details["fp_rpt::sd_place_existing_rpt_based_on_routes"]["-cells"] = "(Cells to be placed)"
        let details["fp_rpt::sd_place_existing_rpt_based_on_routes"]["-bbox"] = "(Bbox coordinates where to place cells)"
        let details["fp_rpt::sd_place_existing_rpt_based_on_routes"]["-route_dir"] = "(Routing direction)"
        let details["fp_rpt::sd_place_existing_rpt_based_on_routes"]["-grid_width"] = "(Width of one grid cell)"
        let details["fp_rpt::sd_place_existing_rpt_based_on_routes"]["-anchors"] = "(Pins, ports, or routing shapes to align to)"
   let details["fp_rpt::sd_remove_inv"]={}
        let details["fp_rpt::sd_remove_inv"]["-cells"] = "(Buffer cells to replace)"
        let details["fp_rpt::sd_remove_inv"]["-buf_lib_cell"] = "(Inverter standard cell name)"
        let details["fp_rpt::sd_remove_inv"]["-remove_buffer"] = "(Remove the buffer and repair the net)"
   let details["fp_rpt::sd_replace_buf_with_inv"]={}
        let details["fp_rpt::sd_replace_buf_with_inv"]["-buffers"] = "(Buffer cells to replace)"
        let details["fp_rpt::sd_replace_buf_with_inv"]["-inv_lib_cell"] = "(Inverter standard cell name)"
   let details["fp_rpt::set_deterministic_cell_net_names"]={}
   let details["fp_rpt::snap_coord_to_plc_grid"]={}
   let details["geo::bbox_bloat_side"]={}
   let details["geo::bbox_get_center"]={}
   let details["geo::bbox_get_height"]={}
   let details["geo::bbox_get_ll"]={}
   let details["geo::bbox_get_ur"]={}
   let details["geo::bbox_get_width"]={}
   let details["geo::bbox_get_xh"]={}
   let details["geo::bbox_get_xl"]={}
   let details["geo::bbox_get_yh"]={}
   let details["geo::bbox_get_yl"]={}
   let details["geo::bbox_is_containing_pt"]={}
        let details["geo::bbox_is_containing_pt"]["-no_touch"] = "(Do not consider the points are at bbox boundary. The default is to consider points at boundary)"
   let details["geo::bbox_resize"]={}
   let details["geo::bbox_translate"]={}
   let details["geo::center_of_gravity"]={}
   let details["geo::convert_bbox_to_polygon"]={}
   let details["geo::convert_list_to_bbox"]={}
   let details["geo::convert_polygon_to_bbox"]={}
   let details["geo::create_windows"]={}
        let details["geo::create_windows"]["-rows"] = "(Number of rows)"
        let details["geo::create_windows"]["-columns"] = "(Number of columns)"
        let details["geo::create_windows"]["-within"] = "(Bbox of area to be split into windows. Default: boundary_bbox of current_design)"
   let details["geo::do_bboxes_intersect"]={}
   let details["geo::get_boundary_edges"]={}
        let details["geo::get_boundary_edges"]["-boundary"] = "(List of boundary points.)"
        let details["geo::get_boundary_edges"]["-edge_type"] = "(Type of edge to return: "
   let details["geo::get_distance"]={}
   let details["geo::get_intersect_edge"]={}
   let details["geo::is_point_in_polygon"]={}
   let details["geo::path_orientation"]={}
   let details["geo::pin_is_on_boundary"]={}
   let details["geo::point_get_points_xy_distance"]={}
   let details["geo::point_resize_to_bbox"]={}
   let details["geo::polygon_get_bbox"]={}
   let details["geo::rect_2_bbox"]={}
   let details["gui::highlight_nets"]={}
        let details["gui::highlight_nets"]["-nets"] = "(list of nets to be highlight)"
        let details["gui::highlight_nets"]["-terminal_only"] = "(Highlight terminal only)"
        let details["gui::highlight_nets"]["-layers"] = "(Highlight specified layers)"
   let details["gui::select_cell"]={}
        let details["gui::select_cell"]["-zoom"] = "(zoom to selection)"
        let details["gui::select_cell"]["-highlight"] = "(highlight selection)"
   let details["gui::select_lib_cell"]={}
        let details["gui::select_lib_cell"]["-zoom"] = "(zoom to selection)"
        let details["gui::select_lib_cell"]["-highlight"] = "(highlight selection)"
   let details["gui::select_net"]={}
        let details["gui::select_net"]["-zoom"] = "(zoom to selection)"
        let details["gui::select_net"]["-highlight"] = "(highlight selection)"
        let details["gui::select_net"]["-layers"] = "(Highlight specified layers)"
   let details["gui::select_port"]={}
        let details["gui::select_port"]["-zoom"] = "(zoom to selection)"
        let details["gui::select_port"]["-highlight"] = "(highlight selection)"
   let details["gui::select_terminal"]={}
        let details["gui::select_terminal"]["-zoom"] = "(zoom to selection)"
        let details["gui::select_terminal"]["-highlight"] = "(highlight selection)"
        let details["gui::select_terminal"]["-of_port"] = "(Select the terminals of a port)"
   let details["gui::zoom"]={}
        let details["gui::zoom"]["-selection"] = "(get_selection)"
   let details["hc::check_bad_nets_for_pin_placement"]={}
   let details["hc::check_nets_which_cannot_be_pushed_down"]={}
        let details["hc::check_nets_which_cannot_be_pushed_down"]["-nets"] = "(List or collection of nets to check. Default: Pushed ONLY)"
   let details["hc::create_xor2spec_err_file"]={}
   let details["hc::distributed_health_checks"]={}
        let details["hc::distributed_health_checks"]["-top_only"] = "(Run checking on top-level block only. Default: All)"
        let details["hc::distributed_health_checks"]["-force"] = "(Force run checking. Default: G_RUN_HEALTH_CHECKS)"
        let details["hc::distributed_health_checks"]["-init_summary"] = "(Initialize summary file. By default initialized only in stage 01)"
   let details["hc::distributed_health_checks_for_all_blocks"]={}
        let details["hc::distributed_health_checks_for_all_blocks"]["-force"] = "(Force run checking. Default: G_RUN_HEALTH_CHECKS)"
        let details["hc::distributed_health_checks_for_all_blocks"]["-init_summary"] = "(Initialize summary file. By default initialized only in stage 01)"
   let details["hc::runtime"]={}
        let details["hc::runtime"]["-min_time"] = "(Minimum elapsed time in seconds for reporting. Default: 5)"
        let details["hc::runtime"]["-start"] = "(Force start time reset for tag-name. Default: Report)"
   let details["hc_cbc::check_cbc_boundary"]={}
        let details["hc_cbc::check_cbc_boundary"]["-polygon"] = "(Specify a rectangle or polygon to check)"
        let details["hc_cbc::check_cbc_boundary"]["-hpml"] = "(Providing a custom hpml value when checking polygon coordinates)"
        let details["hc_cbc::check_cbc_boundary"]["-top_block_only"] = "(Run only if current block is top block)"
        let details["hc_cbc::check_cbc_boundary"]["-stage"] = "(Stage name)"
        let details["hc_cbc::check_cbc_boundary"]["-no_report"] = "(No report mode when embedded in other procedures for lego check)"
   let details["hc_cbc::check_cbc_multiple_boundary"]={}
        let details["hc_cbc::check_cbc_multiple_boundary"]["-polygon"] = "(Specify a rectangle or polygon to check)"
        let details["hc_cbc::check_cbc_multiple_boundary"]["-stage"] = "(Stage name)"
   let details["hc_cbc::check_cbc_placement"]={}
        let details["hc_cbc::check_cbc_placement"]["-blocks"] = "(Blocks and macros to check - a collection. Default All)"
        let details["hc_cbc::check_cbc_placement"]["-stage"] = "(Stage name)"
   let details["hc_cbc::check_cbc_rule"]={}
   let details["hc_cbc::check_clock_cells_cbc_placement"]={}
        let details["hc_cbc::check_clock_cells_cbc_placement"]["-stage"] = "(Stage name)"
   let details["hc_cbc::check_custom_cells_cbc_placement"]={}
        let details["hc_cbc::check_custom_cells_cbc_placement"]["-stage"] = "(Stage name)"
        let details["hc_cbc::check_custom_cells_cbc_placement"]["-reference_name"] = "(Cell template/reference whose instances to run check on)"
        let details["hc_cbc::check_custom_cells_cbc_placement"]["-x_lego_number"] = "(X lego dimension to check against)"
        let details["hc_cbc::check_custom_cells_cbc_placement"]["-x_offset"] = "(X offset number to use while X lego checking)"
        let details["hc_cbc::check_custom_cells_cbc_placement"]["-y_lego_number"] = "(Y lego dimension to check against)"
        let details["hc_cbc::check_custom_cells_cbc_placement"]["-y_offset"] = "(Y offset number to use while Y lego checking)"
   let details["hc_cbc::check_fp_grid_size"]={}
   let details["hc_cbc::check_hard_macro_minsize"]={}
        let details["hc_cbc::check_hard_macro_minsize"]["-stage"] = "(Stage name)"
   let details["hc_collateral::check_clock_collgen_attributes"]={}
        let details["hc_collateral::check_clock_collgen_attributes"]["-stage"] = "(Stage name)"
   let details["hc_collateral::check_clockbuilder_objects_exist"]={}
        let details["hc_collateral::check_clockbuilder_objects_exist"]["-stage"] = "(Stage name)"
   let details["hc_collateral::check_output_collateral_sanity"]={}
        let details["hc_collateral::check_output_collateral_sanity"]["-collateral_type"] = "(either of td OR refresh - types of output collaterals to check for)"
        let details["hc_collateral::check_output_collateral_sanity"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_cell_dangling_inputs"]={}
        let details["hc_connectivity::check_cell_dangling_inputs"]["-gclk"] = "(Run the check on only clock objects)"
        let details["hc_connectivity::check_cell_dangling_inputs"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_cell_names"]={}
        let details["hc_connectivity::check_cell_names"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_clock_connection_vs_pinlocation"]={}
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-nets"] = "(Clock source net name)"
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-rtl_connection_file"] = "(Input net2run.cfg.ref file. Option -nets will be ignored if defined)"
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-keep_detail_report"] = "(Keep the detail report that is generated during the check running. Default: Delete)"
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-out_dir"] = "(Output report directory. Default: ./[getvar -quiet G_REPORTS_PATH]/[getvar -quiet G_DESIGN_NAME]/)"
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-stage"] = "(Stage name)"
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_connectivity::check_clock_connection_vs_pinlocation"]["-debug_file"] = "(Generate tcl scripts to show errors as annotations. Default: None)"
   let details["hc_connectivity::check_clock_p2p_length"]={}
        let details["hc_connectivity::check_clock_p2p_length"]["-net"] = "(Clock source net name)"
        let details["hc_connectivity::check_clock_p2p_length"]["-hcost"] = "(Weight value for horizontal metal layer. Default: 100)"
        let details["hc_connectivity::check_clock_p2p_length"]["-vcost"] = "(Weight value for vertical metal layer. Default: 102)"
        let details["hc_connectivity::check_clock_p2p_length"]["-length_diff_tolerance"] = ""
        let details["hc_connectivity::check_clock_p2p_length"]["-keep_detail_report"] = "(Keep the detail report that is generated during the check running. Default: Delete)"
        let details["hc_connectivity::check_clock_p2p_length"]["-out_dir"] = "(Output report directory. Default: ./[getvar -quiet G_REPORTS_PATH]/[getvar -quiet G_DESIGN_NAME]/)"
        let details["hc_connectivity::check_clock_p2p_length"]["-layer_prefix"] = "(Physical routing layer prefix string. Default: \"m\")"
        let details["hc_connectivity::check_clock_p2p_length"]["-stage"] = "(Stage name)"
        let details["hc_connectivity::check_clock_p2p_length"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_connectivity::check_clock_p2p_length"]["-debug_file"] = "(Generate tcl scripts to show errors as annotations. Default: None)"
   let details["hc_connectivity::check_clock_p2p_polarity"]={}
        let details["hc_connectivity::check_clock_p2p_polarity"]["-nets"] = "(Clock source net name)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-polarity"] = "(Polarity either odd or even. Default:even)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-net2run_cfg_file"] = "(Input net2run.cfg.ref file. Option -nets will be ignored if defined)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-keep_detail_report"] = "(Keep the detail report that is generated during the check running. Default: Delete)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-out_dir"] = "(Output report directory. Default: ./[getvar -quiet G_REPORTS_PATH]/[getvar -quiet G_DESIGN_NAME]/)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-stage"] = "(Stage name)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_connectivity::check_clock_p2p_polarity"]["-debug_file"] = "(Generate tcl scripts to show errors as annotations. Default: None)"
   let details["hc_connectivity::check_dangling_ports"]={}
        let details["hc_connectivity::check_dangling_ports"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_dangling_ports_pins"]={}
        let details["hc_connectivity::check_dangling_ports_pins"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_feedthru_net_names_match_ports"]={}
        let details["hc_connectivity::check_feedthru_net_names_match_ports"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_illegal_net_names"]={}
        let details["hc_connectivity::check_illegal_net_names"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_multiple_drivers"]={}
        let details["hc_connectivity::check_multiple_drivers"]["-stage"] = "(Stage name)"
        let details["hc_connectivity::check_multiple_drivers"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_connectivity::check_multiple_drivers"]["-gclk"] = "(Queries clk objects)"
   let details["hc_connectivity::check_port_net_names"]={}
        let details["hc_connectivity::check_port_net_names"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_ports_with_illegal_direction"]={}
        let details["hc_connectivity::check_ports_with_illegal_direction"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::check_spec_fev"]={}
        let details["hc_connectivity::check_spec_fev"]["-stage"] = "(Stage name)"
   let details["hc_connectivity::clock_clksrcnet_based_check_connection"]={}
   let details["hc_connectivity::clock_clksrcnet_based_check_p2p_length"]={}
   let details["hc_connectivity::clock_clksrcnet_based_check_p2p_polarity"]={}
   let details["hc_connectivity::clock_connection_net_traverse"]={}
   let details["hc_connectivity::clock_p2p_length_branch_tracing"]={}
   let details["hc_connectivity::clock_p2p_length_get_branch_search_area"]={}
   let details["hc_connectivity::clock_p2p_length_get_longest_net_shape"]={}
   let details["hc_connectivity::clock_p2p_length_get_net_shape_intersect"]={}
   let details["hc_connectivity::clock_p2p_length_get_pin_shape_intersect"]={}
   let details["hc_connectivity::clock_p2p_length_get_routing_length"]={}
   let details["hc_connectivity::clock_p2p_length_get_terminal_intersect"]={}
   let details["hc_connectivity::clock_p2p_length_is_antenna"]={}
   let details["hc_connectivity::clock_p2p_length_is_physically_connected"]={}
   let details["hc_connectivity::clock_p2p_length_net_traverse"]={}
   let details["hc_connectivity::clock_p2p_length_physical_conn_traverse"]={}
   let details["hc_connectivity::clock_p2p_polarity_net_traverse"]={}
   let details["hc_connectivity::report_ports_with_inout_direction"]={}
        let details["hc_connectivity::report_ports_with_inout_direction"]["-stage"] = "(Stage name)"
        let details["hc_connectivity::report_ports_with_inout_direction"]["-gclk"] = "(run the check on only cb2 objects)"
   let details["hc_connectivity::report_unconnected_pins"]={}
        let details["hc_connectivity::report_unconnected_pins"]["-stage"] = "(Stage name)"
   let details["hc_dfm::check_cell_area"]={}
   let details["hc_drc::check_opens"]={}
        let details["hc_drc::check_opens"]["-max_errors"] = "(Maximum number of errors LVS check should report)"
        let details["hc_drc::check_opens"]["-stage"] = "(Stage name)"
        let details["hc_drc::check_opens"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_drc::check_opens"]["-gclk"] = "(Queries clk objects)"
   let details["hc_drc::check_route_drcs"]={}
        let details["hc_drc::check_route_drcs"]["-stage"] = "(Stage name)"
   let details["hc_drc::check_shorts"]={}
        let details["hc_drc::check_shorts"]["-max_errors"] = "(Maximum number of errors LVS check should report)"
        let details["hc_drc::check_shorts"]["-stage"] = "(Stage name)"
        let details["hc_drc::check_shorts"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_drc::check_shorts"]["-gclk"] = "(Queries clk objects)"
   let details["hc_extraction::check_vias_in_frams"]={}
        let details["hc_extraction::check_vias_in_frams"]["-stage"] = "(Stage name)"
   let details["hc_extraction::fram_checker"]={}
   let details["hc_floorplan::check_block_at_origin"]={}
   let details["hc_floorplan::check_block_overlaps"]={}
        let details["hc_floorplan::check_block_overlaps"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_ebb_size_is_lego"]={}
        let details["hc_floorplan::check_ebb_size_is_lego"]["-layer"] = "(Layer name)"
   let details["hc_floorplan::check_hip_spacing"]={}
        let details["hc_floorplan::check_hip_spacing"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_min_channel"]={}
        let details["hc_floorplan::check_min_channel"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_minspace_for_ports"]={}
   let details["hc_floorplan::check_no_default_va"]={}
        let details["hc_floorplan::check_no_default_va"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_port_supply_net"]={}
        let details["hc_floorplan::check_port_supply_net"]["-block"] = "(partition name)"
        let details["hc_floorplan::check_port_supply_net"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_port_tie_offs"]={}
        let details["hc_floorplan::check_port_tie_offs"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_ports_of_single_poly"]={}
   let details["hc_floorplan::check_power_over_va_and_bounds"]={}
   let details["hc_floorplan::check_power_up_cells"]={}
   let details["hc_floorplan::check_ps_service_area"]={}
        let details["hc_floorplan::check_ps_service_area"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_same_power_aon_cells"]={}
        let details["hc_floorplan::check_same_power_aon_cells"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_std_cell_power_hookup"]={}
        let details["hc_floorplan::check_std_cell_power_hookup"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_terminals_oob"]={}
        let details["hc_floorplan::check_terminals_oob"]["-stage"] = "(Stage name)"
        let details["hc_floorplan::check_terminals_oob"]["-block_dir"] = "(Optional switch to put reports in block based dir, like in DP flow)"
   let details["hc_floorplan::check_terminals_shorts"]={}
        let details["hc_floorplan::check_terminals_shorts"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_top_layer_hip_power_pins_exposed"]={}
        let details["hc_floorplan::check_top_layer_hip_power_pins_exposed"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_va_boundaries_abutted"]={}
        let details["hc_floorplan::check_va_boundaries_abutted"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_va_dimensions"]={}
        let details["hc_floorplan::check_va_dimensions"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::check_xor_voltage_and_bounding_areas"]={}
        let details["hc_floorplan::check_xor_voltage_and_bounding_areas"]["-stage"] = "(Stage name)"
   let details["hc_floorplan::get_all_bounds"]={}
   let details["hc_floorplan::is_ungated_power_domain"]={}
   let details["hc_floorplan::rect_to_poly"]={}
   let details["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"]={}
        let details["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"]["-outfile"] = "(Specify output file-name for pin check report)"
        let details["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"]["-nets"] = "(Nets to check for pin and track issues. Default: Selected/All)"
        let details["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"]["-return"] = "(Return nets instead. Default: ErrCount)"
        let details["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"]["-warn"] = "(Return for warnings only. Default: Errors)"
   let details["hc_gcr::check_missing_terminals_on_priority_net_routing"]={}
        let details["hc_gcr::check_missing_terminals_on_priority_net_routing"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["hc_gcr::check_missing_terminals_on_priority_net_routing"]["-outfile"] = "(Specify output file-name for terminal check report)"
        let details["hc_gcr::check_missing_terminals_on_priority_net_routing"]["-nets"] = "(Nets to check for missing terminals. Default: Selected/All)"
        let details["hc_gcr::check_missing_terminals_on_priority_net_routing"]["-return"] = "(Return nets instead. Default: ErrCount)"
   let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]={}
        let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]["-outfile"] = "(Specify output file-name for pin check report)"
        let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]["-nets"] = "(Nets to check for pin and track issues. Default: Selected/All)"
        let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]["-skip_gen"] = "(Skip GCR Pattern Generation. Default: Generate)"
        let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]["-verbose"] = "(Print more information. Default: None)"
        let details["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"]["-return"] = "(Return nets instead. Default: ErrCount)"
   let details["hc_gcr::check_route_boundary_pin_enclosure"]={}
        let details["hc_gcr::check_route_boundary_pin_enclosure"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["hc_gcr::check_route_boundary_pin_enclosure"]["-outfile"] = "(Specify output file-name for pin check report)"
        let details["hc_gcr::check_route_boundary_pin_enclosure"]["-nets"] = "(Nets to check for pin and track issues. Default: Selected/All)"
        let details["hc_gcr::check_route_boundary_pin_enclosure"]["-return"] = "(Return nets instead. Default: ErrCount)"
   let details["hc_gcr::check_unplaced_cells_on_priority_net_routing"]={}
        let details["hc_gcr::check_unplaced_cells_on_priority_net_routing"]["-work_dir"] = "(Specify working directory-name for priority-route use)"
        let details["hc_gcr::check_unplaced_cells_on_priority_net_routing"]["-outfile"] = "(Specify output file-name for unplaced cell check report)"
        let details["hc_gcr::check_unplaced_cells_on_priority_net_routing"]["-nets"] = "(Nets to check for unplaced cells. Default: Selected/All)"
        let details["hc_gcr::check_unplaced_cells_on_priority_net_routing"]["-return"] = "(Return cells instead. Default: ErrCount)"
   let details["hc_general::check_lib_versions"]={}
        let details["hc_general::check_lib_versions"]["-report"] = "(Report file name)"
   let details["hc_general::check_missing_library"]={}
        let details["hc_general::check_missing_library"]["-report"] = "(Report file name)"
   let details["hc_general::check_modification_time"]={}
        let details["hc_general::check_modification_time"]["-report"] = "(Report file name)"
   let details["hc_netspec::check_all_are_staples"]={}
   let details["hc_netspec::check_allowed_layers_constraints"]={}
        let details["hc_netspec::check_allowed_layers_constraints"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-layers"] = "(Listing of dominant layers used to determine the length specification.)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-tolerance"] = "(Percentage length check tolerance. Default: 0.0)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-min_length"] = "(Minimum total net route-length to check dominant layer length. Default: 0.0um)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-usage"] = "(Print an example of usages. Default: None)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-no_error"] = "(Used to not create an error view cell for loading in error browser. Default: Created)"
        let details["hc_netspec::check_allowed_layers_constraints"]["-debug"] = "(Used to show errors as annotations. Default: None)"
   let details["hc_netspec::check_attrxml_netspecs"]={}
        let details["hc_netspec::check_attrxml_netspecs"]["-dice_dir"] = "(Input Attribute-XML XML directory to read constraints. Default: inputs)"
        let details["hc_netspec::check_attrxml_netspecs"]["-dice_file"] = "(Input Attribute-XML XML file (or list of files) to read constraints. Default: inputs/*.attribute.xml)"
        let details["hc_netspec::check_attrxml_netspecs"]["-tolerance"] = "(Percentage checking tolerance for shielding/width/length checks. Default: Width:0.0 and Shield/Length:5.0)"
        let details["hc_netspec::check_attrxml_netspecs"]["-strict"] = "(Consider wire widths greater than specification as errors for width check. Default: Warnings)"
        let details["hc_netspec::check_attrxml_netspecs"]["-min_length"] = "(Minimum total net route-length for shielding/width/length checks. Default: 10um)"
        let details["hc_netspec::check_attrxml_netspecs"]["-min_seglen"] = "(Minimum wire segment length for width check. Default: 5.0um)"
        let details["hc_netspec::check_attrxml_netspecs"]["-no_macros"] = "(Ignores shield wires/pin-shapes missing within macro boundaries. Default: Flag All)"
        let details["hc_netspec::check_attrxml_netspecs"]["-skip_fetch"] = "(Skip fetch of Attribute-XML constraint files. Default: Fetch)"
        let details["hc_netspec::check_attrxml_netspecs"]["-prop_fanout"] = "(Propagate constraint checking to all-fanout nets. Default: None)"
        let details["hc_netspec::check_attrxml_netspecs"]["-excl_dtouch"] = "(Exclude dont-touch constraints checking. Default: Check)"
        let details["hc_netspec::check_attrxml_netspecs"]["-excl_shield"] = "(Exclude shield constraints checking. Default: Check)"
        let details["hc_netspec::check_attrxml_netspecs"]["-excl_layers"] = "(Exclude allowed-layers constraints checking. Default: Check)"
        let details["hc_netspec::check_attrxml_netspecs"]["-excl_width"] = "(Exclude width-per-layer constraints checking. Default: Check)"
        let details["hc_netspec::check_attrxml_netspecs"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_netspec::check_attrxml_netspecs"]["-stage"] = "(Stage name)"
   let details["hc_netspec::check_database_netspecs"]={}
        let details["hc_netspec::check_database_netspecs"]["-tolerance"] = "(Percentage checking tolerance for shielding/width/length checks. Default: Width:0.0 and Shield/Length:5.0)"
        let details["hc_netspec::check_database_netspecs"]["-strict"] = "(Consider wire widths greater than specification as errors for width check. Default: Warnings)"
        let details["hc_netspec::check_database_netspecs"]["-min_length"] = "(Minimum total net route-length for shielding/width/length checks. Default: 10um)"
        let details["hc_netspec::check_database_netspecs"]["-min_seglen"] = "(Minimum wire segment length for width check. Default: 5.0um)"
        let details["hc_netspec::check_database_netspecs"]["-no_macros"] = "(Ignores shield wires/pin-shapes missing within macro boundaries. Default: Flag All)"
        let details["hc_netspec::check_database_netspecs"]["-prop_fanout"] = "(Propagate constraint checking to all-fanout nets. Default: None)"
        let details["hc_netspec::check_database_netspecs"]["-excl_width"] = "(Exclude width-per-layer constraints checking. Default: Check)"
        let details["hc_netspec::check_database_netspecs"]["-excl_shield"] = "(Exclude shield constraints checking. Default: Check)"
        let details["hc_netspec::check_database_netspecs"]["-excl_layers"] = "(Exclude allowed-layers constraints checking. Default: Check)"
        let details["hc_netspec::check_database_netspecs"]["-excl_match"] = "(Exclude length-match constraints checking. Default: Check)"
        let details["hc_netspec::check_database_netspecs"]["-excl_limit"] = "(Exclude length-limit constraints checking. Default: Check)"
        let details["hc_netspec::check_database_netspecs"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_netspec::check_database_netspecs"]["-stage"] = "(Stage name)"
   let details["hc_netspec::check_dont_touch_constraints"]={}
        let details["hc_netspec::check_dont_touch_constraints"]["-nets"] = "(Collection or list of nets to check. Default: Selected)"
        let details["hc_netspec::check_dont_touch_constraints"]["-repeaters"] = "(Only flag repeater cells. Default: All)"
        let details["hc_netspec::check_dont_touch_constraints"]["-usage"] = "(Print an example of usages. Default: None)"
        let details["hc_netspec::check_dont_touch_constraints"]["-no_error"] = "(Used to not create an error view cell for loading in error browser. Default: Created)"
        let details["hc_netspec::check_dont_touch_constraints"]["-debug"] = "(Used to show errors as annotations. Default: None)"
        let details["hc_netspec::check_dont_touch_constraints"]["-verbose"] = "(Produce and print more debug information. Default: None)"
   let details["hc_netspec::check_length_limit_constraints"]={}
        let details["hc_netspec::check_length_limit_constraints"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_netspec::check_length_limit_constraints"]["-min_value"] = "(Minimum length to check for)"
        let details["hc_netspec::check_length_limit_constraints"]["-tolerance"] = "(Percentage length check tolerance. Default: 0.0)"
   let details["hc_netspec::check_length_match_constraints"]={}
        let details["hc_netspec::check_length_match_constraints"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_netspec::check_length_match_constraints"]["-per_layer"] = "(Checks length matching per-layer. Default: Total)"
        let details["hc_netspec::check_length_match_constraints"]["-tolerance"] = "(Percentage length check tolerance. Default: 0.0)"
   let details["hc_netspec::check_multiple_shield_constraints"]={}
        let details["hc_netspec::check_multiple_shield_constraints"]["-constr"] = "(Constraint list for the space and width of the shield depending upon the layer)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-tolerance"] = "(Tolerance list for metal layers)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-snets"] = "(List of useable shield nets names for different metal layers. Default: vss)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-stype"] = "(Shield type (half or full) for different metal layers. Default: full)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-tol_width"] = "(Percentage shield width check tolerance for different metal layers.. Default: 0.0)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-tol_space"] = "(Percentage shield space check tolerance for different metal layers.. Default: 0.0)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-tol_match"] = "(Percentage shield match check tolerance of total net-length for different metal layers.. Default: 0.0)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-gclk"] = "(For clkbuilder objects. Default: None )"
        let details["hc_netspec::check_multiple_shield_constraints"]["-nets"] = "(Collection or list of nets to check. Default: Selected)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-usage"] = "(Print an example of usages. Default: None)"
        let details["hc_netspec::check_multiple_shield_constraints"]["-debug"] = "(Used to show errors as annotations. Default: None)"
   let details["hc_netspec::check_shield_constraints"]={}
        let details["hc_netspec::check_shield_constraints"]["-nets"] = "(Collection or list of nets to check. Default: Selected)"
        let details["hc_netspec::check_shield_constraints"]["-lshield"] = "(Listing of layer, space constraint, space, width constraint, and width.)"
        let details["hc_netspec::check_shield_constraints"]["-snets"] = "(List of useable shield nets names. Default: vss)"
        let details["hc_netspec::check_shield_constraints"]["-stype"] = "(Shield type (half or full). Default: full)"
        let details["hc_netspec::check_shield_constraints"]["-tolerance"] = "(Percentage shield check tolerance in general. Default: 0.0)"
        let details["hc_netspec::check_shield_constraints"]["-tol_width"] = "(Percentage shield width check tolerance. Default: 0.0)"
        let details["hc_netspec::check_shield_constraints"]["-tol_space"] = "(Percentage shield space check tolerance. Default: 0.0)"
        let details["hc_netspec::check_shield_constraints"]["-tol_match"] = "(Percentage shield match check tolerance of total net-length. Default: 0.0)"
        let details["hc_netspec::check_shield_constraints"]["-min_length"] = "(Minimum total shielded net route-length to check AND un-shieled total length (>min_length/2). Default: 0.0um)"
        let details["hc_netspec::check_shield_constraints"]["-no_macros"] = "(Ignores shield wires/pin-shapes missing within macro boundaries. Default: Flag All)"
        let details["hc_netspec::check_shield_constraints"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_netspec::check_shield_constraints"]["-usage"] = "(Print an example of usages. Default: None)"
        let details["hc_netspec::check_shield_constraints"]["-no_error"] = "(Used to not create an error view cell for loading in error browser. Default: Created)"
        let details["hc_netspec::check_shield_constraints"]["-debug"] = "(Used to show errors as annotations. Default: None)"
        let details["hc_netspec::check_shield_constraints"]["-err_info"] = "(Used to return violated net names and their bbox  if selected  Default off)"
        let details["hc_netspec::check_shield_constraints"]["-filter"] = "(Used to filter wires with this attributes ... Default empty)"
   let details["hc_netspec::check_width_per_layer_constraints"]={}
        let details["hc_netspec::check_width_per_layer_constraints"]["-nets"] = "(Collection or list of nets to check.)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-lwidth"] = "(Listing of layer, width constraint, width, and optional length constraint and length.)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-tolerance"] = "(Percentage width check tolerance. Default: 0.0)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-strict"] = "(Consider wire widths greater than specification as errors. Default: Warnings)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-min_length"] = "(Minimum total net route-length to check width. Default: 0.0um)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-min_seglen"] = "(Generic minimum wire segment length to check width. Default: 0.0um)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-verbose"] = "(Produce and print more debug information. Default: None)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-usage"] = "(Print an example of usages. Default: None)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-no_error"] = "(Used to not create an error view cell for loading in error browser. Default: Created)"
        let details["hc_netspec::check_width_per_layer_constraints"]["-debug"] = "(Used to show errors as annotations. Default: None)"
   let details["hc_pin::check_critical_pin_placement_errors"]={}
        let details["hc_pin::check_critical_pin_placement_errors"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_disallowed_layer_terminals"]={}
        let details["hc_pin::check_disallowed_layer_terminals"]["-disallowed_layers"] = ""
        let details["hc_pin::check_disallowed_layer_terminals"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_ebb_pin_placement_errors"]={}
        let details["hc_pin::check_ebb_pin_placement_errors"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_edge_terminals_below_spec_layer"]={}
        let details["hc_pin::check_edge_terminals_below_spec_layer"]["-spec_layer"] = "(Layer to check below which edge terminals are not allowed)"
        let details["hc_pin::check_edge_terminals_below_spec_layer"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_nonedge_terminals_above_heml"]={}
        let details["hc_pin::check_nonedge_terminals_above_heml"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_nonedge_terminals_minlength"]={}
        let details["hc_pin::check_nonedge_terminals_minlength"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_pg_pin_placement_errors"]={}
        let details["hc_pin::check_pg_pin_placement_errors"]["-skip_top"] = "(Used to skip checker on top-level pins of design i.e. ports of current design. Default: Check)"
        let details["hc_pin::check_pg_pin_placement_errors"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_pin_placement_errors"]={}
        let details["hc_pin::check_pin_placement_errors"]["-skip_top"] = "(Used to skip checker on top-level pins of design i.e. ports of current design. Default: Check)"
        let details["hc_pin::check_pin_placement_errors"]["-skip_blocks"] = "(Used to skip checker on blocks - child to child pins within current design. Default: Check)"
        let details["hc_pin::check_pin_placement_errors"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_pin_spacing_errors"]={}
        let details["hc_pin::check_pin_spacing_errors"]["-skip_top"] = "(Used to skip checker on top-level pins of design i.e. ports of current design. Default: Check)"
        let details["hc_pin::check_pin_spacing_errors"]["-skip_blocks"] = "(Used to skip checker on blocks - child to child pins within current design. Default: Check)"
        let details["hc_pin::check_pin_spacing_errors"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_ports_missing_terminal"]={}
        let details["hc_pin::check_ports_missing_terminal"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_ports_with_multi_terms"]={}
        let details["hc_pin::check_ports_with_multi_terms"]["-stage"] = "(Stage name)"
        let details["hc_pin::check_ports_with_multi_terms"]["-skip_list"] = "(list of port names/regular expressions to skip)"
   let details["hc_pin::check_terminal_widths_match_track_ref"]={}
        let details["hc_pin::check_terminal_widths_match_track_ref"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_terminals_longer_than_threshold"]={}
        let details["hc_pin::check_terminals_longer_than_threshold"]["-threshold"] = "(Number in microns above which to flag terminals as too long)"
        let details["hc_pin::check_terminals_longer_than_threshold"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_terminals_minlength"]={}
        let details["hc_pin::check_terminals_minlength"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_terminals_not_on_track"]={}
        let details["hc_pin::check_terminals_not_on_track"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_terminals_within_hsml"]={}
        let details["hc_pin::check_terminals_within_hsml"]["-stage"] = "(Stage name)"
   let details["hc_pin::check_weave_ft_connections"]={}
        let details["hc_pin::check_weave_ft_connections"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_block_abutment"]={}
        let details["hc_placement::check_block_abutment"]["-mlph"] = "(Used to make the checker go through all levels of hierarchy and report. Default off)"
        let details["hc_placement::check_block_abutment"]["-no_error"] = "(Used to not create an error view cell for loading in error browser. Default: Created)"
        let details["hc_placement::check_block_abutment"]["-debug"] = "(Used to show errors as annotations. Default: None)"
        let details["hc_placement::check_block_abutment"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_block_abutment_helper"]={}
   let details["hc_placement::check_cells_outside_block_boundary"]={}
        let details["hc_placement::check_cells_outside_block_boundary"]["-mlph"] = "(Used to make the checker go through all levels of hierarchy and report. Default off)"
        let details["hc_placement::check_cells_outside_block_boundary"]["-macros"] = "(Used to check macros only. Default: All)"
        let details["hc_placement::check_cells_outside_block_boundary"]["-stdcells"] = "(Used to check standard cells only. Default: All)"
        let details["hc_placement::check_cells_outside_block_boundary"]["-no_error"] = "(Used to not create an error view cell for loading in error browser. Default: Created)"
        let details["hc_placement::check_cells_outside_block_boundary"]["-debug"] = "(Used to show errors as annotations. Default: None)"
        let details["hc_placement::check_cells_outside_block_boundary"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_cells_within_voltage_area"]={}
        let details["hc_placement::check_cells_within_voltage_area"]["-stage"] = "(Stage name)"
        let details["hc_placement::check_cells_within_voltage_area"]["-disallow_multiple_va_shapes"] = ""
   let details["hc_placement::check_clk_hip_spacing"]={}
        let details["hc_placement::check_clk_hip_spacing"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_global_cell_relative_dist_adherence"]={}
        let details["hc_placement::check_global_cell_relative_dist_adherence"]["-template"] = "(Specify a global cell template to check. Default DIC)"
        let details["hc_placement::check_global_cell_relative_dist_adherence"]["-threshold"] = "(Specify the max distance allowed between adjacent global cells. Default 1000)"
        let details["hc_placement::check_global_cell_relative_dist_adherence"]["-highlight"] = "(Highlight global cells of given template violating threshold rule.Default off)"
        let details["hc_placement::check_global_cell_relative_dist_adherence"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_global_clock_cell_attr"]={}
        let details["hc_placement::check_global_clock_cell_attr"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_hip_bound_for_logic_cells"]={}
        let details["hc_placement::check_hip_bound_for_logic_cells"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_hip_to_parent_boundary"]={}
        let details["hc_placement::check_hip_to_parent_boundary"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_negative_boundary_coordinates"]={}
        let details["hc_placement::check_negative_boundary_coordinates"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_no_ebbs_touching_parent_boundary"]={}
        let details["hc_placement::check_no_ebbs_touching_parent_boundary"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_odi_vdm_placement"]={}
        let details["hc_placement::check_odi_vdm_placement"]["-mlph"] = "(Used to run checker from top design in one shot. Default off)"
        let details["hc_placement::check_odi_vdm_placement"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_overlaps"]={}
   let details["hc_placement::check_partition_boundary_halo_cells"]={}
        let details["hc_placement::check_partition_boundary_halo_cells"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_placement_legality"]={}
        let details["hc_placement::check_placement_legality"]["-stage"] = "(Stage name)"
        let details["hc_placement::check_placement_legality"]["-ignore_expression"] = ""
   let details["hc_placement::check_unplaced_cells"]={}
        let details["hc_placement::check_unplaced_cells"]["-stage"] = "(Stage name)"
   let details["hc_placement::check_va_cell_spacing"]={}
        let details["hc_placement::check_va_cell_spacing"]["-stage"] = "(Stage name)"
        let details["hc_placement::check_va_cell_spacing"]["-gclk"] = "(Queries clk objects)"
   let details["hc_placement::check_va_hip_spacing"]={}
        let details["hc_placement::check_va_hip_spacing"]["-stage"] = "(Stage name)"
   let details["hc_placement::format_bbox_for_array"]={}
   let details["hc_placement::partition_abutt_check"]={}
   let details["hc_power::check_no_power_above_hpml"]={}
        let details["hc_power::check_no_power_above_hpml"]["-stage"] = "(Stage name)"
   let details["hc_power::check_pg_connectivity_errors"]={}
        let details["hc_power::check_pg_connectivity_errors"]["-stage"] = "(Stage name)"
   let details["hc_power::check_pg_drc_errors"]={}
        let details["hc_power::check_pg_drc_errors"]["-stage"] = "(Stage name)"
   let details["hc_power::check_pg_region_lego_compliance"]={}
        let details["hc_power::check_pg_region_lego_compliance"]["-stage"] = "(Stage name)"
   let details["hc_power::check_power_domains_missing_voltage_areas"]={}
        let details["hc_power::check_power_domains_missing_voltage_areas"]["-stage"] = "(Stage name)"
   let details["hc_power::check_power_grid_missing_vias"]={}
        let details["hc_power::check_power_grid_missing_vias"]["-stage"] = "(Stage name)"
   let details["hc_power::check_power_supply_ports_correlation"]={}
        let details["hc_power::check_power_supply_ports_correlation"]["-stage"] = "(Stage name)"
   let details["hc_power::check_voltage_area_lego_compliance"]={}
        let details["hc_power::check_voltage_area_lego_compliance"]["-stage"] = "(Stage name)"
   let details["hc_power::check_voltage_value_per_supply_net"]={}
        let details["hc_power::check_voltage_value_per_supply_net"]["-stage"] = "(Stage name)"
   let details["hc_route::FindPowerLinesInArea"]={}
        let details["hc_route::FindPowerLinesInArea"]["-bbox"] = "(bbox to search)"
        let details["hc_route::FindPowerLinesInArea"]["-layer"] = "(layer to check)"
        let details["hc_route::FindPowerLinesInArea"]["-no_shield"] = "(disregard shield wires)"
   let details["hc_route::check_floating_vias"]={}
        let details["hc_route::check_floating_vias"]["-gclk"] = "(For clkbuilder objects. Default: None )"
        let details["hc_route::check_floating_vias"]["-gui"] = "(open error browser or not Default:off)"
        let details["hc_route::check_floating_vias"]["-nets"] = "(nets collection/list to check)"
        let details["hc_route::check_floating_vias"]["-vias"] = "(vias collection/list to check)"
   let details["hc_route::check_global_clock_route_widths"]={}
        let details["hc_route::check_global_clock_route_widths"]["-stage"] = "(Stage name)"
   let details["hc_route::check_missing_wires"]={}
        let details["hc_route::check_missing_wires"]["-stage"] = "(Stage name)"
   let details["hc_route::check_non_preferred_direction_routes"]={}
        let details["hc_route::check_non_preferred_direction_routes"]["-stage"] = "(Stage name)"
        let details["hc_route::check_non_preferred_direction_routes"]["-layers"] = "(run on given set of layers)"
        let details["hc_route::check_non_preferred_direction_routes"]["-exclude_pg"] = "(Do not check for PG routes. Saves runtime. Default: check PG)"
        let details["hc_route::check_non_preferred_direction_routes"]["-gclk"] = "(Run on clkbuilder objects only. Default: Off)"
   let details["hc_route::check_nonpg_missing_vias"]={}
        let details["hc_route::check_nonpg_missing_vias"]["-nets"] = "(Specify certain nets to check on)"
        let details["hc_route::check_nonpg_missing_vias"]["-stage"] = "(Stage name)"
   let details["hc_route::check_null_via_shape_objects"]={}
        let details["hc_route::check_null_via_shape_objects"]["-stage"] = "(Stage name)"
   let details["hc_route::check_objects_above_higher_metal_layers"]={}
   let details["hc_route::check_preroute_block_intersection"]={}
        let details["hc_route::check_preroute_block_intersection"]["-nets"] = "(Specify certain nets to check on)"
        let details["hc_route::check_preroute_block_intersection"]["-stage"] = "(Stage name)"
   let details["hc_route::check_preroute_completion"]={}
        let details["hc_route::check_preroute_completion"]["-nets"] = "(Specify certain nets to check preroutes completion on)"
        let details["hc_route::check_preroute_completion"]["-stage"] = "(Stage name)"
   let details["hc_route::check_preroute_width_vs_length"]={}
        let details["hc_route::check_preroute_width_vs_length"]["-nets"] = "(Specify certain nets to check width vs length on)"
        let details["hc_route::check_preroute_width_vs_length"]["-stage"] = "(Stage name)"
   let details["hc_route::check_route_hsml_compliance"]={}
        let details["hc_route::check_route_hsml_compliance"]["-stage"] = "(Stage name)"
   let details["hc_route::check_route_shape_endcap_values"]={}
        let details["hc_route::check_route_shape_endcap_values"]["-stage"] = "(Stage name)"
   let details["hc_route::check_route_shape_type"]={}
        let details["hc_route::check_route_shape_type"]["-stage"] = "(Stage name)"
   let details["hc_route::check_route_terminal_intersection"]={}
        let details["hc_route::check_route_terminal_intersection"]["-nets"] = "(Specify certain nets to check on)"
        let details["hc_route::check_route_terminal_intersection"]["-stage"] = "(Stage name)"
   let details["hc_route::check_signal_wire_shorts"]={}
        let details["hc_route::check_signal_wire_shorts"]["-stage"] = "(Stage name)"
   let details["hc_route::check_wires_on_track"]={}
        let details["hc_route::check_wires_on_track"]["-stage"] = "(Stage name)"
        let details["hc_route::check_wires_on_track"]["-gclk"] = "(Used to run the checker on clk objects if selected  Default off)"
   let details["hc_route::check_wires_on_track_cb2_track_lines"]={}
        let details["hc_route::check_wires_on_track_cb2_track_lines"]["-stage"] = "(Stage name)"
        let details["hc_route::check_wires_on_track_cb2_track_lines"]["-gclk"] = "(Used to run the checker on clk objects if selected  Default off)"
   let details["hc_route::get_duplicate_shapes"]={}
        let details["hc_route::get_duplicate_shapes"]["-nets"] = "(only work on specified shapes of nets)"
        let details["hc_route::get_duplicate_shapes"]["-layer"] = "(only work on specified layer Shapes)"
        let details["hc_route::get_duplicate_shapes"]["-debug"] = "(extra debug printing)"
        let details["hc_route::get_duplicate_shapes"]["-write_fixer_file"] = "(create file with remove commands for duplicate shapes)"
        let details["hc_route::get_duplicate_shapes"]["-stage"] = "(Stage name)"
   let details["hc_route::get_duplicate_vias"]={}
        let details["hc_route::get_duplicate_vias"]["-nets"] = "(only work on specified nets)"
        let details["hc_route::get_duplicate_vias"]["-cut_layer"] = "(only work on specified cut_layer vias)"
        let details["hc_route::get_duplicate_vias"]["-debug"] = "(extra debug printing)"
        let details["hc_route::get_duplicate_vias"]["-write_fixer_file"] = "(create file with remove commands for duplicate shapes)"
        let details["hc_route::get_duplicate_vias"]["-stage"] = "(Stage name)"
   let details["hc_route::get_track_lines"]={}
        let details["hc_route::get_track_lines"]["-bbox"] = "(bbox string)"
        let details["hc_route::get_track_lines"]["-layer"] = "(layer to calculate)"
        let details["hc_route::get_track_lines"]["-widths"] = "(specific widths to calculate)"
        let details["hc_route::get_track_lines"]["-net"] = "(find available tracks for net)"
        let details["hc_route::get_track_lines"]["-no_hash_reset"] = "(do not reset the hash which collects the data (for run time purposes))"
        let details["hc_route::get_track_lines"]["-include_power"] = "(include power tracks which are occupied)"
   let details["hc_route::report_clock_pushdown_failures"]={}
        let details["hc_route::report_clock_pushdown_failures"]["-stage"] = "(Stage name)"
   let details["hc_route::report_pushdown_failures"]={}
        let details["hc_route::report_pushdown_failures"]["-stage"] = "(Stage name)"
   let details["hc_timing::check_impossible_constraints"]={}
        let details["hc_timing::check_impossible_constraints"]["-only_top"] = "(Run on only top design, meaning ports coming through TD collaterals to DP flow)"
        let details["hc_timing::check_impossible_constraints"]["-stage"] = "(Stage name)"
   let details["hc_timing::check_io_constraints_clock"]={}
        let details["hc_timing::check_io_constraints_clock"]["-only_top"] = "(Run on only top design, meaning ports coming through TD collaterals to DP flow)"
        let details["hc_timing::check_io_constraints_clock"]["-stage"] = "(Stage name)"
   let details["hc_timing::check_unconstrained_pins"]={}
        let details["hc_timing::check_unconstrained_pins"]["-only_top"] = "(Run on only top design)"
        let details["hc_timing::check_unconstrained_pins"]["-stage"] = "(Stage name)"
   let details["hc_timing::check_unconstrained_ports"]={}
        let details["hc_timing::check_unconstrained_ports"]["-only_top"] = "(Run on only top design, meaning ports coming through TD collaterals to DP flow)"
        let details["hc_timing::check_unconstrained_ports"]["-stage"] = "(Stage name)"
   let details["hc_timing::report_pg_with_clock_latency_set"]={}
        let details["hc_timing::report_pg_with_clock_latency_set"]["-stage"] = "(Stage name)"
   let details["hc_timing::report_pins_with_no_timing_paths"]={}
        let details["hc_timing::report_pins_with_no_timing_paths"]["-stage"] = "(Stage name)"
        let details["hc_timing::report_pins_with_no_timing_paths"]["-only_top"] = "(Run on only top design)"
   let details["hc_timing::report_tspec_read"]={}
        let details["hc_timing::report_tspec_read"]["-stage"] = "(Stage name)"
   let details["hc_timing::report_unclocked_sequentials"]={}
        let details["hc_timing::report_unclocked_sequentials"]["-stage"] = "(Stage name)"
        let details["hc_timing::report_unclocked_sequentials"]["-only_top"] = "(Run on only top design)"
   let details["hc_tm::check_inputs"]={}
   let details["hc_tm::check_tm_bu_collaterals"]={}
        let details["hc_tm::check_tm_bu_collaterals"]["-repair"] = "(stiches missing connectivity in current design)"
        let details["hc_tm::check_tm_bu_collaterals"]["-create_terminal"] = "(create terminals from the child block in current design)"
        let details["hc_tm::check_tm_bu_collaterals"]["-stage"] = "(Stage name)"
   let details["hc_tm::check_tsv_bump_alignment"]={}
        let details["hc_tm::check_tsv_bump_alignment"]["-stage"] = "(Stage name)"
   let details["hc_upf::check_block_srsn"]={}
   let details["hc_upf::check_hier_srsn"]={}
        let details["hc_upf::check_hier_srsn"]["-stage"] = "(Stage name)"
   let details["hc_upf::check_isolation"]={}
        let details["hc_upf::check_isolation"]["-stage"] = "(Stage name)"
   let details["hc_upf::check_mv_design_violations"]={}
        let details["hc_upf::check_mv_design_violations"]["-stage"] = "(Stage name)"
        let details["hc_upf::check_mv_design_violations"]["-dp_mode"] = "(DP mode - check ERC and power connectivity only)"
   let details["hc_upf::check_net_srsn"]={}
   let details["hc_upf::check_srsn"]={}
        let details["hc_upf::check_srsn"]["-stage"] = "(Stage name)"
        let details["hc_upf::check_srsn"]["-skip_partitions"] = "(Run SRSN checker only on assembly level hierarchies)"
   let details["hc_upf::get_fn_pin_srsn"]={}
   let details["hc_utils::add_summary"]={}
   let details["hc_utils::apr_query_pwr_domains"]={}
   let details["hc_utils::bbox_list_to_annotation"]={}
        let details["hc_utils::bbox_list_to_annotation"]["-name"] = "(Name of annotation. Default: default)"
        let details["hc_utils::bbox_list_to_annotation"]["-color"] = "(Color used for annotation. Default: red)"
        let details["hc_utils::bbox_list_to_annotation"]["-keep"] = "(Keep existing annotation. Default: Remove)"
   let details["hc_utils::bbox_list_to_err_file"]={}
        let details["hc_utils::bbox_list_to_err_file"]["-checker_name"] = "(Name of checker)"
        let details["hc_utils::bbox_list_to_err_file"]["-information"] = "(Information string about these errors. Default: None)"
        let details["hc_utils::bbox_list_to_err_file"]["-layer_list"] = "(List of layers corresponding to objects flagged)"
        let details["hc_utils::bbox_list_to_err_file"]["-object_list"] = "(List of objects causing violations)"
   let details["hc_utils::extract_runtime_from_health_check_logs"]={}
        let details["hc_utils::extract_runtime_from_health_check_logs"]["-block"] = "(Name of block - directory in which all health check logs/reports are located)"
        let details["hc_utils::extract_runtime_from_health_check_logs"]["-stage"] = "(Name of stage whose health check logs you want to extract runtime out of)"
        let details["hc_utils::extract_runtime_from_health_check_logs"]["-checks"] = "(List of checks whose health check logs you want to extract runtime out of)"
        let details["hc_utils::extract_runtime_from_health_check_logs"]["-out_file"] = "(path to output file name)"
        let details["hc_utils::extract_runtime_from_health_check_logs"]["-reports_dir"] = "(Path to reports dir, if want to mention custom path different from current work area)"
   let details["hc_utils::find_common_list"]={}
   let details["hc_utils::init_summary"]={}
        let details["hc_utils::init_summary"]["-clean_slate"] = "(Remove all existing healthcheck reports from reports dir. Default - don't remove)"
   let details["hc_utils::mark_err_files_based_on_text_waivers"]={}
        let details["hc_utils::mark_err_files_based_on_text_waivers"]["-all_blocks"] = "(Run on all blocks in MLPH design, else run only on current block)"
   let details["hc_utils::parse_text_rpt_waivers"]={}
        let details["hc_utils::parse_text_rpt_waivers"]["-list_of_checks"] = ""
        let details["hc_utils::parse_text_rpt_waivers"]["-milestone_closure"] = "(run on milestone closure list of checks, list derived from config user is in)"
        let details["hc_utils::parse_text_rpt_waivers"]["-standalone_run"] = "(indicate to utility that health checks run standalone, outside of any flow)"
        let details["hc_utils::parse_text_rpt_waivers"]["-stage_run"] = "(if user has done single stage run with all HCs, to mention stage name)"
   let details["hc_utils::ps_ref"]={}
   let details["hc_utils::runtime"]={}
        let details["hc_utils::runtime"]["-min_time"] = "(Minimum elapsed time in seconds for reporting. Default: 5)"
        let details["hc_utils::runtime"]["-start"] = "(Force start time reset for tag-name. Default: Report)"
   let details["hc_utils::write_text_waivers_from_err_files"]={}
        let details["hc_utils::write_text_waivers_from_err_files"]["-all_blocks"] = "(Run on all blocks in MLPH design, else run only on current block)"
   let details["hc_utils::write_violation_rpt"]={}
   let details["iccpp_com::append_param"]={}
   let details["iccpp_com::balloon_aux"]={}
   let details["iccpp_com::balloon_close"]={}
   let details["iccpp_com::balloon_help"]={}
   let details["iccpp_com::bbox_to_lo_hi"]={}
   let details["iccpp_com::bootstrap"]={}
   let details["iccpp_com::boundary_to_lo_hi"]={}
   let details["iccpp_com::build_cached_poly"]={}
   let details["iccpp_com::cancel_canvas_user_input"]={}
   let details["iccpp_com::cb"]={}
   let details["iccpp_com::clear_cached_poly"]={}
   let details["iccpp_com::clear_flylines"]={}
   let details["iccpp_com::clear_ideck"]={}
   let details["iccpp_com::compress_nets"]={}
   let details["iccpp_com::convert_from_polygon"]={}
   let details["iccpp_com::dump_to_cmd_window"]={}
   let details["iccpp_com::dump_to_output_window"]={}
   let details["iccpp_com::eval_cmd"]={}
   let details["iccpp_com::file_header"]={}
   let details["iccpp_com::find_unobstructed_track"]={}
   let details["iccpp_com::get_all_net_shapes"]={}
   let details["iccpp_com::get_bbox"]={}
   let details["iccpp_com::get_boundary_of_cell_and_net_shapes"]={}
   let details["iccpp_com::get_first_64_char"]={}
   let details["iccpp_com::get_line"]={}
   let details["iccpp_com::get_metal_layers"]={}
   let details["iccpp_com::get_param"]={}
   let details["iccpp_com::get_param_names"]={}
   let details["iccpp_com::get_point"]={}
   let details["iccpp_com::get_process_name"]={}
   let details["iccpp_com::get_rule_based_track_widths"]={}
   let details["iccpp_com::get_tracks_in_bbox"]={}
   let details["iccpp_com::gui_get_param"]={}
   let details["iccpp_com::gui_set_param"]={}
   let details["iccpp_com::ideck_bbox"]={}
   let details["iccpp_com::ideck_bbox_lo_hi"]={}
   let details["iccpp_com::ideck_line"]={}
   let details["iccpp_com::ideck_poly"]={}
   let details["iccpp_com::ideck_text"]={}
   let details["iccpp_com::init_cached_poly"]={}
   let details["iccpp_com::init_default_episode_recording"]={}
   let details["iccpp_com::init_find_unobstructed_track"]={}
   let details["iccpp_com::intersects_cached_track_info"]={}
   let details["iccpp_com::is_bbox_occupied"]={}
   let details["iccpp_com::is_bbox_occupied_use_cached_poly"]={}
   let details["iccpp_com::is_track_occupied"]={}
   let details["iccpp_com::log_tracer_add"]={}
   let details["iccpp_com::log_tracer_cb"]={}
   let details["iccpp_com::obj_get_defined_attributes"]={}
        let details["iccpp_com::obj_get_defined_attributes"]["-application"] = "(List application attributes as well.)"
        let details["iccpp_com::obj_get_defined_attributes"]["-class"] = "(List attributes of this class only; run 'man list_attributes' for more details.)"
   let details["iccpp_com::post_hook_cb"]={}
   let details["iccpp_com::pre_hook_cb"]={}
   let details["iccpp_com::process_canvas_user_input"]={}
   let details["iccpp_com::rdt_source_if_exists"]={}
   let details["iccpp_com::regexp_get_param_names"]={}
   let details["iccpp_com::reset_params"]={}
   let details["iccpp_com::return_canvas_user_input"]={}
   let details["iccpp_com::return_route_guides_not_touching_boundary"]={}
   let details["iccpp_com::set_param"]={}
   let details["iccpp_com::sort_metal_layers"]={}
   let details["iccpp_com::uncompress_nets"]={}
   let details["iccpp_com::unset_param"]={}
   let details["iccpp_com::valid"]={}
   let details["iccpp_com::validate_bbox"]={}
   let details["iccpp_com::zoom"]={}
   let details["iccpp_com::zoom_to_bbox_selection"]={}
   let details["iccpp_cr::add_commands_to_diamond"]={}
   let details["iccpp_cr::add_rect_region"]={}
   let details["iccpp_cr::add_to_track_region_list_cb"]={}
   let details["iccpp_cr::align_repeaters_to_trunks"]={}
   let details["iccpp_cr::and_complete_topology_cb"]={}
   let details["iccpp_cr::apply_track_region_cb"]={}
   let details["iccpp_cr::are_2_bboxes_close_enough"]={}
   let details["iccpp_cr::bbox_to_boundary"]={}
   let details["iccpp_cr::bbox_to_polygon"]={}
   let details["iccpp_cr::bootstrap"]={}
   let details["iccpp_cr::boundary_to_bbox"]={}
   let details["iccpp_cr::break_wire"]={}
   let details["iccpp_cr::build_cr_gui"]={}
   let details["iccpp_cr::build_cr_tab"]={}
   let details["iccpp_cr::chop_bbox_into_2"]={}
   let details["iccpp_cr::clean_use_existing_shape"]={}
   let details["iccpp_cr::clear_bbox_from_drag_cb"]={}
   let details["iccpp_cr::commit_preview_for_wire_create_cb"]={}
   let details["iccpp_cr::complete_prerouted_nets_cb"]={}
   let details["iccpp_cr::compnets"]={}
   let details["iccpp_cr::compnets_for_list"]={}
   let details["iccpp_cr::convert_cutline_to_relative_cutline"]={}
   let details["iccpp_cr::cr_checkerboard_rpt"]={}
   let details["iccpp_cr::cr_click_center_point_of_track_cb"]={}
   let details["iccpp_cr::cr_click_center_point_of_track_no_preview_cb"]={}
   let details["iccpp_cr::cr_enable_track_sharing_cb"]={}
   let details["iccpp_cr::cr_fill_from_tracks"]={}
   let details["iccpp_cr::cr_get_bbox"]={}
   let details["iccpp_cr::cr_get_bbox_cb"]={}
   let details["iccpp_cr::cr_get_cutline_cb"]={}
   let details["iccpp_cr::cr_get_rpt_cells"]={}
   let details["iccpp_cr::cr_route_completion"]={}
   let details["iccpp_cr::cr_route_completion_______OLD"]={}
   let details["iccpp_cr::cr_select_complete_layer_cb"]={}
   let details["iccpp_cr::cr_select_complete_width_cb"]={}
   let details["iccpp_cr::cr_select_track_region_pattern_cb"]={}
   let details["iccpp_cr::cr_select_track_region_snap_cb"]={}
   let details["iccpp_cr::cr_selectlayer_cb"]={}
   let details["iccpp_cr::cr_selectlayer_withlayer_cb"]={}
   let details["iccpp_cr::cr_selectwidth_cb"]={}
   let details["iccpp_cr::cr_turn_on_clustering_cb"]={}
   let details["iccpp_cr::cr_turn_on_shielding_cb"]={}
   let details["iccpp_cr::cr_viewtracks_cb"]={}
   let details["iccpp_cr::create_bounds"]={}
   let details["iccpp_cr::create_bounds_for_track_pattern_regions"]={}
   let details["iccpp_cr::create_dummystore_for_track_pattern_regions"]={}
   let details["iccpp_cr::create_ndr_from_ndr_array"]={}
   let details["iccpp_cr::create_ndr_spec_from_net"]={}
   let details["iccpp_cr::create_net_shape"]={}
   let details["iccpp_cr::create_pin_topology"]={}
   let details["iccpp_cr::create_poly_from_tracks"]={}
   let details["iccpp_cr::create_repeaters_cb"]={}
   let details["iccpp_cr::create_route_track_for_net"]={}
        let details["iccpp_cr::create_route_track_for_net"]["-nets"] = "(Specify the net to create track. Can be regular expression)"
        let details["iccpp_cr::create_route_track_for_net"]["-layer"] = "(Specify layer)"
   let details["iccpp_cr::create_shapes_from_tracks"]={}
   let details["iccpp_cr::create_term_shape"]={}
   let details["iccpp_cr::create_trunk_vias_cb"]={}
   let details["iccpp_cr::create_trunks_from_pin_to_pin_cb"]={}
   let details["iccpp_cr::create_trunks_from_pins_to_trunk_cb"]={}
   let details["iccpp_cr::create_trunks_from_ports_to_pins_cb"]={}
   let details["iccpp_cr::create_trunks_from_ports_to_pins_complete_cb"]={}
   let details["iccpp_cr::create_trunks_from_ports_to_trunk_cb"]={}
   let details["iccpp_cr::create_trunks_from_what_cb"]={}
   let details["iccpp_cr::create_trunks_track_share"]={}
   let details["iccpp_cr::create_user_grid"]={}
   let details["iccpp_cr::create_zrt_shield"]={}
   let details["iccpp_cr::csv_to_nets_intent"]={}
   let details["iccpp_cr::cut_shapes"]={}
        let details["iccpp_cr::cut_shapes"]["-bbox"] = "(bbox to cut shapes out of)"
        let details["iccpp_cr::cut_shapes"]["-layer"] = "(layers of shapes to remove)"
        let details["iccpp_cr::cut_shapes"]["-nets"] = "(list of nets)"
   let details["iccpp_cr::cut_shapes_on_iccpp_trunks"]={}
        let details["iccpp_cr::cut_shapes_on_iccpp_trunks"]["-bbox"] = "(bbox to cut shapes out of)"
        let details["iccpp_cr::cut_shapes_on_iccpp_trunks"]["-layer"] = "(layers of shapes to remove)"
        let details["iccpp_cr::cut_shapes_on_iccpp_trunks"]["-nets"] = "(list of nets)"
   let details["iccpp_cr::decode_snap_region"]={}
   let details["iccpp_cr::delete_all_track_pattern_regions"]={}
   let details["iccpp_cr::delete_bounds_for_track_pattern_regions"]={}
   let details["iccpp_cr::delete_dummystore_for_track_pattern_regions"]={}
   let details["iccpp_cr::delete_rect_region"]={}
   let details["iccpp_cr::destroy_cr_gui"]={}
   let details["iccpp_cr::develope_assemblies"]={}
   let details["iccpp_cr::display_boundary_edges"]={}
   let details["iccpp_cr::display_layer_gutters_cb"]={}
   let details["iccpp_cr::do_bboxes_abut"]={}
   let details["iccpp_cr::do_bboxes_intesect"]={}
   let details["iccpp_cr::do_lohi_intesect"]={}
   let details["iccpp_cr::does_wirebbox_have_obstructions"]={}
   let details["iccpp_cr::does_wirebbox_have_obstructions_h2t"]={}
   let details["iccpp_cr::drag_for_track_region_bbox"]={}
   let details["iccpp_cr::drag_ideck_cb"]={}
   let details["iccpp_cr::encode_snap_region"]={}
   let details["iccpp_cr::expand_channel"]={}
   let details["iccpp_cr::extend_pins_by_creating_trunks_cb"]={}
   let details["iccpp_cr::extract_track_shared_trunks"]={}
   let details["iccpp_cr::extract_trunks"]={}
   let details["iccpp_cr::filterPathtoMenuAll"]={}
   let details["iccpp_cr::find_hier_net_from_local"]={}
   let details["iccpp_cr::find_net_notsharables"]={}
   let details["iccpp_cr::fix_missed_via_ladders"]={}
   let details["iccpp_cr::fn_get_bbox_of_flopped_chain"]={}
   let details["iccpp_cr::fn_get_start_track_num"]={}
   let details["iccpp_cr::fn_is_cell_location_legal"]={}
   let details["iccpp_cr::fn_move_spread_flops"]={}
   let details["iccpp_cr::fn_short_port_to_last_flopped_output"]={}
   let details["iccpp_cr::fn_trunk_flopped_nets"]={}
   let details["iccpp_cr::get_all_nets"]={}
   let details["iccpp_cr::get_all_nets_old"]={}
   let details["iccpp_cr::get_annotations_on_nets"]={}
   let details["iccpp_cr::get_bbox_from_drag_cb"]={}
   let details["iccpp_cr::get_bbox_from_track"]={}
   let details["iccpp_cr::get_boundary_edge_coord_generic"]={}
   let details["iccpp_cr::get_boundary_edge_lines"]={}
   let details["iccpp_cr::get_boundary_edge_list"]={}
   let details["iccpp_cr::get_boundary_edge_num_generic"]={}
   let details["iccpp_cr::get_boundary_edge_touching_bbox"]={}
   let details["iccpp_cr::get_bounds_for_track_pattern_regions"]={}
   let details["iccpp_cr::get_cached_poly"]={}
   let details["iccpp_cr::get_cell_bbox"]={}
   let details["iccpp_cr::get_cell_bbox_in_bbox"]={}
   let details["iccpp_cr::get_cell_from_click_cb"]={}
   let details["iccpp_cr::get_cell_height"]={}
   let details["iccpp_cr::get_cell_obj_bbox"]={}
   let details["iccpp_cr::get_cell_orientation"]={}
   let details["iccpp_cr::get_cell_pin_connected_to_net_rec"]={}
   let details["iccpp_cr::get_cell_pins_connected_to_net"]={}
   let details["iccpp_cr::get_cell_width"]={}
   let details["iccpp_cr::get_cells"]={}
   let details["iccpp_cr::get_cells_by_bbox"]={}
   let details["iccpp_cr::get_cells_by_location"]={}
   let details["iccpp_cr::get_curent_design"]={}
   let details["iccpp_cr::get_current_cel"]={}
   let details["iccpp_cr::get_cutline_from_drag_cb"]={}
   let details["iccpp_cr::get_die_area_bbox"]={}
   let details["iccpp_cr::get_die_area_boundary"]={}
   let details["iccpp_cr::get_dummystore_for_track_pattern_regions"]={}
   let details["iccpp_cr::get_dummystore_track_region"]={}
   let details["iccpp_cr::get_dummystore_track_region_bbox"]={}
   let details["iccpp_cr::get_dummystore_track_region_pattern"]={}
   let details["iccpp_cr::get_end_pin_of_flopped_net"]={}
   let details["iccpp_cr::get_flat_cells"]={}
   let details["iccpp_cr::get_flat_pins"]={}
   let details["iccpp_cr::get_free_track_poly"]={}
   let details["iccpp_cr::get_full_nets_connected_to_net"]={}
   let details["iccpp_cr::get_full_nets_connected_to_net_rec"]={}
   let details["iccpp_cr::get_hard_ips_and_bboxes"]={}
   let details["iccpp_cr::get_high_and_low_layer_from_tlayers"]={}
   let details["iccpp_cr::get_how_far_to_extend"]={}
   let details["iccpp_cr::get_iccpp_trunk_bbox"]={}
   let details["iccpp_cr::get_iccpp_trunk_bbox_closest_perpendicular"]={}
   let details["iccpp_cr::get_iccpp_trunk_bbox_longest_perpendicular"]={}
   let details["iccpp_cr::get_iccpp_trunk_layer"]={}
   let details["iccpp_cr::get_iccpp_trunk_layer_longest_perpendicular"]={}
   let details["iccpp_cr::get_iccpp_trunk_shapes"]={}
   let details["iccpp_cr::get_layer"]={}
   let details["iccpp_cr::get_layer_dir"]={}
   let details["iccpp_cr::get_layer_min_area"]={}
   let details["iccpp_cr::get_layer_min_spacing"]={}
   let details["iccpp_cr::get_layer_min_width"]={}
   let details["iccpp_cr::get_list_NDRS_cb"]={}
   let details["iccpp_cr::get_lo_hi_to_make_sharable"]={}
   let details["iccpp_cr::get_location_list_from_cutlines"]={}
   let details["iccpp_cr::get_location_list_from_relative_cutlines"]={}
   let details["iccpp_cr::get_locations_to_place_repeaters"]={}
   let details["iccpp_cr::get_ndr_rules_names"]={}
   let details["iccpp_cr::get_net_bbox"]={}
   let details["iccpp_cr::get_net_bbox_ICC2_FAST"]={}
   let details["iccpp_cr::get_net_bbox_on_track"]={}
   let details["iccpp_cr::get_net_bbox_pin_port_to_trunk"]={}
   let details["iccpp_cr::get_net_bbox_pin_to_extention"]={}
   let details["iccpp_cr::get_net_bbox_point_to_extention"]={}
   let details["iccpp_cr::get_net_drv_rcv_bbox"]={}
   let details["iccpp_cr::get_net_groups"]={}
   let details["iccpp_cr::get_net_lo_hi"]={}
   let details["iccpp_cr::get_net_names_list"]={}
   let details["iccpp_cr::get_net_names_list_from_connectivity"]={}
   let details["iccpp_cr::get_net_shapes"]={}
   let details["iccpp_cr::get_net_type"]={}
   let details["iccpp_cr::get_nets"]={}
   let details["iccpp_cr::get_obj_bbox"]={}
   let details["iccpp_cr::get_obj_layer"]={}
   let details["iccpp_cr::get_obstructions_for_wirebbox_in_hard_macros"]={}
   let details["iccpp_cr::get_obstructions_in_hard_macros"]={}
   let details["iccpp_cr::get_pin_bbox_from_pin_collection"]={}
   let details["iccpp_cr::get_pin_boundary_coord"]={}
   let details["iccpp_cr::get_pin_collection_of_cell_edge"]={}
   let details["iccpp_cr::get_pin_shapes"]={}
   let details["iccpp_cr::get_pins"]={}
   let details["iccpp_cr::get_pins_and_nets_on_cell_edge"]={}
   let details["iccpp_cr::get_point_from_edge"]={}
   let details["iccpp_cr::get_port_obstructions_intersecting_bbox"]={}
   let details["iccpp_cr::get_ports"]={}
   let details["iccpp_cr::get_preroute_vias_on_nets"]={}
   let details["iccpp_cr::get_rect_region"]={}
   let details["iccpp_cr::get_repeater_location_cb"]={}
   let details["iccpp_cr::get_routing_blockages_by_location"]={}
   let details["iccpp_cr::get_routing_guides_by_location"]={}
   let details["iccpp_cr::get_shapes_by_location"]={}
   let details["iccpp_cr::get_shapes_of_custom_shields"]={}
   let details["iccpp_cr::get_shapes_on_nets"]={}
   let details["iccpp_cr::get_sharable_nets"]={}
   let details["iccpp_cr::get_site_row_orient"]={}
   let details["iccpp_cr::get_term_extension_direction"]={}
   let details["iccpp_cr::get_term_port_name"]={}
   let details["iccpp_cr::get_tracks_bounding_boxes"]={}
   let details["iccpp_cr::get_tracks_capacity"]={}
   let details["iccpp_cr::get_user_grid"]={}
   let details["iccpp_cr::get_via_by_location"]={}
   let details["iccpp_cr::get_wire_bbox_from_track"]={}
   let details["iccpp_cr::get_wire_bbox_from_track_with_micron_step"]={}
   let details["iccpp_cr::grab_set_NDR_names"]={}
   let details["iccpp_cr::grow_bbox"]={}
   let details["iccpp_cr::gui_get_param"]={}
   let details["iccpp_cr::gui_set_param"]={}
   let details["iccpp_cr::guides_obstructing_wirebbox_in_hard_macros"]={}
   let details["iccpp_cr::h2t_adjust_edge_leg"]={}
   let details["iccpp_cr::h2t_build_cutout_polygon"]={}
   let details["iccpp_cr::h2t_build_cutout_polygon_display"]={}
   let details["iccpp_cr::h2t_build_exclude_bbox"]={}
   let details["iccpp_cr::h2t_build_exclude_bbox_display"]={}
   let details["iccpp_cr::h2t_build_track_array"]={}
   let details["iccpp_cr::h2t_build_track_array_channel"]={}
   let details["iccpp_cr::h2t_display_polygon"]={}
   let details["iccpp_cr::h2t_get_boundary_edge_coord"]={}
   let details["iccpp_cr::h2t_get_boundary_edge_num"]={}
   let details["iccpp_cr::h2t_get_channel_bbox"]={}
   let details["iccpp_cr::h2t_get_channel_coord_width"]={}
   let details["iccpp_cr::h2t_get_channel_key"]={}
   let details["iccpp_cr::h2t_get_channel_orient"]={}
   let details["iccpp_cr::h2t_get_coord"]={}
   let details["iccpp_cr::h2t_get_cutout_pullback"]={}
   let details["iccpp_cr::h2t_get_half_dr_e2e"]={}
   let details["iccpp_cr::h2t_get_hi_track_for_channel"]={}
   let details["iccpp_cr::h2t_get_lo_track_for_channel"]={}
   let details["iccpp_cr::h2t_get_pin_center_coord"]={}
   let details["iccpp_cr::h2t_get_track_from_ref_coord"]={}
   let details["iccpp_cr::h2t_get_user_half_dr_e2e"]={}
   let details["iccpp_cr::h2t_heal_segments"]={}
   let details["iccpp_cr::h2t_is_channel_flipped"]={}
   let details["iccpp_cr::h2t_is_iccpp_special_net"]={}
   let details["iccpp_cr::h2t_transform_coord_from_top_to_channel"]={}
   let details["iccpp_cr::h2t_trim_and_cut_out_net_bbox"]={}
   let details["iccpp_cr::iccpp_display_channels"]={}
   let details["iccpp_cr::initialize"]={}
   let details["iccpp_cr::initialize_1272"]={}
   let details["iccpp_cr::initialize_1273"]={}
   let details["iccpp_cr::initialize_1274"]={}
   let details["iccpp_cr::initialize_generic"]={}
   let details["iccpp_cr::is_cell_location_legal"]={}
   let details["iccpp_cr::is_net_shielded"]={}
   let details["iccpp_cr::is_pin_on_cell_instance_edge"]={}
   let details["iccpp_cr::is_point_inside_cell_boundary"]={}
   let details["iccpp_cr::isa_iccpp_trunk_on_net"]={}
   let details["iccpp_cr::launch_cr_gui"]={}
   let details["iccpp_cr::launch_netspec"]={}
   let details["iccpp_cr::legs_layers_entry_eh"]={}
   let details["iccpp_cr::list_swap"]={}
   let details["iccpp_cr::list_to_array"]={}
   let details["iccpp_cr::load_nets_from_file_cb"]={}
   let details["iccpp_cr::lreverse"]={}
   let details["iccpp_cr::merge_bboxes"]={}
   let details["iccpp_cr::merge_objects"]={}
   let details["iccpp_cr::ndr_array_from_nets_intent"]={}
   let details["iccpp_cr::nets_list_selection_cb"]={}
   let details["iccpp_cr::p2p_build_layers_list"]={}
   let details["iccpp_cr::p2p_build_return_list"]={}
   let details["iccpp_cr::p2p_build_segments_list"]={}
   let details["iccpp_cr::p2p_create_wires_from_segments_list"]={}
   let details["iccpp_cr::p2p_get_2pins_of_net"]={}
   let details["iccpp_cr::p2p_get_2pins_of_net__old"]={}
   let details["iccpp_cr::p2p_get_bbox_centerline"]={}
   let details["iccpp_cr::p2p_get_coord_of_track"]={}
   let details["iccpp_cr::p2p_get_end_of_pin"]={}
   let details["iccpp_cr::p2p_get_layer_dir"]={}
   let details["iccpp_cr::p2p_get_layer_width"]={}
   let details["iccpp_cr::p2p_get_legs_extensions"]={}
   let details["iccpp_cr::p2p_get_net_bbox"]={}
   let details["iccpp_cr::p2p_get_tracks"]={}
   let details["iccpp_cr::p2p_heal_segments_list"]={}
   let details["iccpp_cr::p2p_snap_cntr"]={}
   let details["iccpp_cr::p2p_snap_cntr__oldnew"]={}
   let details["iccpp_cr::p2p_snap_segments_list"]={}
   let details["iccpp_cr::place_repeater"]={}
   let details["iccpp_cr::place_via_ladders"]={}
   let details["iccpp_cr::place_via_ladders__OLD"]={}
   let details["iccpp_cr::place_via_ladders___OLD2"]={}
   let details["iccpp_cr::populate_cr_rep_name"]={}
   let details["iccpp_cr::populate_nets_list"]={}
   let details["iccpp_cr::populate_nets_list___OLD"]={}
   let details["iccpp_cr::populate_track_pattern_list"]={}
   let details["iccpp_cr::populate_track_region_list"]={}
   let details["iccpp_cr::popupNetsMenu"]={}
   let details["iccpp_cr::popup_track_region_menu"]={}
   let details["iccpp_cr::preview_create_net_lo_hi_cb"]={}
   let details["iccpp_cr::prune_pin_collection_for_cloud"]={}
   let details["iccpp_cr::remove_all_trunks_cb"]={}
   let details["iccpp_cr::remove_detailed_routing_on_nets"]={}
   let details["iccpp_cr::remove_iccpp_trunk_on_net"]={}
   let details["iccpp_cr::remove_iccpp_trunk_on_net_h2t"]={}
   let details["iccpp_cr::remove_net_shape"]={}
   let details["iccpp_cr::remove_routing_on_nets_cb"]={}
   let details["iccpp_cr::remove_track_region_cb"]={}
   let details["iccpp_cr::remove_trunk_antenna"]={}
   let details["iccpp_cr::remove_trunk_cb"]={}
   let details["iccpp_cr::remove_trunk_vias_cb"]={}
   let details["iccpp_cr::remove_trunks"]={}
   let details["iccpp_cr::reorder_track"]={}
   let details["iccpp_cr::repeater_addrepeater_location_cb"]={}
   let details["iccpp_cr::repeater_location_ideck_cb"]={}
   let details["iccpp_cr::report_full_NDRs"]={}
   let details["iccpp_cr::report_ladders"]={}
   let details["iccpp_cr::report_opens"]={}
   let details["iccpp_cr::return_bbox"]={}
   let details["iccpp_cr::return_min_max_layer_for_net"]={}
   let details["iccpp_cr::return_net_assemblies"]={}
   let details["iccpp_cr::return_valid_widths"]={}
   let details["iccpp_cr::ri_build_distance_repeater_list"]={}
   let details["iccpp_cr::ri_build_fanout_reconnect_list"]={}
   let details["iccpp_cr::ri_build_flat_repeater_location_list"]={}
   let details["iccpp_cr::ri_build_locations_repeater_list"]={}
   let details["iccpp_cr::ri_build_preview_segments_list"]={}
   let details["iccpp_cr::ri_build_segments_list"]={}
   let details["iccpp_cr::ri_build_xy_repeater_list"]={}
   let details["iccpp_cr::ri_create_repeater_from_repeater_list"]={}
        let details["iccpp_cr::ri_create_repeater_from_repeater_list"]["-of_cells"] = "(destination cells)"
        let details["iccpp_cr::ri_create_repeater_from_repeater_list"]["-exclude_cells"] = "(excluded destination cells)"
        let details["iccpp_cr::ri_create_repeater_from_repeater_list"]["-preview"] = "(Do not create shapes, just annotate)"
   let details["iccpp_cr::ri_create_wires_from_segments_list"]={}
   let details["iccpp_cr::ri_get_2pins_of_net"]={}
   let details["iccpp_cr::ri_get_2pins_of_net__OLD"]={}
   let details["iccpp_cr::ri_get_layer_weight"]={}
   let details["iccpp_cr::ri_get_lib_cell_bbox"]={}
   let details["iccpp_cr::ri_get_net_direction"]={}
   let details["iccpp_cr::ri_get_obstructing_cells_to_repeater"]={}
   let details["iccpp_cr::ri_get_out_repeater_net_name"]={}
   let details["iccpp_cr::ri_get_repeater_location_list_for_segment"]={}
   let details["iccpp_cr::ri_get_repeater_location_list_for_segment_from_locations"]={}
   let details["iccpp_cr::ri_get_shape_length"]={}
   let details["iccpp_cr::ri_grow_last_segnemt_of_segments_list"]={}
   let details["iccpp_cr::ri_init_build_repeater_list"]={}
   let details["iccpp_cr::ri_init_build_segments_list"]={}
   let details["iccpp_cr::ri_legalize_repeater_location"]={}
   let details["iccpp_cr::ri_legalize_repeaters"]={}
   let details["iccpp_cr::ri_match_flat_pin_to_pin"]={}
   let details["iccpp_cr::ri_reconnect_fanout_reconnect_list"]={}
   let details["iccpp_cr::ri_remove_original_segments_from_segment_list"]={}
   let details["iccpp_cr::ri_restore_fanout_reconnect_list"]={}
   let details["iccpp_cr::ri_shrink_last_segnemt_of_segments_list"]={}
   let details["iccpp_cr::ri_sort_repeater_location_list"]={}
   let details["iccpp_cr::ri_sort_segments_by_vertex"]={}
   let details["iccpp_cr::ri_sort_segments_list"]={}
   let details["iccpp_cr::ri_split_segment_in_2_for_list"]={}
   let details["iccpp_cr::ri_split_segments_list"]={}
   let details["iccpp_cr::ri_update_segment_list"]={}
   let details["iccpp_cr::route_nets_from_nets_intent"]={}
   let details["iccpp_cr::route_to_existing_trunk"]={}
   let details["iccpp_cr::route_with_ndr_for_nets_cb"]={}
   let details["iccpp_cr::route_zrt_eco"]={}
   let details["iccpp_cr::row_snapping_legal"]={}
   let details["iccpp_cr::selectAll"]={}
   let details["iccpp_cr::select_cr_rep_name"]={}
   let details["iccpp_cr::set_cell_from_click_cb"]={}
   let details["iccpp_cr::set_cell_from_click_filterfrom_cb"]={}
   let details["iccpp_cr::set_cell_from_click_filterto_cb"]={}
   let details["iccpp_cr::set_list_box"]={}
   let details["iccpp_cr::set_object_gui_value_cb"]={}
   let details["iccpp_cr::set_tracks_in_bounding_box"]={}
   let details["iccpp_cr::set_trunking_style_cb"]={}
   let details["iccpp_cr::set_user_grid"]={}
   let details["iccpp_cr::short_port_to_last_flopped_output"]={}
   let details["iccpp_cr::snap_coord_to_site_row"]={}
   let details["iccpp_cr::snap_coord_to_site_row_icc2"]={}
   let details["iccpp_cr::switchedTab"]={}
   let details["iccpp_cr::toggle_power_regiong_gui_cb"]={}
   let details["iccpp_cr::track_region_list_selection_cb"]={}
   let details["iccpp_cr::transform_coordinates_to_top"]={}
   let details["iccpp_cr::trim_antennas_on_nets"]={}
   let details["iccpp_cr::trunk_tab_cb"]={}
   let details["iccpp_cr::update_nets_list"]={}
   let details["iccpp_cr::update_nets_list_cb"]={}
   let details["iccpp_cr::validate_values_for_create_trunk_from_here_to_there"]={}
   let details["iccpp_cr::xy_sort_pin_collection"]={}
   let details["iccpp_cr::xy_to_track_info_ideck_cb"]={}
   let details["iccpp_cr::zoom_and_highlight_cb"]={}
   let details["iccpp_cr::zoom_cb"]={}
   let details["iccpp_hc::bootstrap"]={}
   let details["iccpp_hc::build_hc_gui"]={}
   let details["iccpp_hc::build_hc_tab"]={}
   let details["iccpp_hc::destroy_hc_gui"]={}
   let details["iccpp_hc::generate_res_log"]={}
   let details["iccpp_hc::initialize"]={}
   let details["iccpp_hc::initialize_generic"]={}
   let details["iccpp_hc::initialize_hip_insts"]={}
   let details["iccpp_hc::initialize_hip_masters"]={}
   let details["iccpp_hc::launch_hc_gui"]={}
   let details["iccpp_hc::load_res_log"]={}
   let details["iccpp_hc::run_all_checkers"]={}
   let details["iccpp_hc::run_all_fp_checkers"]={}
   let details["iccpp_hc::run_all_fram_checkers"]={}
   let details["iccpp_hc::run_one_check"]={}
   let details["iccpp_hc::run_selected_checkers"]={}
   let details["iccpp_hc::switchedTab"]={}
   let details["iccpp_hc::toggle_all_floorplan"]={}
   let details["iccpp_hc::toggle_all_fram"]={}
   let details["iccpp_hc::zoom_highlight_inst"]={}
   let details["iccpp_hc::zoom_pt_or_bbox"]={}
   let details["iccpp_iccpp::bootstrap"]={}
   let details["iccpp_iccpp::build_gui"]={}
   let details["iccpp_iccpp::destroy_gui"]={}
   let details["iccpp_iccpp::initialize"]={}
   let details["iccpp_iccpp::initialize_generic"]={}
   let details["iccpp_iccpp::launch_gui"]={}
   let details["iccpp_iccpp::switchedTab"]={}
   let details["iccpp_ns::additem"]={}
   let details["iccpp_ns::apply_cb"]={}
   let details["iccpp_ns::apply_set_cb"]={}
   let details["iccpp_ns::assigndefaultsetting"]={}
   let details["iccpp_ns::bootstrap"]={}
   let details["iccpp_ns::browseCB"]={}
   let details["iccpp_ns::build_ns_gui"]={}
   let details["iccpp_ns::build_ns_tab"]={}
   let details["iccpp_ns::capitalize_first"]={}
   let details["iccpp_ns::cbb_input_to_parent"]={}
   let details["iccpp_ns::clear_table"]={}
   let details["iccpp_ns::clearvalidatecheck"]={}
   let details["iccpp_ns::compnets"]={}
   let details["iccpp_ns::destroy_ns_gui"]={}
   let details["iccpp_ns::dfs_get_net_name"]={}
   let details["iccpp_ns::dumpvalidatereport"]={}
   let details["iccpp_ns::fill_headers"]={}
   let details["iccpp_ns::flushItems"]={}
   let details["iccpp_ns::fpAddNets"]={}
   let details["iccpp_ns::fpChangeSelected"]={}
   let details["iccpp_ns::fpCopyLine"]={}
   let details["iccpp_ns::fpDeleteLine"]={}
   let details["iccpp_ns::fpHelp"]={}
   let details["iccpp_ns::fpLoadInstNetSpec"]={}
   let details["iccpp_ns::fpLoadNetSpec"]={}
   let details["iccpp_ns::fpPasteLine"]={}
   let details["iccpp_ns::fpSaveData"]={}
   let details["iccpp_ns::fpUpdateNettype"]={}
   let details["iccpp_ns::fpUpdateNobjects"]={}
   let details["iccpp_ns::get_width_of_layer"]={}
   let details["iccpp_ns::highlight_cb"]={}
   let details["iccpp_ns::initialize"]={}
   let details["iccpp_ns::initialize_1274"]={}
   let details["iccpp_ns::initialize_generic"]={}
   let details["iccpp_ns::isInRange"]={}
   let details["iccpp_ns::is_horizontal_layer"]={}
   let details["iccpp_ns::is_route"]={}
   let details["iccpp_ns::launch_ns_gui"]={}
   let details["iccpp_ns::lcontain"]={}
   let details["iccpp_ns::loadvalidatereport"]={}
   let details["iccpp_ns::lpOpusChangeLabel"]={}
   let details["iccpp_ns::nets_list_selection_cb"]={}
   let details["iccpp_ns::popupDifMenu"]={}
   let details["iccpp_ns::routeselectednets"]={}
   let details["iccpp_ns::singlecellcheck"]={}
   let details["iccpp_ns::sync2itar"]={}
   let details["iccpp_ns::validate_cell"]={}
   let details["iccpp_ns::validatecheck"]={}
   let details["iccpp_ns::zoom_fix_cb"]={}
   let details["iccpp_pp::bootstrap"]={}
   let details["ism::compare_signatures"]={}
   let details["ism::create_object_signature"]={}
   let details["ism::fn_get_hier_pg_region"]={}
   let details["ism::generate_signatures_for_collection"]={}
   let details["ism::get_all_objects"]={}
   let details["ism::get_available_pd_intent_blocks"]={}
   let details["ism::get_blockage_layers"]={}
   let details["ism::get_collgen_filename"]={}
   let details["ism::get_ism_attr_info"]={}
        let details["ism::get_ism_attr_info"]["-attr_name"] = "(Name of the attribute.)"
   let details["ism::get_power_domain_info"]={}
   let details["ism::init_user_attr_master_index"]={}
   let details["ism::init_user_attr_vars"]={}
   let details["ism::load_pd_intent"]={}
   let details["ism::pd_intent_write_tms_blockages"]={}
   let details["ism::pd_intent_write_tms_ndm_info"]={}
   let details["ism::pd_intent_write_tms_terminals"]={}
   let details["ism::pd_intent_write_tms_via_blockages"]={}
   let details["ism::pdintent_delete_tms_coll"]={}
   let details["ism::pdintent_remove_all"]={}
   let details["ism::pdintent_write"]={}
        let details["ism::pdintent_write"]["-all_terminals"] = "(write PD INTENT for all terminals, by default only writes for objects tagged with pd_intent true)"
        let details["ism::pdintent_write"]["-all_macros"] = "(write PD INTENT for all macros, by default only writes for objects tagged with pd_intent true)"
        let details["ism::pdintent_write"]["-all_vas"] = "(write PD INTENT for all vas, by default only writes for objects tagged with pd_intent true)"
        let details["ism::pdintent_write"]["-va_collection"] = ""
        let details["ism::pdintent_write"]["-all_pgrs"] = "(write PD INTENT for all pg regions, by default only writes for objects tagged with pd_intent true)"
        let details["ism::pdintent_write"]["-pgr_collection"] = ""
        let details["ism::pdintent_write"]["-all_placement_blockages"] = ""
        let details["ism::pdintent_write"]["-all_routing_blockages"] = ""
        let details["ism::pdintent_write"]["-all_ports_tintent"] = "(write TINTENT for all ports)"
        let details["ism::pdintent_write"]["-all_custom_cells_placement"] = ""
        let details["ism::pdintent_write"]["-path"] = "(location where INTENT files are written out)"
        let details["ism::pdintent_write"]["-include_tms"] = "(To include all TMS collaterals)"
   let details["ism::pdintent_write_boundary"]={}
   let details["ism::pdintent_write_custom_cells_placement"]={}
   let details["ism::pdintent_write_ebb_blockages"]={}
   let details["ism::pdintent_write_hier_pg_regions"]={}
   let details["ism::pdintent_write_hier_voltage_areas"]={}
   let details["ism::pdintent_write_io_placement"]={}
   let details["ism::pdintent_write_pg_terminal_intent"]={}
   let details["ism::pdintent_write_placement_blockages"]={}
   let details["ism::pdintent_write_routing_blockages"]={}
   let details["ism::pdintent_write_shapes"]={}
   let details["ism::pdintent_write_tintent"]={}
   let details["ism::pdintent_write_tms_coll"]={}
   let details["ism::pdintent_write_va_blockages"]={}
   let details["ism::print_signatures"]={}
   let details["ism::split_pdintent_voltage_areas"]={}
   let details["ism::write_object_signatures_for_diff"]={}
   let details["itcl::delete_helper"]={}
   let details["itcl::local"]={}
   let details["layout_edit::add_gnac"]={}
        let details["layout_edit::add_gnac"]["-net"] = "(Net name)"
        let details["layout_edit::add_gnac"]["-coordinate"] = "(Gnac location)"
   let details["layout_edit::get_nearest_legal_coord"]={}
        let details["layout_edit::get_nearest_legal_coord"]["-coordinate"] = "(Initial coordinate)"
        let details["layout_edit::get_nearest_legal_coord"]["-cell"] = "(Cell to be placed)"
        let details["layout_edit::get_nearest_legal_coord"]["-snap"] = "(Snap the cell to the new location)"
   let details["layout_edit::get_unique_cell_name"]={}
   let details["list::l_num_format"]={}
   let details["list::lcontain"]={}
   let details["list::lempty"]={}
   let details["list::lintersect3"]={}
   let details["list::list_comm"]={}
   let details["list::list_diff"]={}
   let details["list::list_equal"]={}
   let details["list::lmap"]={}
   let details["list::lmax"]={}
   let details["list::lmin"]={}
   let details["list::lremove"]={}
   let details["list::lrmdups"]={}
   let details["list::lsort_bboxes_xl"]={}
   let details["list::lsort_bboxes_yl"]={}
   let details["list::lsubtract"]={}
   let details["list::lvarcat"]={}
   let details["list::lvardel"]={}
   let details["list::lvarpop"]={}
   let details["list::lvarpush"]={}
   let details["list::numbered_lines_string"]={}
        let details["list::numbered_lines_string"]["-max_lines"] = "(Max number of lines)"
        let details["list::numbered_lines_string"]["-cells"] = "(Objects are all cells)"
        let details["list::numbered_lines_string"]["-locations"] = "(Include object location)"
        let details["list::numbered_lines_string"]["-no_sort"] = "(Do not sort the list)"
   let details["lvision::read_mbist_files"]={}
   let details["mcmm::dump_icc_mcmm_compatible_inputs"]={}
   let details["mcmm::dump_icc_mcmm_data"]={}
   let details["mcmm::dump_mcmm_config"]={}
   let details["mcmm::manip_top_tcl"]={}
   let details["mcmm::post_process_files"]={}
   let details["mcmm_qor_cmd::close_files"]={}
   let details["mcmm_qor_cmd::link_to_file_external"]={}
   let details["mcmm_qor_cmd::link_to_file_internal"]={}
   let details["mcmm_qor_cmd::link_to_file_line_external"]={}
   let details["mcmm_qor_cmd::link_to_file_line_internal"]={}
   let details["mcmm_qor_cmd::ss_collect_main_data"]={}
   let details["mcmm_qor_cmd::ss_collect_snapshot_info"]={}
   let details["mcmm_qor_cmd::ss_convert_tim_rpt_to_html"]={}
   let details["mcmm_qor_cmd::ss_create_mcmm_qor_snapshot"]={}
   let details["mcmm_qor_cmd::ss_create_print_footer"]={}
   let details["mcmm_qor_cmd::ss_create_print_header"]={}
   let details["mcmm_qor_cmd::ss_create_print_main"]={}
   let details["mcmm_qor_cmd::ss_create_sum_index"]={}
   let details["mcmm_qor_cmd::ss_generate_report_file"]={}
   let details["mcmm_qor_cmd::ss_get_longest_grp_name"]={}
   let details["mcmm_qor_cmd::ss_mcmm_read_constraint_file"]={}
   let details["mcmm_qor_cmd::ss_mcmm_read_power_file"]={}
   let details["mcmm_qor_cmd::ss_print_histogram"]={}
   let details["mcmm_qor_cmd::ss_print_output"]={}
   let details["mcmm_qor_cmd::ss_print_output_to_extern_html"]={}
   let details["mcmm_qor_cmd::ss_print_output_to_html"]={}
   let details["mcmm_qor_cmd::ss_print_sect_separator"]={}
   let details["mcmm_qor_cmd::ss_print_value"]={}
   let details["mcmm_qor_cmd::ss_print_value_hyperlink"]={}
   let details["mcmm_qor_cmd::ss_print_value_to_html"]={}
   let details["mcmm_qor_cmd::ss_print_value_to_sum"]={}
   let details["mcmm_qor_cmd::ss_print_wns"]={}
   let details["mcmm_qor_cmd::uninit_global_variables"]={}
   let details["misc::collection2file"]={}
   let details["misc::file2list"]={}
   let details["misc::filecolumn2list"]={}
   let details["misc::filter_collection_direction"]={}
   let details["misc::find_bottom_up_inst_order"]={}
   let details["misc::find_in_order_block_hierarchy"]={}
   let details["misc::find_mlph_order"]={}
   let details["misc::get_user_email"]={}
   let details["misc::get_wire_direction"]={}
   let details["misc::is_metal_layer"]={}
   let details["misc::is_via_layer"]={}
   let details["misc::isfloat"]={}
   let details["misc::isinteger"]={}
   let details["misc::isnumber"]={}
   let details["misc::lcm"]={}
   let details["misc::lcm_list"]={}
   let details["misc::list2file"]={}
   let details["misc::lsearch_number"]={}
   let details["misc::man"]={}
   let details["misc::orientation2_to_orientation"]={}
   let details["misc::orientation_to_orientation2"]={}
   let details["misc::randAZazStr"]={}
   let details["misc::send_image_by_email"]={}
   let details["misc::take_snapshot"]={}
   let details["misc::time_format"]={}
   let details["mpp::create_feedthru_supplies"]={}
   let details["mpp::get_primary_domain"]={}
   let details["mpp::get_primary_ground_net"]={}
   let details["mpp::get_primary_power_net"]={}
   let details["mpp::get_supply_voltage"]={}
   let details["mpp::pushdown_pv_voltage_map"]={}
   let details["mpp::read_pv_voltage_map"]={}
        let details["mpp::read_pv_voltage_map"]["-file"] = "(PV voltage map)"
   let details["mpp::save_incremental_upf"]={}
        let details["mpp::save_incremental_upf"]["-output"] = "(Incremental upf)"
   let details["mpp::write_voltage_tcl"]={}
        let details["mpp::write_voltage_tcl"]["-voltage_tcl"] = "(voltage tcl filename)"
        let details["mpp::write_voltage_tcl"]["-pv_voltage_map"] = "(pv voltage map file)"
   let details["msgcat::ConvertLocale"]={}
   let details["msgcat::Init"]={}
   let details["msgcat::mc"]={}
   let details["msgcat::mcflmset"]={}
   let details["msgcat::mcflset"]={}
   let details["msgcat::mcload"]={}
   let details["msgcat::mclocale"]={}
   let details["msgcat::mcmax"]={}
   let details["msgcat::mcmset"]={}
   let details["msgcat::mcpreferences"]={}
   let details["msgcat::mcset"]={}
   let details["msgcat::mcunknown"]={}
   let details["name::cell_hier_compare"]={}
   let details["name::generate_unique_name"]={}
        let details["name::generate_unique_name"]["-name"] = "(Original name for duplication)"
        let details["name::generate_unique_name"]["-tag"] = "(Insert this tag in the name)"
        let details["name::generate_unique_name"]["-type"] = "(Object type: "
   let details["netspec::extract_simulation_netlist"]={}
        let details["netspec::extract_simulation_netlist"]["-subckt_name"] = "(Subcircuit name)"
        let details["netspec::extract_simulation_netlist"]["-from"] = "(From pin list)"
        let details["netspec::extract_simulation_netlist"]["-to"] = "(To pin list. Default: All Fanout)"
        let details["netspec::extract_simulation_netlist"]["-nets"] = "(Net list. Default: All Fanout)"
        let details["netspec::extract_simulation_netlist"]["-driver_subckt_files"] = ""
        let details["netspec::extract_simulation_netlist"]["-spice_header_files"] = ""
   let details["netspec::gcr_create_bus_constraint"]={}
        let details["netspec::gcr_create_bus_constraint"]["-group_name"] = "(Name of bus group)"
        let details["netspec::gcr_create_bus_constraint"]["-valid_layers"] = "(List of layers to use for bus trunk)"
        let details["netspec::gcr_create_bus_constraint"]["-gap"] = "(Spacing from outermost bit nets and other design objects)"
        let details["netspec::gcr_create_bus_constraint"]["-corner_type"] = ""
        let details["netspec::gcr_create_bus_constraint"]["-shield"] = "(Option to enable bus shielding. Default: no shielding)"
        let details["netspec::gcr_create_bus_constraint"]["-snet"] = "(Shield-net. Default: vss)"
        let details["netspec::gcr_create_bus_constraint"]["-shield_placement"] = ""
        let details["netspec::gcr_create_bus_constraint"]["-min_segment"] = ""
        let details["netspec::gcr_create_bus_constraint"]["-disabled_layers"] = ""
        let details["netspec::gcr_create_bus_constraint"]["-shield_spacings"] = ""
        let details["netspec::gcr_create_bus_constraint"]["-shield_widths"] = ""
   let details["netspec::gcr_create_diffpair_constraint"]={}
        let details["netspec::gcr_create_diffpair_constraint"]["-group_name"] = "(Name of differential pair group)"
        let details["netspec::gcr_create_diffpair_constraint"]["-valid_layers"] = "(List of layers to use for the differential pair trunk)"
        let details["netspec::gcr_create_diffpair_constraint"]["-gap"] = "(Spacing from outermost bit nets and other design objects)"
        let details["netspec::gcr_create_diffpair_constraint"]["-shield"] = "(Option to enable differential pair shielding. Default: no shielding)"
        let details["netspec::gcr_create_diffpair_constraint"]["-snet"] = "(Shield-net. Default: vss)"
        let details["netspec::gcr_create_diffpair_constraint"]["-shield_placement"] = ""
        let details["netspec::gcr_create_diffpair_constraint"]["-min_segment"] = ""
        let details["netspec::gcr_create_diffpair_constraint"]["-disabled_layers"] = ""
        let details["netspec::gcr_create_diffpair_constraint"]["-shield_spacings"] = ""
        let details["netspec::gcr_create_diffpair_constraint"]["-shield_widths"] = ""
   let details["netspec::gcr_create_length_limit_constraint"]={}
        let details["netspec::gcr_create_length_limit_constraint"]["-min_value"] = "(Minimum length value for router to achieve on the specified nets)"
   let details["netspec::gcr_create_length_match_constraint"]={}
        let details["netspec::gcr_create_length_match_constraint"]["-group_name"] = "(Name of match group)"
        let details["netspec::gcr_create_length_match_constraint"]["-tolerance"] = "(Absolute matching tolerance (um or percentage). Default: 0)"
        let details["netspec::gcr_create_length_match_constraint"]["-relative"] = "(Makes tolerance number be a relative percentage. Default: um)"
        let details["netspec::gcr_create_length_match_constraint"]["-match_type"] = ""
        let details["netspec::gcr_create_length_match_constraint"]["-shield"] = "(Option to enable length match shielding. Default: no shielding)"
        let details["netspec::gcr_create_length_match_constraint"]["-snet"] = "(Shield-net. Default: vss)"
        let details["netspec::gcr_create_length_match_constraint"]["-style"] = ""
        let details["netspec::gcr_create_length_match_constraint"]["-min_segment"] = ""
        let details["netspec::gcr_create_length_match_constraint"]["-disabled_layers"] = ""
        let details["netspec::gcr_create_length_match_constraint"]["-shield_spacings"] = ""
        let details["netspec::gcr_create_length_match_constraint"]["-shield_widths"] = ""
   let details["netspec::gcr_create_net_priority_constraint"]={}
        let details["netspec::gcr_create_net_priority_constraint"]["-priority"] = "(Net priority value. Value is an integer with range from -128 to 128.)"
   let details["netspec::gcr_create_rv_constraint"]={}
        let details["netspec::gcr_create_rv_constraint"]["-rv_spec"] = "(List of layers with number of parallel wires per layer)"
        let details["netspec::gcr_create_rv_constraint"]["-shield"] = "(Option to enable RV shielding. Default: no shielding)"
        let details["netspec::gcr_create_rv_constraint"]["-snet"] = "(Shield-net(s). Default: vss)"
        let details["netspec::gcr_create_rv_constraint"]["-style"] = ""
        let details["netspec::gcr_create_rv_constraint"]["-min_segment"] = ""
        let details["netspec::gcr_create_rv_constraint"]["-disabled_layers"] = ""
        let details["netspec::gcr_create_rv_constraint"]["-shield_spacings"] = ""
        let details["netspec::gcr_create_rv_constraint"]["-shield_widths"] = ""
   let details["netspec::gcr_create_shield_constraint"]={}
        let details["netspec::gcr_create_shield_constraint"]["-snet"] = "(Shield-net(s). Default: vss)"
        let details["netspec::gcr_create_shield_constraint"]["-style"] = ""
        let details["netspec::gcr_create_shield_constraint"]["-min_segment"] = ""
        let details["netspec::gcr_create_shield_constraint"]["-disabled_layers"] = ""
        let details["netspec::gcr_create_shield_constraint"]["-shield_spacings"] = ""
        let details["netspec::gcr_create_shield_constraint"]["-shield_widths"] = ""
   let details["netspec::get_constrained_nets"]={}
        let details["netspec::get_constrained_nets"]["-gcr"] = "(Get GCR specific constraints only. Default: All)"
        let details["netspec::get_constrained_nets"]["-dump"] = "(File to dump constraints information to. Default: None)"
   let details["netspec::get_constraint_value"]={}
   let details["netspec::get_nets_from_dice"]={}
   let details["netspec::get_valid_layer_width"]={}
   let details["netspec::ndr_create_routing_rule_from_rule_name"]={}
   let details["netspec::ndr_update_net_routing_rule"]={}
        let details["netspec::ndr_update_net_routing_rule"]["-widths"] = "(Layer-Width list {la wa lb wb ...} to update basic routing widths constraint. Default: None)"
        let details["netspec::ndr_update_net_routing_rule"]["-shield"] = "(Add basic shield constraint. Default: None)"
        let details["netspec::ndr_update_net_routing_rule"]["-snet"] = "(Shield-net(s). Default: vss)"
        let details["netspec::ndr_update_net_routing_rule"]["-style"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-min_segment"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-disabled_layers"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-shield_spacings"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-shield_widths"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-min_routing_layer"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-max_routing_layer"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-min_layer_mode"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-max_layer_mode"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-min_layer_mode_soft_cost"] = ""
        let details["netspec::ndr_update_net_routing_rule"]["-max_layer_mode_soft_cost"] = ""
   let details["netspec::propagate_down"]={}
        let details["netspec::propagate_down"]["-force"] = "(Force propagate down. Default: None)"
   let details["netspec::propagate_net_constraints"]={}
        let details["netspec::propagate_net_constraints"]["-constrs"] = "(Constraints list to propagate. Default: {dont_touch allowed_layers ndr})"
   let details["netspec::propagate_netspec"]={}
   let details["netspec::propagate_up"]={}
        let details["netspec::propagate_up"]["-force"] = "(Force propagate up. Default: None)"
   let details["netspec::read_attribute_xml_format"]={}
        let details["netspec::read_attribute_xml_format"]["-array_name"] = "(Returned array-name)"
   let details["netspec::read_attribute_xml_format_helper"]={}
   let details["netspec::read_attrxml"]={}
   let details["netspec::read_dice_attrxml_files"]={}
        let details["netspec::read_dice_attrxml_files"]["-echo"] = "(Echo constraints ONLY. Default: None)"
   let details["netspec::read_dice_format"]={}
        let details["netspec::read_dice_format"]["-echo"] = "(Echo DICE constraints ONLY. Default: None)"
   let details["netspec::read_netspec"]={}
   let details["netspec::remove_constraints_on_nets"]={}
   let details["netspec::report_match_lengths"]={}
        let details["netspec::report_match_lengths"]["-work_dir"] = "(Specify working directory-name for priority-route use. Default: priority_route)"
        let details["netspec::report_match_lengths"]["-outfile"] = "(Specify output file-name for length match report. Default: <block>_GCR_length_match_summary.rpt)"
        let details["netspec::report_match_lengths"]["-report_file"] = "(Create a report file. Default: Only report to ICC2 log)"
        let details["netspec::report_match_lengths"]["-group"] = "(Name of group to report on.)"
        let details["netspec::report_match_lengths"]["-nets"] = "(Collection or list of nets to check.)"
        let details["netspec::report_match_lengths"]["-per_layer"] = "(Checks length matching per-layer. Default: Total)"
   let details["netspec::set_allowed_layers_from_net"]={}
        let details["netspec::set_allowed_layers_from_net"]["-net"] = "(Constrained net reference)"
        let details["netspec::set_allowed_layers_from_net"]["-tnets"] = "(Target nets)"
   let details["netspec::set_ndr_from_net"]={}
        let details["netspec::set_ndr_from_net"]["-net"] = "(Constrained net reference)"
        let details["netspec::set_ndr_from_net"]["-tnets"] = "(Target nets)"
   let details["netspec::write_constraints_from_attrxml"]={}
        let details["netspec::write_constraints_from_attrxml"]["-dice_dir"] = "(Input Attribute-XML directory to read constraints. Default: inputs)"
        let details["netspec::write_constraints_from_attrxml"]["-dice_file"] = "(Input Attribute-XML file (or list of files) to read constraints. Default: inputs/*.attribute.xml)"
        let details["netspec::write_constraints_from_attrxml"]["-add_lock"] = "(Add net re-routing locked constraint when dont-touch is set. Default: None)"
        let details["netspec::write_constraints_from_attrxml"]["-prop_fanout"] = "(Propagate constraints to all-fanout nets. Default: None)"
        let details["netspec::write_constraints_from_attrxml"]["-append"] = "(Append to output file. Default: None)"
        let details["netspec::write_constraints_from_attrxml"]["-apply"] = "(Apply constraints written to file on current DB. Default: None)"
   let details["nwshSetup::load_icv_menus"]={}
   let details["nwtnAttrs::layerSet"]={}
   let details["nwtnAttrs::load_xml_setup"]={}
   let details["nwtnAttrs::netSet"]={}
   let details["nwtnSetup::loadShellSetupFile"]={}
   let details["nwtnSetup::loadUserFile"]={}
   let details["nwtnSetup::loadUserPrefs"]={}
   let details["nwtnSetup::loadUserSetupFile"]={}
   let details["nwtnSetup::sameDirectory"]={}
   let details["nwtnSetup::useRecentMouseTool"]={}
   let details["nwtnSetup::useRecentStatusBar"]={}
   let details["nwtnSetup::useSelectByNameStatusBar"]={}
   let details["nwtnTables::setupColumnDefsForObjectClasses"]={}
   let details["nwtnVS::errMsg"]={}
   let details["nwtnVS::hasZoom"]={}
   let details["nwtnVS::warnMsg"]={}
   let details["parseOpt::CmdSpec"]={}
   let details["parseOpt::buildCmd"]={}
   let details["parseOpt::cancelCmd"]={}
   let details["parseOpt::cmdSpec"]={}
   let details["parseOpt::defaultCmd"]={}
   let details["parseOpt::exec_validate_cmd"]={}
   let details["parseOpt::getDefaultValues"]={}
   let details["parseOpt::getOptionType"]={}
   let details["parseOpt::get_one_of_string_list"]={}
   let details["parseOpt::initDefaultValues"]={}
   let details["parseOpt::okCmd"]={}
   let details["parseOpt::open_gui"]={}
   let details["parseOpt::parseOpt"]={}
   let details["parseOpt::parseOpts"]={}
   let details["parseOpt::parseOptsMain"]={}
   let details["parseOpt::previewCmd"]={}
   let details["parseOpt::printHelp"]={}
   let details["parseOpt::redefine_proc_attributes"]={}
   let details["parseOpt::unhide_cmd"]={}
   let details["parseOpt::validate"]={}
   let details["parseOpt::varPop"]={}
   let details["pdn_tcl::hip_transform_pdn_tcl_file"]={}
   let details["pdn_tcl::remove_all_pdn_tcl"]={}
   let details["pdn_tcl::sd_get_pdn_tcl_file_from_noa"]={}
   let details["pdn_tcl::sd_import_hip_pdn"]={}
   let details["pdn_tcl::sd_route_hip_pdn"]={}
   let details["pdn_tcl::translate_bbox"]={}
   let details["pdn_tcl::translate_create_net_shape"]={}
   let details["pdn_tcl::translate_create_shape"]={}
   let details["pg_util::sd_add_missing_vias_on_ebb_pg_pins"]={}
   let details["pg_util::sd_create_blkg_from_objs"]={}
   let details["pg_util::sd_create_ebb_blanket_blockage"]={}
        let details["pg_util::sd_create_ebb_blanket_blockage"]["-cells"] = "(List of cells to create routing blockage over)"
        let details["pg_util::sd_create_ebb_blanket_blockage"]["-layers"] = "(List of routing layers)"
        let details["pg_util::sd_create_ebb_blanket_blockage"]["-boundary_offset"] = ""
        let details["pg_util::sd_create_ebb_blanket_blockage"]["-include_ground"] = "(Blockage for vss also)"
   let details["pg_util::sd_pg_repair"]={}
        let details["pg_util::sd_pg_repair"]["-bbox"] = "(Bbox where to search for power terminals)"
        let details["pg_util::sd_pg_repair"]["-layer"] = "(Routing layer)"
        let details["pg_util::sd_pg_repair"]["-net"] = "(Power net name)"
   let details["pg_util::sd_protect_pins_in_pg_region"]={}
        let details["pg_util::sd_protect_pins_in_pg_region"]["-bbox"] = "(Bbox where to look for pin shapes and terminals)"
        let details["pg_util::sd_protect_pins_in_pg_region"]["-layers"] = "(List of routing layers)"
        let details["pg_util::sd_protect_pins_in_pg_region"]["-size"] = "(Size of the blockage)"
   let details["pg_util::sd_pull_back_pg_from_ebb"]={}
        let details["pg_util::sd_pull_back_pg_from_ebb"]["-cells"] = "(List of EBB cells. Default: all EBB cells)"
        let details["pg_util::sd_pull_back_pg_from_ebb"]["-layer"] = "(Routing layer)"
        let details["pg_util::sd_pull_back_pg_from_ebb"]["-gap_size"] = "(Distance between EBB edge and PG wire edge)"
        let details["pg_util::sd_pull_back_pg_from_ebb"]["-pg_net"] = "(PG net name)"
        let details["pg_util::sd_pull_back_pg_from_ebb"]["-force"] = "(Pull back layers above EBB HPML)"
   let details["pg_util::sd_rm_straddle_pg_shapes_over_ebb"]={}
        let details["pg_util::sd_rm_straddle_pg_shapes_over_ebb"]["-cells"] = "(List of EBB cells. Default: all EBB cells)"
        let details["pg_util::sd_rm_straddle_pg_shapes_over_ebb"]["-layer"] = "(Routing layer. Default: HPML of the EBB)"
        let details["pg_util::sd_rm_straddle_pg_shapes_over_ebb"]["-force"] = "(Force to remove shapes that are above EBB HPML)"
   let details["pinPairing::cell_get_boundary"]={}
   let details["pinPairing::create_pin_pairing_stubs"]={}
        let details["pinPairing::create_pin_pairing_stubs"]["-cells"] = "(Cells to run the command on (default all soft macros))"
        let details["pinPairing::create_pin_pairing_stubs"]["-layer"] = "(Layer name to run pin pairing (default: m5))"
        let details["pinPairing::create_pin_pairing_stubs"]["-net_name"] = "(Net name to be used for pairing net (default vss))"
        let details["pinPairing::create_pin_pairing_stubs"]["-verbose"] = "(Whether to print extensive message)"
   let details["pinPairing::create_pin_pairing_stubs_acrossing_line"]={}
   let details["pinPairing::extract_rule_based_track_rules"]={}
   let details["pinPairing::extract_rule_based_track_rules_2_"]={}
   let details["pinPairing::get_all_objects_crossing_line"]={}
   let details["pinPairing::get_tracks_crossing_line"]={}
   let details["pinPairing::layer_get_min_width"]={}
   let details["pinPairing::layer_get_routing_direction"]={}
   let details["pinPairing::object_is_of_interest"]={}
   let details["pinPairing::remove_pin_pairing_stubs"]={}
        let details["pinPairing::remove_pin_pairing_stubs"]["-hierarchical"] = "(Remove pin pairing stubs hierarhically)"
   let details["pinPairing::track_get_type"]={}
   let details["place::legalize_placement_posthook"]={}
   let details["place::rpd_get_overlapped_cells"]={}
        let details["place::rpd_get_overlapped_cells"]["-vas"] = "(Voltage areas)"
   let details["place::rpd_process_layout_only_cells"]={}
        let details["place::rpd_process_layout_only_cells"]["-vas"] = "(Voltage areas)"
   let details["place::rpd_process_ps_cells"]={}
        let details["place::rpd_process_ps_cells"]["-vas"] = "(Voltage areas)"
   let details["place::rpd_restore_cells"]={}
   let details["place::rpd_verify_rp"]={}
        let details["place::rpd_verify_rp"]["-log"] = "(Specifies the log file.)"
        let details["place::rpd_verify_rp"]["-legalize"] = "(Performs a legalize_placement if any genrams were destructured.)"
        let details["place::rpd_verify_rp"]["-check_only"] = "(Returns a list of corrupt RP groups and skips destructuring.)"
   let details["place::rpd_write_rsh"]={}
        let details["place::rpd_write_rsh"]["-input"] = "(Syn RPD-Shell command file)"
        let details["place::rpd_write_rsh"]["-output"] = "(ICC2 RPD-Shell command file)"
   let details["place::swap_cell_types"]={}
        let details["place::swap_cell_types"]["-cells"] = "(Specify target cells)"
   let details["place::write_placement"]={}
        let details["place::write_placement"]["-filename"] = "(The output placement file name. The default is to write to standard output.)"
        let details["place::write_placement"]["-inst_list"] = "(The instance name list. The default is to write out eco placement for all instances.)"
        let details["place::write_placement"]["-all"] = "(Include physical only cells)"
        let details["place::write_placement"]["-ignore_fixed"] = "(Do not include the fixed cells)"
   let details["ppp::create_unambiguous_center_pins"]={}
   let details["ppp::create_unambiguous_pins"]={}
   let details["ppp::filter_cells_for_push_down"]={}
   let details["ppp::find_automatic_exclude_nets_for_push_down"]={}
   let details["ppp::pop_tm_terminals"]={}
        let details["ppp::pop_tm_terminals"]["-macros"] = "(List of macros templates to pop terminals for. Default: G_BU_TM_MACRO_LIST)"
        let details["ppp::pop_tm_terminals"]["-layers"] = "(List of layers of which to create terminals only. Default: Pin-Layer)"
   let details["ppp::post_push_track_info_update"]={}
   let details["ppp::push_blockages"]={}
   let details["ppp::push_cells"]={}
   let details["ppp::push_routes"]={}
        let details["ppp::push_routes"]["-nets"] = "(Nets to run push-down on for testing)"
   let details["ppp::push_routing_guides"]={}
   let details["ppp::push_rows"]={}
   let details["ppp::push_voltage_areas"]={}
   let details["ppp::re_initialize_floorplan"]={}
   let details["ppp::store_original_track_bbox"]={}
   let details["ps::get_pwr_grid_config"]={}
        let details["ps::get_pwr_grid_config"]["-net_type"] = "(Could be AON, GND, PRIMARY, NON_UPF_PRIMARY, etc)"
        let details["ps::get_pwr_grid_config"]["-layer"] = "(Name of the metal layer)"
        let details["ps::get_pwr_grid_config"]["-param"] = "(Could be width, pitch, offset)"
   let details["ps::get_pwr_switch_config"]={}
        let details["ps::get_pwr_switch_config"]["-dont_snap"] = "(dont_snap to pg)"
   let details["ps::insert_ps_cells_around_macro"]={}
        let details["ps::insert_ps_cells_around_macro"]["-va"] = "(voltage area for ps cell)"
        let details["ps::insert_ps_cells_around_macro"]["-get_ps_config"] = "(Give this switch if you want to read PS config)"
        let details["ps::insert_ps_cells_around_macro"]["-macro_names"] = "(macro names around which to insert PS)"
   let details["ps::ps_get_hierarchy"]={}
   let details["ps::pull_point_into_va"]={}
        let details["ps::pull_point_into_va"]["-va"] = "(voltage area for ps cell)"
        let details["ps::pull_point_into_va"]["-direction"] = "(direction of PS insertion)"
        let details["ps::pull_point_into_va"]["-point"] = "(point to pull into va)"
        let details["ps::pull_point_into_va"]["-increment"] = "(increments to move the point)"
   let details["ps::snap_to_nearest_locn"]={}
        let details["ps::snap_to_nearest_locn"]["-coord"] = "(coordinate to snap)"
        let details["ps::snap_to_nearest_locn"]["-direction"] = "(x or y direction)"
        let details["ps::snap_to_nearest_locn"]["-ps_ref_name"] = "(ref_name of PS cell to snap)"
        let details["ps::snap_to_nearest_locn"]["-nolayersnap"] = "(dont snap to layer, only snap to legal tile location)"
        let details["ps::snap_to_nearest_locn"]["-ceil"] = "(ceil the coord)"
        let details["ps::snap_to_nearest_locn"]["-floor"] = "(floor the coord)"
        let details["ps::snap_to_nearest_locn"]["-around_ebb"] = "(snapping is around ebb)"
        let details["ps::snap_to_nearest_locn"]["-no_extra_check"] = "(For -floor switch, no need to check (snap value + ps_width or ps_height) < coord given)"
   let details["ps_dfb::add_prespecified_daisy_chains"]={}
   let details["ps_dfb::calculate_single_daisy_start_location"]={}
   let details["ps_dfb::calculate_single_start_location"]={}
        let details["ps_dfb::calculate_single_start_location"]["-voltage_area_name"] = ""
        let details["ps_dfb::calculate_single_start_location"]["-switch_list"] = ""
        let details["ps_dfb::calculate_single_start_location"]["-start_direction"] = ""
   let details["ps_dfb::calculate_start_location"]={}
        let details["ps_dfb::calculate_start_location"]["-voltage_area_name"] = ""
        let details["ps_dfb::calculate_start_location"]["-switch_control_signal_daisy_chain0"] = ""
        let details["ps_dfb::calculate_start_location"]["-switch_list"] = ""
        let details["ps_dfb::calculate_start_location"]["-start_direction"] = ""
   let details["ps_dfb::create_power_switch_array_pattern_wa"]={}
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-power_switch"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-snap_to_site_row"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-orient"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-x_pitch"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-y_pitch"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-voltage_area"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-x_offset"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-y_offset"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-prefix"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-pattern"] = "()"
        let details["ps_dfb::create_power_switch_array_pattern_wa"]["-bbox"] = "(bbox to insert)"
   let details["ps_dfb::disconnect_switch_cell"]={}
   let details["ps_dfb::dont_touch_power_switch_nets"]={}
   let details["ps_dfb::find_select_signals"]={}
   let details["ps_dfb::get_chain_bbox"]={}
   let details["ps_dfb::get_nearby_switch_cells"]={}
   let details["ps_dfb::insert_ps_stitch_hfn"]={}
        let details["ps_dfb::insert_ps_stitch_hfn"]["-power_domain"] = "(power domain name to insert PS cells)"
        let details["ps_dfb::insert_ps_stitch_hfn"]["-native_snap_to_site_row"] = ""
   let details["ps_dfb::max_trans_report"]={}
   let details["ps_dfb::only_daisy_chain"]={}
   let details["ps_dfb::ps_connect_switches"]={}
   let details["ps_dfb::ps_select_daisy_chain_switches"]={}
   let details["ps_dfb::remove_switch_max_delay"]={}
   let details["ps_dfb::replace_fishbone_with_daisy"]={}
        let details["ps_dfb::replace_fishbone_with_daisy"]["-voltage_areas"] = ""
        let details["ps_dfb::replace_fishbone_with_daisy"]["-coords"] = "(coords)"
        let details["ps_dfb::replace_fishbone_with_daisy"]["-cells"] = "(cells)"
        let details["ps_dfb::replace_fishbone_with_daisy"]["-start_switch"] = ""
   let details["ps_dfb::report_long_switch_nets"]={}
        let details["ps_dfb::report_long_switch_nets"]["-only_voltage_area"] = ""
   let details["ps_dfb::report_switch_transitions"]={}
   let details["ps_dfb::set_switch_max_delay"]={}
   let details["ps_dfb::show_daisy_chain"]={}
        let details["ps_dfb::show_daisy_chain"]["-remove"] = "(Remove highlight)"
        let details["ps_dfb::show_daisy_chain"]["-domain"] = "(Power Domain to highlight - default all)"
   let details["ps_dfb::show_main_chain"]={}
        let details["ps_dfb::show_main_chain"]["-remove"] = "(Remove highlight)"
        let details["ps_dfb::show_main_chain"]["-domain"] = "(Power Domain to highlight - default all)"
   let details["ps_dfb::show_power_switch_chain"]={}
        let details["ps_dfb::show_power_switch_chain"]["-type"] = "(Chain type, either daisy or main.  Default is to show both)"
        let details["ps_dfb::show_power_switch_chain"]["-remove"] = "(Remove highlight)"
        let details["ps_dfb::show_power_switch_chain"]["-domain"] = "(Power Domain to highlight - default all)"
   let details["ps_dfb::split_daisy_chain"]={}
   let details["ps_dfb::stitching_daisy_fb"]={}
        let details["ps_dfb::stitching_daisy_fb"]["-only_voltage_area"] = ""
        let details["ps_dfb::stitching_daisy_fb"]["-search_box_diameter"] = ""
        let details["ps_dfb::stitching_daisy_fb"]["-no_rpts"] = "(Do not generate the reports default generated)"
   let details["ps_dfb::switch_cell_detail_reports"]={}
   let details["pvpd_utils::TclFindTheFullPath"]={}
   let details["pvpd_utils::load_lib"]={}
   let details["pwr::add_missing_via_at_va_edge"]={}
   let details["pwr::add_pg_in_polygon"]={}
        let details["pwr::add_pg_in_polygon"]["-layers"] = "(Layers to heal PG)"
        let details["pwr::add_pg_in_polygon"]["-polygon_list"] = "(List of polygons to heal)"
   let details["pwr::convert_pwr_shapes_to_terminals"]={}
        let details["pwr::convert_pwr_shapes_to_terminals"]["-layers"] = "(Layer name)"
   let details["pwr::get_power_layers"]={}
        let details["pwr::get_power_layers"]["-net_tag"] = "(power net tag. GND, PRIMARY or AON for default config, and custom power net for customized rails.)"
        let details["pwr::get_power_layers"]["-verbose"] = "(Print out the net and layer info, including customized rail)"
        let details["pwr::get_power_layers"]["-custom_only"] = "(Print out the net and layer info, including customized rail)"
   let details["pwr::remove_dangling_staple_pg"]={}
   let details["pwr::remove_pg_in_polygon"]={}
        let details["pwr::remove_pg_in_polygon"]["-layers"] = "(Layers to heal PG)"
        let details["pwr::remove_pg_in_polygon"]["-polygon_list"] = "(List of polygones to heal)"
   let details["pwr::remove_pg_terminals"]={}
   let details["pwr::remove_power_grid"]={}
        let details["pwr::remove_power_grid"]["-nets"] = "(Nets to remove)"
        let details["pwr::remove_power_grid"]["-layer"] = "(Remove power rails for specific layer)"
        let details["pwr::remove_power_grid"]["-dont_remove_terminal"] = ""
   let details["pwr::stdcell_hookup_via1"]={}
        let details["pwr::stdcell_hookup_via1"]["-m1_pitch"] = "(m1 track patch)"
        let details["pwr::stdcell_hookup_via1"]["-start_track"] = "(m1 starting track offset)"
        let details["pwr::stdcell_hookup_via1"]["-via_track_pitch"] = "(via1 pitch)"
        let details["pwr::stdcell_hookup_via1"]["-via_master"] = "(via1 master)"
        let details["pwr::stdcell_hookup_via1"]["-output"] = "(TCL output)"
   let details["pwr::write_power_grid"]={}
        let details["pwr::write_power_grid"]["-outfile"] = "(Output file. Default is G_OUTPUT_PATH/G_DESIGN_NAME_powergrid.tcl)"
   let details["pwr_hookup::convert_shape_file_to_icc2"]={}
   let details["pwr_hookup::create_stdcell_powerhookup"]={}
        let details["pwr_hookup::create_stdcell_powerhookup"]["-check_hookup_integrity"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-powerhookup_grid_count"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-powerhookup_empty_area"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-powerhookup_cells_area"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-powerhookup_all_segments"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-powerhookup_avoid_drv"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-via_master_overrides"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-allowed_via_master_overrides"] = ""
        let details["pwr_hookup::create_stdcell_powerhookup"]["-post_route_hookup"] = "(Post route hookup - look at route for drv avoidance)"
        let details["pwr_hookup::create_stdcell_powerhookup"]["-vcc_name"] = "(Do power hookup of the specified vcc net)"
        let details["pwr_hookup::create_stdcell_powerhookup"]["-vss_name"] = "(Do ground hookup of the specified vss net)"
        let details["pwr_hookup::create_stdcell_powerhookup"]["-within"] = "(Hookup incremental within defined area. Default is hookup the entire design)"
   let details["pwr_hookup::find_flexfill_pwr_hookup_options"]={}
        let details["pwr_hookup::find_flexfill_pwr_hookup_options"]["-optname_only"] = "(only return list of option names)"
   let details["pwr_hookup::get_first_gnd_rail"]={}
        let details["pwr_hookup::get_first_gnd_rail"]["-y_first_gnd"] = ""
        let details["pwr_hookup::get_first_gnd_rail"]["-y_gnd"] = ""
        let details["pwr_hookup::get_first_gnd_rail"]["-core_lly"] = ""
        let details["pwr_hookup::get_first_gnd_rail"]["-tile_name"] = ""
   let details["pwr_hookup::get_hookup_layer_vias_and_shapes"]={}
        let details["pwr_hookup::get_hookup_layer_vias_and_shapes"]["-shapes"] = ""
        let details["pwr_hookup::get_hookup_layer_vias_and_shapes"]["-vias"] = "(variable to store collection of vias)"
   let details["pwr_hookup::get_hookup_layers"]={}
   let details["pwr_hookup::get_process_name"]={}
   let details["pwr_hookup::get_pwr_gnd_regions"]={}
        let details["pwr_hookup::get_pwr_gnd_regions"]["-gnd_area"] = ""
        let details["pwr_hookup::get_pwr_gnd_regions"]["-pwr_area"] = ""
        let details["pwr_hookup::get_pwr_gnd_regions"]["-aon_area"] = ""
   let details["pwr_hookup::get_pwr_hookup_cell_patterns"]={}
   let details["pwr_hookup::get_pwr_hookup_process_settings"]={}
        let details["pwr_hookup::get_pwr_hookup_process_settings"]["-clear"] = "(clear stored process settings)"
        let details["pwr_hookup::get_pwr_hookup_process_settings"]["-no_via_query"] = "(don't resolve hookup via masters)"
   let details["pwr_hookup::get_pwr_hookup_ref_cell_info"]={}
        let details["pwr_hookup::get_pwr_hookup_ref_cell_info"]["-cell_ref_pattern"] = ""
        let details["pwr_hookup::get_pwr_hookup_ref_cell_info"]["-exclude_macros"] = ""
        let details["pwr_hookup::get_pwr_hookup_ref_cell_info"]["-possible_hookup_refs"] = ""
        let details["pwr_hookup::get_pwr_hookup_ref_cell_info"]["-strict_exclude_refs"] = ""
        let details["pwr_hookup::get_pwr_hookup_ref_cell_info"]["-within"] = "(limit to only look for possible refs in defined area)"
   let details["pwr_hookup::get_pwr_hookup_via_settings"]={}
   let details["pwr_hookup::hookup_convert_cell_wildcards"]={}
        let details["pwr_hookup::hookup_convert_cell_wildcards"]["-within"] = "(limit to only look for refs in defined area)"
   let details["pwr_hookup::modify_def_vias_section"]={}
        let details["pwr_hookup::modify_def_vias_section"]["-user_shape_file"] = ""
   let details["pwr_hookup::print_via_shape_summary"]={}
        let details["pwr_hookup::print_via_shape_summary"]["-remove"] = "(print messages to remove {default is to add})"
        let details["pwr_hookup::print_via_shape_summary"]["-shapes"] = "(collection of shapes)"
        let details["pwr_hookup::print_via_shape_summary"]["-vias"] = "(collection of vias)"
   let details["pwr_hookup::remove_stdcell_powerhookup"]={}
        let details["pwr_hookup::remove_stdcell_powerhookup"]["-net_names"] = "(Remove the given pwr/gnd connections. Default is '*')"
        let details["pwr_hookup::remove_stdcell_powerhookup"]["-within"] = "(Remove only within or intersecting the area. Default is entire design)"
   let details["pwr_hookup::set_hookup_via_type"]={}
        let details["pwr_hookup::set_hookup_via_type"]["-layer_name"] = "(layer name.  Overrides type)"
        let details["pwr_hookup::set_hookup_via_type"]["-type"] = "(Type to set.  Default=1)"
   let details["pwr_hookup::tcl_to_icv_list"]={}
   let details["q::get_cell_coordinates"]={}
   let details["q::get_driver"]={}
   let details["q::get_drivers_of_net"]={}
   let details["q::get_heml"]={}
   let details["q::get_hier"]={}
   let details["q::get_highest_layer"]={}
        let details["q::get_highest_layer"]["-attribute"] = "(Block Details attribute that is being queried.: "
        let details["q::get_highest_layer"]["-template"] = "(Cell tamplate)"
   let details["q::get_hpml"]={}
   let details["q::get_hsml"]={}
   let details["q::get_logic_between_pins"]={}
        let details["q::get_logic_between_pins"]["-start"] = "(Startpoint pins)"
        let details["q::get_logic_between_pins"]["-end"] = "(Endpoint pins)"
        let details["q::get_logic_between_pins"]["-add_start"] = "(Add startpoint cell to return collection)"
        let details["q::get_logic_between_pins"]["-add_end"] = "(Add startpoint cell to return collection)"
   let details["q::get_macros"]={}
        let details["q::get_macros"]["-filter"] = "(valid get_cells -hierarchical filter expression. This filter is added on top of above G vars )"
        let details["q::get_macros"]["-of_objects"] = "(valid get_cells -hierarchical -of_objects expression. This switch is added on top of all the above G var filters)"
   let details["q::get_next_size"]={}
        let details["q::get_next_size"]["-allow_dont_use"] = "(consider the dont_use cells too)"
        let details["q::get_next_size"]["-levels"] = "(Number of upsize levels- default 1)"
   let details["q::get_pg_strategy_via_rules"]={}
   let details["q::get_physical_context_power_domains"]={}
   let details["q::get_power_domain_info"]={}
        let details["q::get_power_domain_info"]["-domain_name"] = ""
        let details["q::get_power_domain_info"]["-no_gas_stations"] = "(Define power domain name)"
   let details["q::get_prev_size"]={}
        let details["q::get_prev_size"]["-allow_dont_use"] = "(consider the dont_use cells too)"
        let details["q::get_prev_size"]["-levels"] = "(Number of upsize levels- default 1)"
   let details["q::get_receiver"]={}
   let details["q::get_receivers_of_net"]={}
   let details["q::get_techfile_field_hash"]={}
   let details["q::get_techfile_info"]={}
        let details["q::get_techfile_info"]["-tech_dump"] = "(variable to store unparsed techfile dump)"
   let details["q::get_tf_max_layers"]={}
   let details["q::get_visa_xlms"]={}
   let details["q::get_voltage_area_of_cell_location"]={}
        let details["q::get_voltage_area_of_cell_location"]["-cell"] = "(Specify the cell to check)"
        let details["q::get_voltage_area_of_cell_location"]["-smallest_va"] = "(If specified returns the smallest va, else returns all VAs cell location falls into)"
   let details["q::is_buffer_inst"]={}
   let details["q::is_buffer_lib_cell"]={}
   let details["q::is_covered_by_blocks"]={}
   let details["q::is_inverter_inst"]={}
   let details["q::is_nested_va"]={}
        let details["q::is_nested_va"]["-domain_name"] = "(domain name)"
   let details["q::is_vertical_layer"]={}
        let details["q::is_vertical_layer"]["-layer"] = "(Layer name)"
   let details["q::strip_techfile_comments"]={}
   let details["rdt_tim_constr_ns::check_save_constraints_log_needs"]={}
   let details["rdt_tim_constr_ns::env4rdt_timing_constraints"]={}
   let details["rdt_tim_constr_ns::get_constraints_ordered_file"]={}
   let details["rdt_tim_constr_ns::no_mcmm_timing_constraints"]={}
   let details["rdt_tim_constr_ns::rdt_pv_timing_constraints"]={}
   let details["rdt_tim_constr_ns::source_constraints_file"]={}
   let details["rdt_xml_2_mcmm_config_ns::get_field"]={}
   let details["rdt_xml_2_mcmm_config_ns::get_unique_search_path"]={}
   let details["reconnectPswNS::buildSwIndexTables"]={}
   let details["reconnectPswNS::buildSwsConnectionGroup"]={}
   let details["reconnectPswNS::calculateCellDistanceToTrunkCell"]={}
   let details["reconnectPswNS::changeCellConnsForMergedGroup"]={}
   let details["reconnectPswNS::checkSwCellHasDiver"]={}
   let details["reconnectPswNS::compareCandidateConns"]={}
   let details["reconnectPswNS::comparePswConnX"]={}
   let details["reconnectPswNS::comparePswConnY"]={}
   let details["reconnectPswNS::connectGroups"]={}
   let details["reconnectPswNS::disconnectPswConnection"]={}
   let details["reconnectPswNS::disconnectPswsAbnormalYConnection"]={}
   let details["reconnectPswNS::findCandidateConnectionWithMinimalDistanceToTrunkCell"]={}
   let details["reconnectPswNS::findTargetConnectionsInGroups"]={}
   let details["reconnectPswNS::findTrunkCells"]={}
   let details["reconnectPswNS::getCellBBox"]={}
   let details["reconnectPswNS::getCellLoadPinCells"]={}
   let details["reconnectPswNS::getConnectionNormalDistance"]={}
   let details["reconnectPswNS::getDriverCell"]={}
   let details["reconnectPswNS::getDriverCellFromGroupOfCells"]={}
   let details["reconnectPswNS::getLoadCellPins"]={}
   let details["reconnectPswNS::getLoadCells"]={}
   let details["reconnectPswNS::getNearestCoordinate"]={}
   let details["reconnectPswNS::getSwCellHasNoDriverIfHave"]={}
   let details["reconnectPswNS::getTrunkCellDirection"]={}
   let details["reconnectPswNS::getTwoCellDistance"]={}
   let details["reconnectPswNS::handlingOutlierGroups"]={}
   let details["reconnectPswNS::mergeTwogroupsForConnectionAndChangeTargetGroupConnIfNecessary"]={}
   let details["reconnectPswNS::traversePswsConnections"]={}
   let details["refresh::dump_for_block_refresh"]={}
   let details["refresh::dump_refresh"]={}
        let details["refresh::dump_refresh"]["-blocks"] = "(Dump out refresh collateral only for this list of blocks (template name). DEFAULT: All MLPH blocks of current design)"
        let details["refresh::dump_refresh"]["-objects"] = "(Dump out only these objects (legal objects: terminals, shapes, vias, blockages, pg_regions, voltage_areas).  DEFAULT: all)"
        let details["refresh::dump_refresh"]["-filter"] = "(Filter collection with 'expression'.  Applies only to refresh collateral.)"
        let details["refresh::dump_refresh"]["-collateral_type"] = ""
   let details["refresh::dump_rptr_connectivity"]={}
        let details["refresh::dump_rptr_connectivity"]["-cells"] = "(Repeater/inverter cells only.)"
        let details["refresh::dump_rptr_connectivity"]["-output_file"] = "(Output file name. DEFAULT: ./${block}.refresh.rptr_connectivity.tcl)"
   let details["refresh::hier_sort_bottom_up"]={}
        let details["refresh::hier_sort_bottom_up"]["-cells"] = "(Collection of cells.)"
   let details["refresh::translate_eco_file"]={}
   let details["refresh::write_eco_files"]={}
        let details["refresh::write_eco_files"]["-pre_golden_lib"] = ""
        let details["refresh::write_eco_files"]["-golden_block"] = ""
        let details["refresh::write_eco_files"]["-golden_lib"] = ""
        let details["refresh::write_eco_files"]["-outdir"] = "(Output directory name.)"
   let details["rolluplib::cleanup"]={}
   let details["rolluplib::copy"]={}
   let details["rolluplib::gen_references"]={}
   let details["rolluplib::main"]={}
        let details["rolluplib::main"]["-source_lib"] = "(source library name)"
        let details["rolluplib::main"]["-rollup_lib"] = "(rollup library name)"
        let details["rolluplib::main"]["-rollup_block"] = ""
   let details["rolluplib::run_checks"]={}
   let details["route::get_net_wirelength"]={}
        let details["route::get_net_wirelength"]["-net"] = "(Net info)"
   let details["route::get_routing_layers"]={}
        let details["route::get_routing_layers"]["-no_metal"] = "(only returns vias)"
        let details["route::get_routing_layers"]["-no_via"] = "(only returns metals)"
        let details["route::get_routing_layers"]["-above_layer"] = "(returns all routing layers above the mentioned layer)"
        let details["route::get_routing_layers"]["-below_layer"] = "(returns all routing layers below the mentioned layer)"
        let details["route::get_routing_layers"]["-next_layer"] = "(returns the next default layer above the specified layer)"
        let details["route::get_routing_layers"]["-prev_layer"] = "(returns the next default layer below the specified layer)"
   let details["route::reroute_shorts"]={}
        let details["route::reroute_shorts"]["-shorts_thresold"] = ""
        let details["route::reroute_shorts"]["-loop"] = "(Number of iterations of Zroute. Default is from routing command)"
        let details["route::reroute_shorts"]["-remove_all"] = "(Remove all the routes. Default is to remove segment within error bbox)"
        let details["route::reroute_shorts"]["-remove_constraints"] = "(Remove layer constraints. Default is to keep the layer constrails)"
   let details["route::set_via_color"]={}
        let details["route::set_via_color"]["-via_layer"] = "(Color the vias)"
        let details["route::set_via_color"]["-via_master"] = ""
        let details["route::set_via_color"]["-power_net_only"] = "(Power net type only)"
        let details["route::set_via_color"]["-color_value"] = "(Color of the value. Default is 1)"
   let details["route::set_via_ladder_rule"]={}
        let details["route::set_via_ladder_rule"]["-config_file"] = ""
   let details["rpt::check_qor_report"]={}
        let details["rpt::check_qor_report"]["-file"] = "(Qor report)"
   let details["rpt::clock_information"]={}
        let details["rpt::clock_information"]["-tag"] = "(Tag)"
        let details["rpt::clock_information"]["-clknets"] = "(Clock nets to report)"
   let details["rpt::create_run_summary"]={}
        let details["rpt::create_run_summary"]["-stage_tag"] = ""
        let details["rpt::create_run_summary"]["-summary_file"] = "(Summary output file)"
        let details["rpt::create_run_summary"]["-append"] = "(Append new info to file)"
        let details["rpt::create_run_summary"]["-report_dir"] = ""
   let details["rpt::get_total_z"]={}
   let details["rpt::power_domains"]={}
        let details["rpt::power_domains"]["-file"] = "(name of report file)"
   let details["rpt::print_timing_path_summary"]={}
   let details["rpt::pvt"]={}
        let details["rpt::pvt"]["-file"] = "(name of report file)"
        let details["rpt::pvt"]["-corner"] = "(which corner to dump out report)"
   let details["rpt::qor"]={}
        let details["rpt::qor"]["-file"] = "(name of report file)"
        let details["rpt::qor"]["-corner"] = "(which corner to dump out report)"
   let details["rpt::qor_summary"]={}
        let details["rpt::qor_summary"]["-file"] = "(name of report file)"
   let details["rpt::report_custom_powergrid_info"]={}
        let details["rpt::report_custom_powergrid_info"]["-outfile"] = "(Path to the file)"
   let details["rpt::route_info_of_paths"]={}
        let details["rpt::route_info_of_paths"]["-outfile"] = "(name of report file)"
        let details["rpt::route_info_of_paths"]["-pathlist"] = "(name of start end point list file)"
        let details["rpt::route_info_of_paths"]["-mode"] = "(which mode to dump out timing for)"
        let details["rpt::route_info_of_paths"]["-corner"] = "(which corner to dump out timing for)"
        let details["rpt::route_info_of_paths"]["-slack"] = "(Only  those paths with a slack less than)"
        let details["rpt::route_info_of_paths"]["-max_path"] = "(Number of paths to report)"
        let details["rpt::route_info_of_paths"]["-nworst"] = "(Number of paths to report per endpoint)"
        let details["rpt::route_info_of_paths"]["-llist"] = "(list of layers to report)"
        let details["rpt::route_info_of_paths"]["-vlist"] = "(list of vias to report)"
        let details["rpt::route_info_of_paths"]["-nand_gate_area"] = "(Nand gate area)"
   let details["rpt::route_info_one_path"]={}
        let details["rpt::route_info_one_path"]["-mode"] = "(which mode to dump out timing for)"
        let details["rpt::route_info_one_path"]["-corner"] = "(which corner to dump out timing for)"
        let details["rpt::route_info_one_path"]["-spoint"] = "(Start point of the timing path)"
        let details["rpt::route_info_one_path"]["-epoint"] = "(End point of the timing path)"
        let details["rpt::route_info_one_path"]["-nand_gate_area"] = "(Nand gate area)"
        let details["rpt::route_info_one_path"]["-llist"] = "(list of layers to report)"
        let details["rpt::route_info_one_path"]["-vlist"] = "(list of vias to report)"
   let details["rpt::supply_nets"]={}
        let details["rpt::supply_nets"]["-file"] = "(name of report file)"
   let details["rpt::timing"]={}
        let details["rpt::timing"]["-file"] = "(name of report file)"
        let details["rpt::timing"]["-mode"] = "(which mode to dump out timing for)"
        let details["rpt::timing"]["-corner"] = "(which corner to dump out timing for)"
   let details["rpt::zero_interconnect_timing"]={}
        let details["rpt::zero_interconnect_timing"]["-tag"] = "(Optional tag name for the reports; to be appended in the name)"
   let details["ser_utils::filter_seq_by_avf"]={}
   let details["ser_utils::filter_vecseq_fromser"]={}
   let details["ser_utils::get_actual_reference"]={}
   let details["ser_utils::get_next_cell_size_up"]={}
   let details["ser_utils::get_ser_lib_cells"]={}
   let details["ser_utils::insert_rcc"]={}
   let details["ser_utils::insert_rts"]={}
   let details["ser_utils::insert_seut"]={}
   let details["ser_utils::report_registers"]={}
   let details["ser_utils::report_ser_insertion_rate"]={}
   let details["ser_utils::ser_assign_avf_values"]={}
   let details["ser_utils::ser_assign_switching_af"]={}
   let details["ser_utils::ser_assign_switching_af_input"]={}
   let details["ser_utils::ser_set_reference_latch"]={}
   let details["ser_utils::update_vec_scripts"]={}
   let details["snpsBusyCursorSkipList::init"]={}
   let details["snpsCalculateWindowGeometry::topLevel"]={}
   let details["snpsCalculateWindowGeometry::topLevelLayout"]={}
   let details["snpsCommandForm::script_editor_create"]={}
   let details["snpsCommandForm::script_editor_exist"]={}
   let details["snpsCommandForm::script_editor_group"]={}
   let details["snpsCommandForm::script_editor_hide"]={}
   let details["snpsCommandForm::script_editor_should_turn_on"]={}
   let details["snpsCommandForm::script_editor_show"]={}
   let details["snpsCommandForm::script_editor_toggle_on_off"]={}
   let details["snpsCommandForm::set_script_editor_exist"]={}
   let details["snpsCommandForm::set_script_editor_group"]={}
   let details["snpsCurrInst::curInstCmdExists"]={}
   let details["snpsCurrInst::getCurrentInstance"]={}
   let details["snpsCurrInst::restoreCurrentInstance"]={}
   let details["snpsCurrInst::saveCurrentInstance"]={}
   let details["snpsCurrInst::saveCurrentInstanceAndSetCurrentInstanceToTop"]={}
   let details["snpsCurrInst::setCurrentInstance"]={}
   let details["snpsCurrInst::setCurrentInstanceToTop"]={}
   let details["snpsDocBrowser::getAllManPageList"]={}
   let details["snpsDocBrowser::getAproposAsHtml"]={}
   let details["snpsDocBrowser::getErrorPage"]={}
   let details["snpsDocBrowser::getIndexFromAproposOutputFile"]={}
   let details["snpsDocBrowser::getIndexPageForCommandList"]={}
   let details["snpsDocBrowser::getManIndex"]={}
   let details["snpsDocBrowser::getManMessageIndex"]={}
   let details["snpsDocBrowser::getManPageAsHtml"]={}
   let details["snpsDocBrowser::getManPageAsHtml_builtinMan"]={}
   let details["snpsDocBrowser::getManPageAsHtml_unixMan"]={}
   let details["snpsDocBrowser::getManPageHome"]={}
   let details["snpsDocBrowser::getManPageIndex"]={}
   let details["snpsDocBrowser::getManPageList"]={}
   let details["snpsDocBrowser::getManPageListFromDirectory"]={}
   let details["snpsDocBrowser::getManPath"]={}
   let details["snpsDocBrowser::getPerlCmd"]={}
   let details["snpsDocBrowser::handleEmptyPage"]={}
   let details["snpsDocBrowser::listDir"]={}
   let details["snpsDocBrowser::new"]={}
   let details["snpsDocBrowser::quote_url"]={}
   let details["snpsDocBrowser::showManViewerDialog"]={}
   let details["snpsDocBrowser::showUrlInDialog"]={}
   let details["snpsDocBrowser::text2html"]={}
   let details["snpsGuiMenuEnable::current_is_schematic"]={}
   let details["snpsGuiMenuEnable::enable_if_regular_path_schematic"]={}
   let details["snpsGuiMenuEnable::getListViewTypes"]={}
   let details["snpsGuiMenuEnable::has_current_design"]={}
   let details["snpsGuiMenuEnable::has_designs"]={}
   let details["snpsGuiMenuEnable::has_hier_cells_selected"]={}
   let details["snpsGuiSelect::can_get_shapes_of_selected"]={}
   let details["snpsGuiSelect::get_via_defs_of_selected"]={}
   let details["snpsGuiSelect::selectHighlighted"]={}
   let details["snpsMRUPalette::add_mru_hot_keys"]={}
   let details["snpsMRUPalette::show_mru_favorites"]={}
   let details["snpsMRUPalette::show_mru_recent"]={}
   let details["snpsPaletteGroup::addHVPages"]={}
   let details["snpsPaletteGroup::createConsole"]={}
   let details["snpsPaletteGroup::createPalette"]={}
   let details["snpsPaletteGroup::createPaletteGroupPalettes"]={}
   let details["snpsPaletteGroup::createScriptEditor"]={}
   let details["snpsPaletteGroup::debug"]={}
   let details["snpsPaletteGroup::debugVars"]={}
   let details["snpsPaletteGroup::decodeEncodedPage"]={}
   let details["snpsPaletteGroup::filterPages"]={}
   let details["snpsPaletteGroup::getIndexedPaletteValue"]={}
   let details["snpsPaletteGroup::initGroups"]={}
   let details["snpsPaletteGroup::initPageHidden"]={}
   let details["snpsPaletteGroup::isPageInOrder"]={}
   let details["snpsPaletteGroup::isValidPage"]={}
   let details["snpsPaletteGroup::matchPageValues"]={}
   let details["snpsPaletteGroup::setCurrentPage"]={}
   let details["snpsPaletteGroup::setExpandedAndCurrent"]={}
   let details["snpsPaletteGroup::setExpandedAndCurrent1"]={}
   let details["snpsPaletteGroup::stringToInt"]={}
   let details["snpsPaletteGroup::use_palette_group"]={}
   let details["snpsQoRSnapshot::appendOptionBool"]={}
   let details["snpsQoRSnapshot::appendOptionList"]={}
   let details["snpsQoRSnapshot::collectPaths"]={}
   let details["snpsQoRSnapshot::commandHasOption"]={}
   let details["snpsQoRSnapshot::commandNeedsInputValue"]={}
   let details["snpsQoRSnapshot::comparePath"]={}
   let details["snpsQoRSnapshot::createException"]={}
   let details["snpsQoRSnapshot::doModal"]={}
   let details["snpsQoRSnapshot::getFileName"]={}
   let details["snpsQoRSnapshot::jumpToFileLine"]={}
   let details["snpsQoRSnapshot::reEscape"]={}
   let details["snpsQoRSnapshot::regScrollPos"]={}
   let details["snpsQoRSnapshot::resetModal"]={}
   let details["snpsQoRSnapshot::showPath"]={}
   let details["snpsQoRSnapshot::showResults"]={}
   let details["snpsQoRSnapshot::toHtml"]={}
   let details["snpsQoRSnapshot::update3rdHtml"]={}
   let details["snpsQoRSnapshot::updateHtml"]={}
   let details["snpsReadDRC::_breakPolygon"]={}
   let details["snpsReadDRC::_generateDRCTempFileName"]={}
   let details["snpsReadDRC::_renameErrorType"]={}
   let details["snpsTiledView::create_window"]={}
   let details["snpsTiledView::init_window"]={}
   let details["snpsTiledView::post_create_window"]={}
   let details["snpsTiledView::pre_create_window"]={}
   let details["snpsTiledView::use_tiled_view"]={}
   let details["snpsUtils::absolute_path"]={}
   let details["snpsUtils::strip_filename"]={}
   let details["snpsWndFramework::addStandardWindowMenu"]={}
   let details["snpsWndFramework::add_default_view_caption_menu"]={}
   let details["snpsWndFramework::add_next_previous_window_menus"]={}
   let details["snpsWndFramework::add_window_menu_cascade_views"]={}
   let details["snpsWndFramework::add_window_menu_close_all_views"]={}
   let details["snpsWndFramework::add_window_menu_close_all_windows"]={}
   let details["snpsWndFramework::add_window_menu_close_view"]={}
   let details["snpsWndFramework::add_window_menu_close_window"]={}
   let details["snpsWndFramework::add_window_menu_hide_view"]={}
   let details["snpsWndFramework::add_window_menu_maximize_views"]={}
   let details["snpsWndFramework::add_window_menu_next_view"]={}
   let details["snpsWndFramework::add_window_menu_next_window"]={}
   let details["snpsWndFramework::add_window_menu_previous_view"]={}
   let details["snpsWndFramework::add_window_menu_previous_window"]={}
   let details["snpsWndFramework::add_window_menu_tile_views"]={}
   let details["snpsWndFramework::add_window_menu_view_ops_heading"]={}
   let details["snpsWndFramework::add_window_menu_window_ops_heading"]={}
   let details["snpsWndFramework::checkEnableSwitchView"]={}
   let details["snpsWndFramework::close_current_view"]={}
   let details["snpsWndFramework::console_create"]={}
   let details["snpsWndFramework::console_exist"]={}
   let details["snpsWndFramework::console_group"]={}
   let details["snpsWndFramework::console_hide"]={}
   let details["snpsWndFramework::console_should_turn_on"]={}
   let details["snpsWndFramework::console_show"]={}
   let details["snpsWndFramework::console_toggle_on_off"]={}
   let details["snpsWndFramework::create_action"]={}
   let details["snpsWndFramework::early_start_callback"]={}
   let details["snpsWndFramework::get_toplevel_id"]={}
   let details["snpsWndFramework::installDefaultViewCaptionMenu"]={}
   let details["snpsWndFramework::late_start_callback"]={}
   let details["snpsWndFramework::maximize_current_view"]={}
   let details["snpsWndFramework::minimize_current_view"]={}
   let details["snpsWndFramework::normalize_menu_root"]={}
   let details["snpsWndFramework::query_enable_maximize_current_view"]={}
   let details["snpsWndFramework::query_enable_minimize_current_view"]={}
   let details["snpsWndFramework::query_enable_restore_current_view"]={}
   let details["snpsWndFramework::restore_current_view"]={}
   let details["snpsWndFramework::set_console_exist"]={}
   let details["snpsWndFramework::set_console_group"]={}
   let details["snpsWndFramework::tqePaletteButtonPress"]={}
   let details["snpsWndFramework::tqePaletteFocusIn"]={}
   let details["snpsWndFramework::view_is_docked"]={}
   let details["snpsWndFramework::x_cascade_tile_views"]={}
   let details["snpsWndFramework::x_dock_undock_view"]={}
   let details["tcl::CopyDirectory"]={}
   let details["tcl::HistAdd"]={}
   let details["tcl::HistChange"]={}
   let details["tcl::HistClear"]={}
   let details["tcl::HistEvent"]={}
   let details["tcl::HistIndex"]={}
   let details["tcl::HistInfo"]={}
   let details["tcl::HistKeep"]={}
   let details["tcl::HistNextID"]={}
   let details["tcl::HistRedo"]={}
   let details["tcl::Lassign"]={}
   let details["tcl::Lempty"]={}
   let details["tcl::Lget"]={}
   let details["tcl::Lvarincr"]={}
   let details["tcl::Lvarincr1"]={}
   let details["tcl::Lvarpop"]={}
   let details["tcl::Lvarpop1"]={}
   let details["tcl::Lvarset"]={}
   let details["tcl::Lvarset1"]={}
   let details["tcl::Lvarset1nc"]={}
   let details["tcl::MacOSXPkgUnknown"]={}
   let details["tcl::OptAmbigous"]={}
   let details["tcl::OptBadValue"]={}
   let details["tcl::OptCheckType"]={}
   let details["tcl::OptCreateTestProc"]={}
   let details["tcl::OptCurAddr"]={}
   let details["tcl::OptCurDesc"]={}
   let details["tcl::OptCurDescFinal"]={}
   let details["tcl::OptCurSetValue"]={}
   let details["tcl::OptCurState"]={}
   let details["tcl::OptCurrentArg"]={}
   let details["tcl::OptDefaultValue"]={}
   let details["tcl::OptDoAll"]={}
   let details["tcl::OptDoOne"]={}
   let details["tcl::OptError"]={}
   let details["tcl::OptFlagUsage"]={}
   let details["tcl::OptGetPrgCounter"]={}
   let details["tcl::OptGuessType"]={}
   let details["tcl::OptHasBeenSet"]={}
   let details["tcl::OptHelp"]={}
   let details["tcl::OptHits"]={}
   let details["tcl::OptInstr"]={}
   let details["tcl::OptIsCounter"]={}
   let details["tcl::OptIsFlag"]={}
   let details["tcl::OptIsOpt"]={}
   let details["tcl::OptIsPrg"]={}
   let details["tcl::OptKeyDelete"]={}
   let details["tcl::OptKeyError"]={}
   let details["tcl::OptKeyGetDesc"]={}
   let details["tcl::OptKeyParse"]={}
   let details["tcl::OptKeyRegister"]={}
   let details["tcl::OptLengths"]={}
   let details["tcl::OptMissingValue"]={}
   let details["tcl::OptName"]={}
   let details["tcl::OptNeedValue"]={}
   let details["tcl::OptNewInst"]={}
   let details["tcl::OptNextArg"]={}
   let details["tcl::OptNextDesc"]={}
   let details["tcl::OptNormalizeOne"]={}
   let details["tcl::OptOptUsage"]={}
   let details["tcl::OptParamType"]={}
   let details["tcl::OptParse"]={}
   let details["tcl::OptProc"]={}
   let details["tcl::OptProcArgGiven"]={}
   let details["tcl::OptSelection"]={}
   let details["tcl::OptSetPrgCounter"]={}
   let details["tcl::OptState"]={}
   let details["tcl::OptTooManyArgs"]={}
   let details["tcl::OptTree"]={}
   let details["tcl::OptTreeVars"]={}
   let details["tcl::OptType"]={}
   let details["tcl::OptTypeArgs"]={}
   let details["tcl::OptValue"]={}
   let details["tcl::OptVarName"]={}
   let details["tcl::SetMax"]={}
   let details["tcl::SetMin"]={}
   let details["tech::get_techfile_info"]={}
        let details["tech::get_techfile_info"]["-type"] = "(Type of info [Technology, Color, Tile, Layer, LayerDataType, ContactCode])"
        let details["tech::get_techfile_info"]["-layer"] = "(Layer (or ContactCode, or whatever makes sense for the specified type))"
   let details["tech::get_tf_block"]={}
   let details["tech::read_techfile_info"]={}
        let details["tech::read_techfile_info"]["-techfile"] = "(Specify techfile to read (default dump tf from library))"
   let details["tm_custom_scripts::copy_shapes"]={}
   let details["tm_custom_scripts::find_nets_by_mouse_pointer"]={}
   let details["tm_custom_scripts::generate_trim_table"]={}
   let details["tm_custom_scripts::get_trim_row_col_pitch"]={}
   let details["tm_custom_scripts::insert_tv0"]={}
        let details["tm_custom_scripts::insert_tv0"]["-nets"] = "(Collection of nets, for multiple nets use comma as separator)"
        let details["tm_custom_scripts::insert_tv0"]["-within"] = "(Inserts via within mentioned bbox)"
        let details["tm_custom_scripts::insert_tv0"]["-via_type"] = "(VIA TYPE, default is tv0A)"
        let details["tm_custom_scripts::insert_tv0"]["-force"] = "(Deletes existing TV0s on specified nets or all nets, boolean argument)"
        let details["tm_custom_scripts::insert_tv0"]["-trim"] = "(places trimed vias from defined list, boolean argument)"
        let details["tm_custom_scripts::insert_tv0"]["-trimfile"] = "(user enter trim value; if not passed takes default trim values)"
   let details["tm_custom_scripts::is_boundary_completely_inside"]={}
   let details["tm_custom_scripts::parse_trim_table"]={}
   let details["tm_custom_scripts::paste_shapes"]={}
   let details["tm_custom_scripts::rename_shapes"]={}
        let details["tm_custom_scripts::rename_shapes"]["-net"] = "(Renaming net name)"
   let details["tmtd::attach_terminal_attributes"]={}
   let details["tmtd::bbox_get_xh"]={}
   let details["tmtd::bbox_get_xl"]={}
   let details["tmtd::bbox_get_yh"]={}
   let details["tmtd::bbox_get_yl"]={}
   let details["tmtd::boundary2bbox"]={}
   let details["tmtd::change_ndm_to_design_view"]={}
        let details["tmtd::change_ndm_to_design_view"]["-ndm_ref_name"] = "(ndm reference name)"
        let details["tmtd::change_ndm_to_design_view"]["-create"] = "(creates a design view from ndm )"
   let details["tmtd::check_bu_collaterals"]={}
        let details["tmtd::check_bu_collaterals"]["-repair"] = "(stiches missing connectivity in current design)"
        let details["tmtd::check_bu_collaterals"]["-create_terminal"] = "(create terminals from the child block in current design)"
   let details["tmtd::check_for_tm_delete"]={}
   let details["tmtd::check_inputs"]={}
   let details["tmtd::check_obj_outside_boundary"]={}
   let details["tmtd::check_object"]={}
   let details["tmtd::cleanup_old_collaterals"]={}
   let details["tmtd::compare_oas_or_gds"]={}
   let details["tmtd::convert_tm1_terminals_into_c4bump"]={}
   let details["tmtd::convert_tms_blockages_to_shape"]={}
   let details["tmtd::create_blockage_via"]={}
   let details["tmtd::create_def"]={}
        let details["tmtd::create_def"]["-block"] = "(Def block name)"
        let details["tmtd::create_def"]["-tcl_file"] = "(tcl file to be sourced)"
        let details["tmtd::create_def"]["-def_file"] = "(output def file)"
        let details["tmtd::create_def"]["-interface_nets"] = "(ports of the block)"
        let details["tmtd::create_def"]["-noports"] = "(No ports in DEF only shapes)"
   let details["tmtd::create_ndm_block"]={}
   let details["tmtd::delete_older_shapes"]={}
        let details["tmtd::delete_older_shapes"]["-cellname"] = "(Deletes shapes from this cell)"
        let details["tmtd::delete_older_shapes"]["-current_block_name"] = "(current block name)"
        let details["tmtd::delete_older_shapes"]["-change_working_design"] = ""
        let details["tmtd::delete_older_shapes"]["-only_ports"] = "(Deletes only interface net objects)"
        let details["tmtd::delete_older_shapes"]["-outside_terminals"] = "(Deletes only outside terminals)"
   let details["tmtd::filter_objects"]={}
   let details["tmtd::find_child_pin_name"]={}
   let details["tmtd::find_new_bbox"]={}
   let details["tmtd::find_other_tm1_or_c4_shapes_connected"]={}
   let details["tmtd::find_via_overhanged_shapes"]={}
   let details["tmtd::generate_object_owner"]={}
   let details["tmtd::generate_td_collateral_for_block"]={}
   let details["tmtd::generate_td_collaterals"]={}
   let details["tmtd::get_TopMetals_fromChildblocks"]={}
   let details["tmtd::get_edge_boundary"]={}
   let details["tmtd::get_ndm_info"]={}
   let details["tmtd::handle_encroached_straddling_objects"]={}
   let details["tmtd::interface_tm_delete"]={}
   let details["tmtd::lempty"]={}
   let details["tmtd::lmax"]={}
   let details["tmtd::lmin"]={}
   let details["tmtd::modify_bbox"]={}
   let details["tmtd::poly_2_bbox"]={}
   let details["tmtd::popup_block"]={}
   let details["tmtd::print_process_variables"]={}
   let details["tmtd::process_internal_nets"]={}
        let details["tmtd::process_internal_nets"]["-shapes"] = "(Collection of shapes/vias; this will override -nets option)"
        let details["tmtd::process_internal_nets"]["-nets"] = "(Collection of nets)"
        let details["tmtd::process_internal_nets"]["-delete_blockage"] = "(Delete processed blockages,adds delete blockage attribute)"
        let details["tmtd::process_internal_nets"]["-delete_obj"] = "(Delete shapes after conerting into blockages)"
        let details["tmtd::process_internal_nets"]["-only_shape"] = "(Process only shapes for the given nets)"
        let details["tmtd::process_internal_nets"]["-only_via"] = "(Process only vias for the given nets)"
        let details["tmtd::process_internal_nets"]["-current_block_name"] = "(This is needed to attach blockage origin)"
   let details["tmtd::process_owner_attribute"]={}
        let details["tmtd::process_owner_attribute"]["-current_block_name"] = "(current block name)"
        let details["tmtd::process_owner_attribute"]["-objects"] = "(Processing objects)"
        let details["tmtd::process_owner_attribute"]["-remove"] = "(Deletes current_block_name attribute)"
        let details["tmtd::process_owner_attribute"]["-force"] = "(Forces attribute name to be current_block_name)"
   let details["tmtd::process_shapes_from_frame"]={}
   let details["tmtd::process_straddling_objs"]={}
   let details["tmtd::rect_2_bbox"]={}
   let details["tmtd::separate_pin_with_non_pin"]={}
   let details["tmtd::source_bu_collateral"]={}
   let details["tmtd::source_tm_collateral"]={}
   let details["tmtd::tm_collateral_diff"]={}
        let details["tmtd::tm_collateral_diff"]["-ref_block"] = "(reference block name)"
        let details["tmtd::tm_collateral_diff"]["-ref_lib"] = "(reference lib name)"
        let details["tmtd::tm_collateral_diff"]["-ref_collateral"] = "(reference collateral)"
        let details["tmtd::tm_collateral_diff"]["-compare_collateral"] = "(compare collateral)"
        let details["tmtd::tm_collateral_diff"]["-ref_coll_format"] = "(Reference collateral format; default is tcl)"
        let details["tmtd::tm_collateral_diff"]["-compare_coll_format"] = ""
   let details["tmtd::tm_consume_td_tm_file"]={}
        let details["tmtd::tm_consume_td_tm_file"]["-block"] = "(block name)"
        let details["tmtd::tm_consume_td_tm_file"]["-lib"] = "(lib name)"
        let details["tmtd::tm_consume_td_tm_file"]["-td_tm_collateral"] = "(top-down tm collateral)"
   let details["tmtd::tm_validate_bu_with_original"]={}
        let details["tmtd::tm_validate_bu_with_original"]["-ref_block"] = "(reference block name)"
        let details["tmtd::tm_validate_bu_with_original"]["-ref_lib"] = "(reference lib name)"
        let details["tmtd::tm_validate_bu_with_original"]["-bu_collateral"] = "(reference collateral)"
        let details["tmtd::tm_validate_bu_with_original"]["-oas"] = "(input format, default is gds)"
        let details["tmtd::tm_validate_bu_with_original"]["-bu_file_format"] = "(bottom_up file format, default is tcl)"
   let details["tmtd::tms_write_gds"]={}
   let details["tmtd::tms_write_oasis"]={}
   let details["tmtd::transform_objects_parent_2_child"]={}
        let details["tmtd::transform_objects_parent_2_child"]["-object"] = "(object)"
        let details["tmtd::transform_objects_parent_2_child"]["-child_points"] = "(child co-ordinates)"
        let details["tmtd::transform_objects_parent_2_child"]["-child_orientation"] = ""
   let details["tmtd::transform_points_child_2_parent"]={}
        let details["tmtd::transform_points_child_2_parent"]["-from_points"] = "(from child points)"
        let details["tmtd::transform_points_child_2_parent"]["-child_origin"] = ""
        let details["tmtd::transform_points_child_2_parent"]["-child_orientation"] = ""
   let details["tmtd::transform_points_parent_2_child"]={}
        let details["tmtd::transform_points_parent_2_child"]["-from_points"] = "(from parent points)"
        let details["tmtd::transform_points_parent_2_child"]["-child_origin"] = ""
        let details["tmtd::transform_points_parent_2_child"]["-child_orientation"] = ""
   let details["tmtd::viaParseICCTechFile"]={}
   let details["tmtd::write_blockages"]={}
        let details["tmtd::write_blockages"]["-output"] = "(appends blockages into a file)"
        let details["tmtd::write_blockages"]["-objects"] = "(collection of objects)"
   let details["tmtd::write_mims"]={}
        let details["tmtd::write_mims"]["-output"] = "(appends mimcap into a file)"
        let details["tmtd::write_mims"]["-objects"] = "(collection of objects)"
   let details["tmtd::write_out_tm_td_collaterals"]={}
   let details["tmtd::write_terminals"]={}
        let details["tmtd::write_terminals"]["-output"] = "(appends shapes into a file)"
        let details["tmtd::write_terminals"]["-objects"] = "(collection of objects)"
        let details["tmtd::write_terminals"]["-convert_to_shape"] = "(Converts terminals to shape and writes into file)"
   let details["trace::cmd_trace_aux"]={}
   let details["trace::hook_app_options"]={}
   let details["trace::hook_reset_app_options"]={}
   let details["trace::proc_hook"]={}
   let details["trace::proc_trace_aux"]={}
   let details["trace::source_hook"]={}
   let details["trace::source_hook_leave"]={}
   let details["trace::trace_command_execution"]={}
   let details["trace::trace_errorInfo"]={}
   let details["trace::trace_error_off"]={}
   let details["trace::trace_error_on"]={}
   let details["trace::trace_proc_override"]={}
   let details["tsmc2snps::translate_FloorplanRuleChecker_cmd_tsmc2snps"]={}
   let details["tspec::clipper"]={}
        let details["tspec::clipper"]["-nets"] = "(nets)"
        let details["tspec::clipper"]["-reset"] = "(reset)"
   let details["tspec::consume_io_constraints"]={}
   let details["tspec::create_bbt"]={}
        let details["tspec::create_bbt"]["-filename"] = "(Pointer to BBT template file)"
   let details["tspec::create_missing_timing_arcs"]={}
   let details["tspec::create_timing_on_unconstrained_pins"]={}
   let details["tspec::dangling"]={}
   let details["tspec::format_if_num"]={}
   let details["tspec::gen_constraints_for_unbudgeted_pins"]={}
   let details["tspec::generate_budgeted_collateral_for_xmim"]={}
   let details["tspec::generate_budgeted_tspec"]={}
   let details["tspec::get_driver"]={}
   let details["tspec::get_keys"]={}
   let details["tspec::get_receiver"]={}
   let details["tspec::get_subkeys"]={}
   let details["tspec::nets_in_path"]={}
   let details["tspec::read"]={}
   let details["tspec::reconcile_tintent"]={}
   let details["tspec::report_tspec_count"]={}
   let details["tspec::report_unconstrained_pins"]={}
   let details["tspec::report_unconstrained_ports"]={}
   let details["tspec::spec_default"]={}
   let details["tspec::timing_path_analyze"]={}
        let details["tspec::timing_path_analyze"]["-max_paths"] = ""
        let details["tspec::timing_path_analyze"]["-net_delay_limit"] = ""
        let details["tspec::timing_path_analyze"]["-corner"] = ""
        let details["tspec::timing_path_analyze"]["-tpaths"] = ""
   let details["tspec::tspec_async_pins"]={}
   let details["ubm::NflTclFindTheFullPath"]={}
   let details["ubm::load_lib"]={}
   let details["utils::CalcPackageLocations"]={}
   let details["utils::add_header_to_file"]={}
        let details["utils::add_header_to_file"]["-file_name"] = "(Filename to add header to)"
        let details["utils::add_header_to_file"]["-comment_char"] = "(Comment character(s) (default is '#|'))"
        let details["utils::add_header_to_file"]["-msg"] = "(Message to include in header)"
        let details["utils::add_header_to_file"]["-runtime"] = "(Elapse time (seconds) for generating this file.)"
   let details["utils::change_ref_libs_path"]={}
   let details["utils::compute_relative_path"]={}
   let details["utils::convert_units"]={}
        let details["utils::convert_units"]["-value"] = "(Value to be converted)"
        let details["utils::convert_units"]["-from"] = "(current unit: "
        let details["utils::convert_units"]["-to"] = "(units to be converted to: "
   let details["utils::find_package"]={}
   let details["utils::float_eq"]={}
   let details["utils::get_array_contents_sorted_by_value"]={}
   let details["utils::get_design_info"]={}
        let details["utils::get_design_info"]["-stages_done"] = "(Return the stages done)"
   let details["utils::get_last_stage"]={}
   let details["utils::get_pcnt"]={}
   let details["utils::get_repeaters"]={}
   let details["utils::get_tmp_dir_name"]={}
        let details["utils::get_tmp_dir_name"]["-group"] = "(Protect the dir with this group)"
   let details["utils::get_tmp_file_name"]={}
   let details["utils::get_top_level_port_of_pin"]={}
   let details["utils::get_toplevel_port_of_net"]={}
   let details["utils::is_stage_done"]={}
   let details["utils::port_up_terminals"]={}
        let details["utils::port_up_terminals"]["-cells"] = "(Port up terminals only from these cells. DEFAULT: All hierarchical cells.)"
        let details["utils::port_up_terminals"]["-layer"] = "(Port up terminals on this layer. DEFAULT: tm1)"
        let details["utils::port_up_terminals"]["-pins"] = "(Port up terminals of these pins.  This overrides -cells and -layer options.)"
        let details["utils::port_up_terminals"]["-snap_to_boundary_edge"] = ""
   let details["utils::print_header"]={}
        let details["utils::print_header"]["-file_name"] = "(path/filename to print in the header)"
        let details["utils::print_header"]["-comment_char"] = ""
        let details["utils::print_header"]["-runtime"] = "(Elapse time (seconds) for generating this file)"
        let details["utils::print_header"]["-msg"] = "(Message to include in header)"
   let details["utils::print_histogram"]={}
        let details["utils::print_histogram"]["-title"] = "(Title of the histogram)"
        let details["utils::print_histogram"]["-max_star_length"] = ""
        let details["utils::print_histogram"]["-type"] = "(Type of data (default based on step_incr format): "
        let details["utils::print_histogram"]["-key_label"] = "(Label for the key)"
        let details["utils::print_histogram"]["-count_label"] = "(Label for the value)"
        let details["utils::print_histogram"]["-percentage"] = "(Prints stars proportional to percentage (default value))"
        let details["utils::print_histogram"]["-lower_bound"] = "(Lower bound of histogram's range)"
        let details["utils::print_histogram"]["-upper_bound"] = "(Upper bound of histogram's range)"
        let details["utils::print_histogram"]["-unit"] = "(Unit name)"
   let details["utils::recursive_trace_net_topology"]={}
   let details["utils::save_design_info"]={}
   let details["utils::shrink_wrap_boundary"]={}
   let details["utils::snap_terminals_to_boundary_edge"]={}
        let details["utils::snap_terminals_to_boundary_edge"]["-terminals"] = "(Collection of terminal objects.)"
        let details["utils::snap_terminals_to_boundary_edge"]["-edge"] = "(Snap terminals to boundary edge: "
   let details["utils::trace_driver_pin"]={}
        let details["utils::trace_driver_pin"]["-pin"] = "(pin|port)"
   let details["utils::trace_net_topology"]={}
        let details["utils::trace_net_topology"]["-pins"] = "(pins|ports)"
        let details["utils::trace_net_topology"]["-return_all"] = "(also return repeater/inverter pins; DEFAULT: return hierarchical pins only.)"
   let details["via_ladder::add_via_ladder"]={}
        let details["via_ladder::add_via_ladder"]["-nets"] = "(List of net)"
        let details["via_ladder::add_via_ladder"]["-cells"] = "(List of instance to insert or reinsert via ladders.)"
        let details["via_ladder::add_via_ladder"]["-via_ladder_constraint"] = ""
        let details["via_ladder::add_via_ladder"]["-report_tag"] = "(Report stage tag.)"
        let details["via_ladder::add_via_ladder"]["-incremental"] = "(NOT SUPPORTED YET.  Ignore the detailed routes. Could handle incremental or eco mode to insert via ladder on routed design)"
        let details["via_ladder::add_via_ladder"]["-allow_drcs"] = "(Allow the router to work in dirty mode or not.)"
        let details["via_ladder::add_via_ladder"]["-constraints_only"] = "(Set constraints only)"
   let details["via_ladder::assign_via_ladder_constraints"]={}
        let details["via_ladder::assign_via_ladder_constraints"]["-nets"] = "(List of net)"
        let details["via_ladder::assign_via_ladder_constraints"]["-cells"] = "(List of cells to insert or reinsert via ladders.)"
        let details["via_ladder::assign_via_ladder_constraints"]["-pin_name"] = "(Specify the pin name to set via ladder constraint)"
        let details["via_ladder::assign_via_ladder_constraints"]["-via_ladder_constraint"] = ""
        let details["via_ladder::assign_via_ladder_constraints"]["-report_tag"] = "(Report stage tag.)"
   let details["via_ladder::calc_terminal_window_height"]={}
   let details["via_ladder::calc_terminal_window_min_width"]={}
   let details["via_ladder::calc_terminal_window_width"]={}
   let details["via_ladder::calc_vl_structure"]={}
   let details["via_ladder::gen_vl_pattern_from_tech"]={}
   let details["via_ladder::generate_via_ladder_rules"]={}
   let details["via_ladder::remove_via_ladder"]={}
        let details["via_ladder::remove_via_ladder"]["-nets"] = "(Specify the nets to remove the via ladder)"
        let details["via_ladder::remove_via_ladder"]["-cells"] = "(Specify the cells to remove the via ladder)"
        let details["via_ladder::remove_via_ladder"]["-dont_remove_constraint"] = ""
   let details["via_ladder::set_via_ladder_rule"]={}
        let details["via_ladder::set_via_ladder_rule"]["-config_file"] = ""
   let details["via_ladder::stdcell_vl_profile"]={}
   let details["via_ladder::update_techfile_for_via_ladder_rule"]={}
        let details["via_ladder::update_techfile_for_via_ladder_rule"]["-rule_file"] = "(Via ladder rule file)"
        let details["via_ladder::update_techfile_for_via_ladder_rule"]["-outfile"] = "(Output techfile)"
        let details["via_ladder::update_techfile_for_via_ladder_rule"]["-techfile"] = "(Input techfile)"
   let details["vs::fix_scan_def"]={}
   let details["vs::get_main_driver"]={}
   let details["vs::get_reference"]={}
   let details["vs::merge_seq_cells"]={}
   let details["vs::parse_cts_exceptions"]={}
   let details["vs::parse_mco_sdc"]={}
   let details["vs::remove_dont_use"]={}
   let details["vs::sort_lib_cells"]={}
   let details["vs::vector_swap"]={}
        let details["vs::vector_swap"]["-swap"] = "(Pair or cell types to be swapped)"
        let details["vs::vector_swap"]["-bbox"] = "(Bounding box for the pair search)"
        let details["vs::vector_swap"]["-cmax_percent_cluster"] = ""
        let details["vs::vector_swap"]["-merge_lces"] = "(Enable merging of lces. Default false)"
        let details["vs::vector_swap"]["-check_only"] = "(Performs all calculations but doesn't do any replacement. Default false)"
   let details["vs::vector_swap_snps"]={}
   let details["vs::vector_unique_name"]={}
   let details["vs::vector_write_map_file"]={}
   let details["xmim::get_ft_connected_pins"]={}
   let details["xmim::prepare_synth_net"]={}
   let details["xmim::stitch_and_propagte_pins"]={}
   let details["xmim::swap_in_abstracts"]={}
   let details["xmim::write_interface_track_region_config"]={}
   let details["xml::pkgload"]={}
   let details["zndp::add_new_module"]={}
        let details["zndp::add_new_module"]["-reference"] = "(New module reference name)"
        let details["zndp::add_new_module"]["-instances"] = "(List of new instance names)"
        let details["zndp::add_new_module"]["-cells"] = "(List of cells to add new module and instances within. Default Selected/Top)"
        let details["zndp::add_new_module"]["-no_save"] = "(Do not save. Default Save)"
   let details["zndp::connect"]={}
        let details["zndp::connect"]["-netbus"] = "(Bus net pattern or name)"
        let details["zndp::connect"]["-pinbus"] = "(Bus port/pin pattern or name)"
        let details["zndp::connect"]["-net_type"] = "(Create connected net as this net-type (power, ground, tie_high, or tie_low). Default Signal)"
   let details["zndp::create_bbox_library"]={}
        let details["zndp::create_bbox_library"]["-lib"] = "(New NDM library name)"
   let details["zndp::create_bbox_topblock"]={}
        let details["zndp::create_bbox_topblock"]["-block"] = "(New top-block name)"
        let details["zndp::create_bbox_topblock"]["-boundary"] = "(Boundary bbox or points)"
   let details["zndp::create_boundaries_file"]={}
        let details["zndp::create_boundaries_file"]["-filename"] = "(boundaries file name)"
   let details["zndp::create_boundaries_placement_files"]={}
   let details["zndp::create_interface"]={}
        let details["zndp::create_interface"]["-busname"] = "(Bus interface pattern or name)"
        let details["zndp::create_interface"]["-direction"] = "(Direction of bus or port (in, inout, or out))"
        let details["zndp::create_interface"]["-cells"] = "(List of cells to create interfaces within. Default Selected/Top)"
        let details["zndp::create_interface"]["-net_type"] = "(Create connected net as this net-type (power, ground, tie_high, tie_low, or signal). Default Signal)"
   let details["zndp::disconnect"]={}
        let details["zndp::disconnect"]["-netbus"] = "(Bus net pattern or name)"
        let details["zndp::disconnect"]["-pinbus"] = "(Bus port/pin pattern or name)"
        let details["zndp::disconnect"]["-all"] = "(Disconnect all ports or pins)"
   let details["zndp::expand"]={}
   let details["zndp::floorplan_block"]={}
        let details["zndp::floorplan_block"]["-top"] = "(Floorplan current-block top only and disregard selected. Default Selected/Top)"
        let details["zndp::floorplan_block"]["-cells"] = "(List of cells to run floorplan within. Default Selected/Top)"
        let details["zndp::floorplan_block"]["-no_backoff"] = "(Use zero back-off: Default G_BACKOFFs)"
        let details["zndp::floorplan_block"]["-no_tracks_under_rails"] = ""
   let details["zndp::get_ring"]={}
   let details["zndp::remove_interface"]={}
        let details["zndp::remove_interface"]["-busname"] = "(Bus interface pattern or name)"
        let details["zndp::remove_interface"]["-cells"] = "(List of cells to create interfaces within. Default Selected/Top)"
   let details["zndp::snap_terminal2selectedshapes"]={}
        let details["zndp::snap_terminal2selectedshapes"]["-objects"] = "(Boundary objects to create terminals for)"
"" Reassign to a global variable ""
let g:TclComplete#details = details
