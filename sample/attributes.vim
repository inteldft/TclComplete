let attributes = {}
let attributes["routing_blockage"]={}
let attributes["routing_blockage"]["blockage_origin"] = "string"
let attributes["routing_blockage"]["hierarchy_owner"] = "string"
let attributes["routing_blockage"]["is_td"] = "boolean"
let attributes["routing_blockage"]["object_belongs"] = "string"
let attributes["routing_blockage"]["pd_intent"] = "boolean"
let attributes["routing_blockage"]["pd_intent_full_name"] = "string"
let attributes["routing_blockage"]["pd_intent_power_domain_info"] = "string"
let attributes["routing_blockage"]["pd_intent_ref_name"] = "string"
let attributes["routing_blockage"]["pd_intent_user_name"] = "string"
let attributes["routing_blockage"]["tm_hierarchy_owner"] = "string"
let attributes["routing_blockage"]["allow_via_ladder"] = "boolean"
let attributes["routing_blockage"]["area"] = "area"
let attributes["routing_blockage"]["bbox"] = "rect"
let attributes["routing_blockage"]["blockage_group_id"] = "int"
let attributes["routing_blockage"]["boundary"] = "coord_list"
let attributes["routing_blockage"]["bounding_box"] = "collection"
let attributes["routing_blockage"]["for_floorplan_rules"] = "boolean"
let attributes["routing_blockage"]["full_name"] = "string"
let attributes["routing_blockage"]["groups"] = "collection"
let attributes["routing_blockage"]["icc_route_guide"] = "boolean"
let attributes["routing_blockage"]["icc_system_layer_blockage"] = "boolean"
let attributes["routing_blockage"]["in_edit_group"] = "boolean"
let attributes["routing_blockage"]["is_allow_metal_fill_only"] = "boolean"
let attributes["routing_blockage"]["is_boundary_blockage"] = "boolean"
let attributes["routing_blockage"]["is_derived"] = "boolean"
let attributes["routing_blockage"]["is_design_rule_blockage"] = "boolean"
let attributes["routing_blockage"]["is_external_boundary_blockage"] = "boolean"
let attributes["routing_blockage"]["is_internal_boundary_blockage"] = "boolean"
let attributes["routing_blockage"]["is_maskable"] = "boolean"
let attributes["routing_blockage"]["is_shadow"] = "boolean"
let attributes["routing_blockage"]["is_zero_spacing"] = "boolean"
let attributes["routing_blockage"]["layer"] = "collection"
let attributes["routing_blockage"]["layer_name"] = "string"
let attributes["routing_blockage"]["mask_constraint"] = "mask_one, mask_two, mask_three, mask_four, same_mask"
let attributes["routing_blockage"]["name"] = "string"
let attributes["routing_blockage"]["net_types"] = "string"
let attributes["routing_blockage"]["nets"] = "collection"
let attributes["routing_blockage"]["number_of_nets"] = "int"
let attributes["routing_blockage"]["object_class"] = "string"
let attributes["routing_blockage"]["parent_block"] = "collection"
let attributes["routing_blockage"]["parent_block_cell"] = "collection"
let attributes["routing_blockage"]["parent_cell"] = "collection"
let attributes["routing_blockage"]["physical_status"] = "unrestricted"
let attributes["routing_blockage"]["reserve_for_top_level_routing"] = "boolean"
let attributes["routing_blockage"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["routing_blockage"]["top_block"] = "collection"
let attributes["terminal"]={}
let attributes["terminal"]["bu_pg_term"] = "boolean"
let attributes["terminal"]["bu_tm_term"] = "boolean"
let attributes["terminal"]["c4_id"] = "int"
let attributes["terminal"]["destination_pin"] = "string"
let attributes["terminal"]["hierarchy_owner"] = "string"
let attributes["terminal"]["iccpp_terminal"] = "string"
let attributes["terminal"]["is_td"] = "boolean"
let attributes["terminal"]["object_belongs"] = "string"
let attributes["terminal"]["pd_intent"] = "boolean"
let attributes["terminal"]["pd_intent_full_name"] = "string"
let attributes["terminal"]["pd_intent_power_domain_info"] = "string"
let attributes["terminal"]["pd_intent_ref_name"] = "string"
let attributes["terminal"]["pd_intent_user_name"] = "string"
let attributes["terminal"]["tm_hierarchy_owner"] = "string"
let attributes["terminal"]["access_direction"] = "access_dir"
let attributes["terminal"]["bbox"] = "rect"
let attributes["terminal"]["boundary"] = "coord_list"
let attributes["terminal"]["bounding_box"] = "collection"
let attributes["terminal"]["class"] = "core, none"
let attributes["terminal"]["direction"] = "inout, internal, out"
let attributes["terminal"]["eeq_class"] = "int"
let attributes["terminal"]["full_name"] = "string"
let attributes["terminal"]["groups"] = "collection"
let attributes["terminal"]["is_def_duplicate"] = "boolean"
let attributes["terminal"]["is_fixed"] = "boolean"
let attributes["terminal"]["is_owned_by_pad"] = "boolean"
let attributes["terminal"]["is_rectangle_only_rule_waived"] = "boolean"
let attributes["terminal"]["layer"] = "collection"
let attributes["terminal"]["matching_type"] = "collection"
let attributes["terminal"]["must_join_group"] = "string"
let attributes["terminal"]["name"] = "string"
let attributes["terminal"]["object_class"] = "string"
let attributes["terminal"]["parent_block"] = "collection"
let attributes["terminal"]["parent_block_cell"] = "collection"
let attributes["terminal"]["parent_cell"] = "collection"
let attributes["terminal"]["physical_status"] = "fixed, locked, unrestricted"
let attributes["terminal"]["port"] = "collection"
let attributes["terminal"]["route_connection"] = "skip"
let attributes["terminal"]["shape"] = "collection"
let attributes["terminal"]["top_block"] = "collection"
let attributes["cell"]={}
let attributes["cell"]["c4_id"] = "int"
let attributes["cell"]["cb2_action"] = "string"
let attributes["cell"]["cell_type"] = "string"
let attributes["cell"]["clk_hierarchy"] = "string"
let attributes["cell"]["clkbuilder"] = "boolean"
let attributes["cell"]["clksrc"] = "boolean"
let attributes["cell"]["clksrc_net"] = "string"
let attributes["cell"]["ctmesh"] = "string"
let attributes["cell"]["cts"] = "string"
let attributes["cell"]["eco_legalize_mode"] = "string"
let attributes["cell"]["eco_location_data"] = "string"
let attributes["cell"]["eco_touch"] = "string"
let attributes["cell"]["fcl_pushed"] = "string"
let attributes["cell"]["fcl_srsn"] = "string"
let attributes["cell"]["hierarchy_owner"] = "string"
let attributes["cell"]["is_from_channel"] = "boolean"
let attributes["cell"]["is_oth"] = "boolean"
let attributes["cell"]["is_pushdown_hierarchy"] = "boolean"
let attributes["cell"]["is_td"] = "boolean"
let attributes["cell"]["pd_intent"] = "boolean"
let attributes["cell"]["pd_intent_full_name"] = "string"
let attributes["cell"]["pd_intent_power_domain_info"] = "string"
let attributes["cell"]["pd_intent_ref_name"] = "string"
let attributes["cell"]["pd_intent_user_name"] = "string"
let attributes["cell"]["td_type"] = "string"
let attributes["cell"]["abstract_dont_touch"] = "boolean"
let attributes["cell"]["actual_internal_power_derate_factor"] = "float"
let attributes["cell"]["actual_leakage_power_derate_factor"] = "float"
let attributes["cell"]["actual_switching_power_derate_factor"] = "float"
let attributes["cell"]["allowable_orientation"] = "orientations"
let attributes["cell"]["area"] = "area"
let attributes["cell"]["aspect_ratio"] = "double"
let attributes["cell"]["base_name"] = "string"
let attributes["cell"]["bbox"] = "rect"
let attributes["cell"]["block_grid"] = "string"
let attributes["cell"]["blockage_group_id"] = "int"
let attributes["cell"]["boundary"] = "coord_list"
let attributes["cell"]["boundary_bbox"] = "rect"
let attributes["cell"]["boundary_bounding_box"] = "collection"
let attributes["cell"]["bounding_box"] = "collection"
let attributes["cell"]["bounds"] = "collection"
let attributes["cell"]["busplan_trace_through"] = "boolean"
let attributes["cell"]["clock_path_target_lib_cell_exclusions"] = "collection"
let attributes["cell"]["clock_path_target_lib_cell_subset"] = "collection"
let attributes["cell"]["clock_path_target_library_subset"] = "collection"
let attributes["cell"]["color"] = "int"
let attributes["cell"]["cts_dont_touch"] = "boolean"
let attributes["cell"]["cts_size_in_place"] = "boolean"
let attributes["cell"]["data_path_target_lib_cell_exclusions"] = "collection"
let attributes["cell"]["data_path_target_lib_cell_subset"] = "collection"
let attributes["cell"]["data_path_target_library_subset"] = "collection"
let attributes["cell"]["design_type"] = "analog, black_box, corner, cover, diode, end_cap, feedthrough, fill, filler, flip_chip_driver, flip_chip_pad, lib_cell, macro, module, pad, pad_spacer, well_tap"
let attributes["cell"]["dont_touch"] = "boolean"
let attributes["cell"]["early_fall_cell_check_derate_factor"] = "float"
let attributes["cell"]["early_fall_cell_check_derate_factor_source"] = "string"
let attributes["cell"]["early_fall_cell_check_derate_file_line_info"] = "string"
let attributes["cell"]["early_fall_clk_cell_derate_factor"] = "float"
let attributes["cell"]["early_fall_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["early_fall_clk_cell_derate_factor_source"] = "string"
let attributes["cell"]["early_fall_data_cell_derate_factor"] = "float"
let attributes["cell"]["early_fall_data_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["early_fall_data_cell_derate_factor_source"] = "string"
let attributes["cell"]["early_rise_cell_check_derate_factor"] = "float"
let attributes["cell"]["early_rise_cell_check_derate_factor_file_line_info"] = "string"
let attributes["cell"]["early_rise_cell_check_derate_factor_source"] = "string"
let attributes["cell"]["early_rise_clk_cell_derate_factor"] = "float"
let attributes["cell"]["early_rise_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["early_rise_clk_cell_derate_factor_source"] = "string"
let attributes["cell"]["early_rise_data_cell_derate_factor"] = "float"
let attributes["cell"]["early_rise_data_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["early_rise_data_cell_derate_factor_source"] = "string"
let attributes["cell"]["eco_change_status"] = "add_buffer_on_route, change_link, create_cell, eco_legalized, eco_placed, size_cell"
let attributes["cell"]["effective_process_label_early"] = "string"
let attributes["cell"]["effective_process_label_late"] = "string"
let attributes["cell"]["effective_process_number_early"] = "float"
let attributes["cell"]["effective_process_number_late"] = "float"
let attributes["cell"]["effective_temperature_early"] = "float"
let attributes["cell"]["effective_temperature_late"] = "float"
let attributes["cell"]["effective_voltage_early"] = "float"
let attributes["cell"]["effective_voltage_late"] = "float"
let attributes["cell"]["fixed_placement_dont_touch"] = "boolean"
let attributes["cell"]["fixed_placement_size_only"] = "boolean"
let attributes["cell"]["flat_net_count"] = "int"
let attributes["cell"]["freeze_clock_ports"] = "boolean"
let attributes["cell"]["freeze_data_ports"] = "boolean"
let attributes["cell"]["fs_dont_use"] = "boolean"
let attributes["cell"]["fs_mapped_cell_name"] = "string"
let attributes["cell"]["full_name"] = "string"
let attributes["cell"]["groups"] = "collection"
let attributes["cell"]["hard_macro_count"] = "int"
let attributes["cell"]["has_child_logical_hierarchy"] = "boolean"
let attributes["cell"]["has_child_physical_hierarchy"] = "boolean"
let attributes["cell"]["has_timing_model"] = "boolean"
let attributes["cell"]["height"] = "distance"
let attributes["cell"]["hierarchy_hard_macro_count"] = "int"
let attributes["cell"]["hierarchy_has_shadow_netlist"] = "boolean"
let attributes["cell"]["hierarchy_has_shadow_netlist_only"] = "boolean"
let attributes["cell"]["hierarchy_pad_cell_count"] = "int"
let attributes["cell"]["hierarchy_physical_only_cell_count"] = "int"
let attributes["cell"]["hierarchy_std_cell_count"] = "int"
let attributes["cell"]["hierarchy_switch_cell_count"] = "int"
let attributes["cell"]["hierarchy_type"] = "string"
let attributes["cell"]["hold_fix_dont_touch"] = "boolean"
let attributes["cell"]["in_edit_group"] = "boolean"
let attributes["cell"]["inner_keepout_margin_hard"] = "margin_list"
let attributes["cell"]["inner_keepout_margin_hard_macro"] = "margin_list"
let attributes["cell"]["inner_keepout_margin_route_blockage"] = "margin_list"
let attributes["cell"]["inner_keepout_margin_route_blockage_layers"] = "collection"
let attributes["cell"]["inner_keepout_margin_soft"] = "margin_list"
let attributes["cell"]["internal_clock_input_pin_power"] = "double"
let attributes["cell"]["internal_power"] = "double"
let attributes["cell"]["internal_power_derate_factor"] = "float"
let attributes["cell"]["io_guide"] = "collection"
let attributes["cell"]["io_guide_neighbor_relative"] = "boolean"
let attributes["cell"]["io_guide_offset"] = "distance"
let attributes["cell"]["io_guide_spacing"] = "distance"
let attributes["cell"]["io_ring_name"] = "string"
let attributes["cell"]["is_bbt_object"] = "boolean"
let attributes["cell"]["is_black_box"] = "boolean"
let attributes["cell"]["is_combinational"] = "boolean"
let attributes["cell"]["is_diff_level_shifter"] = "boolean"
let attributes["cell"]["is_diode_cell"] = "boolean"
let attributes["cell"]["is_empty"] = "boolean"
let attributes["cell"]["is_enable_level_shifter"] = "boolean"
let attributes["cell"]["is_etm_moded_cell"] = "boolean"
let attributes["cell"]["is_fall_edge_triggered"] = "boolean"
let attributes["cell"]["is_fixed"] = "boolean"
let attributes["cell"]["is_flipped"] = "boolean"
let attributes["cell"]["is_fs_eco_add"] = "boolean"
let attributes["cell"]["is_hard_macro"] = "boolean"
let attributes["cell"]["is_hierarchical"] = "boolean"
let attributes["cell"]["is_ideal"] = "boolean"
let attributes["cell"]["is_integrated_clock_gating_cell"] = "boolean"
let attributes["cell"]["is_io"] = "boolean"
let attributes["cell"]["is_isolation"] = "boolean"
let attributes["cell"]["is_level_shifter"] = "boolean"
let attributes["cell"]["is_logical_black_box"] = "boolean"
let attributes["cell"]["is_memory_cell"] = "boolean"
let attributes["cell"]["is_multiply_instantiated_block"] = "boolean"
let attributes["cell"]["is_multiply_instantiated_module"] = "boolean"
let attributes["cell"]["is_mux"] = "boolean"
let attributes["cell"]["is_negative_level_sensitive"] = "boolean"
let attributes["cell"]["is_outline"] = "boolean"
let attributes["cell"]["is_physical"] = "boolean"
let attributes["cell"]["is_physical_only"] = "boolean"
let attributes["cell"]["is_placed"] = "boolean"
let attributes["cell"]["is_positive_level_sensitive"] = "boolean"
let attributes["cell"]["is_power_domain_root_cell"] = "boolean"
let attributes["cell"]["is_power_switch"] = "boolean"
let attributes["cell"]["is_retention"] = "boolean"
let attributes["cell"]["is_rise_edge_triggered"] = "boolean"
let attributes["cell"]["is_sequential"] = "boolean"
let attributes["cell"]["is_shadow"] = "boolean"
let attributes["cell"]["is_snap_point_fixed"] = "boolean"
let attributes["cell"]["is_soft_macro"] = "boolean"
let attributes["cell"]["is_soi"] = "boolean"
let attributes["cell"]["is_spare_cell"] = "boolean"
let attributes["cell"]["is_spare_overridden"] = "boolean"
let attributes["cell"]["is_three_state"] = "boolean"
let attributes["cell"]["is_unbound"] = "boolean"
let attributes["cell"]["keepouts"] = "collection"
let attributes["cell"]["late_fall_cell_check_derate_factor"] = "float"
let attributes["cell"]["late_fall_cell_check_derate_factor_file_line_info"] = "string"
let attributes["cell"]["late_fall_cell_check_derate_factor_source"] = "string"
let attributes["cell"]["late_fall_clk_cell_derate_factor"] = "float"
let attributes["cell"]["late_fall_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["late_fall_clk_cell_derate_factor_source"] = "string"
let attributes["cell"]["late_fall_data_cell_derate_factor"] = "float"
let attributes["cell"]["late_fall_data_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["late_fall_data_cell_derate_factor_source"] = "string"
let attributes["cell"]["late_rise_cell_check_derate_factor"] = "float"
let attributes["cell"]["late_rise_cell_check_derate_factor_file_line_info"] = "string"
let attributes["cell"]["late_rise_cell_check_derate_factor_source"] = "string"
let attributes["cell"]["late_rise_clk_cell_derate_factor"] = "float"
let attributes["cell"]["late_rise_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["late_rise_clk_cell_derate_factor_source"] = "string"
let attributes["cell"]["late_rise_data_cell_derate_factor"] = "float"
let attributes["cell"]["late_rise_data_cell_derate_factor_file_line_info"] = "string"
let attributes["cell"]["late_rise_data_cell_derate_factor_source"] = "string"
let attributes["cell"]["leakage_power"] = "double"
let attributes["cell"]["leakage_power_derate_factor"] = "float"
let attributes["cell"]["mask_shift"] = "string"
let attributes["cell"]["matching_type"] = "collection"
let attributes["cell"]["mismatched_process_label_max"] = "boolean"
let attributes["cell"]["mismatched_process_label_min"] = "boolean"
let attributes["cell"]["mismatched_process_number_max"] = "boolean"
let attributes["cell"]["mismatched_process_number_min"] = "boolean"
let attributes["cell"]["mismatched_pvt_max"] = "boolean"
let attributes["cell"]["mismatched_pvt_min"] = "boolean"
let attributes["cell"]["mismatched_temperature_max"] = "boolean"
let attributes["cell"]["mismatched_temperature_min"] = "boolean"
let attributes["cell"]["mismatched_voltage_max"] = "boolean"
let attributes["cell"]["mismatched_voltage_min"] = "boolean"
let attributes["cell"]["mv_dont_touch"] = "boolean"
let attributes["cell"]["name"] = "string"
let attributes["cell"]["net_count"] = "int"
let attributes["cell"]["num_of_virtual_connection"] = "int"
let attributes["cell"]["number_of_pins"] = "int"
let attributes["cell"]["object_class"] = "string"
let attributes["cell"]["object_id"] = "string"
let attributes["cell"]["orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["cell"]["origin"] = "coord"
let attributes["cell"]["outer_keepout_margin"] = "margin_list"
let attributes["cell"]["outer_keepout_margin_hard"] = "margin_list"
let attributes["cell"]["outer_keepout_margin_hard_macro"] = "margin_list"
let attributes["cell"]["outer_keepout_margin_route_blockage"] = "margin_list"
let attributes["cell"]["outer_keepout_margin_route_blockage_layers"] = "collection"
let attributes["cell"]["outer_keepout_margin_soft"] = "margin_list"
let attributes["cell"]["outer_keepout_type"] = "hard_macro, routing_blockage, soft"
let attributes["cell"]["outline_port_count"] = "int"
let attributes["cell"]["outline_ref_count"] = "string"
let attributes["cell"]["pad_cell"] = "boolean"
let attributes["cell"]["pad_offset"] = "coord"
let attributes["cell"]["pane_early"] = "int"
let attributes["cell"]["pane_late"] = "int"
let attributes["cell"]["parent_block"] = "collection"
let attributes["cell"]["parent_block_cell"] = "collection"
let attributes["cell"]["parent_cell"] = "collection"
let attributes["cell"]["physical_hierarchy_level"] = "int"
let attributes["cell"]["physical_status"] = "fixed, legalize_only, locked, placed, unplaced"
let attributes["cell"]["power_domain"] = "string"
let attributes["cell"]["power_group"] = "string"
let attributes["cell"]["power_strategy"] = "collection"
let attributes["cell"]["power_switch_resistance"] = "double"
let attributes["cell"]["process_label_early"] = "string"
let attributes["cell"]["process_label_early_file_line_info"] = "string"
let attributes["cell"]["process_label_early_source"] = "string"
let attributes["cell"]["process_label_late"] = "string"
let attributes["cell"]["process_label_late_file_line_info"] = "string"
let attributes["cell"]["process_label_late_source"] = "string"
let attributes["cell"]["process_number_early"] = "float"
let attributes["cell"]["process_number_early_file_line_info"] = "string"
let attributes["cell"]["process_number_early_source"] = "string"
let attributes["cell"]["process_number_late"] = "float"
let attributes["cell"]["process_number_late_file_line_info"] = "string"
let attributes["cell"]["process_number_late_source"] = "string"
let attributes["cell"]["psc_filler_is_used"] = "boolean"
let attributes["cell"]["ref_block"] = "collection"
let attributes["cell"]["ref_full_name"] = "string"
let attributes["cell"]["ref_label_name"] = "string"
let attributes["cell"]["ref_lib_name"] = "string"
let attributes["cell"]["ref_module_name"] = "string"
let attributes["cell"]["ref_name"] = "string"
let attributes["cell"]["ref_phys_block"] = "collection"
let attributes["cell"]["ref_view_name"] = "abstract, conn, design, error, frame, layout, outline, timing"
let attributes["cell"]["register_list"] = "string"
let attributes["cell"]["retention_cell_style"] = "string"
let attributes["cell"]["rp_column"] = "int"
let attributes["cell"]["rp_is_free_placement"] = "boolean"
let attributes["cell"]["rp_num_columns"] = "int"
let attributes["cell"]["rp_num_rows"] = "int"
let attributes["cell"]["rp_orientations"] = "orientation_list"
let attributes["cell"]["rp_override_alignment"] = "right"
let attributes["cell"]["rp_parent_group"] = "string"
let attributes["cell"]["rp_pin_name"] = "string"
let attributes["cell"]["rp_row"] = "int"
let attributes["cell"]["rp_size_in_place"] = "boolean"
let attributes["cell"]["rp_top_group"] = "string"
let attributes["cell"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["cell"]["single_bit_list"] = "string"
let attributes["cell"]["size_in_place"] = "boolean"
let attributes["cell"]["size_only"] = "boolean"
let attributes["cell"]["snap_point"] = "coord"
let attributes["cell"]["spare_cell_mode"] = "false, true"
let attributes["cell"]["std_cell_count"] = "int"
let attributes["cell"]["supernet_disabled"] = "boolean"
let attributes["cell"]["supernet_transparent"] = "boolean"
let attributes["cell"]["supernet_transparent_pins"] = "collection"
let attributes["cell"]["switching_power"] = "double"
let attributes["cell"]["switching_power_derate_factor"] = "float"
let attributes["cell"]["target_area"] = "double"
let attributes["cell"]["target_boundary_area"] = "area"
let attributes["cell"]["target_utilization"] = "float"
let attributes["cell"]["temperature_early"] = "float"
let attributes["cell"]["temperature_early_file_line_info"] = "string"
let attributes["cell"]["temperature_early_source"] = "string"
let attributes["cell"]["temperature_late"] = "float"
let attributes["cell"]["temperature_late_file_line_info"] = "string"
let attributes["cell"]["temperature_late_source"] = "string"
let attributes["cell"]["top_block"] = "collection"
let attributes["cell"]["total_power"] = "double"
let attributes["cell"]["user_dont_touch"] = "boolean"
let attributes["cell"]["user_power_group"] = "string"
let attributes["cell"]["user_size_only"] = "boolean"
let attributes["cell"]["view_name"] = "abstract, conn, design, error, frame, layout, outline, timing"
let attributes["cell"]["voltage_area"] = "collection"
let attributes["cell"]["voltage_area_shape"] = "collection"
let attributes["cell"]["voltage_early"] = "float"
let attributes["cell"]["voltage_early_file_line_info"] = "string"
let attributes["cell"]["voltage_early_source"] = "string"
let attributes["cell"]["voltage_late"] = "float"
let attributes["cell"]["voltage_late_file_line_info"] = "string"
let attributes["cell"]["voltage_late_source"] = "string"
let attributes["cell"]["width"] = "distance"
let attributes["shape"]={}
let attributes["shape"]["c4_id"] = "int"
let attributes["shape"]["c4_info"] = "string"
let attributes["shape"]["clkbuilder"] = "boolean"
let attributes["shape"]["clksrc"] = "boolean"
let attributes["shape"]["clksrc_net"] = "string"
let attributes["shape"]["destination_pin"] = "string"
let attributes["shape"]["fcl_pushed"] = "string"
let attributes["shape"]["hierarchy_owner"] = "string"
let attributes["shape"]["iccpp_tr_region"] = "string"
let attributes["shape"]["iccpp_tr_region_name"] = "string"
let attributes["shape"]["iccpp_trunk"] = "string"
let attributes["shape"]["is_from_channel"] = "boolean"
let attributes["shape"]["is_oth"] = "boolean"
let attributes["shape"]["is_preroute"] = "boolean"
let attributes["shape"]["is_td"] = "boolean"
let attributes["shape"]["object_belongs"] = "string"
let attributes["shape"]["parent_bbox"] = "string"
let attributes["shape"]["pd_intent"] = "boolean"
let attributes["shape"]["pd_intent_full_name"] = "string"
let attributes["shape"]["pd_intent_power_domain_info"] = "string"
let attributes["shape"]["pd_intent_ref_name"] = "string"
let attributes["shape"]["pd_intent_user_name"] = "string"
let attributes["shape"]["td_type"] = "string"
let attributes["shape"]["tm_hierarchy_owner"] = "string"
let attributes["shape"]["access_direction"] = "access_dir"
let attributes["shape"]["bbox"] = "rect"
let attributes["shape"]["boundary"] = "coord_list"
let attributes["shape"]["bounding_box"] = "collection"
let attributes["shape"]["custom_route_flow"] = "string"
let attributes["shape"]["design_name"] = "string"
let attributes["shape"]["end_endcap"] = "full_width, half_width, octagon, variable"
let attributes["shape"]["end_extension"] = "distance"
let attributes["shape"]["full_name"] = "string"
let attributes["shape"]["groups"] = "collection"
let attributes["shape"]["height"] = "distance"
let attributes["shape"]["ignore_ndr_spacing"] = "boolean"
let attributes["shape"]["in_edit_group"] = "boolean"
let attributes["shape"]["is_45"] = "boolean"
let attributes["shape"]["is_fixed"] = "boolean"
let attributes["shape"]["is_horizontal"] = "boolean"
let attributes["shape"]["is_manhattan"] = "boolean"
let attributes["shape"]["is_mask_fixed"] = "boolean"
let attributes["shape"]["is_pattern_must_join"] = "boolean"
let attributes["shape"]["is_shadow"] = "boolean"
let attributes["shape"]["is_vertical"] = "boolean"
let attributes["shape"]["is_via_ladder"] = "boolean"
let attributes["shape"]["justification"] = "CB, CT, LB, LC, LT, RB, RC, RT"
let attributes["shape"]["layer"] = "collection"
let attributes["shape"]["layer_name"] = "string"
let attributes["shape"]["layer_number"] = "int"
let attributes["shape"]["length"] = "distance"
let attributes["shape"]["mask_constraint"] = "mask_one, mask_two, mask_three, mask_four, same_mask"
let attributes["shape"]["name"] = "string"
let attributes["shape"]["net"] = "collection"
let attributes["shape"]["net_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["shape"]["number_of_points"] = "int"
let attributes["shape"]["object_class"] = "string"
let attributes["shape"]["object_id"] = "int"
let attributes["shape"]["orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["shape"]["origin"] = "coord"
let attributes["shape"]["owner"] = "collection"
let attributes["shape"]["parent_block"] = "collection"
let attributes["shape"]["parent_block_cell"] = "collection"
let attributes["shape"]["parent_cell"] = "collection"
let attributes["shape"]["physical_status"] = "fixed, locked, minor_change, unrestricted"
let attributes["shape"]["points"] = "coord_list"
let attributes["shape"]["purpose_number"] = "int"
let attributes["shape"]["rule_type"] = "net_non_default, none, shape_non_default"
let attributes["shape"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["shape"]["shape_type"] = "string"
let attributes["shape"]["shape_use"] = "core_wire, detail_route, follow_pin, global_route, lib_cell_pin_connect, macro_pin_connect, opc, rdl, ring, shield_route, stripe, trunk, user_route, zero_skew"
let attributes["shape"]["start_endcap"] = "full_width, half_width, octagon, variable"
let attributes["shape"]["start_extension"] = "distance"
let attributes["shape"]["tag"] = "string"
let attributes["shape"]["text"] = "string"
let attributes["shape"]["top_block"] = "collection"
let attributes["shape"]["width"] = "distance"
let attributes["via"]={}
let attributes["via"]["c4_id"] = "int"
let attributes["via"]["clkbuilder"] = "boolean"
let attributes["via"]["clksrc"] = "boolean"
let attributes["via"]["clksrc_net"] = "string"
let attributes["via"]["fcl_pushed"] = "string"
let attributes["via"]["hierarchy_owner"] = "string"
let attributes["via"]["iccpp_preroute_shield_vias"] = "boolean"
let attributes["via"]["iccpp_preroute_vias"] = "boolean"
let attributes["via"]["is_from_channel"] = "boolean"
let attributes["via"]["is_oth"] = "boolean"
let attributes["via"]["is_preroute"] = "boolean"
let attributes["via"]["is_td"] = "boolean"
let attributes["via"]["object_belongs"] = "string"
let attributes["via"]["parent_bbox"] = "string"
let attributes["via"]["pd_intent"] = "boolean"
let attributes["via"]["pd_intent_full_name"] = "string"
let attributes["via"]["pd_intent_power_domain_info"] = "string"
let attributes["via"]["pd_intent_ref_name"] = "string"
let attributes["via"]["pd_intent_user_name"] = "string"
let attributes["via"]["td_type"] = "string"
let attributes["via"]["tm_hierarchy_owner"] = "string"
let attributes["via"]["array_size"] = "string"
let attributes["via"]["bbox"] = "rect"
let attributes["via"]["bounding_box"] = "collection"
let attributes["via"]["custom_route_flow"] = "string"
let attributes["via"]["cut_layer_names"] = "string"
let attributes["via"]["cut_layers"] = "collection"
let attributes["via"]["cut_mask_constraint"] = "mask_one, mask_two, mask_three, mask_four, same_mask, mask_five, mask_six, mask_seven, mask_eight, mask_nine, mask_ten, mask_eleven, mask_twelve, mask_thirteen, mask_fourteen, mask_fifteen, inherit_mask"
let attributes["via"]["cut_pattern"] = "string"
let attributes["via"]["cut_pattern_size"] = "string"
let attributes["via"]["design_name"] = "string"
let attributes["via"]["full_name"] = "string"
let attributes["via"]["groups"] = "collection"
let attributes["via"]["has_net"] = "boolean"
let attributes["via"]["height"] = "distance"
let attributes["via"]["ignore_ndr_spacing"] = "boolean"
let attributes["via"]["in_edit_group"] = "boolean"
let attributes["via"]["is_cut_mask_fixed"] = "boolean"
let attributes["via"]["is_default_via"] = "boolean"
let attributes["via"]["is_fixed"] = "boolean"
let attributes["via"]["is_lower_mask_fixed"] = "boolean"
let attributes["via"]["is_pattern_must_join"] = "boolean"
let attributes["via"]["is_shadow"] = "boolean"
let attributes["via"]["is_upper_mask_fixed"] = "boolean"
let attributes["via"]["is_via_ladder"] = "boolean"
let attributes["via"]["lower_layer"] = "collection"
let attributes["via"]["lower_layer_bounding_box"] = "collection"
let attributes["via"]["lower_layer_name"] = "string"
let attributes["via"]["lower_mask_constraint"] = "mask_one, mask_two, mask_three, mask_four, same_mask, inherit_mask"
let attributes["via"]["name"] = "string"
let attributes["via"]["net"] = "collection"
let attributes["via"]["net_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["via"]["number_of_columns"] = "int"
let attributes["via"]["number_of_rows"] = "int"
let attributes["via"]["object_class"] = "string"
let attributes["via"]["object_id"] = "int"
let attributes["via"]["offset"] = "coord"
let attributes["via"]["orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["via"]["origin"] = "coord"
let attributes["via"]["owner"] = "collection"
let attributes["via"]["parent_block"] = "collection"
let attributes["via"]["parent_block_cell"] = "collection"
let attributes["via"]["parent_cell"] = "collection"
let attributes["via"]["physical_status"] = "fixed, locked, minor_change, unrestricted"
let attributes["via"]["rule_type"] = "net_non_default, none, shape_non_default"
let attributes["via"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["via"]["shape_use"] = "core_wire, detail_route, follow_pin, global_route, lib_cell_pin_connect, macro_pin_connect, opc, rdl, ring, shield_route, stripe, trunk, user_route, zero_skew"
let attributes["via"]["tag"] = "string"
let attributes["via"]["top_block"] = "collection"
let attributes["via"]["upper_layer"] = "collection"
let attributes["via"]["upper_layer_bounding_box"] = "collection"
let attributes["via"]["upper_layer_name"] = "string"
let attributes["via"]["upper_mask_constraint"] = "mask_one, mask_two, mask_three, mask_four, same_mask, inherit_mask"
let attributes["via"]["via_def"] = "collection"
let attributes["via"]["via_def_name"] = "string"
let attributes["via"]["via_type"] = "string"
let attributes["via"]["width"] = "distance"
let attributes["via"]["x_pitch"] = "distance"
let attributes["via"]["y_pitch"] = "distance"
let attributes["net"]={}
let attributes["net"]["cb2_action"] = "string"
let attributes["net"]["clkbuilder"] = "boolean"
let attributes["net"]["clksrc"] = "boolean"
let attributes["net"]["clksrc_net"] = "string"
let attributes["net"]["ctmesh"] = "string"
let attributes["net"]["cts"] = "string"
let attributes["net"]["gcr_rv_constr"] = "string"
let attributes["net"]["shield_constr"] = "string"
let attributes["net"]["td_type"] = "string"
let attributes["net"]["activity_type"] = "string"
let attributes["net"]["actual_related_clock"] = "string"
let attributes["net"]["antenna_rule_name"] = "string"
let attributes["net"]["base_name"] = "string"
let attributes["net"]["bbox"] = "rect"
let attributes["net"]["bounding_box"] = "collection"
let attributes["net"]["bundles"] = "collection"
let attributes["net"]["bus"] = "collection"
let attributes["net"]["busplan_stop_trace_net"] = "boolean"
let attributes["net"]["constraint_groups"] = "collection"
let attributes["net"]["dont_touch"] = "boolean"
let attributes["net"]["dr_length"] = "double"
let attributes["net"]["dr_x_length"] = "double"
let attributes["net"]["dr_y_length"] = "double"
let attributes["net"]["estimate_timing_net_rule"] = "string"
let attributes["net"]["estimate_timing_net_weight"] = "int"
let attributes["net"]["forbidden_preroute_access_layers"] = "collection"
let attributes["net"]["full_name"] = "string"
let attributes["net"]["groups"] = "collection"
let attributes["net"]["has_topology"] = "boolean"
let attributes["net"]["is_bbt_object"] = "boolean"
let attributes["net"]["is_bus_bit"] = "boolean"
let attributes["net"]["is_global"] = "boolean"
let attributes["net"]["is_ideal"] = "boolean"
let attributes["net"]["is_in_bundle"] = "boolean"
let attributes["net"]["is_physical"] = "boolean"
let attributes["net"]["is_rdl"] = "boolean"
let attributes["net"]["is_shadow"] = "boolean"
let attributes["net"]["is_tie_high_net"] = "boolean"
let attributes["net"]["is_tie_low_net"] = "boolean"
let attributes["net"]["is_user_pg"] = "boolean"
let attributes["net"]["major_activity_type"] = "string"
let attributes["net"]["max_layer"] = "collection"
let attributes["net"]["max_layer_is_user"] = "boolean"
let attributes["net"]["max_layer_mode"] = "extract_only, hard, soft, unknown"
let attributes["net"]["max_layer_mode_soft_cost"] = "low, medium, unknown"
let attributes["net"]["max_layer_name"] = "string"
let attributes["net"]["min_layer"] = "collection"
let attributes["net"]["min_layer_is_user"] = "boolean"
let attributes["net"]["min_layer_mode"] = "extract_only, hard, soft, unknown"
let attributes["net"]["min_layer_mode_soft_cost"] = "low, medium, unknown"
let attributes["net"]["min_layer_name"] = "string"
let attributes["net"]["minor_activity_type"] = "string"
let attributes["net"]["name"] = "string"
let attributes["net"]["net_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["net"]["number_of_flat_drivers"] = "int"
let attributes["net"]["number_of_flat_inouts"] = "int"
let attributes["net"]["number_of_flat_loads"] = "int"
let attributes["net"]["number_of_pins"] = "int"
let attributes["net"]["number_of_wires"] = "int"
let attributes["net"]["object_class"] = "string"
let attributes["net"]["object_id"] = "string"
let attributes["net"]["parent_block"] = "collection"
let attributes["net"]["parent_block_cell"] = "collection"
let attributes["net"]["parent_cell"] = "collection"
let attributes["net"]["physical_status"] = "minor_change, unrestricted"
let attributes["net"]["pin_bbox"] = "rect"
let attributes["net"]["pin_bounding_box"] = "collection"
let attributes["net"]["rc_hold_criticality"] = "low, medium, none"
let attributes["net"]["rc_setup_criticality"] = "low, medium, none"
let attributes["net"]["related_clock"] = "string"
let attributes["net"]["route_length"] = "string"
let attributes["net"]["routing_blockage_group_id"] = "to 8"
let attributes["net"]["routing_blockages"] = "collection"
let attributes["net"]["routing_corridor"] = "collection"
let attributes["net"]["routing_rule"] = "string"
let attributes["net"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["net"]["size_only"] = "boolean"
let attributes["net"]["static_probability"] = "double"
let attributes["net"]["switching_power"] = "double"
let attributes["net"]["synonyms"] = "string"
let attributes["net"]["toggle_rate"] = "double"
let attributes["net"]["top_block"] = "collection"
let attributes["net"]["topological_constraints"] = "collection"
let attributes["net"]["topology_edges"] = "collection"
let attributes["net"]["topology_nodes"] = "collection"
let attributes["net"]["total_capacitance_max"] = "float"
let attributes["net"]["total_capacitance_min"] = "float"
let attributes["net"]["total_ccs_capacitance_max_fall"] = "float"
let attributes["net"]["total_ccs_capacitance_max_rise"] = "float"
let attributes["net"]["total_ccs_capacitance_min_fall"] = "float"
let attributes["net"]["total_ccs_capacitance_min_rise"] = "float"
let attributes["net"]["user_dont_touch"] = "boolean"
let attributes["net"]["voltage_range_max"] = "float"
let attributes["net"]["voltage_range_min"] = "float"
let attributes["net"]["vr_length"] = "double"
let attributes["net"]["vr_x_length"] = "double"
let attributes["net"]["vr_y_length"] = "double"
let attributes["net"]["wire_capacitance_max"] = "float"
let attributes["net"]["wire_capacitance_min"] = "float"
let attributes["port"]={}
let attributes["port"]["clkbuilder"] = "boolean"
let attributes["port"]["is_ft_noconn"] = "boolean"
let attributes["port"]["is_td"] = "boolean"
let attributes["port"]["pd_intent"] = "boolean"
let attributes["port"]["pd_intent_full_name"] = "string"
let attributes["port"]["pd_intent_ref_name"] = "string"
let attributes["port"]["pd_intent_user_name"] = "string"
let attributes["port"]["save_srsn"] = "string"
let attributes["port"]["td_type"] = "string"
let attributes["port"]["activity_type"] = "string"
let attributes["port"]["actual_fall_transition_max"] = "float"
let attributes["port"]["actual_fall_transition_min"] = "float"
let attributes["port"]["actual_related_clock"] = "string"
let attributes["port"]["actual_rise_transition_max"] = "float"
let attributes["port"]["actual_rise_transition_min"] = "float"
let attributes["port"]["antenna_area"] = "string"
let attributes["port"]["antenna_side_area"] = "string"
let attributes["port"]["arrival_window"] = "string"
let attributes["port"]["bbox"] = "rect"
let attributes["port"]["bias_type"] = "routing_pin"
let attributes["port"]["bound_name"] = "string"
let attributes["port"]["bound_type"] = "soft"
let attributes["port"]["bounding_box"] = "collection"
let attributes["port"]["bus"] = "collection"
let attributes["port"]["capacitance"] = "float"
let attributes["port"]["case_value"] = "string"
let attributes["port"]["clock"] = "boolean"
let attributes["port"]["clock_arrival_window"] = "string"
let attributes["port"]["clock_latency_fall_max"] = "float"
let attributes["port"]["clock_latency_fall_min"] = "float"
let attributes["port"]["clock_latency_rise_max"] = "float"
let attributes["port"]["clock_latency_rise_min"] = "float"
let attributes["port"]["clock_source_latency_early_fall_max"] = "float"
let attributes["port"]["clock_source_latency_early_fall_min"] = "float"
let attributes["port"]["clock_source_latency_early_rise_max"] = "float"
let attributes["port"]["clock_source_latency_early_rise_min"] = "float"
let attributes["port"]["clock_source_latency_late_fall_max"] = "float"
let attributes["port"]["clock_source_latency_late_fall_min"] = "float"
let attributes["port"]["clock_source_latency_late_rise_max"] = "float"
let attributes["port"]["clock_source_latency_late_rise_min"] = "float"
let attributes["port"]["clocks"] = "collection"
let attributes["port"]["clocks_to_balance"] = "collection"
let attributes["port"]["clocks_with_sense"] = "string"
let attributes["port"]["cnx"] = "string"
let attributes["port"]["connect_within_pin"] = "via, via_wire"
let attributes["port"]["constant_value"] = "string"
let attributes["port"]["constraining_max_transition"] = "float"
let attributes["port"]["cut_area"] = "string"
let attributes["port"]["design"] = "collection"
let attributes["port"]["diff_area"] = "string"
let attributes["port"]["diode_protection"] = "string"
let attributes["port"]["direction"] = "inout, internal, out"
let attributes["port"]["disable_timing"] = "boolean"
let attributes["port"]["dont_touch_network"] = "boolean"
let attributes["port"]["dont_touch_network_no_propagate"] = "boolean"
let attributes["port"]["drive_resistance_fall_max"] = "float"
let attributes["port"]["drive_resistance_fall_min"] = "float"
let attributes["port"]["drive_resistance_rise_max"] = "float"
let attributes["port"]["drive_resistance_rise_min"] = "float"
let attributes["port"]["early_fall_input_cap"] = "float"
let attributes["port"]["early_fall_load_cap"] = "float"
let attributes["port"]["early_fall_transition"] = "float"
let attributes["port"]["early_rise_input_cap"] = "float"
let attributes["port"]["early_rise_load_cap"] = "float"
let attributes["port"]["early_rise_transition"] = "float"
let attributes["port"]["effective_process_label_early"] = "string"
let attributes["port"]["effective_process_label_late"] = "string"
let attributes["port"]["effective_process_number_early"] = "float"
let attributes["port"]["effective_process_number_late"] = "float"
let attributes["port"]["effective_temperature_early"] = "float"
let attributes["port"]["effective_temperature_late"] = "float"
let attributes["port"]["effective_voltage_early"] = "float"
let attributes["port"]["effective_voltage_late"] = "float"
let attributes["port"]["essential_activity_group"] = "string"
let attributes["port"]["extended_name"] = "string"
let attributes["port"]["fanout_load"] = "float"
let attributes["port"]["full_name"] = "string"
let attributes["port"]["function"] = "string"
let attributes["port"]["gate_area"] = "string"
let attributes["port"]["gate_diffusion_length"] = "string"
let attributes["port"]["group_bound_height"] = "distance"
let attributes["port"]["group_bound_width"] = "distance"
let attributes["port"]["groups"] = "collection"
let attributes["port"]["hold_uncertainty"] = "float"
let attributes["port"]["input_transition_fall_max"] = "float"
let attributes["port"]["input_transition_fall_min"] = "float"
let attributes["port"]["input_transition_rise_max"] = "float"
let attributes["port"]["input_transition_rise_min"] = "float"
let attributes["port"]["is_async_pin"] = "boolean"
let attributes["port"]["is_bus_bit"] = "boolean"
let attributes["port"]["is_clear_pin"] = "boolean"
let attributes["port"]["is_clock_pin"] = "boolean"
let attributes["port"]["is_clock_used_as_clock"] = "boolean"
let attributes["port"]["is_clock_used_as_data"] = "boolean"
let attributes["port"]["is_data_pin"] = "boolean"
let attributes["port"]["is_diode"] = "boolean"
let attributes["port"]["is_et_delay_clipped"] = "boolean"
let attributes["port"]["is_fall_edge_triggered_clock_pin"] = "boolean"
let attributes["port"]["is_fall_edge_triggered_data_pin"] = "boolean"
let attributes["port"]["is_feedthrough_port"] = "boolean"
let attributes["port"]["is_fixed"] = "boolean"
let attributes["port"]["is_ideal"] = "boolean"
let attributes["port"]["is_latch_loop_breaker"] = "boolean"
let attributes["port"]["is_negative_level_sensitive_clock_pin"] = "boolean"
let attributes["port"]["is_negative_level_sensitive_data_pin"] = "boolean"
let attributes["port"]["is_net_driver"] = "boolean"
let attributes["port"]["is_net_load"] = "boolean"
let attributes["port"]["is_pad"] = "boolean"
let attributes["port"]["is_physical"] = "boolean"
let attributes["port"]["is_positive_level_sensitive_clock_pin"] = "boolean"
let attributes["port"]["is_positive_level_sensitive_data_pin"] = "boolean"
let attributes["port"]["is_preset_pin"] = "boolean"
let attributes["port"]["is_rectangle_only_rule_waived"] = "boolean"
let attributes["port"]["is_rise_edge_triggered_clock_pin"] = "boolean"
let attributes["port"]["is_rise_edge_triggered_data_pin"] = "boolean"
let attributes["port"]["is_scan"] = "boolean"
let attributes["port"]["is_secondary_pg"] = "boolean"
let attributes["port"]["is_shadow"] = "boolean"
let attributes["port"]["is_three_state"] = "boolean"
let attributes["port"]["is_three_state_enable_pin"] = "boolean"
let attributes["port"]["is_three_state_output_pin"] = "boolean"
let attributes["port"]["is_user_pg"] = "boolean"
let attributes["port"]["late_fall_input_cap"] = "float"
let attributes["port"]["late_fall_load_cap"] = "float"
let attributes["port"]["late_fall_transition"] = "float"
let attributes["port"]["late_rise_input_cap"] = "float"
let attributes["port"]["late_rise_load_cap"] = "float"
let attributes["port"]["late_rise_transition"] = "float"
let attributes["port"]["layer"] = "collection"
let attributes["port"]["layer_name"] = "string"
let attributes["port"]["lib"] = "collection"
let attributes["port"]["lib_cell"] = "collection"
let attributes["port"]["major_activity_type"] = "string"
let attributes["port"]["max_area_car"] = "string"
let attributes["port"]["max_balance_delay"] = "float"
let attributes["port"]["max_capacitance_constraint"] = "float"
let attributes["port"]["max_cut_area_car"] = "string"
let attributes["port"]["max_fall_input_cap"] = "float"
let attributes["port"]["max_fall_load_cap"] = "float"
let attributes["port"]["max_fall_local_slack"] = "float"
let attributes["port"]["max_fall_slack"] = "float"
let attributes["port"]["max_fall_transition"] = "float"
let attributes["port"]["max_fanout"] = "float"
let attributes["port"]["max_rise_input_cap"] = "float"
let attributes["port"]["max_rise_load_cap"] = "float"
let attributes["port"]["max_rise_local_slack"] = "float"
let attributes["port"]["max_rise_slack"] = "float"
let attributes["port"]["max_rise_transition"] = "float"
let attributes["port"]["max_side_area_car"] = "string"
let attributes["port"]["max_slack"] = "float"
let attributes["port"]["max_transition_constraint"] = "float"
let attributes["port"]["min_balance_delay"] = "float"
let attributes["port"]["min_capacitance_constraint"] = "float"
let attributes["port"]["min_fall_input_cap"] = "float"
let attributes["port"]["min_fall_load_cap"] = "float"
let attributes["port"]["min_fall_slack"] = "float"
let attributes["port"]["min_fall_transition"] = "float"
let attributes["port"]["min_rise_input_cap"] = "float"
let attributes["port"]["min_rise_load_cap"] = "float"
let attributes["port"]["min_rise_slack"] = "float"
let attributes["port"]["min_rise_transition"] = "float"
let attributes["port"]["min_slack"] = "float"
let attributes["port"]["minor_activity_type"] = "string"
let attributes["port"]["mismatched_process_label_max"] = "boolean"
let attributes["port"]["mismatched_process_label_min"] = "boolean"
let attributes["port"]["mismatched_process_number_max"] = "boolean"
let attributes["port"]["mismatched_process_number_min"] = "boolean"
let attributes["port"]["mismatched_pvt_max"] = "boolean"
let attributes["port"]["mismatched_pvt_min"] = "boolean"
let attributes["port"]["mismatched_temperature_max"] = "boolean"
let attributes["port"]["mismatched_temperature_min"] = "boolean"
let attributes["port"]["mismatched_voltage_max"] = "boolean"
let attributes["port"]["mismatched_voltage_min"] = "boolean"
let attributes["port"]["mode1_area"] = "string"
let attributes["port"]["mode2_ratio"] = "string"
let attributes["port"]["mode3_area"] = "string"
let attributes["port"]["mode4_area"] = "string"
let attributes["port"]["mode5_ratio"] = "string"
let attributes["port"]["mode6_area"] = "string"
let attributes["port"]["must_join_port"] = "collection"
let attributes["port"]["n_gate_area"] = "string"
let attributes["port"]["n_gate_diffusion_length"] = "string"
let attributes["port"]["name"] = "string"
let attributes["port"]["net"] = "collection"
let attributes["port"]["net_name"] = "string"
let attributes["port"]["nextstate_type"] = "int"
let attributes["port"]["object_class"] = "string"
let attributes["port"]["p_gate_area"] = "string"
let attributes["port"]["p_gate_diffusion_length"] = "string"
let attributes["port"]["pa_input_pin_fall_transition"] = "float"
let attributes["port"]["pa_input_pin_rise_transition"] = "float"
let attributes["port"]["pa_output_pin_cap"] = "float"
let attributes["port"]["pa_pin_voltage"] = "float"
let attributes["port"]["pane_early"] = "int"
let attributes["port"]["pane_late"] = "int"
let attributes["port"]["parent_block"] = "collection"
let attributes["port"]["parent_block_cell"] = "collection"
let attributes["port"]["parent_cell"] = "collection"
let attributes["port"]["pattern_must_join"] = "boolean"
let attributes["port"]["pg_function"] = "string"
let attributes["port"]["pg_type"] = "internal, primary"
let attributes["port"]["physical_status"] = "locked, placed, unplaced"
let attributes["port"]["pin_capacitance"] = "float"
let attributes["port"]["pin_capacitance_max_fall"] = "float"
let attributes["port"]["pin_capacitance_max_rise"] = "float"
let attributes["port"]["pin_capacitance_min_fall"] = "float"
let attributes["port"]["pin_capacitance_min_rise"] = "float"
let attributes["port"]["pin_class"] = "int"
let attributes["port"]["pin_direction"] = "inout, internal, out"
let attributes["port"]["pin_function_class"] = "string"
let attributes["port"]["pin_function_id"] = "string"
let attributes["port"]["pin_number"] = "int"
let attributes["port"]["pin_sense"] = "boolean"
let attributes["port"]["port_direction"] = "string"
let attributes["port"]["port_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["port"]["power_domain"] = "string"
let attributes["port"]["process_label_early"] = "string"
let attributes["port"]["process_label_early_file_line_info"] = "string"
let attributes["port"]["process_label_early_source"] = "string"
let attributes["port"]["process_label_late"] = "string"
let attributes["port"]["process_label_late_file_line_info"] = "string"
let attributes["port"]["process_label_late_source"] = "string"
let attributes["port"]["process_number_early"] = "float"
let attributes["port"]["process_number_early_file_line_info"] = "string"
let attributes["port"]["process_number_early_source"] = "string"
let attributes["port"]["process_number_late"] = "float"
let attributes["port"]["process_number_late_file_line_info"] = "string"
let attributes["port"]["process_number_late_source"] = "string"
let attributes["port"]["propagated_clock"] = "boolean"
let attributes["port"]["rail_name"] = "string"
let attributes["port"]["related_bias_pin_name"] = "string"
let attributes["port"]["related_clock"] = "string"
let attributes["port"]["related_ground_pin_name"] = "string"
let attributes["port"]["related_power_pin_name"] = "string"
let attributes["port"]["setup_uncertainty"] = "float"
let attributes["port"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["port"]["signal_type"] = "string"
let attributes["port"]["skew_groups"] = "collection"
let attributes["port"]["static_probability"] = "double"
let attributes["port"]["temperature_early"] = "float"
let attributes["port"]["temperature_early_file_line_info"] = "string"
let attributes["port"]["temperature_early_source"] = "string"
let attributes["port"]["temperature_late"] = "float"
let attributes["port"]["temperature_late_file_line_info"] = "string"
let attributes["port"]["temperature_late_source"] = "string"
let attributes["port"]["test_output_only"] = "boolean"
let attributes["port"]["three_state_function"] = "string"
let attributes["port"]["toggle_rate"] = "double"
let attributes["port"]["top_block"] = "collection"
let attributes["port"]["topology_edges"] = "collection"
let attributes["port"]["user_case_value"] = "string"
let attributes["port"]["user_clock_sense"] = "string"
let attributes["port"]["via_ladder_min_layer_for_bottom"] = "collection"
let attributes["port"]["voltage_early"] = "float"
let attributes["port"]["voltage_early_file_line_info"] = "string"
let attributes["port"]["voltage_early_source"] = "string"
let attributes["port"]["voltage_late"] = "float"
let attributes["port"]["voltage_late_file_line_info"] = "string"
let attributes["port"]["voltage_late_source"] = "string"
let attributes["port"]["wire_capacitance_max_fall"] = "float"
let attributes["port"]["wire_capacitance_max_rise"] = "float"
let attributes["port"]["wire_capacitance_min_fall"] = "float"
let attributes["port"]["wire_capacitance_min_rise"] = "float"
let attributes["port"]["worst_max_fall_slack"] = "float"
let attributes["port"]["worst_max_rise_slack"] = "float"
let attributes["port"]["worst_max_slack"] = "float"
let attributes["port"]["worst_min_fall_slack"] = "float"
let attributes["port"]["worst_min_rise_slack"] = "float"
let attributes["port"]["worst_min_slack"] = "float"
let attributes["lib_cell"]={}
let attributes["lib_cell"]["eco_history"] = "string"
let attributes["lib_cell"]["eco_saved_pre_eco_state"] = "boolean"
let attributes["lib_cell"]["hierarchy_owner"] = "string"
let attributes["lib_cell"]["allowable_orientation"] = "orientations"
let attributes["lib_cell"]["always_on"] = "boolean"
let attributes["lib_cell"]["antenna_diode_type"] = "string"
let attributes["lib_cell"]["area"] = "area"
let attributes["lib_cell"]["base_name"] = "string"
let attributes["lib_cell"]["bbox"] = "rect"
let attributes["lib_cell"]["block"] = "collection"
let attributes["lib_cell"]["block_name"] = "string"
let attributes["lib_cell"]["boundary"] = "coord_list"
let attributes["lib_cell"]["boundary_bbox"] = "rect"
let attributes["lib_cell"]["boundary_bounding_box"] = "collection"
let attributes["lib_cell"]["bounding_box"] = "collection"
let attributes["lib_cell"]["cell_footprint"] = "string"
let attributes["lib_cell"]["cell_leakage_power"] = "float"
let attributes["lib_cell"]["clock_gating_integrated_cell"] = "string"
let attributes["lib_cell"]["cmog_class"] = "string"
let attributes["lib_cell"]["core_area_area"] = "double"
let attributes["lib_cell"]["core_area_bbox"] = "rect"
let attributes["lib_cell"]["core_area_boundary"] = "coord_list"
let attributes["lib_cell"]["core_area_bounding_box"] = "collection"
let attributes["lib_cell"]["design"] = "collection"
let attributes["lib_cell"]["design_name"] = "string"
let attributes["lib_cell"]["design_type"] = "analog, black_box, corner, cover, diode, end_cap, feedthrough, fill, filler, flip_chip_driver, flip_chip_pad, lib_cell, macro, module, pad, pad_spacer, well_tap"
let attributes["lib_cell"]["disable_timing"] = "boolean"
let attributes["lib_cell"]["dont_touch"] = "boolean"
let attributes["lib_cell"]["dont_use"] = "boolean"
let attributes["lib_cell"]["excluded_purposes"] = "string"
let attributes["lib_cell"]["extended_name"] = "string"
let attributes["lib_cell"]["frame_update"] = "boolean"
let attributes["lib_cell"]["full_name"] = "string"
let attributes["lib_cell"]["function_class"] = "string"
let attributes["lib_cell"]["function_id"] = "string"
let attributes["lib_cell"]["has_timing_model"] = "boolean"
let attributes["lib_cell"]["height"] = "distance"
let attributes["lib_cell"]["included_purposes"] = "string"
let attributes["lib_cell"]["inner_keepout_margin_hard"] = "margin_list"
let attributes["lib_cell"]["inner_keepout_margin_hard_macro"] = "margin_list"
let attributes["lib_cell"]["inner_keepout_margin_route_blockage"] = "margin_list"
let attributes["lib_cell"]["inner_keepout_margin_route_blockage_layers"] = "collection"
let attributes["lib_cell"]["inner_keepout_margin_soft"] = "margin_list"
let attributes["lib_cell"]["input_voltage_range"] = "string"
let attributes["lib_cell"]["internal_power_derate_factor"] = "float"
let attributes["lib_cell"]["is_black_box"] = "boolean"
let attributes["lib_cell"]["is_combinational"] = "boolean"
let attributes["lib_cell"]["is_compressed"] = "boolean"
let attributes["lib_cell"]["is_current"] = "boolean"
let attributes["lib_cell"]["is_diff_level_shifter"] = "boolean"
let attributes["lib_cell"]["is_diode_cell"] = "boolean"
let attributes["lib_cell"]["is_enable_level_shifter"] = "boolean"
let attributes["lib_cell"]["is_etm_moded_cell"] = "boolean"
let attributes["lib_cell"]["is_fall_edge_triggered"] = "boolean"
let attributes["lib_cell"]["is_hierarchical"] = "boolean"
let attributes["lib_cell"]["is_implicit"] = "boolean"
let attributes["lib_cell"]["is_integrated_clock_gating_cell"] = "boolean"
let attributes["lib_cell"]["is_isolation"] = "boolean"
let attributes["lib_cell"]["is_level_shifter"] = "boolean"
let attributes["lib_cell"]["is_linked"] = "boolean"
let attributes["lib_cell"]["is_mask_shiftable"] = "boolean"
let attributes["lib_cell"]["is_memory_cell"] = "boolean"
let attributes["lib_cell"]["is_modified"] = "boolean"
let attributes["lib_cell"]["is_mux"] = "boolean"
let attributes["lib_cell"]["is_negative_level_sensitive"] = "boolean"
let attributes["lib_cell"]["is_open"] = "boolean"
let attributes["lib_cell"]["is_port_punching_ok"] = "boolean"
let attributes["lib_cell"]["is_positive_level_sensitive"] = "boolean"
let attributes["lib_cell"]["is_power_switch"] = "boolean"
let attributes["lib_cell"]["is_remote"] = "boolean"
let attributes["lib_cell"]["is_retention"] = "boolean"
let attributes["lib_cell"]["is_rise_edge_triggered"] = "boolean"
let attributes["lib_cell"]["is_sequential"] = "boolean"
let attributes["lib_cell"]["is_shared_timing_model"] = "boolean"
let attributes["lib_cell"]["is_soi"] = "boolean"
let attributes["lib_cell"]["is_three_state"] = "boolean"
let attributes["lib_cell"]["keepouts"] = "collection"
let attributes["lib_cell"]["label_name"] = "string"
let attributes["lib_cell"]["last_modified"] = "string"
let attributes["lib_cell"]["last_saved"] = "string"
let attributes["lib_cell"]["leakage_power_derate_factor"] = "float"
let attributes["lib_cell"]["level_shifter_type"] = "string"
let attributes["lib_cell"]["lib"] = "collection"
let attributes["lib_cell"]["lib_name"] = "string"
let attributes["lib_cell"]["master_timing_model"] = "collection"
let attributes["lib_cell"]["mb_bussed_ports"] = "string"
let attributes["lib_cell"]["mb_pin_map"] = "string"
let attributes["lib_cell"]["mb_scan_chain_ports"] = "string"
let attributes["lib_cell"]["multibit_width"] = "int"
let attributes["lib_cell"]["name"] = "string"
let attributes["lib_cell"]["number_of_pins"] = "int"
let attributes["lib_cell"]["object_class"] = "string"
let attributes["lib_cell"]["open_count"] = "int"
let attributes["lib_cell"]["open_count_explicit"] = "int"
let attributes["lib_cell"]["open_count_implicit"] = "int"
let attributes["lib_cell"]["open_mode"] = "string"
let attributes["lib_cell"]["outer_keepout_boundary"] = "coord_list"
let attributes["lib_cell"]["outer_keepout_margin_hard"] = "margin_list"
let attributes["lib_cell"]["outer_keepout_margin_hard_macro"] = "margin_list"
let attributes["lib_cell"]["outer_keepout_margin_route_blockage"] = "margin_list"
let attributes["lib_cell"]["outer_keepout_margin_route_blockage_layers"] = "collection"
let attributes["lib_cell"]["outer_keepout_margin_soft"] = "margin_list"
let attributes["lib_cell"]["output_voltage_range"] = "string"
let attributes["lib_cell"]["pad_cell"] = "boolean"
let attributes["lib_cell"]["power_switch_type"] = "string"
let attributes["lib_cell"]["psc_type_id"] = "int"
let attributes["lib_cell"]["reference_orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["lib_cell"]["retention_cell_style"] = "string"
let attributes["lib_cell"]["sb_degen_fid"] = "string"
let attributes["lib_cell"]["sb_port_cnt"] = "int"
let attributes["lib_cell"]["shared_timing_models"] = "collection"
let attributes["lib_cell"]["single_bit_degenerate"] = "string"
let attributes["lib_cell"]["site_def"] = "collection"
let attributes["lib_cell"]["site_name"] = "string"
let attributes["lib_cell"]["subset_name"] = "string"
let attributes["lib_cell"]["switch_list"] = "string"
let attributes["lib_cell"]["switching_power_derate_factor"] = "float"
let attributes["lib_cell"]["target_boundary_area"] = "area"
let attributes["lib_cell"]["target_utilization"] = "float"
let attributes["lib_cell"]["test_function_id"] = "string"
let attributes["lib_cell"]["test_normal_func_id"] = "string"
let attributes["lib_cell"]["threshold_voltage_group"] = "string"
let attributes["lib_cell"]["threshold_voltage_group_type"] = "string"
let attributes["lib_cell"]["top_module"] = "collection"
let attributes["lib_cell"]["top_module_name"] = "string"
let attributes["lib_cell"]["use_for_size_only"] = "boolean"
let attributes["lib_cell"]["use_frame_blockage"] = "boolean"
let attributes["lib_cell"]["user_function_class"] = "string"
let attributes["lib_cell"]["user_power_group"] = "string"
let attributes["lib_cell"]["valid_purposes"] = "string"
let attributes["lib_cell"]["via0_alignment"] = "boolean"
let attributes["lib_cell"]["via_regions"] = "collection"
let attributes["lib_cell"]["view_name"] = "abstract, conn, design, error, frame, layout, outline, timing"
let attributes["lib_cell"]["width"] = "distance"
let attributes["block"]={}
let attributes["block"]["eco_history"] = "string"
let attributes["block"]["eco_saved_pre_eco_state"] = "boolean"
let attributes["block"]["hierarchy_owner"] = "string"
let attributes["block"]["allowable_orientation"] = "orientations"
let attributes["block"]["always_on"] = "boolean"
let attributes["block"]["antenna_diode_type"] = "string"
let attributes["block"]["area"] = "area"
let attributes["block"]["bbox"] = "rect"
let attributes["block"]["block"] = "collection"
let attributes["block"]["block_name"] = "string"
let attributes["block"]["boundary"] = "coord_list"
let attributes["block"]["boundary_bbox"] = "rect"
let attributes["block"]["boundary_bounding_box"] = "collection"
let attributes["block"]["bounding_box"] = "collection"
let attributes["block"]["clock_gating_integrated_cell"] = "string"
let attributes["block"]["clock_path_target_lib_cell_exclusions"] = "collection"
let attributes["block"]["clock_path_target_lib_cell_subset"] = "collection"
let attributes["block"]["clock_path_target_library_subset"] = "collection"
let attributes["block"]["cmog_class"] = "string"
let attributes["block"]["core_area_area"] = "double"
let attributes["block"]["core_area_bbox"] = "rect"
let attributes["block"]["core_area_boundary"] = "coord_list"
let attributes["block"]["core_area_bounding_box"] = "collection"
let attributes["block"]["data_path_target_lib_cell_exclusions"] = "collection"
let attributes["block"]["data_path_target_lib_cell_subset"] = "collection"
let attributes["block"]["data_path_target_library_subset"] = "collection"
let attributes["block"]["default_site"] = "string"
let attributes["block"]["design"] = "collection"
let attributes["block"]["design_name"] = "string"
let attributes["block"]["design_type"] = "analog, black_box, corner, cover, diode, end_cap, feedthrough, fill, filler, flip_chip_driver, flip_chip_pad, lib_cell, macro, module, pad, pad_spacer, well_tap"
let attributes["block"]["disable_timing"] = "boolean"
let attributes["block"]["dont_touch"] = "boolean"
let attributes["block"]["dont_use"] = "boolean"
let attributes["block"]["early_fall_cell_check_derate_factor"] = "float"
let attributes["block"]["early_fall_cell_check_derate_factor_source"] = "string"
let attributes["block"]["early_fall_cell_check_derate_file_line_info"] = "string"
let attributes["block"]["early_fall_clk_cell_derate_factor"] = "float"
let attributes["block"]["early_fall_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["early_fall_clk_cell_derate_factor_source"] = "string"
let attributes["block"]["early_fall_clk_net_delta_derate_factor"] = "float"
let attributes["block"]["early_fall_clk_net_derate_factor"] = "float"
let attributes["block"]["early_fall_data_cell_derate_factor"] = "float"
let attributes["block"]["early_fall_data_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["early_fall_data_cell_derate_factor_source"] = "string"
let attributes["block"]["early_fall_data_net_delta_derate_factor"] = "float"
let attributes["block"]["early_fall_data_net_derate_factor"] = "float"
let attributes["block"]["early_rise_cell_check_derate_factor"] = "float"
let attributes["block"]["early_rise_cell_check_derate_factor_file_line_info"] = "string"
let attributes["block"]["early_rise_cell_check_derate_factor_source"] = "string"
let attributes["block"]["early_rise_clk_cell_derate_factor"] = "float"
let attributes["block"]["early_rise_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["early_rise_clk_cell_derate_factor_source"] = "string"
let attributes["block"]["early_rise_clk_net_delta_derate_factor"] = "float"
let attributes["block"]["early_rise_clk_net_derate_factor"] = "float"
let attributes["block"]["early_rise_data_cell_derate_factor"] = "float"
let attributes["block"]["early_rise_data_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["early_rise_data_cell_derate_factor_source"] = "string"
let attributes["block"]["early_rise_data_net_delta_derate_factor"] = "float"
let attributes["block"]["early_rise_data_net_derate_factor"] = "float"
let attributes["block"]["edge_number"] = "int"
let attributes["block"]["effective_process_label_early"] = "string"
let attributes["block"]["effective_process_label_late"] = "string"
let attributes["block"]["effective_process_number_early"] = "float"
let attributes["block"]["effective_process_number_late"] = "float"
let attributes["block"]["effective_temperature_early"] = "float"
let attributes["block"]["effective_temperature_late"] = "float"
let attributes["block"]["effective_voltage_early"] = "float"
let attributes["block"]["effective_voltage_late"] = "float"
let attributes["block"]["estimate_timing_net_rule"] = "string"
let attributes["block"]["excluded_purposes"] = "string"
let attributes["block"]["extended_name"] = "string"
let attributes["block"]["file_size"] = "string"
let attributes["block"]["flat_net_count"] = "int"
let attributes["block"]["frame_update"] = "boolean"
let attributes["block"]["full_name"] = "string"
let attributes["block"]["function_class"] = "string"
let attributes["block"]["function_id"] = "string"
let attributes["block"]["has_blackbox_timing"] = "boolean"
let attributes["block"]["has_editable_abstract"] = "boolean"
let attributes["block"]["has_estimated_corner"] = "boolean"
let attributes["block"]["has_timing_model"] = "boolean"
let attributes["block"]["height"] = "distance"
let attributes["block"]["hierarchy_hard_macro_count"] = "int"
let attributes["block"]["hierarchy_has_shadow_netlist"] = "boolean"
let attributes["block"]["hierarchy_has_shadow_netlist_only"] = "boolean"
let attributes["block"]["hierarchy_pad_cell_count"] = "int"
let attributes["block"]["hierarchy_physical_only_cell_count"] = "int"
let attributes["block"]["hierarchy_std_cell_count"] = "int"
let attributes["block"]["hierarchy_switch_cell_count"] = "int"
let attributes["block"]["included_purposes"] = "string"
let attributes["block"]["inner_keepout_margin_hard"] = "margin_list"
let attributes["block"]["inner_keepout_margin_hard_macro"] = "margin_list"
let attributes["block"]["inner_keepout_margin_route_blockage"] = "margin_list"
let attributes["block"]["inner_keepout_margin_route_blockage_layers"] = "collection"
let attributes["block"]["inner_keepout_margin_soft"] = "margin_list"
let attributes["block"]["internal_power_derate_factor"] = "float"
let attributes["block"]["is_active_fill_valid"] = "boolean"
let attributes["block"]["is_black_box"] = "boolean"
let attributes["block"]["is_channel_block"] = "boolean"
let attributes["block"]["is_combinational"] = "boolean"
let attributes["block"]["is_compressed"] = "boolean"
let attributes["block"]["is_current"] = "boolean"
let attributes["block"]["is_diff_level_shifter"] = "boolean"
let attributes["block"]["is_diode_cell"] = "boolean"
let attributes["block"]["is_enable_level_shifter"] = "boolean"
let attributes["block"]["is_etm_moded_cell"] = "boolean"
let attributes["block"]["is_fall_edge_triggered"] = "boolean"
let attributes["block"]["is_hierarchical"] = "boolean"
let attributes["block"]["is_implicit"] = "boolean"
let attributes["block"]["is_integrated_clock_gating_cell"] = "boolean"
let attributes["block"]["is_isolation"] = "boolean"
let attributes["block"]["is_level_shifter"] = "boolean"
let attributes["block"]["is_linked"] = "boolean"
let attributes["block"]["is_mask_shiftable"] = "boolean"
let attributes["block"]["is_memory_cell"] = "boolean"
let attributes["block"]["is_modified"] = "boolean"
let attributes["block"]["is_mux"] = "boolean"
let attributes["block"]["is_negative_level_sensitive"] = "boolean"
let attributes["block"]["is_open"] = "boolean"
let attributes["block"]["is_port_punching_ok"] = "boolean"
let attributes["block"]["is_positive_level_sensitive"] = "boolean"
let attributes["block"]["is_power_switch"] = "boolean"
let attributes["block"]["is_readonly_abstract"] = "boolean"
let attributes["block"]["is_remote"] = "boolean"
let attributes["block"]["is_retention"] = "boolean"
let attributes["block"]["is_rise_edge_triggered"] = "boolean"
let attributes["block"]["is_sequential"] = "boolean"
let attributes["block"]["is_soi"] = "boolean"
let attributes["block"]["is_three_state"] = "boolean"
let attributes["block"]["is_user_upf"] = "boolean"
let attributes["block"]["keepouts"] = "collection"
let attributes["block"]["label_name"] = "string"
let attributes["block"]["last_modified"] = "string"
let attributes["block"]["last_saved"] = "string"
let attributes["block"]["late_fall_cell_check_derate_factor"] = "float"
let attributes["block"]["late_fall_cell_check_derate_factor_file_line_info"] = "string"
let attributes["block"]["late_fall_cell_check_derate_factor_source"] = "string"
let attributes["block"]["late_fall_clk_cell_derate_factor"] = "float"
let attributes["block"]["late_fall_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["late_fall_clk_cell_derate_factor_source"] = "string"
let attributes["block"]["late_fall_clk_net_delta_derate_factor"] = "float"
let attributes["block"]["late_fall_clk_net_derate_factor"] = "float"
let attributes["block"]["late_fall_data_cell_derate_factor"] = "float"
let attributes["block"]["late_fall_data_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["late_fall_data_cell_derate_factor_source"] = "string"
let attributes["block"]["late_fall_data_net_delta_derate_factor"] = "float"
let attributes["block"]["late_fall_data_net_derate_factor"] = "float"
let attributes["block"]["late_rise_cell_check_derate_factor"] = "float"
let attributes["block"]["late_rise_cell_check_derate_factor_file_line_info"] = "string"
let attributes["block"]["late_rise_cell_check_derate_factor_source"] = "string"
let attributes["block"]["late_rise_clk_cell_derate_factor"] = "float"
let attributes["block"]["late_rise_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["late_rise_clk_cell_derate_factor_source"] = "string"
let attributes["block"]["late_rise_clk_net_delta_derate_factor"] = "float"
let attributes["block"]["late_rise_clk_net_derate_factor"] = "float"
let attributes["block"]["late_rise_data_cell_derate_factor"] = "float"
let attributes["block"]["late_rise_data_cell_derate_factor_file_line_info"] = "string"
let attributes["block"]["late_rise_data_cell_derate_factor_source"] = "string"
let attributes["block"]["late_rise_data_net_delta_derate_factor"] = "float"
let attributes["block"]["late_rise_data_net_derate_factor"] = "float"
let attributes["block"]["leakage_power_derate_factor"] = "float"
let attributes["block"]["lib"] = "collection"
let attributes["block"]["lib_name"] = "string"
let attributes["block"]["logic_only"] = "boolean"
let attributes["block"]["max_capacitance_constraint"] = "float"
let attributes["block"]["max_lvth_percentage"] = "float"
let attributes["block"]["max_transition_constraint"] = "float"
let attributes["block"]["mb_bussed_ports"] = "string"
let attributes["block"]["mb_pin_map"] = "string"
let attributes["block"]["mb_scan_chain_ports"] = "string"
let attributes["block"]["min_capacitance_constraint"] = "float"
let attributes["block"]["multibit_width"] = "int"
let attributes["block"]["name"] = "string"
let attributes["block"]["number_of_pins"] = "int"
let attributes["block"]["object_class"] = "string"
let attributes["block"]["open_count"] = "int"
let attributes["block"]["open_count_explicit"] = "int"
let attributes["block"]["open_count_implicit"] = "int"
let attributes["block"]["open_mode"] = "string"
let attributes["block"]["operating_condition_early"] = "string"
let attributes["block"]["operating_condition_late"] = "string"
let attributes["block"]["outer_keepout_boundary"] = "coord_list"
let attributes["block"]["outer_keepout_margin_hard"] = "margin_list"
let attributes["block"]["outer_keepout_margin_hard_macro"] = "margin_list"
let attributes["block"]["outer_keepout_margin_route_blockage"] = "margin_list"
let attributes["block"]["outer_keepout_margin_route_blockage_layers"] = "collection"
let attributes["block"]["outer_keepout_margin_soft"] = "margin_list"
let attributes["block"]["pad_cell"] = "boolean"
let attributes["block"]["process_label_early"] = "string"
let attributes["block"]["process_label_early_file_line_info"] = "string"
let attributes["block"]["process_label_early_source"] = "string"
let attributes["block"]["process_label_late"] = "string"
let attributes["block"]["process_label_late_file_line_info"] = "string"
let attributes["block"]["process_label_late_source"] = "string"
let attributes["block"]["process_number_early"] = "float"
let attributes["block"]["process_number_early_file_line_info"] = "string"
let attributes["block"]["process_number_early_source"] = "string"
let attributes["block"]["process_number_late"] = "float"
let attributes["block"]["process_number_late_file_line_info"] = "string"
let attributes["block"]["process_number_late_source"] = "string"
let attributes["block"]["psc_type_id"] = "int"
let attributes["block"]["reference_orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["block"]["sb_degen_fid"] = "string"
let attributes["block"]["sb_port_cnt"] = "int"
let attributes["block"]["single_bit_degenerate"] = "string"
let attributes["block"]["site_def"] = "collection"
let attributes["block"]["site_name"] = "string"
let attributes["block"]["subset_name"] = "string"
let attributes["block"]["switch_list"] = "string"
let attributes["block"]["switching_power_derate_factor"] = "float"
let attributes["block"]["target_boundary_area"] = "area"
let attributes["block"]["target_utilization"] = "float"
let attributes["block"]["temperature_early"] = "float"
let attributes["block"]["temperature_early_file_line_info"] = "string"
let attributes["block"]["temperature_early_source"] = "string"
let attributes["block"]["temperature_late"] = "float"
let attributes["block"]["temperature_late_file_line_info"] = "string"
let attributes["block"]["temperature_late_source"] = "string"
let attributes["block"]["test_function_id"] = "string"
let attributes["block"]["test_normal_func_id"] = "string"
let attributes["block"]["threshold_voltage_group"] = "string"
let attributes["block"]["threshold_voltage_group_type"] = "string"
let attributes["block"]["top_module"] = "collection"
let attributes["block"]["top_module_name"] = "string"
let attributes["block"]["use_for_size_only"] = "boolean"
let attributes["block"]["use_frame_blockage"] = "boolean"
let attributes["block"]["user_function_class"] = "string"
let attributes["block"]["valid_purposes"] = "string"
let attributes["block"]["via0_alignment"] = "boolean"
let attributes["block"]["via_regions"] = "collection"
let attributes["block"]["view_name"] = "abstract, conn, design, error, frame, layout, outline, timing"
let attributes["block"]["voltage_early"] = "float"
let attributes["block"]["voltage_early_file_line_info"] = "string"
let attributes["block"]["voltage_early_source"] = "string"
let attributes["block"]["voltage_late"] = "float"
let attributes["block"]["voltage_late_file_line_info"] = "string"
let attributes["block"]["voltage_late_source"] = "string"
let attributes["block"]["width"] = "distance"
let attributes["design"]={}
let attributes["design"]["eco_history"] = "string"
let attributes["design"]["eco_saved_pre_eco_state"] = "boolean"
let attributes["design"]["hierarchy_owner"] = "string"
let attributes["design"]["allowable_orientation"] = "orientations"
let attributes["design"]["always_on"] = "boolean"
let attributes["design"]["antenna_diode_type"] = "string"
let attributes["design"]["area"] = "area"
let attributes["design"]["bbox"] = "rect"
let attributes["design"]["block"] = "collection"
let attributes["design"]["block_name"] = "string"
let attributes["design"]["boundary"] = "coord_list"
let attributes["design"]["boundary_bbox"] = "rect"
let attributes["design"]["boundary_bounding_box"] = "collection"
let attributes["design"]["bounding_box"] = "collection"
let attributes["design"]["clock_gating_integrated_cell"] = "string"
let attributes["design"]["cmog_class"] = "string"
let attributes["design"]["core_area_area"] = "double"
let attributes["design"]["core_area_bbox"] = "rect"
let attributes["design"]["core_area_boundary"] = "coord_list"
let attributes["design"]["core_area_bounding_box"] = "collection"
let attributes["design"]["default_site"] = "string"
let attributes["design"]["design"] = "collection"
let attributes["design"]["design_name"] = "string"
let attributes["design"]["design_type"] = "analog, black_box, corner, cover, diode, end_cap, feedthrough, fill, filler, flip_chip_driver, flip_chip_pad, lib_cell, macro, module, pad, pad_spacer, well_tap"
let attributes["design"]["disable_timing"] = "boolean"
let attributes["design"]["dont_touch"] = "boolean"
let attributes["design"]["dont_use"] = "boolean"
let attributes["design"]["early_fall_cell_check_derate_factor"] = "float"
let attributes["design"]["early_fall_cell_check_derate_factor_source"] = "string"
let attributes["design"]["early_fall_cell_check_derate_file_line_info"] = "string"
let attributes["design"]["early_fall_clk_cell_derate_factor"] = "float"
let attributes["design"]["early_fall_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["early_fall_clk_cell_derate_factor_source"] = "string"
let attributes["design"]["early_fall_clk_net_delta_derate_factor"] = "float"
let attributes["design"]["early_fall_clk_net_derate_factor"] = "float"
let attributes["design"]["early_fall_data_cell_derate_factor"] = "float"
let attributes["design"]["early_fall_data_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["early_fall_data_cell_derate_factor_source"] = "string"
let attributes["design"]["early_fall_data_net_delta_derate_factor"] = "float"
let attributes["design"]["early_fall_data_net_derate_factor"] = "float"
let attributes["design"]["early_rise_cell_check_derate_factor"] = "float"
let attributes["design"]["early_rise_cell_check_derate_factor_file_line_info"] = "string"
let attributes["design"]["early_rise_cell_check_derate_factor_source"] = "string"
let attributes["design"]["early_rise_clk_cell_derate_factor"] = "float"
let attributes["design"]["early_rise_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["early_rise_clk_cell_derate_factor_source"] = "string"
let attributes["design"]["early_rise_clk_net_delta_derate_factor"] = "float"
let attributes["design"]["early_rise_clk_net_derate_factor"] = "float"
let attributes["design"]["early_rise_data_cell_derate_factor"] = "float"
let attributes["design"]["early_rise_data_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["early_rise_data_cell_derate_factor_source"] = "string"
let attributes["design"]["early_rise_data_net_delta_derate_factor"] = "float"
let attributes["design"]["early_rise_data_net_derate_factor"] = "float"
let attributes["design"]["effective_process_label_early"] = "string"
let attributes["design"]["effective_process_label_late"] = "string"
let attributes["design"]["effective_process_number_early"] = "float"
let attributes["design"]["effective_process_number_late"] = "float"
let attributes["design"]["effective_temperature_early"] = "float"
let attributes["design"]["effective_temperature_late"] = "float"
let attributes["design"]["effective_voltage_early"] = "float"
let attributes["design"]["effective_voltage_late"] = "float"
let attributes["design"]["excluded_purposes"] = "string"
let attributes["design"]["extended_name"] = "string"
let attributes["design"]["frame_update"] = "boolean"
let attributes["design"]["full_name"] = "string"
let attributes["design"]["function_class"] = "string"
let attributes["design"]["function_id"] = "string"
let attributes["design"]["has_timing_model"] = "boolean"
let attributes["design"]["height"] = "distance"
let attributes["design"]["included_purposes"] = "string"
let attributes["design"]["inner_keepout_margin_hard"] = "margin_list"
let attributes["design"]["inner_keepout_margin_hard_macro"] = "margin_list"
let attributes["design"]["inner_keepout_margin_route_blockage"] = "margin_list"
let attributes["design"]["inner_keepout_margin_route_blockage_layers"] = "collection"
let attributes["design"]["inner_keepout_margin_soft"] = "margin_list"
let attributes["design"]["internal_power_derate_factor"] = "float"
let attributes["design"]["is_black_box"] = "boolean"
let attributes["design"]["is_combinational"] = "boolean"
let attributes["design"]["is_compressed"] = "boolean"
let attributes["design"]["is_current"] = "boolean"
let attributes["design"]["is_diff_level_shifter"] = "boolean"
let attributes["design"]["is_diode_cell"] = "boolean"
let attributes["design"]["is_enable_level_shifter"] = "boolean"
let attributes["design"]["is_etm_moded_cell"] = "boolean"
let attributes["design"]["is_fall_edge_triggered"] = "boolean"
let attributes["design"]["is_hierarchical"] = "boolean"
let attributes["design"]["is_implicit"] = "boolean"
let attributes["design"]["is_integrated_clock_gating_cell"] = "boolean"
let attributes["design"]["is_isolation"] = "boolean"
let attributes["design"]["is_level_shifter"] = "boolean"
let attributes["design"]["is_linked"] = "boolean"
let attributes["design"]["is_mask_shiftable"] = "boolean"
let attributes["design"]["is_memory_cell"] = "boolean"
let attributes["design"]["is_modified"] = "boolean"
let attributes["design"]["is_mux"] = "boolean"
let attributes["design"]["is_negative_level_sensitive"] = "boolean"
let attributes["design"]["is_open"] = "boolean"
let attributes["design"]["is_port_punching_ok"] = "boolean"
let attributes["design"]["is_positive_level_sensitive"] = "boolean"
let attributes["design"]["is_power_switch"] = "boolean"
let attributes["design"]["is_remote"] = "boolean"
let attributes["design"]["is_retention"] = "boolean"
let attributes["design"]["is_rise_edge_triggered"] = "boolean"
let attributes["design"]["is_sequential"] = "boolean"
let attributes["design"]["is_soi"] = "boolean"
let attributes["design"]["is_three_state"] = "boolean"
let attributes["design"]["keepouts"] = "collection"
let attributes["design"]["label_name"] = "string"
let attributes["design"]["last_modified"] = "string"
let attributes["design"]["last_saved"] = "string"
let attributes["design"]["late_fall_cell_check_derate_factor"] = "float"
let attributes["design"]["late_fall_cell_check_derate_factor_file_line_info"] = "string"
let attributes["design"]["late_fall_cell_check_derate_factor_source"] = "string"
let attributes["design"]["late_fall_clk_cell_derate_factor"] = "float"
let attributes["design"]["late_fall_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["late_fall_clk_cell_derate_factor_source"] = "string"
let attributes["design"]["late_fall_clk_net_delta_derate_factor"] = "float"
let attributes["design"]["late_fall_clk_net_derate_factor"] = "float"
let attributes["design"]["late_fall_data_cell_derate_factor"] = "float"
let attributes["design"]["late_fall_data_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["late_fall_data_cell_derate_factor_source"] = "string"
let attributes["design"]["late_fall_data_net_delta_derate_factor"] = "float"
let attributes["design"]["late_fall_data_net_derate_factor"] = "float"
let attributes["design"]["late_rise_cell_check_derate_factor"] = "float"
let attributes["design"]["late_rise_cell_check_derate_factor_file_line_info"] = "string"
let attributes["design"]["late_rise_cell_check_derate_factor_source"] = "string"
let attributes["design"]["late_rise_clk_cell_derate_factor"] = "float"
let attributes["design"]["late_rise_clk_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["late_rise_clk_cell_derate_factor_source"] = "string"
let attributes["design"]["late_rise_clk_net_delta_derate_factor"] = "float"
let attributes["design"]["late_rise_clk_net_derate_factor"] = "float"
let attributes["design"]["late_rise_data_cell_derate_factor"] = "float"
let attributes["design"]["late_rise_data_cell_derate_factor_file_line_info"] = "string"
let attributes["design"]["late_rise_data_cell_derate_factor_source"] = "string"
let attributes["design"]["late_rise_data_net_delta_derate_factor"] = "float"
let attributes["design"]["late_rise_data_net_derate_factor"] = "float"
let attributes["design"]["leakage_power_derate_factor"] = "float"
let attributes["design"]["lib"] = "collection"
let attributes["design"]["lib_name"] = "string"
let attributes["design"]["logic_only"] = "boolean"
let attributes["design"]["max_capacitance_constraint"] = "float"
let attributes["design"]["max_lvth_percentage"] = "float"
let attributes["design"]["max_transition_constraint"] = "float"
let attributes["design"]["mb_bussed_ports"] = "string"
let attributes["design"]["mb_pin_map"] = "string"
let attributes["design"]["mb_scan_chain_ports"] = "string"
let attributes["design"]["min_capacitance_constraint"] = "float"
let attributes["design"]["multibit_width"] = "int"
let attributes["design"]["name"] = "string"
let attributes["design"]["number_of_pins"] = "int"
let attributes["design"]["object_class"] = "string"
let attributes["design"]["open_count"] = "int"
let attributes["design"]["open_count_explicit"] = "int"
let attributes["design"]["open_count_implicit"] = "int"
let attributes["design"]["open_mode"] = "string"
let attributes["design"]["operating_condition_early"] = "string"
let attributes["design"]["operating_condition_late"] = "string"
let attributes["design"]["outer_keepout_boundary"] = "coord_list"
let attributes["design"]["outer_keepout_margin_hard"] = "margin_list"
let attributes["design"]["outer_keepout_margin_hard_macro"] = "margin_list"
let attributes["design"]["outer_keepout_margin_route_blockage"] = "margin_list"
let attributes["design"]["outer_keepout_margin_route_blockage_layers"] = "collection"
let attributes["design"]["outer_keepout_margin_soft"] = "margin_list"
let attributes["design"]["pad_cell"] = "boolean"
let attributes["design"]["process_label_early"] = "string"
let attributes["design"]["process_label_early_file_line_info"] = "string"
let attributes["design"]["process_label_early_source"] = "string"
let attributes["design"]["process_label_late"] = "string"
let attributes["design"]["process_label_late_file_line_info"] = "string"
let attributes["design"]["process_label_late_source"] = "string"
let attributes["design"]["process_number_early"] = "float"
let attributes["design"]["process_number_early_file_line_info"] = "string"
let attributes["design"]["process_number_early_source"] = "string"
let attributes["design"]["process_number_late"] = "float"
let attributes["design"]["process_number_late_file_line_info"] = "string"
let attributes["design"]["process_number_late_source"] = "string"
let attributes["design"]["psc_type_id"] = "int"
let attributes["design"]["reference_orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["design"]["sb_degen_fid"] = "string"
let attributes["design"]["sb_port_cnt"] = "int"
let attributes["design"]["single_bit_degenerate"] = "string"
let attributes["design"]["site_def"] = "collection"
let attributes["design"]["site_name"] = "string"
let attributes["design"]["subset_name"] = "string"
let attributes["design"]["switch_list"] = "string"
let attributes["design"]["switching_power_derate_factor"] = "float"
let attributes["design"]["target_boundary_area"] = "area"
let attributes["design"]["target_utilization"] = "float"
let attributes["design"]["temperature_early"] = "float"
let attributes["design"]["temperature_early_file_line_info"] = "string"
let attributes["design"]["temperature_early_source"] = "string"
let attributes["design"]["temperature_late"] = "float"
let attributes["design"]["temperature_late_file_line_info"] = "string"
let attributes["design"]["temperature_late_source"] = "string"
let attributes["design"]["test_function_id"] = "string"
let attributes["design"]["test_normal_func_id"] = "string"
let attributes["design"]["threshold_voltage_group"] = "string"
let attributes["design"]["threshold_voltage_group_type"] = "string"
let attributes["design"]["top_module"] = "collection"
let attributes["design"]["top_module_name"] = "string"
let attributes["design"]["use_for_size_only"] = "boolean"
let attributes["design"]["use_frame_blockage"] = "boolean"
let attributes["design"]["user_function_class"] = "string"
let attributes["design"]["valid_purposes"] = "string"
let attributes["design"]["via0_alignment"] = "boolean"
let attributes["design"]["via_regions"] = "collection"
let attributes["design"]["view_name"] = "abstract, conn, design, error, frame, layout, outline, timing"
let attributes["design"]["voltage_early"] = "float"
let attributes["design"]["voltage_early_file_line_info"] = "string"
let attributes["design"]["voltage_early_source"] = "string"
let attributes["design"]["voltage_late"] = "float"
let attributes["design"]["voltage_late_file_line_info"] = "string"
let attributes["design"]["voltage_late_source"] = "string"
let attributes["design"]["width"] = "distance"
let attributes["pg_region"]={}
let attributes["pg_region"]["exclusive"] = "string"
let attributes["pg_region"]["hierarchy_owner"] = "string"
let attributes["pg_region"]["is_td"] = "boolean"
let attributes["pg_region"]["pattern"] = "string"
let attributes["pg_region"]["pd_intent"] = "boolean"
let attributes["pg_region"]["pd_intent_full_name"] = "string"
let attributes["pg_region"]["pd_intent_power_domain_info"] = "string"
let attributes["pg_region"]["pd_intent_ref_name"] = "string"
let attributes["pg_region"]["pd_intent_user_name"] = "string"
let attributes["pg_region"]["pg_layers"] = "string"
let attributes["pg_region"]["pgr_supply"] = "string"
let attributes["pg_region"]["track_tag"] = "string"
let attributes["pg_region"]["bbox"] = "rect"
let attributes["pg_region"]["boundary"] = "coord_list"
let attributes["pg_region"]["bounding_box"] = "collection"
let attributes["pg_region"]["full_name"] = "string"
let attributes["pg_region"]["groups"] = "collection"
let attributes["pg_region"]["in_edit_group"] = "boolean"
let attributes["pg_region"]["is_shadow"] = "boolean"
let attributes["pg_region"]["name"] = "string"
let attributes["pg_region"]["object_class"] = "string"
let attributes["pg_region"]["parent_block"] = "collection"
let attributes["pg_region"]["parent_block_cell"] = "collection"
let attributes["pg_region"]["parent_cell"] = "collection"
let attributes["pg_region"]["physical_status"] = "unrestricted"
let attributes["pg_region"]["region"] = "coord_list"
let attributes["pg_region"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["pg_region"]["top_block"] = "collection"
let attributes["placement_blockage"]={}
let attributes["placement_blockage"]["hierarchy_owner"] = "string"
let attributes["placement_blockage"]["is_td"] = "boolean"
let attributes["placement_blockage"]["pd_intent"] = "boolean"
let attributes["placement_blockage"]["pd_intent_full_name"] = "string"
let attributes["placement_blockage"]["pd_intent_power_domain_info"] = "string"
let attributes["placement_blockage"]["pd_intent_ref_name"] = "string"
let attributes["placement_blockage"]["pd_intent_user_name"] = "string"
let attributes["placement_blockage"]["area"] = "area"
let attributes["placement_blockage"]["bbox"] = "rect"
let attributes["placement_blockage"]["blockage_purpose"] = "user"
let attributes["placement_blockage"]["blockage_type"] = "allow_rp_only, category, hard, hard_macro, overlap, partial, register, rp_group, soft, unknown"
let attributes["placement_blockage"]["blocked_percentage"] = "to 100"
let attributes["placement_blockage"]["boundary"] = "coord_list"
let attributes["placement_blockage"]["bounding_box"] = "collection"
let attributes["placement_blockage"]["category"] = "string"
let attributes["placement_blockage"]["for_floorplan_rules"] = "boolean"
let attributes["placement_blockage"]["full_name"] = "string"
let attributes["placement_blockage"]["groups"] = "collection"
let attributes["placement_blockage"]["in_edit_group"] = "boolean"
let attributes["placement_blockage"]["is_derived"] = "boolean"
let attributes["placement_blockage"]["is_pin_protect"] = "boolean"
let attributes["placement_blockage"]["is_shadow"] = "boolean"
let attributes["placement_blockage"]["name"] = "string"
let attributes["placement_blockage"]["object_class"] = "string"
let attributes["placement_blockage"]["parent_block"] = "collection"
let attributes["placement_blockage"]["parent_block_cell"] = "collection"
let attributes["placement_blockage"]["parent_cell"] = "collection"
let attributes["placement_blockage"]["physical_status"] = "unrestricted"
let attributes["placement_blockage"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["placement_blockage"]["top_block"] = "collection"
let attributes["track"]={}
let attributes["track"]["hierarchy_owner"] = "string"
let attributes["track"]["bbox"] = "rect"
let attributes["track"]["bounding_box"] = "collection"
let attributes["track"]["design_name"] = "string"
let attributes["track"]["direction"] = "string"
let attributes["track"]["end_grid_high_offset"] = "distance"
let attributes["track"]["end_grid_high_steps"] = "distance_list"
let attributes["track"]["end_grid_low_offset"] = "distance"
let attributes["track"]["end_grid_low_steps"] = "distance_list"
let attributes["track"]["full_name"] = "string"
let attributes["track"]["groups"] = "collection"
let attributes["track"]["high"] = "distance"
let attributes["track"]["high_coordinate"] = "coord"
let attributes["track"]["in_edit_group"] = "boolean"
let attributes["track"]["is_default"] = "boolean"
let attributes["track"]["is_derived"] = "boolean"
let attributes["track"]["is_non_reserved"] = "boolean"
let attributes["track"]["is_reserved"] = "boolean"
let attributes["track"]["is_shadow"] = "boolean"
let attributes["track"]["layer"] = "collection"
let attributes["track"]["layer_name"] = "string"
let attributes["track"]["layer_number"] = "int"
let attributes["track"]["low"] = "distance"
let attributes["track"]["low_coordinate"] = "coord"
let attributes["track"]["mask_pattern"] = "string"
let attributes["track"]["name"] = "string"
let attributes["track"]["number_of_tracks"] = "int"
let attributes["track"]["object_class"] = "string"
let attributes["track"]["object_id"] = "int"
let attributes["track"]["parent_block"] = "collection"
let attributes["track"]["parent_block_cell"] = "collection"
let attributes["track"]["parent_cell"] = "collection"
let attributes["track"]["physical_status"] = "unrestricted"
let attributes["track"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["track"]["space"] = "distance"
let attributes["track"]["start"] = "distance"
let attributes["track"]["top_block"] = "collection"
let attributes["track"]["width"] = "distance"
let attributes["bound"]={}
let attributes["bound"]["hierarchy_owner"] = "string"
let attributes["bound"]["iccpp_tr_region"] = "string"
let attributes["bound"]["is_td"] = "boolean"
let attributes["bound"]["pd_intent"] = "boolean"
let attributes["bound"]["pd_intent_full_name"] = "string"
let attributes["bound"]["pd_intent_power_domain_info"] = "string"
let attributes["bound"]["pd_intent_ref_name"] = "string"
let attributes["bound"]["pd_intent_user_name"] = "string"
let attributes["bound"]["allowed_design_type"] = "analog, black_box, corner, cover, diode, end_cap, feedthrough, fill, filler, flip_chip_driver, flip_chip_pad, lib_cell, macro, module, pad, pad_spacer, well_tap"
let attributes["bound"]["bbox"] = "rect"
let attributes["bound"]["bound_type"] = "string"
let attributes["bound"]["bounding_box"] = "collection"
let attributes["bound"]["cells"] = "collection"
let attributes["bound"]["central_object"] = "collection"
let attributes["bound"]["dimensions"] = "coord"
let attributes["bound"]["effort"] = "low, medium, ultra"
let attributes["bound"]["excluded_cells"] = "collection"
let attributes["bound"]["flat_hier_names"] = "string"
let attributes["bound"]["full_name"] = "string"
let attributes["bound"]["groups"] = "collection"
let attributes["bound"]["in_edit_group"] = "boolean"
let attributes["bound"]["instance_names"] = "string"
let attributes["bound"]["is_exclusive"] = "boolean"
let attributes["bound"]["is_hierarchical"] = "boolean"
let attributes["bound"]["is_off_edge"] = "boolean"
let attributes["bound"]["is_shadow"] = "boolean"
let attributes["bound"]["name"] = "string"
let attributes["bound"]["object_class"] = "string"
let attributes["bound"]["parent_block"] = "collection"
let attributes["bound"]["parent_block_cell"] = "collection"
let attributes["bound"]["parent_cell"] = "collection"
let attributes["bound"]["physical_status"] = "unrestricted"
let attributes["bound"]["ports"] = "collection"
let attributes["bound"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["bound"]["shape_count"] = "int"
let attributes["bound"]["shape_type"] = "string"
let attributes["bound"]["shapes"] = "collection"
let attributes["bound"]["top_block"] = "collection"
let attributes["bound"]["type"] = "soft"
let attributes["bound"]["utilization"] = "double"
let attributes["routing_guide"]={}
let attributes["routing_guide"]["hierarchy_owner"] = "string"
let attributes["routing_guide"]["is_td"] = "boolean"
let attributes["routing_guide"]["pd_intent"] = "boolean"
let attributes["routing_guide"]["pd_intent_full_name"] = "string"
let attributes["routing_guide"]["pd_intent_power_domain_info"] = "string"
let attributes["routing_guide"]["pd_intent_ref_name"] = "string"
let attributes["routing_guide"]["pd_intent_user_name"] = "string"
let attributes["routing_guide"]["access_preference"] = "string"
let attributes["routing_guide"]["area"] = "area"
let attributes["routing_guide"]["bbox"] = "rect"
let attributes["routing_guide"]["boundary"] = "rect"
let attributes["routing_guide"]["boundary_bounding_box"] = "collection"
let attributes["routing_guide"]["bounding_box"] = "collection"
let attributes["routing_guide"]["design"] = "collection"
let attributes["routing_guide"]["full_name"] = "string"
let attributes["routing_guide"]["groups"] = "collection"
let attributes["routing_guide"]["horizontal_track_utilization"] = "to 100"
let attributes["routing_guide"]["is_shadow"] = "boolean"
let attributes["routing_guide"]["layer_names"] = "string"
let attributes["routing_guide"]["layers"] = "collection"
let attributes["routing_guide"]["max_patterns"] = "string"
let attributes["routing_guide"]["name"] = "string"
let attributes["routing_guide"]["object_class"] = "string"
let attributes["routing_guide"]["parent_block"] = "collection"
let attributes["routing_guide"]["parent_block_cell"] = "collection"
let attributes["routing_guide"]["parent_cell"] = "collection"
let attributes["routing_guide"]["physical_status"] = "unrestricted"
let attributes["routing_guide"]["preferred_direction_only"] = "boolean"
let attributes["routing_guide"]["routing_guide_type"] = "area_double_via, default, design_boundary_blockage, extra_detour_region, forbidden_preferred_grid_extension, max_patterns, metal_cut_allowed, min_area, over_icovl_cell_layers, pin_access, river_routing, single_row_via_ladder_pattern_must_join_allowed, standard_cell_region, switched_direction_only"
let attributes["routing_guide"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["routing_guide"]["switch_preferred_direction"] = "boolean"
let attributes["routing_guide"]["top_block"] = "collection"
let attributes["routing_guide"]["vertical_track_utilization"] = "to 100"
let attributes["voltage_area"]={}
let attributes["voltage_area"]["hierarchy_owner"] = "string"
let attributes["voltage_area"]["is_td"] = "boolean"
let attributes["voltage_area"]["pd_intent"] = "boolean"
let attributes["voltage_area"]["pd_intent_full_name"] = "string"
let attributes["voltage_area"]["pd_intent_power_domain_info"] = "string"
let attributes["voltage_area"]["pd_intent_ref_name"] = "string"
let attributes["voltage_area"]["pd_intent_user_name"] = "string"
let attributes["voltage_area"]["pg_layers"] = "string"
let attributes["voltage_area"]["bbox"] = "rect"
let attributes["voltage_area"]["bounding_box"] = "collection"
let attributes["voltage_area"]["cells"] = "collection"
let attributes["voltage_area"]["color"] = "int"
let attributes["voltage_area"]["effective_guard_band_boundaries"] = "poly_list"
let attributes["voltage_area"]["effective_rectangles"] = "poly_list"
let attributes["voltage_area"]["effective_shapes"] = "poly_list"
let attributes["voltage_area"]["full_name"] = "string"
let attributes["voltage_area"]["ground_net"] = "collection"
let attributes["voltage_area"]["groups"] = "collection"
let attributes["voltage_area"]["guard_band_boundaries"] = "poly_list"
let attributes["voltage_area"]["guard_bands"] = "guard_band_list"
let attributes["voltage_area"]["in_edit_group"] = "boolean"
let attributes["voltage_area"]["is_fixed"] = "boolean"
let attributes["voltage_area"]["is_fully_specified"] = "boolean"
let attributes["voltage_area"]["is_legal"] = "boolean"
let attributes["voltage_area"]["is_primary"] = "boolean"
let attributes["voltage_area"]["is_shadow"] = "boolean"
let attributes["voltage_area"]["local_cells"] = "collection"
let attributes["voltage_area"]["name"] = "string"
let attributes["voltage_area"]["object_class"] = "string"
let attributes["voltage_area"]["parent_block"] = "collection"
let attributes["voltage_area"]["parent_block_cell"] = "collection"
let attributes["voltage_area"]["parent_cell"] = "collection"
let attributes["voltage_area"]["physical_status"] = "unrestricted"
let attributes["voltage_area"]["power_domains"] = "collection"
let attributes["voltage_area"]["power_net"] = "collection"
let attributes["voltage_area"]["region"] = "poly_list"
let attributes["voltage_area"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["voltage_area"]["shape_count"] = "int"
let attributes["voltage_area"]["shapes"] = "collection"
let attributes["voltage_area"]["signature"] = "string"
let attributes["voltage_area"]["target_utilization"] = "float"
let attributes["voltage_area"]["top_block"] = "collection"
let attributes["voltage_area"]["use_power_domain_cells"] = "boolean"
let attributes["voltage_area"]["voltage_area_rules"] = "collection"
let attributes["voltage_area_shape"]={}
let attributes["voltage_area_shape"]["hierarchy_owner"] = "string"
let attributes["voltage_area_shape"]["is_td"] = "boolean"
let attributes["voltage_area_shape"]["pd_intent"] = "boolean"
let attributes["voltage_area_shape"]["pd_intent_full_name"] = "string"
let attributes["voltage_area_shape"]["pd_intent_power_domain_info"] = "string"
let attributes["voltage_area_shape"]["pd_intent_ref_name"] = "string"
let attributes["voltage_area_shape"]["pd_intent_user_name"] = "string"
let attributes["voltage_area_shape"]["bbox"] = "rect"
let attributes["voltage_area_shape"]["boundary"] = "polygon"
let attributes["voltage_area_shape"]["bounding_box"] = "collection"
let attributes["voltage_area_shape"]["cells"] = "collection"
let attributes["voltage_area_shape"]["effective_guard_band_boundaries"] = "poly_list"
let attributes["voltage_area_shape"]["effective_rectangles"] = "poly_list"
let attributes["voltage_area_shape"]["effective_shapes"] = "poly_list"
let attributes["voltage_area_shape"]["full_name"] = "string"
let attributes["voltage_area_shape"]["groups"] = "collection"
let attributes["voltage_area_shape"]["guard_band"] = "guard_band"
let attributes["voltage_area_shape"]["guard_band_boundary"] = "polygon"
let attributes["voltage_area_shape"]["is_exclusive"] = "boolean"
let attributes["voltage_area_shape"]["is_legal"] = "boolean"
let attributes["voltage_area_shape"]["name"] = "string"
let attributes["voltage_area_shape"]["object_class"] = "string"
let attributes["voltage_area_shape"]["parent_block"] = "collection"
let attributes["voltage_area_shape"]["parent_block_cell"] = "collection"
let attributes["voltage_area_shape"]["parent_cell"] = "collection"
let attributes["voltage_area_shape"]["stacking_order"] = "int"
let attributes["voltage_area_shape"]["switch_cell_placement_type"] = "hybrid, invalid, pattern, ring"
let attributes["voltage_area_shape"]["target_utilization"] = "float"
let attributes["voltage_area_shape"]["top_block"] = "collection"
let attributes["voltage_area_shape"]["voltage_area"] = "collection"
let attributes["voltage_area_shape"]["voltage_area_name"] = "string"
let attributes["pin_blockage"]={}
let attributes["pin_blockage"]["hierarchy_owner"] = "string"
let attributes["pin_blockage"]["is_td"] = "boolean"
let attributes["pin_blockage"]["pd_intent"] = "boolean"
let attributes["pin_blockage"]["pd_intent_full_name"] = "string"
let attributes["pin_blockage"]["pd_intent_power_domain_info"] = "string"
let attributes["pin_blockage"]["pd_intent_ref_name"] = "string"
let attributes["pin_blockage"]["pd_intent_user_name"] = "string"
let attributes["pin_blockage"]["all_objects"] = "collection"
let attributes["pin_blockage"]["bbox"] = "rect"
let attributes["pin_blockage"]["boundary"] = "polygon"
let attributes["pin_blockage"]["bounding_box"] = "collection"
let attributes["pin_blockage"]["feedthrough_only"] = "boolean"
let attributes["pin_blockage"]["full_name"] = "string"
let attributes["pin_blockage"]["groups"] = "collection"
let attributes["pin_blockage"]["in_edit_group"] = "boolean"
let attributes["pin_blockage"]["is_shadow"] = "boolean"
let attributes["pin_blockage"]["layer_names"] = "string"
let attributes["pin_blockage"]["layers"] = "collection"
let attributes["pin_blockage"]["name"] = "string"
let attributes["pin_blockage"]["nets"] = "collection"
let attributes["pin_blockage"]["object_class"] = "string"
let attributes["pin_blockage"]["parent_block"] = "collection"
let attributes["pin_blockage"]["parent_block_cell"] = "collection"
let attributes["pin_blockage"]["parent_cell"] = "collection"
let attributes["pin_blockage"]["physical_status"] = "unrestricted"
let attributes["pin_blockage"]["pins"] = "collection"
let attributes["pin_blockage"]["ports"] = "collection"
let attributes["pin_blockage"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["pin_blockage"]["top_block"] = "collection"
let attributes["pin_guide"]={}
let attributes["pin_guide"]["hierarchy_owner"] = "string"
let attributes["pin_guide"]["is_td"] = "boolean"
let attributes["pin_guide"]["bbox"] = "rect"
let attributes["pin_guide"]["boundary"] = "polygon"
let attributes["pin_guide"]["bounding_box"] = "collection"
let attributes["pin_guide"]["full_name"] = "string"
let attributes["pin_guide"]["groups"] = "collection"
let attributes["pin_guide"]["in_edit_group"] = "boolean"
let attributes["pin_guide"]["is_exclusive"] = "boolean"
let attributes["pin_guide"]["is_shadow"] = "boolean"
let attributes["pin_guide"]["layer_names"] = "string"
let attributes["pin_guide"]["layers"] = "collection"
let attributes["pin_guide"]["name"] = "string"
let attributes["pin_guide"]["nets"] = "collection"
let attributes["pin_guide"]["object_class"] = "string"
let attributes["pin_guide"]["parent_block"] = "collection"
let attributes["pin_guide"]["parent_block_cell"] = "collection"
let attributes["pin_guide"]["parent_cell"] = "collection"
let attributes["pin_guide"]["parents"] = "collection"
let attributes["pin_guide"]["physical_status"] = "unrestricted"
let attributes["pin_guide"]["pin_spacing"] = "int"
let attributes["pin_guide"]["pins"] = "collection"
let attributes["pin_guide"]["ports"] = "collection"
let attributes["pin_guide"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["pin_guide"]["top_block"] = "collection"
let attributes["rp_group"]={}
let attributes["rp_group"]["hierarchy_owner"] = "string"
let attributes["rp_group"]["is_td"] = "boolean"
let attributes["rp_group"]["alignment"] = "pin, right"
let attributes["rp_group"]["allow_non_rp_cells"] = "boolean"
let attributes["rp_group"]["allow_non_rp_cells_on_blockages"] = "boolean"
let attributes["rp_group"]["anchor_column"] = "int"
let attributes["rp_group"]["anchor_corner"] = "bottom_right, rp_location, top_left, top_right"
let attributes["rp_group"]["anchor_row"] = "int"
let attributes["rp_group"]["bbox"] = "rect"
let attributes["rp_group"]["bounding_box"] = "collection"
let attributes["rp_group"]["column"] = "int"
let attributes["rp_group"]["columns"] = "int"
let attributes["rp_group"]["full_name"] = "string"
let attributes["rp_group"]["group_orient"] = "R180, MX, MY"
let attributes["rp_group"]["move_effort"] = "low, medium"
let attributes["rp_group"]["name"] = "string"
let attributes["rp_group"]["object_class"] = "string"
let attributes["rp_group"]["optimization_restriction"] = "no_opt, size_in_place, size_only"
let attributes["rp_group"]["override_alignment"] = "right"
let attributes["rp_group"]["parent_block"] = "collection"
let attributes["rp_group"]["parent_block_cell"] = "collection"
let attributes["rp_group"]["parent_cell"] = "collection"
let attributes["rp_group"]["parent_rp_group"] = "string"
let attributes["rp_group"]["physical_status"] = "unplaced"
let attributes["rp_group"]["pin_name"] = "string"
let attributes["rp_group"]["place_around_fixed_cells"] = "none, physical_only, standard"
let attributes["rp_group"]["row"] = "int"
let attributes["rp_group"]["rows"] = "int"
let attributes["rp_group"]["rp_only_keepout_margin"] = "margin_list"
let attributes["rp_group"]["tiling_type"] = "horizontal_compression, vertical_compression"
let attributes["rp_group"]["top_block"] = "collection"
let attributes["rp_group"]["top_rp_group"] = "string"
let attributes["rp_group"]["utilization"] = "double"
let attributes["rp_group"]["x_offset"] = "distance"
let attributes["rp_group"]["y_offset"] = "distance"
let attributes["pr_rule"]={}
let attributes["pr_rule"]["abut_table_bot_bot"] = "boolean"
let attributes["pr_rule"]["abut_table_top_bot"] = "boolean"
let attributes["pr_rule"]["abut_table_top_top"] = "boolean"
let attributes["pr_rule"]["full_name"] = "string"
let attributes["pr_rule"]["name"] = "string"
let attributes["pr_rule"]["object_class"] = "string"
let attributes["pr_rule"]["row_spacing_bot_bot"] = "distance"
let attributes["pr_rule"]["row_spacing_top_bot"] = "distance"
let attributes["pr_rule"]["row_spacing_top_top"] = "distance"
let attributes["mismatch_object"]={}
let attributes["mismatch_object"]["action"] = "ignore, repair"
let attributes["mismatch_object"]["current_repair"] = "string"
let attributes["mismatch_object"]["full_name"] = "string"
let attributes["mismatch_object"]["mismatch_type"] = "collection"
let attributes["mismatch_object"]["object_class"] = "string"
let attributes["mismatch_object"]["object_name"] = "string"
let attributes["mismatch_object"]["object_type"] = "string"
let attributes["mismatch_type"]={}
let attributes["mismatch_type"]["action"] = "string"
let attributes["mismatch_type"]["available_repairs"] = "string"
let attributes["mismatch_type"]["category"] = "netlist, routing, upf"
let attributes["mismatch_type"]["current_repair"] = "string"
let attributes["mismatch_type"]["description"] = "string"
let attributes["mismatch_type"]["full_name"] = "exceed_ndr_limitation, layer_missing_prefer_direction, lib_cell_name_case, lib_missing_logical_port, lib_missing_physical_port, lib_missing_physical_reference, lib_missing_rail_pg, lib_port_direction, lib_port_missing_access_edge, lib_port_missing_via_region, lib_port_name_case, lib_port_name_synonym, lib_port_type, macro_cell_contain_too_many_obs, missing_logical_reference, missing_port, port_name_case, port_name_synonym, reference_name_case"
let attributes["mismatch_type"]["name"] = "exceed_ndr_limitation, layer_missing_prefer_direction, lib_cell_name_case, lib_missing_logical_port, lib_missing_physical_port, lib_missing_physical_reference, lib_missing_rail_pg, lib_port_direction, lib_port_missing_access_edge, lib_port_missing_via_region, lib_port_name_case, lib_port_name_synonym, lib_port_type, macro_cell_contain_too_many_obs, missing_logical_reference, missing_port, port_name_case, port_name_synonym, reference_name_case"
let attributes["mismatch_type"]["object_class"] = "string"
let attributes["scenario"]={}
let attributes["scenario"]["active"] = "boolean"
let attributes["scenario"]["auto_named"] = "boolean"
let attributes["scenario"]["cell_em"] = "boolean"
let attributes["scenario"]["corner"] = "collection"
let attributes["scenario"]["dynamic_power"] = "boolean"
let attributes["scenario"]["full_name"] = "string"
let attributes["scenario"]["hold"] = "boolean"
let attributes["scenario"]["leakage_power"] = "boolean"
let attributes["scenario"]["max_cap"] = "boolean"
let attributes["scenario"]["max_tran"] = "boolean"
let attributes["scenario"]["min_cap"] = "boolean"
let attributes["scenario"]["mode"] = "collection"
let attributes["scenario"]["name"] = "string"
let attributes["scenario"]["object_class"] = "string"
let attributes["scenario"]["power"] = "boolean"
let attributes["scenario"]["setup"] = "boolean"
let attributes["scenario"]["signal_em"] = "boolean"
let attributes["mode"]={}
let attributes["mode"]["active_corners"] = "collection"
let attributes["mode"]["active_scenarios"] = "collection"
let attributes["mode"]["associated_corners"] = "collection"
let attributes["mode"]["cell_em_corners"] = "collection"
let attributes["mode"]["cell_em_scenarios"] = "collection"
let attributes["mode"]["dynamic_power_corners"] = "collection"
let attributes["mode"]["dynamic_power_scenarios"] = "collection"
let attributes["mode"]["empty"] = "boolean"
let attributes["mode"]["file_line_info"] = "string"
let attributes["mode"]["full_name"] = "string"
let attributes["mode"]["hold_corners"] = "collection"
let attributes["mode"]["hold_scenarios"] = "collection"
let attributes["mode"]["inactivated_corners"] = "collection"
let attributes["mode"]["inactivated_scenarios"] = "collection"
let attributes["mode"]["is_current"] = "boolean"
let attributes["mode"]["is_default"] = "boolean"
let attributes["mode"]["leakage_power_corners"] = "collection"
let attributes["mode"]["leakage_power_scenarios"] = "collection"
let attributes["mode"]["max_cap_corners"] = "collection"
let attributes["mode"]["max_cap_scenarios"] = "collection"
let attributes["mode"]["max_tran_corners"] = "collection"
let attributes["mode"]["max_tran_scenarios"] = "collection"
let attributes["mode"]["min_cap_corners"] = "collection"
let attributes["mode"]["min_cap_scenarios"] = "collection"
let attributes["mode"]["name"] = "string"
let attributes["mode"]["object_class"] = "string"
let attributes["mode"]["power_corners"] = "collection"
let attributes["mode"]["power_scenarios"] = "collection"
let attributes["mode"]["scenarios"] = "collection"
let attributes["mode"]["setup_corners"] = "collection"
let attributes["mode"]["setup_scenarios"] = "collection"
let attributes["mode"]["signal_em_corners"] = "collection"
let attributes["mode"]["signal_em_scenarios"] = "collection"
let attributes["corner"]={}
let attributes["corner"]["active_modes"] = "collection"
let attributes["corner"]["active_scenarios"] = "collection"
let attributes["corner"]["associated_modes"] = "collection"
let attributes["corner"]["cell_em_modes"] = "collection"
let attributes["corner"]["cell_em_scenarios"] = "collection"
let attributes["corner"]["dynamic_power_modes"] = "collection"
let attributes["corner"]["dynamic_power_scenarios"] = "collection"
let attributes["corner"]["empty"] = "boolean"
let attributes["corner"]["file_line_info"] = "string"
let attributes["corner"]["full_name"] = "string"
let attributes["corner"]["hold_modes"] = "collection"
let attributes["corner"]["hold_scenarios"] = "collection"
let attributes["corner"]["inactivated_modes"] = "collection"
let attributes["corner"]["inactivated_scenarios"] = "collection"
let attributes["corner"]["is_current"] = "boolean"
let attributes["corner"]["is_default"] = "boolean"
let attributes["corner"]["is_estimated"] = "boolean"
let attributes["corner"]["leakage_power_modes"] = "collection"
let attributes["corner"]["leakage_power_scenarios"] = "collection"
let attributes["corner"]["max_cap_modes"] = "collection"
let attributes["corner"]["max_cap_scenarios"] = "collection"
let attributes["corner"]["max_tran_modes"] = "collection"
let attributes["corner"]["max_tran_scenarios"] = "collection"
let attributes["corner"]["min_cap_modes"] = "collection"
let attributes["corner"]["min_cap_scenarios"] = "collection"
let attributes["corner"]["mismatched_driving_cell_count"] = "int"
let attributes["corner"]["mismatched_inst_count"] = "int"
let attributes["corner"]["name"] = "string"
let attributes["corner"]["object_class"] = "string"
let attributes["corner"]["power_modes"] = "collection"
let attributes["corner"]["power_scenarios"] = "collection"
let attributes["corner"]["process_label_mismatches"] = "int"
let attributes["corner"]["process_number_mismatches"] = "int"
let attributes["corner"]["scenarios"] = "collection"
let attributes["corner"]["setup_modes"] = "collection"
let attributes["corner"]["setup_scenarios"] = "collection"
let attributes["corner"]["signal_em_modes"] = "collection"
let attributes["corner"]["signal_em_scenarios"] = "collection"
let attributes["corner"]["temperature_mismatches"] = "int"
let attributes["corner"]["voltage_mismatches"] = "int"
let attributes["pin"]={}
let attributes["pin"]["activity_type"] = "string"
let attributes["pin"]["actual_fall_transition_max"] = "float"
let attributes["pin"]["actual_fall_transition_min"] = "float"
let attributes["pin"]["actual_related_clock"] = "string"
let attributes["pin"]["actual_rise_transition_max"] = "float"
let attributes["pin"]["actual_rise_transition_min"] = "float"
let attributes["pin"]["antenna_area"] = "string"
let attributes["pin"]["antenna_side_area"] = "string"
let attributes["pin"]["arrival_window"] = "string"
let attributes["pin"]["bbox"] = "rect"
let attributes["pin"]["bounding_box"] = "collection"
let attributes["pin"]["bump_access_dir"] = "bump_access_dir"
let attributes["pin"]["case_value"] = "string"
let attributes["pin"]["cell"] = "collection"
let attributes["pin"]["clock_arrival_window"] = "string"
let attributes["pin"]["clock_latency_fall_max"] = "float"
let attributes["pin"]["clock_latency_fall_min"] = "float"
let attributes["pin"]["clock_latency_rise_max"] = "float"
let attributes["pin"]["clock_latency_rise_min"] = "float"
let attributes["pin"]["clock_source_latency_early_fall_max"] = "float"
let attributes["pin"]["clock_source_latency_early_fall_min"] = "float"
let attributes["pin"]["clock_source_latency_early_rise_max"] = "float"
let attributes["pin"]["clock_source_latency_early_rise_min"] = "float"
let attributes["pin"]["clock_source_latency_late_fall_max"] = "float"
let attributes["pin"]["clock_source_latency_late_fall_min"] = "float"
let attributes["pin"]["clock_source_latency_late_rise_max"] = "float"
let attributes["pin"]["clock_source_latency_late_rise_min"] = "float"
let attributes["pin"]["clocks"] = "collection"
let attributes["pin"]["clocks_to_balance"] = "collection"
let attributes["pin"]["clocks_with_sense"] = "string"
let attributes["pin"]["cnx"] = "string"
let attributes["pin"]["constant_value"] = "string"
let attributes["pin"]["constraining_max_transition"] = "float"
let attributes["pin"]["diode_protection"] = "string"
let attributes["pin"]["direction"] = "string"
let attributes["pin"]["dont_touch_network"] = "boolean"
let attributes["pin"]["dont_touch_network_no_propagate"] = "boolean"
let attributes["pin"]["early_fall_input_cap"] = "float"
let attributes["pin"]["early_fall_load_cap"] = "float"
let attributes["pin"]["early_fall_transition"] = "float"
let attributes["pin"]["early_rise_input_cap"] = "float"
let attributes["pin"]["early_rise_load_cap"] = "float"
let attributes["pin"]["early_rise_transition"] = "float"
let attributes["pin"]["effective_process_label_early"] = "string"
let attributes["pin"]["effective_process_label_late"] = "string"
let attributes["pin"]["effective_process_number_early"] = "float"
let attributes["pin"]["effective_process_number_late"] = "float"
let attributes["pin"]["effective_temperature_early"] = "float"
let attributes["pin"]["effective_temperature_late"] = "float"
let attributes["pin"]["effective_voltage_early"] = "float"
let attributes["pin"]["effective_voltage_late"] = "float"
let attributes["pin"]["essential_activity_group"] = "string"
let attributes["pin"]["estimated_analysis"] = "string"
let attributes["pin"]["full_name"] = "string"
let attributes["pin"]["gate_area"] = "string"
let attributes["pin"]["gate_diffusion_length"] = "string"
let attributes["pin"]["groups"] = "collection"
let attributes["pin"]["hold_uncertainty"] = "float"
let attributes["pin"]["ignore_ndr"] = "boolean"
let attributes["pin"]["is_async_pin"] = "boolean"
let attributes["pin"]["is_clear_pin"] = "boolean"
let attributes["pin"]["is_clock_gating_clock"] = "boolean"
let attributes["pin"]["is_clock_gating_enable"] = "boolean"
let attributes["pin"]["is_clock_gating_pin"] = "boolean"
let attributes["pin"]["is_clock_pin"] = "boolean"
let attributes["pin"]["is_clock_used_as_clock"] = "boolean"
let attributes["pin"]["is_clock_used_as_data"] = "boolean"
let attributes["pin"]["is_data_pin"] = "boolean"
let attributes["pin"]["is_et_delay_clipped"] = "boolean"
let attributes["pin"]["is_fall_edge_triggered_clock_pin"] = "boolean"
let attributes["pin"]["is_fall_edge_triggered_data_pin"] = "boolean"
let attributes["pin"]["is_feedthrough_port"] = "boolean"
let attributes["pin"]["is_fixed"] = "boolean"
let attributes["pin"]["is_hierarchical"] = "boolean"
let attributes["pin"]["is_ideal"] = "boolean"
let attributes["pin"]["is_latch_loop_breaker"] = "boolean"
let attributes["pin"]["is_negative_level_sensitive_clock_pin"] = "boolean"
let attributes["pin"]["is_negative_level_sensitive_data_pin"] = "boolean"
let attributes["pin"]["is_net_driver"] = "boolean"
let attributes["pin"]["is_net_load"] = "boolean"
let attributes["pin"]["is_positive_level_sensitive_clock_pin"] = "boolean"
let attributes["pin"]["is_positive_level_sensitive_data_pin"] = "boolean"
let attributes["pin"]["is_preset_pin"] = "boolean"
let attributes["pin"]["is_rise_edge_triggered_clock_pin"] = "boolean"
let attributes["pin"]["is_rise_edge_triggered_data_pin"] = "boolean"
let attributes["pin"]["is_scan"] = "boolean"
let attributes["pin"]["is_three_state"] = "boolean"
let attributes["pin"]["is_three_state_enable_pin"] = "boolean"
let attributes["pin"]["is_three_state_output_pin"] = "boolean"
let attributes["pin"]["is_user_latch_loop_breaker"] = "boolean"
let attributes["pin"]["is_user_pg"] = "boolean"
let attributes["pin"]["late_fall_input_cap"] = "float"
let attributes["pin"]["late_fall_load_cap"] = "float"
let attributes["pin"]["late_fall_transition"] = "float"
let attributes["pin"]["late_rise_input_cap"] = "float"
let attributes["pin"]["late_rise_load_cap"] = "float"
let attributes["pin"]["late_rise_transition"] = "float"
let attributes["pin"]["layer"] = "collection"
let attributes["pin"]["layer_name"] = "string"
let attributes["pin"]["lib_pin_name"] = "string"
let attributes["pin"]["major_activity_type"] = "string"
let attributes["pin"]["matching_type"] = "collection"
let attributes["pin"]["max_balance_delay"] = "float"
let attributes["pin"]["max_capacitance_constraint"] = "float"
let attributes["pin"]["max_fall_input_cap"] = "float"
let attributes["pin"]["max_fall_load_cap"] = "float"
let attributes["pin"]["max_fall_local_slack"] = "float"
let attributes["pin"]["max_fall_slack"] = "float"
let attributes["pin"]["max_fall_transition"] = "float"
let attributes["pin"]["max_rise_input_cap"] = "float"
let attributes["pin"]["max_rise_load_cap"] = "float"
let attributes["pin"]["max_rise_local_slack"] = "float"
let attributes["pin"]["max_rise_slack"] = "float"
let attributes["pin"]["max_rise_transition"] = "float"
let attributes["pin"]["max_slack"] = "float"
let attributes["pin"]["max_time_borrow"] = "float"
let attributes["pin"]["max_transition_constraint"] = "float"
let attributes["pin"]["min_balance_delay"] = "float"
let attributes["pin"]["min_capacitance_constraint"] = "float"
let attributes["pin"]["min_fall_input_cap"] = "float"
let attributes["pin"]["min_fall_load_cap"] = "float"
let attributes["pin"]["min_fall_slack"] = "float"
let attributes["pin"]["min_fall_transition"] = "float"
let attributes["pin"]["min_rise_input_cap"] = "float"
let attributes["pin"]["min_rise_load_cap"] = "float"
let attributes["pin"]["min_rise_slack"] = "float"
let attributes["pin"]["min_rise_transition"] = "float"
let attributes["pin"]["min_slack"] = "float"
let attributes["pin"]["minor_activity_type"] = "string"
let attributes["pin"]["mismatched_process_label_max"] = "boolean"
let attributes["pin"]["mismatched_process_label_min"] = "boolean"
let attributes["pin"]["mismatched_process_number_max"] = "boolean"
let attributes["pin"]["mismatched_process_number_min"] = "boolean"
let attributes["pin"]["mismatched_pvt_max"] = "boolean"
let attributes["pin"]["mismatched_pvt_min"] = "boolean"
let attributes["pin"]["mismatched_temperature_max"] = "boolean"
let attributes["pin"]["mismatched_temperature_min"] = "boolean"
let attributes["pin"]["mismatched_voltage_max"] = "boolean"
let attributes["pin"]["mismatched_voltage_min"] = "boolean"
let attributes["pin"]["n_gate_area"] = "string"
let attributes["pin"]["n_gate_diffusion_length"] = "string"
let attributes["pin"]["name"] = "string"
let attributes["pin"]["net"] = "collection"
let attributes["pin"]["net_name"] = "string"
let attributes["pin"]["object_class"] = "string"
let attributes["pin"]["object_id"] = "string"
let attributes["pin"]["p_gate_area"] = "string"
let attributes["pin"]["p_gate_diffusion_length"] = "string"
let attributes["pin"]["pa_input_pin_fall_transition"] = "float"
let attributes["pin"]["pa_input_pin_rise_transition"] = "float"
let attributes["pin"]["pa_output_pin_cap"] = "float"
let attributes["pin"]["pa_pin_voltage"] = "float"
let attributes["pin"]["pane_early"] = "int"
let attributes["pin"]["pane_late"] = "int"
let attributes["pin"]["parent_block"] = "collection"
let attributes["pin"]["parent_block_cell"] = "collection"
let attributes["pin"]["parent_cell"] = "collection"
let attributes["pin"]["pg_pin_weight"] = "float"
let attributes["pin"]["pg_type"] = "string"
let attributes["pin"]["physical_status"] = "locked, placed, unplaced"
let attributes["pin"]["pin_alignment_matching_id"] = "int"
let attributes["pin"]["pin_direction"] = "string"
let attributes["pin"]["pin_has_async_check"] = "boolean"
let attributes["pin"]["port"] = "collection"
let attributes["pin"]["port_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["pin"]["power_domain"] = "string"
let attributes["pin"]["process_label_early"] = "string"
let attributes["pin"]["process_label_early_file_line_info"] = "string"
let attributes["pin"]["process_label_early_source"] = "string"
let attributes["pin"]["process_label_late"] = "string"
let attributes["pin"]["process_label_late_file_line_info"] = "string"
let attributes["pin"]["process_label_late_source"] = "string"
let attributes["pin"]["process_number_early"] = "float"
let attributes["pin"]["process_number_early_file_line_info"] = "string"
let attributes["pin"]["process_number_early_source"] = "string"
let attributes["pin"]["process_number_late"] = "float"
let attributes["pin"]["process_number_late_file_line_info"] = "string"
let attributes["pin"]["process_number_late_source"] = "string"
let attributes["pin"]["propagated_clock"] = "boolean"
let attributes["pin"]["related_clock"] = "string"
let attributes["pin"]["route_connection"] = "skip"
let attributes["pin"]["setup_uncertainty"] = "float"
let attributes["pin"]["skew_groups"] = "collection"
let attributes["pin"]["static_probability"] = "double"
let attributes["pin"]["supply_connection_type"] = "string"
let attributes["pin"]["temperature_early"] = "float"
let attributes["pin"]["temperature_early_file_line_info"] = "string"
let attributes["pin"]["temperature_early_source"] = "string"
let attributes["pin"]["temperature_late"] = "float"
let attributes["pin"]["temperature_late_file_line_info"] = "string"
let attributes["pin"]["temperature_late_source"] = "string"
let attributes["pin"]["toggle_rate"] = "double"
let attributes["pin"]["top_block"] = "collection"
let attributes["pin"]["topology_edges"] = "collection"
let attributes["pin"]["user_case_value"] = "string"
let attributes["pin"]["user_clock_sense"] = "string"
let attributes["pin"]["voltage_early"] = "float"
let attributes["pin"]["voltage_early_file_line_info"] = "string"
let attributes["pin"]["voltage_early_source"] = "string"
let attributes["pin"]["voltage_late"] = "float"
let attributes["pin"]["voltage_late_file_line_info"] = "string"
let attributes["pin"]["voltage_late_source"] = "string"
let attributes["pin"]["worst_max_fall_slack"] = "float"
let attributes["pin"]["worst_max_rise_slack"] = "float"
let attributes["pin"]["worst_max_slack"] = "float"
let attributes["pin"]["worst_min_fall_slack"] = "float"
let attributes["pin"]["worst_min_rise_slack"] = "float"
let attributes["pin"]["worst_min_slack"] = "float"
let attributes["drc_error"]={}
let attributes["drc_error"]["actual_spacing"] = "distance"
let attributes["drc_error"]["bbox"] = "rect"
let attributes["drc_error"]["bounding_box"] = "collection"
let attributes["drc_error"]["brief_info"] = "string"
let attributes["drc_error"]["direction"] = "lower_left_to_upper_right, unknown, upper_left_to_lower_right, vertical"
let attributes["drc_error"]["endpoints"] = "coord_list_list"
let attributes["drc_error"]["error_class"] = "open_locator, short, size, spacing"
let attributes["drc_error"]["error_data"] = "collection"
let attributes["drc_error"]["error_id"] = "int"
let attributes["drc_error"]["error_info"] = "string"
let attributes["drc_error"]["error_type"] = "collection"
let attributes["drc_error"]["full_name"] = "string"
let attributes["drc_error"]["layers"] = "collection"
let attributes["drc_error"]["must_fix"] = "boolean"
let attributes["drc_error"]["name"] = "string"
let attributes["drc_error"]["object_class"] = "string"
let attributes["drc_error"]["objects"] = "collection"
let attributes["drc_error"]["pin_edge"] = "int"
let attributes["drc_error"]["points"] = "coord_list_list"
let attributes["drc_error"]["polygons"] = "coord_list_list"
let attributes["drc_error"]["polylines"] = "coord_list_list"
let attributes["drc_error"]["required_height"] = "distance"
let attributes["drc_error"]["required_spacing"] = "distance"
let attributes["drc_error"]["required_width"] = "distance"
let attributes["drc_error"]["shape"] = "string"
let attributes["drc_error"]["shape_uses"] = "route_type_list"
let attributes["drc_error"]["status"] = "fixed, ignored, waived"
let attributes["drc_error"]["type_name"] = "string"
let attributes["drc_error"]["verbose_info"] = "string"
let attributes["layer"]={}
let attributes["layer"]["adjacent_cut_range"] = "float"
let attributes["layer"]["blink"] = "int"
let attributes["layer"]["capacitance_multiplier"] = "float"
let attributes["layer"]["check_manhattan_spacing"] = "boolean"
let attributes["layer"]["color"] = "string"
let attributes["layer"]["default_width"] = "float"
let attributes["layer"]["end_of_line1_neighbor_corner_keepout_width"] = "float"
let attributes["layer"]["end_of_line1_neighbor_min_length"] = "float"
let attributes["layer"]["end_of_line1_neighbor_min_spacing"] = "float"
let attributes["layer"]["end_of_line1_neighbor_threshold"] = "float"
let attributes["layer"]["end_of_line1_neighbor_wire_min_threshold"] = "float"
let attributes["layer"]["end_of_line_corner_keepout_width"] = "float"
let attributes["layer"]["end_of_line_side_keepout_length"] = "float"
let attributes["layer"]["fat_table_dimension"] = "int"
let attributes["layer"]["fat_table_parallel_length_dimension"] = "int"
let attributes["layer"]["fixed_mask"] = "mask_three, mask_two, no_mask"
let attributes["layer"]["full_name"] = "string"
let attributes["layer"]["layer_number"] = "string"
let attributes["layer"]["layer_source"] = "string"
let attributes["layer"]["layer_type"] = "string"
let attributes["layer"]["linestyle"] = "string"
let attributes["layer"]["mask_name"] = "string"
let attributes["layer"]["mask_order"] = "int"
let attributes["layer"]["mask_order_in_type"] = "int"
let attributes["layer"]["max_num_adjacent_cut"] = "int"
let attributes["layer"]["min_area"] = "double"
let attributes["layer"]["min_length"] = "float"
let attributes["layer"]["min_spacing"] = "float"
let attributes["layer"]["min_width"] = "float"
let attributes["layer"]["name"] = "string"
let attributes["layer"]["number_of_masks"] = "int"
let attributes["layer"]["object_class"] = "string"
let attributes["layer"]["pattern"] = "string"
let attributes["layer"]["pitch"] = "float"
let attributes["layer"]["purpose_name"] = "string"
let attributes["layer"]["purpose_number"] = "int"
let attributes["layer"]["purposes"] = "collection"
let attributes["layer"]["routing_direction"] = "string"
let attributes["layer"]["same_net_min_spacing"] = "float"
let attributes["layer"]["selectable"] = "int"
let attributes["layer"]["special_min_area"] = "float"
let attributes["layer"]["stub_mode"] = "string"
let attributes["layer"]["stub_spacing"] = "float"
let attributes["layer"]["stub_threshold"] = "float"
let attributes["layer"]["track_offset"] = "float"
let attributes["layer"]["visible"] = "int"
let attributes["layer"]["x_default_width"] = "float"
let attributes["layer"]["y_default_width"] = "float"
let attributes["topology_node"]={}
let attributes["topology_node"]["adjacent_edges"] = "collection"
let attributes["topology_node"]["boundary"] = "rect"
let attributes["topology_node"]["full_name"] = "string"
let attributes["topology_node"]["groups"] = "collection"
let attributes["topology_node"]["has_adjacent_edges"] = "boolean"
let attributes["topology_node"]["is_centroid"] = "boolean"
let attributes["topology_node"]["is_driver"] = "boolean"
let attributes["topology_node"]["is_fixed"] = "boolean"
let attributes["topology_node"]["layers"] = "collection"
let attributes["topology_node"]["max_layer"] = "collection"
let attributes["topology_node"]["min_layer"] = "collection"
let attributes["topology_node"]["name"] = "string"
let attributes["topology_node"]["net"] = "collection"
let attributes["topology_node"]["num_adjacent_edges"] = "int"
let attributes["topology_node"]["object_class"] = "string"
let attributes["topology_node"]["physical_status"] = "minor_change, unrestricted"
let attributes["design_rule"]={}
let attributes["design_rule"]["aligned_via_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["concave_convex_edge_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["concave_convex_edge_cut_tbl_size"] = "int"
let attributes["design_rule"]["concave_convex_edge_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["concave_convex_edge_max_enc_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["concave_convex_edge_min_enc_tbl"] = "distance_list"
let attributes["design_rule"]["concave_convex_edge_ortho_min_enc_tbl"] = "distance_list"
let attributes["design_rule"]["concave_corner_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["concave_corner_cut_range_tbl"] = "distance_list"
let attributes["design_rule"]["concave_corner_cut_tbl_size"] = "int"
let attributes["design_rule"]["concave_corner_max_num_tbl"] = "int_list"
let attributes["design_rule"]["concave_metal_to_cut_dist_diagonal_check"] = "boolean"
let attributes["design_rule"]["concave_metal_to_cut_jog_min_height_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["concave_metal_to_cut_min_dist"] = "distance"
let attributes["design_rule"]["concave_metal_to_cut_min_dist_tbl"] = "distance_list"
let attributes["design_rule"]["concave_metal_to_cut_min_enc_tbl"] = "distance_list"
let attributes["design_rule"]["concave_metal_to_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["concave_metal_to_cut_tbl_size"] = "int"
let attributes["design_rule"]["concave_metal_to_cut_wire_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["concave_metal_to_non_self_aligned_cut_min_dist"] = "distance"
let attributes["design_rule"]["concave_metal_to_rect_cut_min_dist"] = "distance"
let attributes["design_rule"]["concave_metal_to_self_aligned_cut_min_dist"] = "distance"
let attributes["design_rule"]["concave_metal_to_square_cut_min_dist"] = "distance"
let attributes["design_rule"]["concave_metal_to_via_array_included"] = "boolean"
let attributes["design_rule"]["constrained_cut_pref_enc_constraining_num_cuts_tbl"] = "int_list"
let attributes["design_rule"]["constrained_cut_pref_enc_constraining_range_tbl"] = "distance_list"
let attributes["design_rule"]["constrained_cut_pref_enc_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["constrained_cut_pref_enc_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["constrained_cut_pref_enc_name_tbl"] = "name_list"
let attributes["design_rule"]["constrained_cut_pref_enc_tbl_size"] = "int"
let attributes["design_rule"]["convex3_corner_enc_adjacent_max_edge_length_threshold"] = "distance"
let attributes["design_rule"]["convex3_corner_enc_adjacent_min_edge_length_threshold"] = "distance"
let attributes["design_rule"]["convex3_corner_enc_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["convex3_corner_enc_cut_tbl_size"] = "int"
let attributes["design_rule"]["convex3_corner_enc_max_edge_length_threshold"] = "distance"
let attributes["design_rule"]["convex3_corner_enc_max_spacing_threshold"] = "distance"
let attributes["design_rule"]["convex3_corner_enclosure"] = "distance"
let attributes["design_rule"]["convex_metal_cut_keepout_length_tbl"] = "distance_list"
let attributes["design_rule"]["convex_metal_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["convex_metal_cut_tbl_size"] = "int"
let attributes["design_rule"]["convex_metal_end_of_line_max_width_threshold"] = "distance"
let attributes["design_rule"]["convex_metal_end_of_line_min_length"] = "distance"
let attributes["design_rule"]["corner_min_spacing"] = "distance"
let attributes["design_rule"]["corner_min_spacing_center_check_tbl"] = "bool_list"
let attributes["design_rule"]["corner_ortho_spacing_excluded_tbl"] = "bool_list"
let attributes["design_rule"]["corner_spacing_check_zero_projection_tbl"] = "bool_list"
let attributes["design_rule"]["cut_1_name_tbl"] = "name_list"
let attributes["design_rule"]["cut_1_tbl_size"] = "int"
let attributes["design_rule"]["cut_2_name_tbl"] = "name_list"
let attributes["design_rule"]["cut_2_tbl_size"] = "int"
let attributes["design_rule"]["cut_name_tbl"] = "name_list"
let attributes["design_rule"]["cut_tbl_size"] = "int"
let attributes["design_rule"]["diff_net_center_excluded_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_center_excluded_multi_min_spacing_tbl"] = "string"
let attributes["design_rule"]["diff_net_center_excluded_parallel_length1_range_tbl"] = "string"
let attributes["design_rule"]["diff_net_center_excluded_parallel_length2_range_tbl"] = "string"
let attributes["design_rule"]["diff_net_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_corner_min_spacing_excluded_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_corner_min_spacing_excluded_range_include_boundary_tbl"] = "string"
let attributes["design_rule"]["diff_net_corner_min_spacing_excluded_range_tbl"] = "string"
let attributes["design_rule"]["diff_net_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_keepout_min_length"] = "distance"
let attributes["design_rule"]["diff_net_keepout_min_radius"] = "distance"
let attributes["design_rule"]["diff_net_keepout_min_width"] = "distance"
let attributes["design_rule"]["diff_net_min_spacing"] = "distance"
let attributes["design_rule"]["diff_net_non_sav_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_sav_enc_edge_to_cut_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_sav_enc_edge_to_cut_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_sav_enc_edge_to_non_sav_cut_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_sav_enc_edge_to_non_sav_cut_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_sav_enc_edge_to_sav_enc_edge_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_sav_enc_edge_to_sav_enc_edge_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_x_min_spacing_excluded_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_x_min_spacing_excluded_range_include_boundary_tbl"] = "string"
let attributes["design_rule"]["diff_net_x_min_spacing_excluded_range_tbl"] = "string"
let attributes["design_rule"]["diff_net_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_y_min_spacing_excluded_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["diff_net_y_min_spacing_excluded_range_include_boundary_tbl"] = "string"
let attributes["design_rule"]["diff_net_y_min_spacing_excluded_range_tbl"] = "string"
let attributes["design_rule"]["diff_net_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_seg_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_seg_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_seg_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["diff_seg_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["edge_via_cut_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["edge_via_cut_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["edge_via_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["edge_via_cut_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["edge_via_cut_tbl_size"] = "int"
let attributes["design_rule"]["edge_via_wire_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["edge_via_wire_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["enc_metal_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["enc_metal_cut_tbl_size"] = "int"
let attributes["design_rule"]["enc_metal_enc_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["enc_metal_enc_threshold_tbl_size"] = "int"
let attributes["design_rule"]["enc_metal_min_area"] = "area"
let attributes["design_rule"]["enc_metal_min_enclosure"] = "distance"
let attributes["design_rule"]["enc_metal_width_threshold"] = "distance"
let attributes["design_rule"]["enc_metal_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["enc_metal_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["enclosed_via_metal_min_length"] = "distance"
let attributes["design_rule"]["enclosed_via_metal_min_length_via_array_excluded"] = "boolean"
let attributes["design_rule"]["end_of_line_cut_corner_extension_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["end_of_line_cut_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_cut_wire_max_width_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_cut_wire_min_length"] = "distance"
let attributes["design_rule"]["end_of_line_cut_x_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_cut_y_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_cut_to_cut_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_cut_to_metal_end_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_cut_to_metal_side_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_min_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_parallel_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_enc_1_neighbor_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_corner_keepout_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_min_enclosure"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_min_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_corner_keepout_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_min_enclosure"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_min_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_side_keepout_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_via_array_excluded_tbl"] = "bool_list"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_mod1_wire_min_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_side_min_spacing"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_via_array_excluded_tbl"] = "bool_list"
let attributes["design_rule"]["end_of_line_enc_2_neighbor_wire_min_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_corner_keepout_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_min_enclosure"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_min_spacing"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_side_min_spacing"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_3_neighbor_via_array_excluded"] = "boolean"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_check_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_check_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_corner_keepout_width"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_cut_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_extension_range"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_max_spacing"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_min_enclosure"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_min_spacing"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_parallel_length"] = "distance"
let attributes["design_rule"]["end_of_line_enc_5_neighbor_width_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_long_edge_included"] = "boolean"
let attributes["design_rule"]["end_of_line_enc_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_tbl_side_threshold"] = "distance_list"
let attributes["design_rule"]["end_of_line_enc_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_enc_via_array_excluded"] = "boolean"
let attributes["design_rule"]["end_of_line_enc_width_threshold"] = "distance"
let attributes["design_rule"]["end_of_line_enc_zero_allowed"] = "boolean"
let attributes["design_rule"]["end_of_line_enclosure"] = "distance"
let attributes["design_rule"]["end_of_line_t_shape_corner_min_spacing"] = "distance"
let attributes["design_rule"]["end_of_line_t_shape_enc_side_threshold"] = "distance_list"
let attributes["design_rule"]["end_of_line_t_shape_enc_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_t_shape_enc_tbl"] = "distance_list"
let attributes["design_rule"]["end_of_line_t_shape_enc_tbl_size"] = "int"
let attributes["design_rule"]["end_of_line_via_enc_width"] = "distance"
let attributes["design_rule"]["end_of_line_via_jog_length"] = "distance"
let attributes["design_rule"]["end_of_line_via_jog_width"] = "distance"
let attributes["design_rule"]["end_to_end_cut_enc_max_width_threshold"] = "distance"
let attributes["design_rule"]["end_to_end_cut_enc_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["end_to_end_cut_enc_min_length"] = "distance"
let attributes["design_rule"]["end_to_end_cut_enc_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["end_to_end_cut_enc_tbl"] = "name_list"
let attributes["design_rule"]["end_to_end_cut_enc_tbl_size"] = "int"
let attributes["design_rule"]["end_to_end_space_enc_max_width_threshold"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_min_length_threshold"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_opposite_dir_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_opposite_dir_keepout_starting_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_opposite_dir_keepout_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_opposite_dir_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_same_dir_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_same_dir_keepout_starting_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_same_dir_keepout_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_enc_same_dir_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_enclosure"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_forbidden_space_range_1"] = "distance_list"
let attributes["design_rule"]["end_to_end_space_extended_enc_forbidden_space_range_2"] = "distance_list"
let attributes["design_rule"]["end_to_end_space_extended_enc_max_width_threshold"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_min_length_1"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_min_length_2"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_min_length_threshold"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_min_spacing"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_opposite_dir_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_opposite_dir_keepout_starting_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_opposite_dir_keepout_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_opposite_dir_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_same_dir_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_same_dir_keepout_starting_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_same_dir_keepout_width"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enc_same_dir_side_keepout_length"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enclosure_1_above_layer_2"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enclosure_1_below_layer_1_cut_included"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enclosure_2_above_layer_2"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enclosure_2_below_layer_1_cut_included"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enclosure_above_layer_2"] = "distance"
let attributes["design_rule"]["end_to_end_space_extended_enclosure_below_layer_1_cut_included"] = "distance"
let attributes["design_rule"]["fat_wire_cut_lower_excluded_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_cut_lower_excluded_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_cut_lower_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["fat_wire_cut_tbl_size"] = "int"
let attributes["design_rule"]["fat_wire_cut_upper_width_tbl_size"] = "int"
let attributes["design_rule"]["fat_wire_cut_upper_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_array_excluded_tbl"] = "bool_list"
let attributes["design_rule"]["fat_wire_via_corner_keepout_dist_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_check_rule_tbl"] = "name_list"
let attributes["design_rule"]["fat_wire_via_enc_check_via_off_fat_wire"] = "boolean"
let attributes["design_rule"]["fat_wire_via_enc_cut_keepout_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["fat_wire_via_enc_cut_tbl_size"] = "int"
let attributes["design_rule"]["fat_wire_via_enc_excluded_for_end_of_line_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_excluded_for_end_of_line_min_length_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_max_spacing_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_min_spacing_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_min_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_opposite_min_spacing_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_other_layer_excluded_height_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_other_layer_excluded_width_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_parallel_length_no_union_tbl"] = "bool_list"
let attributes["design_rule"]["fat_wire_via_enc_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_sparse_min_spacing_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_sparse_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enc_tbl_size"] = "int"
let attributes["design_rule"]["fat_wire_via_enc_width_is_ortho_tbl"] = "bool_list"
let attributes["design_rule"]["fat_wire_via_enc_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enclosure_ortho_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enclosure_other_layer_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_keepout_enclosure"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_keepout_max_spacing_threshold"] = "distance"
let attributes["design_rule"]["fat_wire_via_keepout_min_size"] = "distance_list"
let attributes["design_rule"]["fat_wire_via_keepout_parallel_length_threshold"] = "distance"
let attributes["design_rule"]["fat_wire_via_keepout_tbl_size"] = "int"
let attributes["design_rule"]["fat_wire_via_keepout_width_threshold"] = "distance_list"
let attributes["design_rule"]["forbidden_cut1_name_tbl"] = "name_list"
let attributes["design_rule"]["forbidden_cut1_tbl_size"] = "int"
let attributes["design_rule"]["forbidden_cut2_name_tbl"] = "name_list"
let attributes["design_rule"]["forbidden_cut2_tbl_size"] = "int"
let attributes["design_rule"]["forbidden_cut_x_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["forbidden_cut_x_spacing_range_tbl"] = "name_list"
let attributes["design_rule"]["forbidden_cut_y_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["forbidden_cut_y_spacing_range_tbl"] = "name_list"
let attributes["design_rule"]["forbidden_via_spacing_color_2_metal_min_enclosure_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["forbidden_via_spacing_color_2_metal_width_tbl"] = "distance_list"
let attributes["design_rule"]["forbidden_via_spacing_color_2_non_preferred_extension_tbl"] = "distance_list"
let attributes["design_rule"]["forbidden_via_spacing_color_2_preferred_extension_tbl"] = "distance_list"
let attributes["design_rule"]["forbidden_via_spacing_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["forbidden_via_spacing_cut_name_tbl_size"] = "int"
let attributes["design_rule"]["forbidden_via_spacing_range_on_iso_side_tbl"] = "string"
let attributes["design_rule"]["full_name"] = "string"
let attributes["design_rule"]["jog_wire_via_keepout_enc_threshold"] = "distance_list"
let attributes["design_rule"]["jog_wire_via_keepout_min_size"] = "distance_list"
let attributes["design_rule"]["jog_wire_via_keepout_tbl_size"] = "int"
let attributes["design_rule"]["joint_wire_via_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["joint_wire_via_cut_tbl_size"] = "int"
let attributes["design_rule"]["joint_wire_via_end_min_length"] = "distance"
let attributes["design_rule"]["joint_wire_via_end_width_max_threshold"] = "distance"
let attributes["design_rule"]["joint_wire_via_max_edge_length_threshold"] = "distance"
let attributes["design_rule"]["joint_wire_via_min_enclosure"] = "distance"
let attributes["design_rule"]["joint_wire_via_min_span_threshold"] = "distance"
let attributes["design_rule"]["layer1"] = "string"
let attributes["design_rule"]["layer2"] = "string"
let attributes["design_rule"]["mask1_end_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["mask1_keepout_min_dist"] = "distance"
let attributes["design_rule"]["mask1_overlap_min_length"] = "distance"
let attributes["design_rule"]["mask2_end_both_touch_cut_metal_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["mask2_end_enclosure_min_length_tbl"] = "distance_list"
let attributes["design_rule"]["mask2_end_enclosure_min_length_tbl_size"] = "int"
let attributes["design_rule"]["mask2_end_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["mask2_end_length_range_tbl"] = "string"
let attributes["design_rule"]["mask2_end_not_touch_cut_metal_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["mask2_end_touch_cut_metal_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["mask_end_enclosure_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["mask_end_enclosure_cut_tbl_size"] = "int"
let attributes["design_rule"]["mask_end_enclosure_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["metal_to_non_self_aligned_edge_cut_min_spacing"] = "distance"
let attributes["design_rule"]["metal_to_non_self_aligned_edge_extension"] = "distance"
let attributes["design_rule"]["min_enclosure"] = "distance"
let attributes["design_rule"]["min_spacing"] = "distance"
let attributes["design_rule"]["min_spacing_diagonal_check_tbl"] = "bool_list"
let attributes["design_rule"]["min_spacing_lower_enc_max_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["min_spacing_upper_enc_check_tbl"] = "bool_list"
let attributes["design_rule"]["min_spacing_upper_enc_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["min_spacing_upper_metal_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["min_spacing_x_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["min_spacing_y_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["misaligned_via_corner_keepout_width"] = "distance"
let attributes["design_rule"]["misaligned_via_corner_min_spacing"] = "distance"
let attributes["design_rule"]["misaligned_via_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["misaligned_via_cut1_name_tbl"] = "name_list"
let attributes["design_rule"]["misaligned_via_cut1_tbl_size"] = "int"
let attributes["design_rule"]["misaligned_via_cut2_name_tbl"] = "name_list"
let attributes["design_rule"]["misaligned_via_cut2_tbl_size"] = "int"
let attributes["design_rule"]["misaligned_via_end_enclosure"] = "distance"
let attributes["design_rule"]["misaligned_via_min_spacing"] = "distance"
let attributes["design_rule"]["misaligned_via_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["misaligned_via_side_enclosure"] = "distance"
let attributes["design_rule"]["misaligned_via_wire_keepout_length_tbl"] = "distance_list"
let attributes["design_rule"]["misaligned_via_wire_max_spacing_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["misaligned_via_wire_min_spacing_threshold2_tbl"] = "distance_list"
let attributes["design_rule"]["misaligned_via_wire_tbl_size"] = "int"
let attributes["design_rule"]["misaligned_via_wire_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["name"] = "string"
let attributes["design_rule"]["no_cut_metal_diff_net_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_diff_net_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_diff_net_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_end_to_end_cut_enc_max_width_threshold"] = "distance"
let attributes["design_rule"]["no_cut_metal_end_to_end_cut_enc_min_enclosure_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_end_to_end_cut_enc_min_length"] = "distance"
let attributes["design_rule"]["no_cut_metal_end_to_end_cut_enc_tbl"] = "name_list"
let attributes["design_rule"]["no_cut_metal_end_to_end_cut_enc_tbl_size"] = "int"
let attributes["design_rule"]["no_cut_metal_min_spacing_x_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_min_spacing_y_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_ortho_spacing_exclude_corner_tbl"] = "bool_list"
let attributes["design_rule"]["no_cut_metal_same_net_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_same_net_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["no_cut_metal_same_net_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["non_self_aligned_via_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["object_class"] = "string"
let attributes["design_rule"]["ortho_spacing_exclude_corner_tbl"] = "bool_list"
let attributes["design_rule"]["partially_aligned_via_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_color_non_sav_cluster_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_color_sav_cluster_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_color_sav_intra_cluster_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_center_excluded_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_center_excluded_multi_min_spacing_tbl"] = "string"
let attributes["design_rule"]["same_net_center_excluded_parallel_length1_range_tbl"] = "string"
let attributes["design_rule"]["same_net_center_excluded_parallel_length2_range_tbl"] = "string"
let attributes["design_rule"]["same_net_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_corner_min_spacing_excluded_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_corner_min_spacing_excluded_range_include_boundary_tbl"] = "string"
let attributes["design_rule"]["same_net_corner_min_spacing_excluded_range_tbl"] = "string"
let attributes["design_rule"]["same_net_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_x_min_spacing_excluded_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_x_min_spacing_excluded_range_include_boundary_tbl"] = "string"
let attributes["design_rule"]["same_net_x_min_spacing_excluded_range_tbl"] = "string"
let attributes["design_rule"]["same_net_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_y_min_spacing_excluded_parallel_length_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["same_net_y_min_spacing_excluded_range_include_boundary_tbl"] = "string"
let attributes["design_rule"]["same_net_y_min_spacing_excluded_range_tbl"] = "string"
let attributes["design_rule"]["same_net_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_seg_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_seg_corner_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_seg_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["same_seg_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["self_aligned_via_cluster_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["self_aligned_via_cluster_min_num_cuts_threshold_tbl"] = "int_list"
let attributes["design_rule"]["self_aligned_via_diag_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["self_aligned_via_edge_extension"] = "distance"
let attributes["design_rule"]["self_aligned_via_lower_to_upper_metal_min_spacing"] = "distance"
let attributes["design_rule"]["self_aligned_via_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["self_aligned_via_zigzag_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["separated_cut1_name_tbl"] = "name_list"
let attributes["design_rule"]["separated_cut1_tbl_size"] = "int"
let attributes["design_rule"]["separated_cut1_to_upper_metal_excluded_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["separated_cut2_name_tbl"] = "name_list"
let attributes["design_rule"]["separated_cut2_tbl_size"] = "int"
let attributes["design_rule"]["separated_cut2_to_upper_metal_excluded_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["separated_cut_x_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["separated_cut_y_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["stack_via_center_spacing_threshold"] = "distance"
let attributes["design_rule"]["stack_via_corner_spacing_threshold"] = "distance"
let attributes["design_rule"]["stack_via_keepout_cut1_name_tbl"] = "name_list"
let attributes["design_rule"]["stack_via_keepout_cut1_tbl_size"] = "int"
let attributes["design_rule"]["stack_via_keepout_cut2_name_tbl"] = "name_list"
let attributes["design_rule"]["stack_via_keepout_cut2_tbl_size"] = "int"
let attributes["design_rule"]["stack_via_keepout_dist_tbl"] = "distance_list"
let attributes["design_rule"]["stack_via_x_edge_spacing_threshold"] = "distance"
let attributes["design_rule"]["stack_via_y_edge_spacing_threshold"] = "distance"
let attributes["design_rule"]["stackable"] = "boolean"
let attributes["design_rule"]["thin_wire_cut_metal_exact_width"] = "distance"
let attributes["design_rule"]["thin_wire_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["thin_wire_cut_ortho_enc_tbl"] = "distance_list"
let attributes["design_rule"]["thin_wire_cut_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["thin_wire_cut_side_enc_tbl"] = "distance_list"
let attributes["design_rule"]["thin_wire_cut_tbl_size"] = "int"
let attributes["design_rule"]["thin_wire_cut_to_concave_corner_max_dist_tbl"] = "distance_list"
let attributes["design_rule"]["thin_wire_cut_to_lower_metal_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["thin_wire_cut_to_upper_metal_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["two_via_metal_forbidden_max_spacing_threshold_1_tbl"] = "distance_list"
let attributes["design_rule"]["two_via_metal_forbidden_max_spacing_threshold_2_tbl"] = "distance_list"
let attributes["design_rule"]["two_via_metal_forbidden_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["two_via_metal_forbidden_min_parallel_length_tbl"] = "distance_list"
let attributes["design_rule"]["two_via_metal_forbidden_tbl_size"] = "int"
let attributes["design_rule"]["unaligned_via_center_min_spacing_tbl"] = "distance_list"
let attributes["design_rule"]["unaligned_via_center_range_tbl"] = "distance_list"
let attributes["design_rule"]["unaligned_via_max_num_cuts_tbl"] = "int_list"
let attributes["design_rule"]["via_enc_color_2_metal_min_enclosure_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["via_enc_color_2_metal_width_tbl"] = "distance_list"
let attributes["design_rule"]["via_enc_color_2_non_preferred_extension_tbl"] = "distance_list"
let attributes["design_rule"]["via_enc_color_2_preferred_extension_tbl"] = "distance_list"
let attributes["design_rule"]["via_enc_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["via_enc_cut_name_tbl_size"] = "int"
let attributes["design_rule"]["via_enc_upper_metal_max_width_threshold_tbl"] = "distance_list"
let attributes["design_rule"]["via_enc_upper_metal_min_enclosure_on_iso_side_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_cut_name_tbl"] = "name_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_l_wire_max_height_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_l_wire_min_height_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_z_wire_include_l_wire_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_z_wire_max_edge_length_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_z_wire_min_edge_length_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_z_wire_on_pref_dir_only_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_excluded_for_z_wire_width_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_height_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_preferred_direction_enc_height_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_preferred_direction_enc_width_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_preferred_direction_width_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_enc_tbl_size"] = "int"
let attributes["design_rule"]["via_metal_enc_width_tbl"] = "distance_list"
let attributes["design_rule"]["via_metal_forbidden_max_spacing_threshold_1"] = "distance"
let attributes["design_rule"]["via_metal_forbidden_max_spacing_threshold_2"] = "distance"
let attributes["design_rule"]["via_metal_forbidden_max_width_threshold"] = "distance"
let attributes["design_rule"]["via_metal_forbidden_min_parallel_length"] = "distance"
let attributes["design_rule"]["via_metal_forbidden_search_distance"] = "distance"
let attributes["design_rule"]["x_min_spacing_center_check_tbl"] = "bool_list"
let attributes["design_rule"]["y_min_spacing_center_check_tbl"] = "bool_list"
let attributes["lib_pin"]={}
let attributes["lib_pin"]["alive_during_partial_power_down"] = "boolean"
let attributes["lib_pin"]["alive_during_power_up"] = "boolean"
let attributes["lib_pin"]["antenna_area"] = "string"
let attributes["lib_pin"]["antenna_side_area"] = "string"
let attributes["lib_pin"]["base_name"] = "string"
let attributes["lib_pin"]["bbox"] = "rect"
let attributes["lib_pin"]["bias_type"] = "routing_pin"
let attributes["lib_pin"]["bound_name"] = "string"
let attributes["lib_pin"]["bound_type"] = "soft"
let attributes["lib_pin"]["bounding_box"] = "collection"
let attributes["lib_pin"]["capacitance"] = "float"
let attributes["lib_pin"]["clock"] = "boolean"
let attributes["lib_pin"]["connect_within_pin"] = "via, via_wire"
let attributes["lib_pin"]["cut_area"] = "string"
let attributes["lib_pin"]["design"] = "collection"
let attributes["lib_pin"]["diff_area"] = "string"
let attributes["lib_pin"]["diode_protection"] = "string"
let attributes["lib_pin"]["direction"] = "inout, internal, out"
let attributes["lib_pin"]["disable_timing"] = "boolean"
let attributes["lib_pin"]["extended_name"] = "string"
let attributes["lib_pin"]["fanout_load"] = "float"
let attributes["lib_pin"]["full_name"] = "string"
let attributes["lib_pin"]["function"] = "string"
let attributes["lib_pin"]["gate_area"] = "string"
let attributes["lib_pin"]["gate_diffusion_length"] = "string"
let attributes["lib_pin"]["group_bound_height"] = "distance"
let attributes["lib_pin"]["group_bound_width"] = "distance"
let attributes["lib_pin"]["has_ccs_receiver_fall"] = "boolean"
let attributes["lib_pin"]["has_ccs_receiver_rise"] = "boolean"
let attributes["lib_pin"]["has_ccsn_first_stage"] = "boolean"
let attributes["lib_pin"]["has_ccsn_last_stage"] = "boolean"
let attributes["lib_pin"]["is_acknowledge_pin"] = "string"
let attributes["lib_pin"]["is_async_pin"] = "boolean"
let attributes["lib_pin"]["is_clear_pin"] = "boolean"
let attributes["lib_pin"]["is_clock_pin"] = "boolean"
let attributes["lib_pin"]["is_data_pin"] = "boolean"
let attributes["lib_pin"]["is_diode"] = "boolean"
let attributes["lib_pin"]["is_em_via_ladder_required"] = "boolean"
let attributes["lib_pin"]["is_fall_edge_triggered_clock_pin"] = "boolean"
let attributes["lib_pin"]["is_fall_edge_triggered_data_pin"] = "boolean"
let attributes["lib_pin"]["is_fixed"] = "boolean"
let attributes["lib_pin"]["is_insulated"] = "boolean"
let attributes["lib_pin"]["is_isolated"] = "string"
let attributes["lib_pin"]["is_isolation_cell_data_pin"] = "string"
let attributes["lib_pin"]["is_isolation_cell_enable_pin"] = "string"
let attributes["lib_pin"]["is_negative_level_sensitive_clock_pin"] = "boolean"
let attributes["lib_pin"]["is_negative_level_sensitive_data_pin"] = "boolean"
let attributes["lib_pin"]["is_net_driver"] = "boolean"
let attributes["lib_pin"]["is_net_load"] = "boolean"
let attributes["lib_pin"]["is_pad"] = "boolean"
let attributes["lib_pin"]["is_physical"] = "boolean"
let attributes["lib_pin"]["is_positive_level_sensitive_clock_pin"] = "boolean"
let attributes["lib_pin"]["is_positive_level_sensitive_data_pin"] = "boolean"
let attributes["lib_pin"]["is_preset_pin"] = "boolean"
let attributes["lib_pin"]["is_rectangle_only_rule_waived"] = "boolean"
let attributes["lib_pin"]["is_retention_pin"] = "string"
let attributes["lib_pin"]["is_rise_edge_triggered_clock_pin"] = "boolean"
let attributes["lib_pin"]["is_rise_edge_triggered_data_pin"] = "boolean"
let attributes["lib_pin"]["is_scan"] = "boolean"
let attributes["lib_pin"]["is_secondary_pg"] = "boolean"
let attributes["lib_pin"]["is_shadow"] = "boolean"
let attributes["lib_pin"]["is_std_cell_main_rail"] = "string"
let attributes["lib_pin"]["is_switch_pin"] = "string"
let attributes["lib_pin"]["is_three_state"] = "boolean"
let attributes["lib_pin"]["is_three_state_enable_pin"] = "boolean"
let attributes["lib_pin"]["is_three_state_output_pin"] = "boolean"
let attributes["lib_pin"]["layer"] = "collection"
let attributes["lib_pin"]["layer_name"] = "string"
let attributes["lib_pin"]["level_shifter_enable_pin"] = "boolean"
let attributes["lib_pin"]["lib"] = "collection"
let attributes["lib_pin"]["lib_cell"] = "collection"
let attributes["lib_pin"]["max_area_car"] = "string"
let attributes["lib_pin"]["max_capacitance"] = "float"
let attributes["lib_pin"]["max_cut_area_car"] = "string"
let attributes["lib_pin"]["max_fanout"] = "float"
let attributes["lib_pin"]["max_side_area_car"] = "string"
let attributes["lib_pin"]["max_transition"] = "float"
let attributes["lib_pin"]["min_capacitance"] = "float"
let attributes["lib_pin"]["mode1_area"] = "string"
let attributes["lib_pin"]["mode2_ratio"] = "string"
let attributes["lib_pin"]["mode3_area"] = "string"
let attributes["lib_pin"]["mode4_area"] = "string"
let attributes["lib_pin"]["mode5_ratio"] = "string"
let attributes["lib_pin"]["mode6_area"] = "string"
let attributes["lib_pin"]["must_join_port"] = "collection"
let attributes["lib_pin"]["n_gate_area"] = "string"
let attributes["lib_pin"]["n_gate_diffusion_length"] = "string"
let attributes["lib_pin"]["name"] = "string"
let attributes["lib_pin"]["net_name"] = "string"
let attributes["lib_pin"]["nextstate_type"] = "int"
let attributes["lib_pin"]["object_class"] = "string"
let attributes["lib_pin"]["p_gate_area"] = "string"
let attributes["lib_pin"]["p_gate_diffusion_length"] = "string"
let attributes["lib_pin"]["parent_block"] = "collection"
let attributes["lib_pin"]["parent_block_cell"] = "collection"
let attributes["lib_pin"]["parent_cell"] = "collection"
let attributes["lib_pin"]["pattern_must_join"] = "boolean"
let attributes["lib_pin"]["permit_power_down"] = "boolean"
let attributes["lib_pin"]["pg_function"] = "string"
let attributes["lib_pin"]["pg_type"] = "internal, primary"
let attributes["lib_pin"]["physical_status"] = "locked, placed, unplaced"
let attributes["lib_pin"]["pin_capacitance"] = "float"
let attributes["lib_pin"]["pin_class"] = "int"
let attributes["lib_pin"]["pin_direction"] = "inout, internal, out"
let attributes["lib_pin"]["pin_function_class"] = "string"
let attributes["lib_pin"]["pin_function_id"] = "string"
let attributes["lib_pin"]["pin_number"] = "int"
let attributes["lib_pin"]["pin_sense"] = "boolean"
let attributes["lib_pin"]["port_direction"] = "string"
let attributes["lib_pin"]["port_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["lib_pin"]["rail_name"] = "string"
let attributes["lib_pin"]["related_bias_pin_name"] = "string"
let attributes["lib_pin"]["related_ground_pin_name"] = "string"
let attributes["lib_pin"]["related_power_pin_name"] = "string"
let attributes["lib_pin"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["lib_pin"]["signal_type"] = "string"
let attributes["lib_pin"]["test_output_only"] = "boolean"
let attributes["lib_pin"]["three_state_function"] = "string"
let attributes["lib_pin"]["tied_to"] = "string"
let attributes["lib_pin"]["top_block"] = "collection"
let attributes["lib_pin"]["topology_edges"] = "collection"
let attributes["lib_pin"]["via_ladder_min_layer_for_bottom"] = "collection"
let attributes["lib_pin"]["via_ladder_names"] = "string"
let attributes["group"]={}
let attributes["group"]["allow_duplicate_name"] = "boolean"
let attributes["group"]["design_name"] = "string"
let attributes["group"]["full_name"] = "string"
let attributes["group"]["groups"] = "collection"
let attributes["group"]["name"] = "string"
let attributes["group"]["object_class"] = "string"
let attributes["group"]["objects"] = "collection"
let attributes["group"]["remove_when"] = "empty, no_auto_removal, one_member"
let attributes["group"]["type"] = "set"
let attributes["rp_blockage"]={}
let attributes["rp_blockage"]["allow_overlap"] = "boolean"
let attributes["rp_blockage"]["bbox"] = "rect"
let attributes["rp_blockage"]["bounding_box"] = "collection"
let attributes["rp_blockage"]["column"] = "int"
let attributes["rp_blockage"]["full_name"] = "string"
let attributes["rp_blockage"]["height"] = "int"
let attributes["rp_blockage"]["name"] = "string"
let attributes["rp_blockage"]["object_class"] = "string"
let attributes["rp_blockage"]["override_alignment"] = "right"
let attributes["rp_blockage"]["parent_block"] = "collection"
let attributes["rp_blockage"]["parent_block_cell"] = "collection"
let attributes["rp_blockage"]["parent_cell"] = "collection"
let attributes["rp_blockage"]["parent_rp_group"] = "string"
let attributes["rp_blockage"]["physical_status"] = "unplaced"
let attributes["rp_blockage"]["row"] = "int"
let attributes["rp_blockage"]["top_block"] = "collection"
let attributes["rp_blockage"]["top_rp_group"] = "string"
let attributes["rp_blockage"]["width"] = "int"
let attributes["grid"]={}
let attributes["grid"]["allowed_orientations"] = "string"
let attributes["grid"]["full_name"] = "string"
let attributes["grid"]["groups"] = "collection"
let attributes["grid"]["is_auto_derived"] = "boolean"
let attributes["grid"]["name"] = "string"
let attributes["grid"]["object_class"] = "string"
let attributes["grid"]["type"] = "string"
let attributes["grid"]["x_offset"] = "distance"
let attributes["grid"]["x_step"] = "distance"
let attributes["grid"]["y_offset"] = "distance"
let attributes["grid"]["y_step"] = "distance"
let attributes["supernet"]={}
let attributes["supernet"]["anchor"] = "string"
let attributes["supernet"]["boundary_terms"] = "collection"
let attributes["supernet"]["bundles"] = "collection"
let attributes["supernet"]["drivers"] = "collection"
let attributes["supernet"]["full_name"] = "string"
let attributes["supernet"]["groups"] = "collection"
let attributes["supernet"]["is_master"] = "boolean"
let attributes["supernet"]["loads"] = "collection"
let attributes["supernet"]["master"] = "collection"
let attributes["supernet"]["name"] = "string"
let attributes["supernet"]["object_class"] = "string"
let attributes["supernet"]["routing_corridor"] = "collection"
let attributes["supernet"]["transparent_cells"] = "collection"
let attributes["tech"]={}
let attributes["tech"]["antenna_cut_to_metal"] = "boolean"
let attributes["tech"]["antenna_diode_distance"] = "distance"
let attributes["tech"]["antenna_max_area"] = "area"
let attributes["tech"]["antenna_metal_to_cut"] = "boolean"
let attributes["tech"]["capacitance_precision"] = "int"
let attributes["tech"]["capacitance_unit"] = "string"
let attributes["tech"]["corner_spacing_mode"] = "int"
let attributes["tech"]["current_precision"] = "int"
let attributes["tech"]["current_unit"] = "string"
let attributes["tech"]["date"] = "string"
let attributes["tech"]["dielectric"] = "double"
let attributes["tech"]["fat_table_min_enclosed_area_mode"] = "int"
let attributes["tech"]["fat_table_spacing_mode"] = "int"
let attributes["tech"]["fat_wire_extension_mode"] = "int"
let attributes["tech"]["full_name"] = "string"
let attributes["tech"]["grid_resolution"] = "int"
let attributes["tech"]["inductance_precision"] = "int"
let attributes["tech"]["inductance_unit"] = "string"
let attributes["tech"]["layers"] = "collection"
let attributes["tech"]["length_precision"] = "int"
let attributes["tech"]["lib"] = "collection"
let attributes["tech"]["lib_name"] = "string"
let attributes["tech"]["max_baseline_temperature"] = "double"
let attributes["tech"]["max_stack_level_mode"] = "int"
let attributes["tech"]["min_baseline_temperature"] = "double"
let attributes["tech"]["min_edge_mode"] = "int"
let attributes["tech"]["min_length_mode"] = "int"
let attributes["tech"]["name"] = "string"
let attributes["tech"]["nom_baseline_temperature"] = "double"
let attributes["tech"]["object_class"] = "string"
let attributes["tech"]["parallel_length_mode"] = "int"
let attributes["tech"]["power_precision"] = "int"
let attributes["tech"]["power_unit"] = "string"
let attributes["tech"]["purposes"] = "collection"
let attributes["tech"]["resistance_precision"] = "int"
let attributes["tech"]["resistance_unit"] = "string"
let attributes["tech"]["time_precision"] = "int"
let attributes["tech"]["time_unit"] = "string"
let attributes["tech"]["unit_length"] = "string"
let attributes["tech"]["voltage_precision"] = "int"
let attributes["tech"]["voltage_unit"] = "string"
let attributes["core_area"]={}
let attributes["core_area"]["area"] = "area"
let attributes["core_area"]["bbox"] = "rect"
let attributes["core_area"]["boundary"] = "coord_list"
let attributes["core_area"]["bounding_box"] = "collection"
let attributes["core_area"]["full_name"] = "string"
let attributes["core_area"]["name"] = "string"
let attributes["core_area"]["object_class"] = "string"
let attributes["shaping_blockage"]={}
let attributes["shaping_blockage"]["area"] = "area"
let attributes["shaping_blockage"]["bbox"] = "rect"
let attributes["shaping_blockage"]["blockage_purpose"] = "user"
let attributes["shaping_blockage"]["boundary"] = "coord_list"
let attributes["shaping_blockage"]["bounding_box"] = "collection"
let attributes["shaping_blockage"]["full_name"] = "string"
let attributes["shaping_blockage"]["groups"] = "collection"
let attributes["shaping_blockage"]["is_shadow"] = "boolean"
let attributes["shaping_blockage"]["name"] = "string"
let attributes["shaping_blockage"]["object_class"] = "string"
let attributes["shaping_blockage"]["parent_block"] = "collection"
let attributes["shaping_blockage"]["parent_block_cell"] = "collection"
let attributes["shaping_blockage"]["parent_cell"] = "collection"
let attributes["shaping_blockage"]["physical_status"] = "unrestricted"
let attributes["shaping_blockage"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["shaping_blockage"]["top_block"] = "collection"
let attributes["via_region"]={}
let attributes["via_region"]["area"] = "area"
let attributes["via_region"]["bbox"] = "rect"
let attributes["via_region"]["bounding_box"] = "collection"
let attributes["via_region"]["design_name"] = "string"
let attributes["via_region"]["full_name"] = "string"
let attributes["via_region"]["groups"] = "collection"
let attributes["via_region"]["is_rectangle"] = "boolean"
let attributes["via_region"]["is_rotate"] = "boolean"
let attributes["via_region"]["name"] = "string"
let attributes["via_region"]["object_class"] = "string"
let attributes["via_region"]["owner"] = "collection"
let attributes["via_region"]["parent_block"] = "collection"
let attributes["via_region"]["parent_block_cell"] = "collection"
let attributes["via_region"]["parent_cell"] = "collection"
let attributes["via_region"]["points"] = "coord_list"
let attributes["via_region"]["type"] = "string"
let attributes["via_region"]["via_def"] = "collection"
let attributes["overlap_blockage"]={}
let attributes["overlap_blockage"]["area"] = "area"
let attributes["overlap_blockage"]["bbox"] = "rect"
let attributes["overlap_blockage"]["boundary"] = "coord_list"
let attributes["overlap_blockage"]["bounding_box"] = "collection"
let attributes["overlap_blockage"]["full_name"] = "string"
let attributes["overlap_blockage"]["groups"] = "collection"
let attributes["overlap_blockage"]["name"] = "string"
let attributes["overlap_blockage"]["object_class"] = "string"
let attributes["overlap_blockage"]["overlap_layer_name"] = "string"
let attributes["overlap_blockage"]["parent_block"] = "collection"
let attributes["overlap_blockage"]["parent_block_cell"] = "collection"
let attributes["overlap_blockage"]["parent_cell"] = "collection"
let attributes["overlap_blockage"]["top_block"] = "collection"
let attributes["poly_rect"]={}
let attributes["poly_rect"]["area"] = "area"
let attributes["poly_rect"]["bbox"] = "rect"
let attributes["poly_rect"]["bbox_llx"] = "distance"
let attributes["poly_rect"]["bbox_lly"] = "distance"
let attributes["poly_rect"]["bbox_urx"] = "distance"
let attributes["poly_rect"]["bbox_ury"] = "distance"
let attributes["poly_rect"]["bounding_box"] = "collection"
let attributes["poly_rect"]["height"] = "distance"
let attributes["poly_rect"]["is_rectangle"] = "boolean"
let attributes["poly_rect"]["layer"] = "collection"
let attributes["poly_rect"]["layer_name"] = "string"
let attributes["poly_rect"]["object_class"] = "string"
let attributes["poly_rect"]["point_list"] = "coord_list"
let attributes["poly_rect"]["width"] = "distance"
let attributes["timing_path"]={}
let attributes["timing_path"]["arrival"] = "time"
let attributes["timing_path"]["capture_clock_paths"] = "collection"
let attributes["timing_path"]["check_value"] = "time"
let attributes["timing_path"]["clock_uncertainty"] = "time"
let attributes["timing_path"]["common_path_pessimism"] = "time"
let attributes["timing_path"]["corner"] = "collection"
let attributes["timing_path"]["corner_name"] = "string"
let attributes["timing_path"]["crpr_common_point"] = "collection"
let attributes["timing_path"]["design_name"] = "string"
let attributes["timing_path"]["driving_cell_adjustment"] = "time"
let attributes["timing_path"]["endpoint"] = "collection"
let attributes["timing_path"]["endpoint_clock"] = "collection"
let attributes["timing_path"]["endpoint_clock_arrival_close_edge_type"] = "string"
let attributes["timing_path"]["endpoint_clock_arrival_open_edge_type"] = "string"
let attributes["timing_path"]["endpoint_clock_close_edge_arrival"] = "time"
let attributes["timing_path"]["endpoint_clock_close_edge_type"] = "string"
let attributes["timing_path"]["endpoint_clock_close_edge_value"] = "time"
let attributes["timing_path"]["endpoint_clock_is_inverted"] = "boolean"
let attributes["timing_path"]["endpoint_clock_is_propagated"] = "boolean"
let attributes["timing_path"]["endpoint_clock_latency"] = "time"
let attributes["timing_path"]["endpoint_clock_name"] = "string"
let attributes["timing_path"]["endpoint_clock_open_edge_arrival"] = "time"
let attributes["timing_path"]["endpoint_clock_open_edge_type"] = "string"
let attributes["timing_path"]["endpoint_clock_open_edge_value"] = "time"
let attributes["timing_path"]["endpoint_clock_period"] = "time"
let attributes["timing_path"]["endpoint_name"] = "string"
let attributes["timing_path"]["full_name"] = "string"
let attributes["timing_path"]["input_delay"] = "time"
let attributes["timing_path"]["is_infeasible"] = "boolean"
let attributes["timing_path"]["is_multicycle"] = "boolean"
let attributes["timing_path"]["is_recovered"] = "boolean"
let attributes["timing_path"]["launch_clock_paths"] = "collection"
let attributes["timing_path"]["lib_name"] = "string"
let attributes["timing_path"]["mode"] = "collection"
let attributes["timing_path"]["mode_name"] = "string"
let attributes["timing_path"]["name"] = "string"
let attributes["timing_path"]["network_latency"] = "time"
let attributes["timing_path"]["object_class"] = "string"
let attributes["timing_path"]["path_group"] = "collection"
let attributes["timing_path"]["path_group_name"] = "string"
let attributes["timing_path"]["path_type"] = "string"
let attributes["timing_path"]["points"] = "collection"
let attributes["timing_path"]["propagation_type"] = "string"
let attributes["timing_path"]["required"] = "time"
let attributes["timing_path"]["scenario"] = "collection"
let attributes["timing_path"]["scenario_name"] = "string"
let attributes["timing_path"]["slack"] = "time"
let attributes["timing_path"]["source_latency"] = "time"
let attributes["timing_path"]["startpoint"] = "collection"
let attributes["timing_path"]["startpoint_clock"] = "collection"
let attributes["timing_path"]["startpoint_clock_arrival_open_edge_type"] = "string"
let attributes["timing_path"]["startpoint_clock_is_inverted"] = "boolean"
let attributes["timing_path"]["startpoint_clock_is_propagated"] = "boolean"
let attributes["timing_path"]["startpoint_clock_latency"] = "time"
let attributes["timing_path"]["startpoint_clock_name"] = "string"
let attributes["timing_path"]["startpoint_clock_open_edge_arrival"] = "time"
let attributes["timing_path"]["startpoint_clock_open_edge_type"] = "string"
let attributes["timing_path"]["startpoint_clock_open_edge_value"] = "time"
let attributes["timing_path"]["startpoint_clock_period"] = "time"
let attributes["timing_path"]["startpoint_name"] = "string"
let attributes["timing_point"]={}
let attributes["timing_point"]["arrival"] = "time"
let attributes["timing_point"]["capacitance"] = "capacitance"
let attributes["timing_point"]["delay"] = "time"
let attributes["timing_point"]["delta_delay"] = "time"
let attributes["timing_point"]["full_name"] = "string"
let attributes["timing_point"]["name"] = "string"
let attributes["timing_point"]["object"] = "collection"
let attributes["timing_point"]["object_class"] = "string"
let attributes["timing_point"]["object_name"] = "string"
let attributes["timing_point"]["rise_fall"] = "string"
let attributes["timing_point"]["transition"] = "time"
let attributes["utilization_config"]={}
let attributes["utilization_config"]["as_user_default"] = "boolean"
let attributes["utilization_config"]["capacity"] = "core_area, site_array, site_row"
let attributes["utilization_config"]["exclusions"] = "exclusions"
let attributes["utilization_config"]["inclusions"] = "exclusions"
let attributes["utilization_config"]["name"] = "string"
let attributes["utilization_config"]["object_class"] = "string"
let attributes["utilization_config"]["scope"] = "lib, tech"
let attributes["constraint_group"]={}
let attributes["constraint_group"]["attraction_type"] = "medium, strong, weak"
let attributes["constraint_group"]["corner_type"] = "cross, default, river"
let attributes["constraint_group"]["default_gap"] = "distance"
let attributes["constraint_group"]["default_width"] = "distance"
let attributes["constraint_group"]["disabled_layers"] = "collection"
let attributes["constraint_group"]["enclose_pins"] = "true, unset"
let attributes["constraint_group"]["enclose_vias"] = "true, unset"
let attributes["constraint_group"]["full_name"] = "string"
let attributes["constraint_group"]["groups"] = "collection"
let attributes["constraint_group"]["is_relative"] = "boolean"
let attributes["constraint_group"]["jog_length"] = "distance"
let attributes["constraint_group"]["layer_gap"] = "distance"
let attributes["constraint_group"]["layer_lines"] = "int"
let attributes["constraint_group"]["layer_max_gap"] = "distance"
let attributes["constraint_group"]["layer_spacing"] = "distance"
let attributes["constraint_group"]["layer_width"] = "distance"
let attributes["constraint_group"]["matching_style"] = "length_per_layer, resistance"
let attributes["constraint_group"]["max_gap"] = "distance"
let attributes["constraint_group"]["max_layer"] = "collection"
let attributes["constraint_group"]["min_layer"] = "collection"
let attributes["constraint_group"]["min_segment"] = "distance"
let attributes["constraint_group"]["min_value"] = "float"
let attributes["constraint_group"]["name"] = "string"
let attributes["constraint_group"]["object_class"] = "string"
let attributes["constraint_group"]["objects"] = "collection"
let attributes["constraint_group"]["priority"] = "int"
let attributes["constraint_group"]["reference_net"] = "collection"
let attributes["constraint_group"]["river_layer"] = "collection"
let attributes["constraint_group"]["sharing"] = "true, unset"
let attributes["constraint_group"]["shield_net"] = "collection"
let attributes["constraint_group"]["shield_net_2"] = "collection"
let attributes["constraint_group"]["shield_placement"] = "double_interleave, half_interleave, interleave, outside"
let attributes["constraint_group"]["shielding_style"] = "above_center_coaxial, above_solid_coaxial, above_split_coaxial, below, below_center_coaxial, below_solid_coaxial, below_split_coaxial, center_coaxial, coaxial, offset_above, offset_above_center_coaxial, offset_above_solid_coaxial, offset_above_split_coaxial, offset_below, offset_below_center_coaxial, offset_below_solid_coaxial, offset_below_split_coaxial, offset_center_coaxial, offset_coaxial, offset_split_coaxial, offset_tandem, parallel, split_coaxial, tandem"
let attributes["constraint_group"]["tolerance"] = "float"
let attributes["constraint_group"]["twist_interval"] = "distance"
let attributes["constraint_group"]["twist_offset"] = "distance"
let attributes["constraint_group"]["twist_style"] = "diagonal, none, orthogonal"
let attributes["constraint_group"]["type"] = "differential_group, differential_pair, matched_wire, net_priority, reliability_verification, resistance_limit, river_style, shielding, wire_length_limit"
let attributes["constraint_group"]["via_defs"] = "collection"
let attributes["supply_net"]={}
let attributes["supply_net"]["avail_power_domains"] = "collection"
let attributes["supply_net"]["full_name"] = "string"
let attributes["supply_net"]["name"] = "string"
let attributes["supply_net"]["object_class"] = "string"
let attributes["supply_net"]["primary_power_domains"] = "collection"
let attributes["supply_net"]["reference_only"] = "string"
let attributes["supply_net"]["resolve_type"] = "string"
let attributes["supply_net"]["scope"] = "collection"
let attributes["supply_net"]["supply_ports"] = "collection"
let attributes["supply_net"]["user_voltage_early"] = "float"
let attributes["supply_net"]["user_voltage_late"] = "float"
let attributes["supply_net"]["voltage_areas"] = "collection"
let attributes["supply_net"]["voltage_early"] = "float"
let attributes["supply_net"]["voltage_late"] = "float"
let attributes["power_domain"]={}
let attributes["power_domain"]["available_supply_nets"] = "collection"
let attributes["power_domain"]["elements"] = "collection"
let attributes["power_domain"]["full_name"] = "string"
let attributes["power_domain"]["name"] = "string"
let attributes["power_domain"]["object_class"] = "string"
let attributes["power_domain"]["primary_ground"] = "collection"
let attributes["power_domain"]["primary_power"] = "collection"
let attributes["power_domain"]["scope"] = "collection"
let attributes["power_domain"]["voltage_areas"] = "collection"
let attributes["via_matrix"]={}
let attributes["via_matrix"]["base_array_size"] = "string"
let attributes["via_matrix"]["base_number_of_columns"] = "int"
let attributes["via_matrix"]["base_number_of_rows"] = "int"
let attributes["via_matrix"]["base_x_pitch"] = "distance"
let attributes["via_matrix"]["base_y_pitch"] = "distance"
let attributes["via_matrix"]["bbox"] = "rect"
let attributes["via_matrix"]["cut_layer_names"] = "string"
let attributes["via_matrix"]["cut_layers"] = "collection"
let attributes["via_matrix"]["cut_mask_constraint"] = "string"
let attributes["via_matrix"]["cut_mask_pattern"] = "string"
let attributes["via_matrix"]["cut_pattern"] = "string"
let attributes["via_matrix"]["cut_pattern_size"] = "string"
let attributes["via_matrix"]["design_name"] = "string"
let attributes["via_matrix"]["full_name"] = "string"
let attributes["via_matrix"]["has_net"] = "boolean"
let attributes["via_matrix"]["ignore_ndr_spacing"] = "boolean"
let attributes["via_matrix"]["in_edit_group"] = "boolean"
let attributes["via_matrix"]["is_default_via_matrix"] = "boolean"
let attributes["via_matrix"]["is_shadow"] = "boolean"
let attributes["via_matrix"]["lower_layer"] = "collection"
let attributes["via_matrix"]["lower_layer_name"] = "string"
let attributes["via_matrix"]["lower_mask_constraint"] = "string"
let attributes["via_matrix"]["lower_mask_pattern"] = "string"
let attributes["via_matrix"]["name"] = "string"
let attributes["via_matrix"]["net_type"] = "analog_power, analog_signal, clock, deep_nwell, deep_pwell, ground, nwell, power, pwell, reset, scan, signal, tie_high, tie_low, unset"
let attributes["via_matrix"]["number_of_columns"] = "int"
let attributes["via_matrix"]["number_of_rows"] = "int"
let attributes["via_matrix"]["object_class"] = "string"
let attributes["via_matrix"]["object_id"] = "int"
let attributes["via_matrix"]["offset"] = "coord"
let attributes["via_matrix"]["orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["via_matrix"]["origin"] = "coord"
let attributes["via_matrix"]["owner"] = "collection"
let attributes["via_matrix"]["parent_block"] = "collection"
let attributes["via_matrix"]["parent_block_cell"] = "collection"
let attributes["via_matrix"]["parent_cell"] = "collection"
let attributes["via_matrix"]["pattern"] = "string"
let attributes["via_matrix"]["pattern_size"] = "string"
let attributes["via_matrix"]["physical_status"] = "fixed, locked, minor_change, unrestricted"
let attributes["via_matrix"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["via_matrix"]["shape_use"] = "core_wire, detail_route, follow_pin, global_route, lib_cell_pin_connect, macro_pin_connect, opc, rdl, ring, shield_route, stripe, trunk, user_route, zero_skew"
let attributes["via_matrix"]["top_block"] = "collection"
let attributes["via_matrix"]["upper_layer"] = "collection"
let attributes["via_matrix"]["upper_layer_name"] = "string"
let attributes["via_matrix"]["upper_mask_constraint"] = "string"
let attributes["via_matrix"]["upper_mask_pattern"] = "string"
let attributes["via_matrix"]["via_def"] = "collection"
let attributes["via_matrix"]["via_def_name"] = "string"
let attributes["via_matrix"]["via_matrix_type"] = "string"
let attributes["via_matrix"]["via_orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["via_matrix"]["x_pitch"] = "distance"
let attributes["via_matrix"]["y_pitch"] = "distance"
let attributes["lib"]={}
let attributes["lib"]["base_lib"] = "collection"
let attributes["lib"]["base_lib_path"] = "string"
let attributes["lib"]["capacitance_unit"] = "string"
let attributes["lib"]["ccs_converted"] = "boolean"
let attributes["lib"]["characterization_points"] = "string"
let attributes["lib"]["current_unit"] = "string"
let attributes["lib"]["default_cell_leakage_power"] = "float"
let attributes["lib"]["default_connection_class"] = "string"
let attributes["lib"]["default_max_capacitance"] = "float"
let attributes["lib"]["default_max_transition"] = "float"
let attributes["lib"]["extended_name"] = "string"
let attributes["lib"]["full_name"] = "string"
let attributes["lib"]["is_aggregate"] = "boolean"
let attributes["lib"]["is_aggregate_member"] = "boolean"
let attributes["lib"]["is_compressed"] = "boolean"
let attributes["lib"]["is_current"] = "boolean"
let attributes["lib"]["is_hidden"] = "boolean"
let attributes["lib"]["is_implicit"] = "boolean"
let attributes["lib"]["is_lib_cell_lib"] = "boolean"
let attributes["lib"]["is_mask_shiftable"] = "boolean"
let attributes["lib"]["is_modified"] = "boolean"
let attributes["lib"]["is_sparse"] = "boolean"
let attributes["lib"]["name"] = "string"
let attributes["lib"]["object_class"] = "string"
let attributes["lib"]["open_count"] = "int"
let attributes["lib"]["open_mode"] = "string"
let attributes["lib"]["read_from_product_name"] = "string"
let attributes["lib"]["read_from_product_version"] = "string"
let attributes["lib"]["read_from_schema_version"] = "string"
let attributes["lib"]["ref_libs"] = "string"
let attributes["lib"]["resistance_unit"] = "string"
let attributes["lib"]["save_mode"] = "string"
let attributes["lib"]["scale_factor"] = "int"
let attributes["lib"]["source_file_name"] = "string"
let attributes["lib"]["switch_list"] = "string"
let attributes["lib"]["tech"] = "collection"
let attributes["lib"]["tech_lib"] = "collection"
let attributes["lib"]["tech_name"] = "string"
let attributes["lib"]["temperature_unit"] = "string"
let attributes["lib"]["time_unit"] = "string"
let attributes["lib"]["use_hier_ref_libs"] = "boolean"
let attributes["lib"]["voltage_unit"] = "string"
let attributes["site_row"]={}
let attributes["site_row"]["bbox"] = "rect"
let attributes["site_row"]["bounding_box"] = "collection"
let attributes["site_row"]["design_name"] = "string"
let attributes["site_row"]["full_name"] = "string"
let attributes["site_row"]["groups"] = "collection"
let attributes["site_row"]["in_edit_group"] = "boolean"
let attributes["site_row"]["is_derived"] = "boolean"
let attributes["site_row"]["is_shadow"] = "boolean"
let attributes["site_row"]["is_site_r90symmetrical"] = "boolean"
let attributes["site_row"]["is_site_xsymmetrical"] = "boolean"
let attributes["site_row"]["is_site_ysymmetrical"] = "boolean"
let attributes["site_row"]["legal_orientations"] = "orientations"
let attributes["site_row"]["name"] = "string"
let attributes["site_row"]["object_class"] = "string"
let attributes["site_row"]["object_id"] = "int"
let attributes["site_row"]["orientation"] = "string"
let attributes["site_row"]["origin"] = "coord"
let attributes["site_row"]["parent_block"] = "collection"
let attributes["site_row"]["parent_block_cell"] = "collection"
let attributes["site_row"]["parent_cell"] = "collection"
let attributes["site_row"]["physical_status"] = "unrestricted"
let attributes["site_row"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["site_row"]["site_array"] = "collection"
let attributes["site_row"]["site_count"] = "int"
let attributes["site_row"]["site_def"] = "collection"
let attributes["site_row"]["site_height"] = "distance"
let attributes["site_row"]["site_name"] = "string"
let attributes["site_row"]["site_orientation"] = "string"
let attributes["site_row"]["site_space"] = "distance"
let attributes["site_row"]["site_width"] = "distance"
let attributes["site_row"]["top_block"] = "collection"
let attributes["bound_shape"]={}
let attributes["bound_shape"]["bbox"] = "rect"
let attributes["bound_shape"]["bound"] = "collection"
let attributes["bound_shape"]["boundary"] = "polygon"
let attributes["bound_shape"]["bounding_box"] = "collection"
let attributes["bound_shape"]["full_name"] = "string"
let attributes["bound_shape"]["groups"] = "collection"
let attributes["bound_shape"]["name"] = "string"
let attributes["bound_shape"]["object_class"] = "string"
let attributes["bound_shape"]["parent_block"] = "collection"
let attributes["bound_shape"]["parent_block_cell"] = "collection"
let attributes["bound_shape"]["parent_cell"] = "collection"
let attributes["bound_shape"]["top_block"] = "collection"
let attributes["io_guide"]={}
let attributes["io_guide"]["bbox"] = "rect"
let attributes["io_guide"]["bounding_box"] = "collection"
let attributes["io_guide"]["cells"] = "collection"
let attributes["io_guide"]["end_offset"] = "distance"
let attributes["io_guide"]["full_name"] = "string"
let attributes["io_guide"]["groups"] = "collection"
let attributes["io_guide"]["in_edit_group"] = "boolean"
let attributes["io_guide"]["io_ring"] = "collection"
let attributes["io_guide"]["is_placed"] = "boolean"
let attributes["io_guide"]["is_shadow"] = "boolean"
let attributes["io_guide"]["length"] = "distance"
let attributes["io_guide"]["line"] = "coord_list"
let attributes["io_guide"]["min_pitch"] = "distance"
let attributes["io_guide"]["name"] = "string"
let attributes["io_guide"]["object_class"] = "string"
let attributes["io_guide"]["origin"] = "coord"
let attributes["io_guide"]["over_constrained"] = "boolean"
let attributes["io_guide"]["parent_block"] = "collection"
let attributes["io_guide"]["parent_block_cell"] = "collection"
let attributes["io_guide"]["parent_cell"] = "collection"
let attributes["io_guide"]["physical_status"] = "unrestricted"
let attributes["io_guide"]["power_constraint_cell"] = "collection"
let attributes["io_guide"]["power_constraint_offset"] = "string"
let attributes["io_guide"]["power_constraint_ratio"] = "string"
let attributes["io_guide"]["power_constraint_share"] = "string"
let attributes["io_guide"]["power_constraint_space"] = "string"
let attributes["io_guide"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["io_guide"]["side"] = "left, right, top"
let attributes["io_guide"]["signal_constraint_fixed"] = "string"
let attributes["io_guide"]["signal_constraint_insert"] = "string"
let attributes["io_guide"]["signal_constraint_location"] = "string"
let attributes["io_guide"]["signal_constraint_order"] = "string"
let attributes["io_guide"]["signal_constraint_other"] = "string"
let attributes["io_guide"]["start_offset"] = "distance"
let attributes["io_guide"]["top_block"] = "collection"
let attributes["io_ring"]={}
let attributes["io_ring"]["bbox"] = "rect"
let attributes["io_ring"]["bounding_box"] = "collection"
let attributes["io_ring"]["cells"] = "collection"
let attributes["io_ring"]["corner_height"] = "distance"
let attributes["io_ring"]["full_name"] = "string"
let attributes["io_ring"]["groups"] = "collection"
let attributes["io_ring"]["in_edit_group"] = "boolean"
let attributes["io_ring"]["io_guides"] = "collection"
let attributes["io_ring"]["name"] = "string"
let attributes["io_ring"]["object_class"] = "string"
let attributes["io_ring"]["offset"] = "distance"
let attributes["io_ring"]["outer_ring"] = "collection"
let attributes["io_ring"]["over_constrained"] = "boolean"
let attributes["io_ring"]["parent_block"] = "collection"
let attributes["io_ring"]["parent_block_cell"] = "collection"
let attributes["io_ring"]["parent_cell"] = "collection"
let attributes["io_ring"]["physical_status"] = "unrestricted"
let attributes["io_ring"]["top_block"] = "collection"
let attributes["edit_group"]={}
let attributes["edit_group"]["bbox"] = "rect"
let attributes["edit_group"]["bounding_box"] = "collection"
let attributes["edit_group"]["bump_array_bbox"] = "rect"
let attributes["edit_group"]["bump_array_bounding_box"] = "collection"
let attributes["edit_group"]["delta"] = "coord"
let attributes["edit_group"]["full_name"] = "string"
let attributes["edit_group"]["group_use"] = "io_group, macro_array, user"
let attributes["edit_group"]["groups"] = "collection"
let attributes["edit_group"]["isBumpArray"] = "boolean"
let attributes["edit_group"]["is_placement_constraint"] = "boolean"
let attributes["edit_group"]["is_shadow"] = "boolean"
let attributes["edit_group"]["is_transformable"] = "boolean"
let attributes["edit_group"]["lib_cell"] = "string"
let attributes["edit_group"]["name"] = "string"
let attributes["edit_group"]["object_class"] = "string"
let attributes["edit_group"]["objects"] = "collection"
let attributes["edit_group"]["orientation"] = "string"
let attributes["edit_group"]["origin"] = "coord"
let attributes["edit_group"]["parent_block"] = "collection"
let attributes["edit_group"]["parent_block_cell"] = "collection"
let attributes["edit_group"]["parent_cell"] = "collection"
let attributes["edit_group"]["parent_edit_group"] = "collection"
let attributes["edit_group"]["pattern"] = "string"
let attributes["edit_group"]["physical_status"] = "unrestricted"
let attributes["edit_group"]["repeat"] = "coord"
let attributes["edit_group"]["shadow_status"] = "copied_up, normal, pulled_up, pushed_down, virtual_flat"
let attributes["edit_group"]["top_block"] = "collection"
let attributes["edit_group"]["ungroup_on_remove"] = "last, never, second-to-last"
let attributes["routing_corridor"]={}
let attributes["routing_corridor"]["bbox"] = "rect"
let attributes["routing_corridor"]["bounding_box"] = "collection"
let attributes["routing_corridor"]["full_name"] = "string"
let attributes["routing_corridor"]["groups"] = "collection"
let attributes["routing_corridor"]["has_path"] = "boolean"
let attributes["routing_corridor"]["has_tile"] = "boolean"
let attributes["routing_corridor"]["is_connected"] = "boolean"
let attributes["routing_corridor"]["is_manhattan"] = "boolean"
let attributes["routing_corridor"]["name"] = "string"
let attributes["routing_corridor"]["number_of_objects"] = "int"
let attributes["routing_corridor"]["object_class"] = "string"
let attributes["routing_corridor"]["objects"] = "collection"
let attributes["routing_corridor"]["parent_block"] = "collection"
let attributes["routing_corridor"]["parent_block_cell"] = "collection"
let attributes["routing_corridor"]["parent_cell"] = "collection"
let attributes["routing_corridor"]["physical_status"] = "unrestricted"
let attributes["routing_corridor"]["shapes"] = "collection"
let attributes["routing_corridor"]["supernets"] = "collection"
let attributes["routing_corridor"]["top_block"] = "collection"
let attributes["routing_corridor_shape"]={}
let attributes["routing_corridor_shape"]["bbox"] = "rect"
let attributes["routing_corridor_shape"]["bounding_box"] = "collection"
let attributes["routing_corridor_shape"]["end_endcap"] = "full_width, half_width"
let attributes["routing_corridor_shape"]["full_name"] = "string"
let attributes["routing_corridor_shape"]["groups"] = "collection"
let attributes["routing_corridor_shape"]["is_manhattan"] = "boolean"
let attributes["routing_corridor_shape"]["max_routing_layer"] = "string"
let attributes["routing_corridor_shape"]["min_routing_layer"] = "string"
let attributes["routing_corridor_shape"]["name"] = "string"
let attributes["routing_corridor_shape"]["number_of_points"] = "int"
let attributes["routing_corridor_shape"]["object_class"] = "string"
let attributes["routing_corridor_shape"]["parent_block"] = "collection"
let attributes["routing_corridor_shape"]["parent_block_cell"] = "collection"
let attributes["routing_corridor_shape"]["parent_cell"] = "collection"
let attributes["routing_corridor_shape"]["physical_status"] = "unrestricted"
let attributes["routing_corridor_shape"]["points"] = "coord_list"
let attributes["routing_corridor_shape"]["routing_corridor"] = "collection"
let attributes["routing_corridor_shape"]["shape_type"] = "polygon, rectangle"
let attributes["routing_corridor_shape"]["start_endcap"] = "full_width, half_width"
let attributes["routing_corridor_shape"]["top_block"] = "collection"
let attributes["routing_corridor_shape"]["width"] = "to 2147483647"
let attributes["fill_cell"]={}
let attributes["fill_cell"]["bbox"] = "rect"
let attributes["fill_cell"]["bounding_box"] = "collection"
let attributes["fill_cell"]["columns"] = "int"
let attributes["fill_cell"]["full_name"] = "string"
let attributes["fill_cell"]["is_arrayed"] = "boolean"
let attributes["fill_cell"]["name"] = "string"
let attributes["fill_cell"]["object_class"] = "string"
let attributes["fill_cell"]["orientation"] = "R90, R180, R270, MX, MXR90, MY, MYR90"
let attributes["fill_cell"]["origin"] = "coord"
let attributes["fill_cell"]["ref_name"] = "string"
let attributes["fill_cell"]["rows"] = "int"
let attributes["fill_cell"]["x_pitch"] = "distance"
let attributes["fill_cell"]["x_stagger"] = "distance"
let attributes["fill_cell"]["y_pitch"] = "distance"
let attributes["fill_cell"]["y_stagger"] = "distance"
let attributes["geo_mask"]={}
let attributes["geo_mask"]["bbox"] = "rect"
let attributes["geo_mask"]["bounding_box"] = "collection"
let attributes["geo_mask"]["is_empty"] = "boolean"
let attributes["geo_mask"]["object_class"] = "string"
let attributes["geo_mask"]["poly_rects"] = "collection"
let attributes["geo_mask"]["shape_count"] = "int"
let attributes["drc_error_type"]={}
let attributes["drc_error_type"]["bbox"] = "rect"
let attributes["drc_error_type"]["bounding_box"] = "collection"
let attributes["drc_error_type"]["brief_format"] = "message"
let attributes["drc_error_type"]["brief_info"] = "string"
let attributes["drc_error_type"]["error_class"] = "open_locator, short, size, spacing"
let attributes["drc_error_type"]["error_data"] = "collection"
let attributes["drc_error_type"]["full_name"] = "string"
let attributes["drc_error_type"]["name"] = "string"
let attributes["drc_error_type"]["num_detected_errors"] = "int"
let attributes["drc_error_type"]["num_errors"] = "int"
let attributes["drc_error_type"]["object_class"] = "string"
let attributes["drc_error_type"]["severity"] = "information, recommendation, unknown, warning"
let attributes["drc_error_type"]["verbose_format"] = "message"
let attributes["drc_error_type"]["verbose_info"] = "string"
let attributes["port_bus"]={}
let attributes["port_bus"]["bit_order"] = "up"
let attributes["port_bus"]["block"] = "collection"
let attributes["port_bus"]["end"] = "int"
let attributes["port_bus"]["full_name"] = "string"
let attributes["port_bus"]["name"] = "string"
let attributes["port_bus"]["object_class"] = "string"
let attributes["port_bus"]["ports"] = "collection"
let attributes["port_bus"]["start"] = "int"
let attributes["net_bus"]={}
let attributes["net_bus"]["bit_order"] = "up"
let attributes["net_bus"]["block"] = "collection"
let attributes["net_bus"]["end"] = "int"
let attributes["net_bus"]["full_name"] = "string"
let attributes["net_bus"]["name"] = "string"
let attributes["net_bus"]["nets"] = "collection"
let attributes["net_bus"]["object_class"] = "string"
let attributes["net_bus"]["start"] = "int"
let attributes["budget_clock"]={}
let attributes["budget_clock"]["block"] = "collection"
let attributes["budget_clock"]["clock"] = "collection"
let attributes["budget_clock"]["edge"] = "string"
let attributes["budget_clock"]["full_name"] = "string"
let attributes["budget_clock"]["name"] = "string"
let attributes["budget_clock"]["object_class"] = "string"
let attributes["budget_clock"]["source"] = "collection"
let attributes["site_array"]={}
let attributes["site_array"]["boundary"] = "polygon"
let attributes["site_array"]["effective_shapes"] = "poly_list"
let attributes["site_array"]["full_name"] = "string"
let attributes["site_array"]["groups"] = "collection"
let attributes["site_array"]["inner_margin"] = "margin_list"
let attributes["site_array"]["is_aligned"] = "boolean"
let attributes["site_array"]["is_alternate_rows_flipped"] = "boolean"
let attributes["site_array"]["is_default"] = "boolean"
let attributes["site_array"]["is_first_row_flipped"] = "boolean"
let attributes["site_array"]["is_horizontal"] = "boolean"
let attributes["site_array"]["is_shadow"] = "boolean"
let attributes["site_array"]["is_transparent"] = "boolean"
let attributes["site_array"]["name"] = "string"
let attributes["site_array"]["object_class"] = "string"
let attributes["site_array"]["parent_block"] = "collection"
let attributes["site_array"]["parent_block_cell"] = "collection"
let attributes["site_array"]["parent_cell"] = "collection"
let attributes["site_array"]["physical_status"] = "unrestricted"
let attributes["site_array"]["site_def"] = "collection"
let attributes["site_array"]["site_name"] = "string"
let attributes["site_array"]["stacking_order"] = "int"
let attributes["site_array"]["top_block"] = "collection"
let attributes["site_array"]["x_core_offset"] = "distance"
let attributes["site_array"]["x_margin"] = "distance"
let attributes["site_array"]["y_core_offset"] = "distance"
let attributes["site_array"]["y_margin"] = "distance"
let attributes["keepout_margin"]={}
let attributes["keepout_margin"]["boundary"] = "coord_list"
let attributes["keepout_margin"]["can_overlap"] = "boolean"
let attributes["keepout_margin"]["full_name"] = "string"
let attributes["keepout_margin"]["layers"] = "collection"
let attributes["keepout_margin"]["margin"] = "margin_list"
let attributes["keepout_margin"]["name"] = "string"
let attributes["keepout_margin"]["object_class"] = "string"
let attributes["keepout_margin"]["owner"] = "collection"
let attributes["keepout_margin"]["scope"] = "string"
let attributes["keepout_margin"]["type"] = "hard_macro, routing_blockage, soft"
let attributes["budget_segment"]={}
let attributes["budget_segment"]["budget"] = "float"
let attributes["budget_segment"]["constraint"] = "float"
let attributes["budget_segment"]["delay"] = "float"
let attributes["budget_segment"]["fixed_delay"] = "float"
let attributes["budget_segment"]["fixed_slack"] = "float"
let attributes["budget_segment"]["from_block"] = "string"
let attributes["budget_segment"]["from_pin"] = "collection"
let attributes["budget_segment"]["from_pin_data"] = "collection"
let attributes["budget_segment"]["from_pin_id"] = "int"
let attributes["budget_segment"]["full_name"] = "string"
let attributes["budget_segment"]["is_extended_path"] = "boolean"
let attributes["budget_segment"]["name"] = "string"
let attributes["budget_segment"]["object_class"] = "string"
let attributes["budget_segment"]["path_type"] = "collection"
let attributes["budget_segment"]["path_type_id"] = "int"
let attributes["budget_segment"]["rule_name"] = "string"
let attributes["budget_segment"]["segment_id"] = "int"
let attributes["budget_segment"]["slack"] = "float"
let attributes["budget_segment"]["through_block"] = "string"
let attributes["budget_segment"]["to_block"] = "string"
let attributes["budget_segment"]["to_pin"] = "collection"
let attributes["budget_segment"]["to_pin_data"] = "collection"
let attributes["budget_segment"]["to_pin_id"] = "int"
let attributes["budget_path_type"]={}
let attributes["budget_path_type"]["budget_path_delay"] = "float"
let attributes["budget_path_type"]["capture_clock"] = "collection"
let attributes["budget_path_type"]["capture_uncertainty"] = "float"
let attributes["budget_path_type"]["exception"] = "string"
let attributes["budget_path_type"]["exception_type"] = "string"
let attributes["budget_path_type"]["from_latch_path"] = "boolean"
let attributes["budget_path_type"]["full_name"] = "string"
let attributes["budget_path_type"]["launch_clock"] = "collection"
let attributes["budget_path_type"]["launch_uncertainty"] = "float"
let attributes["budget_path_type"]["level_sensitive_capture"] = "boolean"
let attributes["budget_path_type"]["name"] = "string"
let attributes["budget_path_type"]["object_class"] = "string"
let attributes["budget_path_type"]["path_type_id"] = "int"
let attributes["budget_path_type"]["total_path_delay"] = "float"
let attributes["budget_pin_data"]={}
let attributes["budget_pin_data"]["budget_pin"] = "collection"
let attributes["budget_pin_data"]["capture_budget"] = "float"
let attributes["budget_pin_data"]["capture_delay"] = "float"
let attributes["budget_pin_data"]["capture_slack"] = "float"
let attributes["budget_pin_data"]["constraint"] = "collection"
let attributes["budget_pin_data"]["direction"] = "string"
let attributes["budget_pin_data"]["full_name"] = "string"
let attributes["budget_pin_data"]["hold_constraint"] = "collection"
let attributes["budget_pin_data"]["is_feedthrough"] = "boolean"
let attributes["budget_pin_data"]["launch_budget"] = "float"
let attributes["budget_pin_data"]["launch_delay"] = "float"
let attributes["budget_pin_data"]["launch_slack"] = "float"
let attributes["budget_pin_data"]["name"] = "string"
let attributes["budget_pin_data"]["object_class"] = "string"
let attributes["budget_pin_data"]["path_type"] = "collection"
let attributes["budget_pin_data"]["path_type_id"] = "int"
let attributes["budget_pin_data"]["pin"] = "collection"
let attributes["budget_pin_data"]["pin_id"] = "int"
let attributes["bundle"]={}
let attributes["bundle"]["bundle_type"] = "string"
let attributes["bundle"]["constraint_groups"] = "collection"
let attributes["bundle"]["expanded_objects"] = "collection"
let attributes["bundle"]["name"] = "string"
let attributes["bundle"]["object_class"] = "string"
let attributes["bundle"]["object_count"] = "int"
let attributes["bundle"]["objects"] = "collection"
let attributes["bundle"]["topological_constraints"] = "collection"
let attributes["parasitic_tech"]={}
let attributes["parasitic_tech"]["canonical_file_name"] = "string"
let attributes["parasitic_tech"]["full_name"] = "string"
let attributes["parasitic_tech"]["itf_technology_name"] = "string"
let attributes["parasitic_tech"]["layer_map_file_name"] = "string"
let attributes["parasitic_tech"]["library_name"] = "string"
let attributes["parasitic_tech"]["library_parasitic_name"] = "string"
let attributes["parasitic_tech"]["name"] = "string"
let attributes["parasitic_tech"]["object_class"] = "string"
let attributes["parasitic_tech"]["source_file_name"] = "string"
let attributes["cell_bus"]={}
let attributes["cell_bus"]["cells"] = "collection"
let attributes["cell_bus"]["full_name"] = "string"
let attributes["cell_bus"]["name"] = "string"
let attributes["cell_bus"]["object_class"] = "string"
let attributes["drc_error_data"]={}
let attributes["drc_error_data"]["checker_name"] = "string"
let attributes["drc_error_data"]["checker_version"] = "string"
let attributes["drc_error_data"]["creation_date"] = "string"
let attributes["drc_error_data"]["file_name"] = "string"
let attributes["drc_error_data"]["full_name"] = "string"
let attributes["drc_error_data"]["information"] = "string"
let attributes["drc_error_data"]["modification_date"] = "string"
let attributes["drc_error_data"]["modified"] = "boolean"
let attributes["drc_error_data"]["name"] = "string"
let attributes["drc_error_data"]["num_errors"] = "int"
let attributes["drc_error_data"]["num_types"] = "int"
let attributes["drc_error_data"]["object_class"] = "string"
let attributes["drc_error_data"]["open_mode"] = "string"
let attributes["drc_error_data"]["schema_version"] = "string"
let attributes["gui_annotation"]={}
let attributes["gui_annotation"]["client_data"] = "string"
let attributes["gui_annotation"]["color"] = "string"
let attributes["gui_annotation"]["fill_pattern"] = "ConicalGradientPattern, CrossPattern, Custom10Pattern, Custom11Pattern, Custom12Pattern, Custom13Pattern, Custom14Pattern, Custom15Pattern, Custom16Pattern, Custom17Pattern, Custom18Pattern, Custom19Pattern, Custom1Pattern, Custom20Pattern, Custom21Pattern, Custom22Pattern, Custom23Pattern, Custom24Pattern, Custom25Pattern, Custom26Pattern, Custom27Pattern, Custom28Pattern, Custom29Pattern, Custom2Pattern, Custom30Pattern, Custom31Pattern, Custom32Pattern, Custom33Pattern, Custom34Pattern, Custom35Pattern, Custom3Pattern, Custom4Pattern, Custom5Pattern, Custom6Pattern, Custom7Pattern, Custom8Pattern, Custom9Pattern, Dense1Pattern, Dense2Pattern, Dense3Pattern, Dense4Pattern, Dense5Pattern, Dense6Pattern, Dense7Pattern, DiagCrossPattern, FDiagPattern, HorPattern, LinearGradientPattern, NoBrush, RadialGradientPattern, SolidPattern, VerPattern"
let attributes["gui_annotation"]["group"] = "string"
let attributes["gui_annotation"]["info_tip"] = "string"
let attributes["gui_annotation"]["line_style"] = "DashDotLine, DashLine, DotLine, MPenStyle, NoPen, SolidLine"
let attributes["gui_annotation"]["line_width"] = "int"
let attributes["gui_annotation"]["object_class"] = "string"
let attributes["gui_annotation"]["points"] = "string"
let attributes["gui_annotation"]["query_command"] = "string"
let attributes["gui_annotation"]["query_text"] = "string"
let attributes["gui_annotation"]["shape_type"] = "polygon, polyline, rect, ruler, symbol, text"
let attributes["gui_annotation"]["text"] = "string"
let attributes["gui_annotation"]["window"] = "string"
let attributes["clock_path"]={}
let attributes["clock_path"]["clock"] = "collection"
let attributes["clock_path"]["clock_edge_type"] = "string"
let attributes["clock_path"]["clock_edge_value"] = "time"
let attributes["clock_path"]["clock_latency"] = "time"
let attributes["clock_path"]["clock_name"] = "string"
let attributes["clock_path"]["corner"] = "collection"
let attributes["clock_path"]["corner_name"] = "string"
let attributes["clock_path"]["design_name"] = "string"
let attributes["clock_path"]["driving_cell_adjustment"] = "time"
let attributes["clock_path"]["endpoint"] = "collection"
let attributes["clock_path"]["endpoint_name"] = "string"
let attributes["clock_path"]["full_name"] = "string"
let attributes["clock_path"]["lib_name"] = "string"
let attributes["clock_path"]["mode"] = "collection"
let attributes["clock_path"]["mode_name"] = "string"
let attributes["clock_path"]["name"] = "string"
let attributes["clock_path"]["object_class"] = "string"
let attributes["clock_path"]["path_type"] = "string"
let attributes["clock_path"]["points"] = "collection"
let attributes["clock_path"]["propagation_type"] = "string"
let attributes["clock_path"]["scenario"] = "collection"
let attributes["clock_path"]["scenario_name"] = "string"
let attributes["clock_path"]["source_clock"] = "collection"
let attributes["clock_path"]["source_clock_edge_type"] = "string"
let attributes["clock_path"]["source_clock_edge_value"] = "time"
let attributes["clock_path"]["source_clock_name"] = "string"
let attributes["clock_path"]["source_latency"] = "time"
let attributes["clock_path"]["startpoint"] = "collection"
let attributes["clock_path"]["startpoint_name"] = "string"
let attributes["clock_group"]={}
let attributes["clock_group"]["clock_group_type"] = "string"
let attributes["clock_group"]["command_text"] = "string"
let attributes["clock_group"]["comment"] = "string"
let attributes["clock_group"]["file_line_info"] = "string"
let attributes["clock_group"]["full_name"] = "string"
let attributes["clock_group"]["group_count"] = "int"
let attributes["clock_group"]["is_allow_path"] = "boolean"
let attributes["clock_group"]["name"] = "string"
let attributes["clock_group"]["object_class"] = "string"
let attributes["clock"]={}
let attributes["clock"]["clock_latency_fall_max"] = "float"
let attributes["clock"]["clock_latency_fall_min"] = "float"
let attributes["clock"]["clock_latency_rise_max"] = "float"
let attributes["clock"]["clock_latency_rise_min"] = "float"
let attributes["clock"]["clock_network_pins"] = "collection"
let attributes["clock"]["clock_source_latency_early_fall_max"] = "float"
let attributes["clock"]["clock_source_latency_early_fall_min"] = "float"
let attributes["clock"]["clock_source_latency_early_rise_max"] = "float"
let attributes["clock"]["clock_source_latency_early_rise_min"] = "float"
let attributes["clock"]["clock_source_latency_late_fall_max"] = "float"
let attributes["clock"]["clock_source_latency_late_fall_min"] = "float"
let attributes["clock"]["clock_source_latency_late_rise_max"] = "float"
let attributes["clock"]["clock_source_latency_late_rise_min"] = "float"
let attributes["clock"]["clock_source_latency_pins"] = "collection"
let attributes["clock"]["clock_transition_fall_max"] = "float"
let attributes["clock"]["clock_transition_fall_min"] = "float"
let attributes["clock"]["clock_transition_rise_max"] = "float"
let attributes["clock"]["clock_transition_rise_min"] = "float"
let attributes["clock"]["clock_tree_balance_points"] = "collection"
let attributes["clock"]["command_text"] = "string"
let attributes["clock"]["comment"] = "string"
let attributes["clock"]["dont_touch_network"] = "boolean"
let attributes["clock"]["dont_touch_network_no_propagate"] = "boolean"
let attributes["clock"]["file_line_info"] = "string"
let attributes["clock"]["full_name"] = "string"
let attributes["clock"]["hold_uncertainty"] = "float"
let attributes["clock"]["is_generated"] = "boolean"
let attributes["clock"]["is_lib_cell_generated"] = "boolean"
let attributes["clock"]["is_virtual"] = "boolean"
let attributes["clock"]["master_clock"] = "collection"
let attributes["clock"]["max_time_borrow"] = "float"
let attributes["clock"]["mode"] = "collection"
let attributes["clock"]["name"] = "string"
let attributes["clock"]["object_class"] = "string"
let attributes["clock"]["period"] = "float"
let attributes["clock"]["propagated_clock"] = "boolean"
let attributes["clock"]["setup_uncertainty"] = "float"
let attributes["clock"]["skew_groups"] = "collection"
let attributes["clock"]["sources"] = "collection"
let attributes["clock"]["target_lib_cell_exclusions"] = "collection"
let attributes["clock"]["target_lib_cell_subset"] = "collection"
let attributes["clock"]["target_library_subset"] = "collection"
let attributes["clock"]["waveform"] = "string"
let attributes["input_delay"]={}
let attributes["input_delay"]["clock_name"] = "string"
let attributes["input_delay"]["file_line_info"] = "string"
let attributes["input_delay"]["full_name"] = "string"
let attributes["input_delay"]["is_clock_fall"] = "boolean"
let attributes["input_delay"]["is_level_sensitive"] = "boolean"
let attributes["input_delay"]["is_network_latency_included"] = "boolean"
let attributes["input_delay"]["is_source_latency_included"] = "boolean"
let attributes["input_delay"]["max_fall"] = "float"
let attributes["input_delay"]["max_rise"] = "float"
let attributes["input_delay"]["min_fall"] = "float"
let attributes["input_delay"]["min_rise"] = "float"
let attributes["input_delay"]["name"] = "string"
let attributes["input_delay"]["object_class"] = "string"
let attributes["input_delay"]["scenario"] = "collection"
let attributes["output_delay"]={}
let attributes["output_delay"]["clock_name"] = "string"
let attributes["output_delay"]["file_line_info"] = "string"
let attributes["output_delay"]["full_name"] = "string"
let attributes["output_delay"]["is_clock_fall"] = "boolean"
let attributes["output_delay"]["is_level_sensitive"] = "boolean"
let attributes["output_delay"]["is_network_latency_included"] = "boolean"
let attributes["output_delay"]["is_source_latency_included"] = "boolean"
let attributes["output_delay"]["max_fall"] = "float"
let attributes["output_delay"]["max_rise"] = "float"
let attributes["output_delay"]["min_fall"] = "float"
let attributes["output_delay"]["min_rise"] = "float"
let attributes["output_delay"]["name"] = "string"
let attributes["output_delay"]["object_class"] = "string"
let attributes["output_delay"]["scenario"] = "collection"
let attributes["exception"]={}
let attributes["exception"]["command_text"] = "string"
let attributes["exception"]["comment"] = "string"
let attributes["exception"]["exception_type"] = "string"
let attributes["exception"]["file_line_info"] = "string"
let attributes["exception"]["full_name"] = "string"
let attributes["exception"]["group_count"] = "int"
let attributes["exception"]["has_from"] = "boolean"
let attributes["exception"]["has_through"] = "boolean"
let attributes["exception"]["has_to"] = "boolean"
let attributes["exception"]["hold_fall_end"] = "boolean"
let attributes["exception"]["hold_fall_multiplier"] = "int"
let attributes["exception"]["hold_rise_end"] = "boolean"
let attributes["exception"]["hold_rise_multiplier"] = "int"
let attributes["exception"]["is_hold_fall_false"] = "boolean"
let attributes["exception"]["is_hold_rise_false"] = "boolean"
let attributes["exception"]["is_setup_fall_false"] = "boolean"
let attributes["exception"]["is_setup_rise_false"] = "boolean"
let attributes["exception"]["max_fall_delay"] = "float"
let attributes["exception"]["max_rise_delay"] = "float"
let attributes["exception"]["min_fall_delay"] = "float"
let attributes["exception"]["min_rise_delay"] = "float"
let attributes["exception"]["mode"] = "collection"
let attributes["exception"]["name"] = "string"
let attributes["exception"]["object_class"] = "string"
let attributes["exception"]["setup_fall_multiplier"] = "int"
let attributes["exception"]["setup_fall_start"] = "boolean"
let attributes["exception"]["setup_rise_multiplier"] = "int"
let attributes["exception"]["setup_rise_start"] = "boolean"
let attributes["exception"]["through_group_count"] = "int"
let attributes["path_group"]={}
let attributes["path_group"]["command_text"] = "string"
let attributes["path_group"]["comment"] = "string"
let attributes["path_group"]["critical_range"] = "float"
let attributes["path_group"]["file_line_info"] = "string"
let attributes["path_group"]["full_name"] = "string"
let attributes["path_group"]["mode"] = "collection"
let attributes["path_group"]["name"] = "string"
let attributes["path_group"]["object_class"] = "string"
let attributes["path_group"]["weight"] = "float"
let attributes["skew_group"]={}
let attributes["skew_group"]["command_text"] = "string"
let attributes["skew_group"]["file_line_info"] = "string"
let attributes["skew_group"]["full_name"] = "string"
let attributes["skew_group"]["mode"] = "collection"
let attributes["skew_group"]["name"] = "string"
let attributes["skew_group"]["object_class"] = "string"
let attributes["skew_group"]["objects"] = "collection"
let attributes["topology_edge"]={}
let attributes["topology_edge"]["constraint_groups"] = "collection"
let attributes["topology_edge"]["endpoint0"] = "collection"
let attributes["topology_edge"]["endpoint1"] = "collection"
let attributes["topology_edge"]["full_name"] = "string"
let attributes["topology_edge"]["groups"] = "collection"
let attributes["topology_edge"]["max_layer"] = "collection"
let attributes["topology_edge"]["min_layer"] = "collection"
let attributes["topology_edge"]["name"] = "string"
let attributes["topology_edge"]["net"] = "collection"
let attributes["topology_edge"]["object_class"] = "string"
let attributes["topology_edge"]["spacing"] = "distance"
let attributes["topology_edge"]["width"] = "distance"
let attributes["budget_pin_constraint"]={}
let attributes["budget_pin_constraint"]["constraint_id"] = "int"
let attributes["budget_pin_constraint"]["constraint_type"] = "string"
let attributes["budget_pin_constraint"]["constraint_value"] = "float"
let attributes["budget_pin_constraint"]["direction"] = "string"
let attributes["budget_pin_constraint"]["from_clock"] = "string"
let attributes["budget_pin_constraint"]["from_clock_edge"] = "string"
let attributes["budget_pin_constraint"]["frozen"] = "boolean"
let attributes["budget_pin_constraint"]["full_name"] = "string"
let attributes["budget_pin_constraint"]["name"] = "string"
let attributes["budget_pin_constraint"]["object_class"] = "string"
let attributes["budget_pin_constraint"]["path_type"] = "string"
let attributes["budget_pin_constraint"]["pin"] = "collection"
let attributes["budget_pin_constraint"]["to_clock"] = "string"
let attributes["budget_pin_constraint"]["to_clock_edge"] = "string"
let attributes["budget_pin"]={}
let attributes["budget_pin"]["constraints"] = "collection"
let attributes["budget_pin"]["direction"] = "string"
let attributes["budget_pin"]["feedthrough_frozen"] = "boolean"
let attributes["budget_pin"]["full_name"] = "string"
let attributes["budget_pin"]["has_clock_fanin"] = "boolean"
let attributes["budget_pin"]["has_fanin_budget_pin"] = "boolean"
let attributes["budget_pin"]["has_fanout_budget_pin"] = "boolean"
let attributes["budget_pin"]["has_input_delay"] = "boolean"
let attributes["budget_pin"]["has_output_delay"] = "boolean"
let attributes["budget_pin"]["internal_frozen"] = "boolean"
let attributes["budget_pin"]["missing_fanin_delay"] = "boolean"
let attributes["budget_pin"]["missing_fanout_delay"] = "boolean"
let attributes["budget_pin"]["name"] = "string"
let attributes["budget_pin"]["no_path_fanin_pins"] = "collection"
let attributes["budget_pin"]["no_path_fanout_pins"] = "collection"
let attributes["budget_pin"]["object_class"] = "string"
let attributes["budget_pin"]["pin"] = "collection"
let attributes["budget_pin"]["pin_data"] = "collection"
let attributes["budget_pin"]["pin_id"] = "int"
let attributes["tap"]={}
let attributes["tap"]["context"] = "rail, session"
let attributes["tap"]["full_name"] = "string"
let attributes["tap"]["is_valid_location"] = "boolean"
let attributes["tap"]["layer_name"] = "string"
let attributes["tap"]["layer_number"] = "int"
let attributes["tap"]["net"] = "string"
let attributes["tap"]["object_class"] = "string"
let attributes["tap"]["parasitics"] = "string"
let attributes["tap"]["position"] = "coord"
let attributes["tap"]["static_current"] = "double"
let attributes["tap"]["type"] = "auto_pg, cell_coord, cell_pg, lib_cell_coord, lib_cell_pg, top_pg"
let attributes["gui_object"]={}
let attributes["gui_object"]["core_obj"] = "collection"
let attributes["gui_object"]["full_name"] = "string"
let attributes["gui_object"]["layout_info_tip"] = "string"
let attributes["gui_object"]["name"] = "string"
let attributes["gui_object"]["object_class"] = "string"
let attributes["gui_object"]["query_text"] = "string"
let attributes["ems_check"]={}
let attributes["ems_check"]["current_definition"] = "string"
let attributes["ems_check"]["default_definition"] = "string"
let attributes["ems_check"]["enabled"] = "boolean"
let attributes["ems_check"]["full_name"] = "string"
let attributes["ems_check"]["group_members_count"] = "string"
let attributes["ems_check"]["group_name"] = "string"
let attributes["ems_check"]["help_info"] = "string"
let attributes["ems_check"]["is_default"] = "boolean"
let attributes["ems_check"]["is_group_member"] = "boolean"
let attributes["ems_check"]["is_group_name"] = "boolean"
let attributes["ems_check"]["name"] = "string"
let attributes["ems_check"]["object_class"] = "string"
let attributes["via_def"]={}
let attributes["via_def"]["cut_height"] = "distance"
let attributes["via_def"]["cut_layer_names"] = "string"
let attributes["via_def"]["cut_layers"] = "collection"
let attributes["via_def"]["cut_pattern"] = "string"
let attributes["via_def"]["cut_pattern_size"] = "string"
let attributes["via_def"]["cut_width"] = "distance"
let attributes["via_def"]["full_name"] = "string"
let attributes["via_def"]["is_default"] = "boolean"
let attributes["via_def"]["is_excluded_for_signal_route"] = "boolean"
let attributes["via_def"]["is_redundant_via_insertion_only"] = "boolean"
let attributes["via_def"]["lower_enclosure_height"] = "distance"
let attributes["via_def"]["lower_enclosure_width"] = "distance"
let attributes["via_def"]["lower_layer"] = "collection"
let attributes["via_def"]["lower_layer_name"] = "string"
let attributes["via_def"]["lower_mask_pattern"] = "uniform"
let attributes["via_def"]["mask_pattern"] = "uniform"
let attributes["via_def"]["min_columns"] = "int"
let attributes["via_def"]["min_cut_spacing"] = "distance"
let attributes["via_def"]["min_rows"] = "int"
let attributes["via_def"]["name"] = "string"
let attributes["via_def"]["object_class"] = "string"
let attributes["via_def"]["owner"] = "collection"
let attributes["via_def"]["shapes"] = "collection"
let attributes["via_def"]["source_type"] = "generated_for_special_nets, multiple_cut, multiple_cut_fixed, single_cut, single_cut_fixed"
let attributes["via_def"]["upper_enclosure_height"] = "distance"
let attributes["via_def"]["upper_enclosure_width"] = "distance"
let attributes["via_def"]["upper_layer"] = "collection"
let attributes["via_def"]["upper_layer_name"] = "string"
let attributes["via_def"]["upper_mask_pattern"] = "uniform"
let attributes["via_def"]["via_def_type"] = "string"
let attributes["via_rule"]={}
let attributes["via_rule"]["cut_layer_name_table"] = "name_list"
let attributes["via_rule"]["cut_layer_name_table_size"] = "int"
let attributes["via_rule"]["cut_max_spacing_in_lower_metal_direction_table"] = "distance_list"
let attributes["via_rule"]["cut_name_table"] = "name_list"
let attributes["via_rule"]["cut_to_lower_metal_end_of_line_max_spacing_table"] = "distance_list"
let attributes["via_rule"]["cut_x_min_spacing_table"] = "distance_list"
let attributes["via_rule"]["cut_y_min_spacing_table"] = "distance_list"
let attributes["via_rule"]["for_electro_migration"] = "boolean"
let attributes["via_rule"]["for_high_performance"] = "boolean"
let attributes["via_rule"]["forbidden_on_pin_extension"] = "boolean"
let attributes["via_rule"]["full_name"] = "string"
let attributes["via_rule"]["max_num_stagger_tracks_table"] = "int_list"
let attributes["via_rule"]["name"] = "string"
let attributes["via_rule"]["ndr_reserved_track_mode"] = "string"
let attributes["via_rule"]["num_cut_rows_table"] = "int_list"
let attributes["via_rule"]["num_cuts_per_row_table"] = "int_list"
let attributes["via_rule"]["object_class"] = "string"
let attributes["via_rule"]["owner"] = "collection"
let attributes["via_rule"]["same_color_via_grid_map"] = "int_list"
let attributes["via_rule"]["same_color_via_grid_map_cols"] = "int"
let attributes["via_rule"]["same_color_via_grid_map_layer_name"] = "string"
let attributes["via_rule"]["same_color_via_grid_map_rows"] = "int"
let attributes["via_rule"]["self_aligned_via_array_max_num_cuts_table"] = "int_list"
let attributes["via_rule"]["self_aligned_via_array_max_spacing_threshold_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_cut_edge_x_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_cut_edge_y_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_edge_x_unit_length_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_edge_y_unit_length_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_max_num_cuts_table"] = "int_list"
let attributes["via_rule"]["self_aligned_via_cluster_non_rect_max_length_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_non_rect_min_length_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_ortho_edge_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_rect_min_length_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_rect_width_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_sav_edge_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_cluster_ushape_allowed_table"] = "bool_list"
let attributes["via_rule"]["self_aligned_via_diag_ortho_edge_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_diag_sav_edge_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_one_edge_not_allowed"] = "boolean"
let attributes["via_rule"]["self_aligned_via_upper_layer_enc_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_upper_layer_enc_table_size"] = "int"
let attributes["via_rule"]["self_aligned_via_zigzag_ortho_edge_upsize_table"] = "distance_list"
let attributes["via_rule"]["self_aligned_via_zigzag_sav_edge_upsize_table"] = "distance_list"
let attributes["via_rule"]["upper_metal_min_length_table"] = "distance_list"
let attributes["via_rule"]["upsized_via_upper_metal_width_table"] = "distance_list"
let attributes["via_rule"]["upsized_via_x_edge_table"] = "distance_list"
let attributes["via_rule"]["upsized_via_y_edge_table"] = "distance_list"
let attributes["routing_rule"]={}
let attributes["routing_rule"]["cuts"] = "string"
let attributes["routing_rule"]["driver_taper_distance"] = "distance"
let attributes["routing_rule"]["full_name"] = "string"
let attributes["routing_rule"]["groups"] = "collection"
let attributes["routing_rule"]["has_shield"] = "boolean"
let attributes["routing_rule"]["ignore_spacing_to_blockage"] = "boolean"
let attributes["routing_rule"]["ignore_spacing_to_pg"] = "boolean"
let attributes["routing_rule"]["ignore_spacing_to_shield"] = "boolean"
let attributes["routing_rule"]["is_snap_to_track"] = "boolean"
let attributes["routing_rule"]["mask_constraints"] = "string"
let attributes["routing_rule"]["name"] = "string"
let attributes["routing_rule"]["object_class"] = "string"
let attributes["routing_rule"]["rdl_taper_distances"] = "string"
let attributes["routing_rule"]["rdl_taper_widths"] = "string"
let attributes["routing_rule"]["shield_spacings"] = "string"
let attributes["routing_rule"]["shield_widths"] = "string"
let attributes["routing_rule"]["spacing_length_thresholds"] = "string"
let attributes["routing_rule"]["spacing_multiplier"] = "float"
let attributes["routing_rule"]["spacing_weight_levels"] = "string"
let attributes["routing_rule"]["spacings"] = "string"
let attributes["routing_rule"]["taper_distance"] = "distance"
let attributes["routing_rule"]["taper_over_pin_layers"] = "int"
let attributes["routing_rule"]["taper_under_pin_layers"] = "int"
let attributes["routing_rule"]["via_spacings"] = "string"
let attributes["routing_rule"]["vias"] = "string"
let attributes["routing_rule"]["width_multiplier"] = "float"
let attributes["routing_rule"]["widths"] = "string"
let attributes["ems_message"]={}
let attributes["ems_message"]["database_name"] = "string"
let attributes["ems_message"]["id"] = "string"
let attributes["ems_message"]["object_class"] = "string"
let attributes["ems_message"]["rule_name"] = "string"
let attributes["ems_message"]["status"] = "string"
let attributes["supply_port"]={}
let attributes["supply_port"]["direction"] = "inout, internal, out"
let attributes["supply_port"]["full_name"] = "string"
let attributes["supply_port"]["name"] = "string"
let attributes["supply_port"]["object_class"] = "string"
let attributes["supply_port"]["scope"] = "collection"
let attributes["supply_port"]["supply_nets"] = "collection"
let attributes["supply_port"]["user_voltage_early"] = "float"
let attributes["supply_port"]["user_voltage_late"] = "float"
let attributes["supply_port"]["voltage_early"] = "float"
let attributes["supply_port"]["voltage_late"] = "float"
let attributes["multisource_sink_group"]={}
let attributes["multisource_sink_group"]["driver_object"] = "collection"
let attributes["multisource_sink_group"]["name"] = "string"
let attributes["multisource_sink_group"]["sinks"] = "collection"
let attributes["multisource_sink_group"]["type"] = "non_exclusive"
let attributes["timing_arc"]={}
let attributes["timing_arc"]["early_fall_delay"] = "float"
let attributes["timing_arc"]["early_fall_delta_delay"] = "float"
let attributes["timing_arc"]["early_rise_delay"] = "float"
let attributes["timing_arc"]["early_rise_delta_delay"] = "float"
let attributes["timing_arc"]["from_pin"] = "collection"
let attributes["timing_arc"]["full_name"] = "string"
let attributes["timing_arc"]["invalid_reason"] = "string"
let attributes["timing_arc"]["is_cellarc"] = "boolean"
let attributes["timing_arc"]["is_checkarc"] = "boolean"
let attributes["timing_arc"]["is_db_inherited_disabled"] = "boolean"
let attributes["timing_arc"]["is_disabled"] = "boolean"
let attributes["timing_arc"]["is_invalid"] = "boolean"
let attributes["timing_arc"]["is_user_disabled"] = "boolean"
let attributes["timing_arc"]["late_fall_delay"] = "float"
let attributes["timing_arc"]["late_fall_delta_delay"] = "float"
let attributes["timing_arc"]["late_rise_delay"] = "float"
let attributes["timing_arc"]["late_rise_delta_delay"] = "float"
let attributes["timing_arc"]["mode"] = "string"
let attributes["timing_arc"]["name"] = "string"
let attributes["timing_arc"]["object_class"] = "string"
let attributes["timing_arc"]["sdf_cond"] = "string"
let attributes["timing_arc"]["sense"] = "string"
let attributes["timing_arc"]["to_pin"] = "collection"
let attributes["timing_arc"]["user_clock_sense"] = "string"
let attributes["timing_arc"]["when"] = "string"
let attributes["exception_group"]={}
let attributes["exception_group"]["edge"] = "string"
let attributes["exception_group"]["exception_object"] = "collection"
let attributes["exception_group"]["full_name"] = "string"
let attributes["exception_group"]["has_clock"] = "boolean"
let attributes["exception_group"]["name"] = "string"
let attributes["exception_group"]["object_class"] = "string"
let attributes["exception_group"]["objects"] = "collection"
let attributes["exception_group"]["type"] = "string"
let attributes["topological_constraint"]={}
let attributes["topological_constraint"]["end_layers"] = "collection"
let attributes["topological_constraint"]["end_object"] = "collection"
let attributes["topological_constraint"]["end_offset"] = "distance"
let attributes["topological_constraint"]["end_offset_range"] = "distance"
let attributes["topological_constraint"]["end_sides"] = "side_list"
let attributes["topological_constraint"]["full_name"] = "string"
let attributes["topological_constraint"]["groups"] = "collection"
let attributes["topological_constraint"]["name"] = "string"
let attributes["topological_constraint"]["object_class"] = "string"
let attributes["topological_constraint"]["owner"] = "collection"
let attributes["topological_constraint"]["start_layers"] = "collection"
let attributes["topological_constraint"]["start_object"] = "collection"
let attributes["topological_constraint"]["start_offset"] = "distance"
let attributes["topological_constraint"]["start_offset_range"] = "distance"
let attributes["topological_constraint"]["start_sides"] = "side_list"
let attributes["ems_database"]={}
let attributes["ems_database"]["error_count"] = "string"
let attributes["ems_database"]["full_name"] = "string"
let attributes["ems_database"]["info_count"] = "string"
let attributes["ems_database"]["msg_count"] = "string"
let attributes["ems_database"]["name"] = "string"
let attributes["ems_database"]["object_class"] = "string"
let attributes["ems_database"]["warning_count"] = "string"
let attributes["lib_timing_arc"]={}
let attributes["lib_timing_arc"]["from_base_name"] = "string"
let attributes["lib_timing_arc"]["from_lib_pin"] = "collection"
let attributes["lib_timing_arc"]["full_name"] = "string"
let attributes["lib_timing_arc"]["has_ccs_receiver_fall"] = "boolean"
let attributes["lib_timing_arc"]["has_ccs_receiver_rise"] = "boolean"
let attributes["lib_timing_arc"]["has_ccsn_first_stage"] = "boolean"
let attributes["lib_timing_arc"]["has_ccsn_last_stage"] = "boolean"
let attributes["lib_timing_arc"]["is_disabled"] = "boolean"
let attributes["lib_timing_arc"]["is_user_disabled"] = "boolean"
let attributes["lib_timing_arc"]["lib"] = "collection"
let attributes["lib_timing_arc"]["lib_cell"] = "collection"
let attributes["lib_timing_arc"]["mode"] = "string"
let attributes["lib_timing_arc"]["name"] = "string"
let attributes["lib_timing_arc"]["object_class"] = "string"
let attributes["lib_timing_arc"]["sdf_cond"] = "string"
let attributes["lib_timing_arc"]["sense"] = "string"
let attributes["lib_timing_arc"]["to_base_name"] = "string"
let attributes["lib_timing_arc"]["to_lib_pin"] = "collection"
let attributes["lib_timing_arc"]["when"] = "string"
let attributes["module"]={}
let attributes["module"]["full_name"] = "string"
let attributes["module"]["groups"] = "collection"
let attributes["module"]["is_outline"] = "boolean"
let attributes["module"]["name"] = "string"
let attributes["module"]["object_class"] = "string"
let attributes["module"]["outline_def_file_name"] = "string"
let attributes["module"]["outline_def_file_size"] = "string"
let attributes["module"]["outline_def_file_timestamp"] = "string"
let attributes["module"]["outline_file_line_end"] = "int"
let attributes["module"]["outline_file_line_start"] = "int"
let attributes["module"]["outline_file_name"] = "string"
let attributes["module"]["outline_file_size"] = "int"
let attributes["module"]["outline_file_timestamp"] = "int"
let attributes["module"]["outline_port_count"] = "int"
let attributes["module"]["outline_ref_count"] = "string"
let attributes["supply_set"]={}
let attributes["supply_set"]["full_name"] = "string"
let attributes["supply_set"]["function"] = "string"
let attributes["supply_set"]["ground_supply_net"] = "collection"
let attributes["supply_set"]["name"] = "string"
let attributes["supply_set"]["nwell_supply_net"] = "collection"
let attributes["supply_set"]["object_class"] = "string"
let attributes["supply_set"]["power_supply_net"] = "collection"
let attributes["supply_set"]["pwell_supply_net"] = "collection"
let attributes["supply_set"]["scope"] = "collection"
let attributes["power_strategy"]={}
let attributes["power_strategy"]["full_name"] = "string"
let attributes["power_strategy"]["mapped_cell"] = "collection"
let attributes["power_strategy"]["name"] = "string"
let attributes["power_strategy"]["object_class"] = "string"
let attributes["power_strategy"]["power_domain"] = "collection"
let attributes["power_strategy"]["switch_control_net"] = "collection"
let attributes["power_strategy"]["switch_input_supply_net"] = "collection"
let attributes["power_strategy"]["switch_output_supply_net"] = "collection"
let attributes["power_strategy"]["type"] = "string"
let attributes["matching_type"]={}
let attributes["matching_type"]["full_name"] = "string"
let attributes["matching_type"]["groups"] = "collection"
let attributes["matching_type"]["name"] = "string"
let attributes["matching_type"]["object_class"] = "string"
let attributes["matching_type"]["objects"] = "collection"
let attributes["matching_type"]["uniquify_number"] = "int"
let attributes["tech_purpose"]={}
let attributes["tech_purpose"]["full_name"] = "string"
let attributes["tech_purpose"]["name"] = "string"
let attributes["tech_purpose"]["object_class"] = "string"
let attributes["tech_purpose"]["purpose_number"] = "int"
let attributes["site_def"]={}
let attributes["site_def"]["full_name"] = "string"
let attributes["site_def"]["height"] = "distance"
let attributes["site_def"]["is_default"] = "boolean"
let attributes["site_def"]["legal_orientations"] = "orientations"
let attributes["site_def"]["name"] = "string"
let attributes["site_def"]["object_class"] = "string"
let attributes["site_def"]["symmetry"] = "string"
let attributes["site_def"]["tech"] = "collection"
let attributes["site_def"]["type"] = "pad"
let attributes["site_def"]["width"] = "distance"
let attributes["density_rule"]={}
let attributes["density_rule"]["full_name"] = "string"
let attributes["density_rule"]["layer"] = "collection"
let attributes["density_rule"]["layer_name"] = "string"
let attributes["density_rule"]["max_density"] = "to 100"
let attributes["density_rule"]["max_gradient_density"] = "to 100"
let attributes["density_rule"]["min_density"] = "to 100"
let attributes["density_rule"]["name"] = "string"
let attributes["density_rule"]["object_class"] = "string"
let attributes["density_rule"]["window_size"] = "float"
let attributes["voltage_area_rule"]={}
let attributes["voltage_area_rule"]["full_name"] = "string"
let attributes["voltage_area_rule"]["is_default_rule"] = "boolean"
let attributes["voltage_area_rule"]["is_pass_through_allowed"] = "boolean"
let attributes["voltage_area_rule"]["is_physical_feedthrough_allowed"] = "boolean"
let attributes["voltage_area_rule"]["name"] = "string"
let attributes["voltage_area_rule"]["object_class"] = "string"
let attributes["voltage_area_rule"]["voltage_areas"] = "collection"
let attributes["clock_group_group"]={}
let attributes["clock_group_group"]["full_name"] = "string"
let attributes["clock_group_group"]["name"] = "string"
let attributes["clock_group_group"]["object_class"] = "string"
let attributes["clock_group_group"]["objects"] = "collection"
let attributes["ems_rule"]={}
let attributes["ems_rule"]["full_name"] = "string"
let attributes["ems_rule"]["is_enabled"] = "boolean"
let attributes["ems_rule"]["is_frozen"] = "boolean"
let attributes["ems_rule"]["message"] = "string"
let attributes["ems_rule"]["name"] = "string"
let attributes["ems_rule"]["object_class"] = "string"
let attributes["ems_rule"]["severity"] = "string"
let attributes["ems_rule"]["solution"] = "string"
let attributes["ems_rule"]["type"] = "string"
let attributes["ems_rule"]["verbose"] = "boolean"
let attributes["bounding_box"]={}
let attributes["bounding_box"]["ll"] = "coord"
let attributes["bounding_box"]["ll_x"] = "distance"
let attributes["bounding_box"]["ll_y"] = "distance"
let attributes["bounding_box"]["object_class"] = "string"
let attributes["bounding_box"]["ur"] = "coord"
let attributes["bounding_box"]["ur_x"] = "distance"
let attributes["bounding_box"]["ur_y"] = "distance"
let attributes["virtual_connection"]={}
let attributes["virtual_connection"]["name"] = "string"
let attributes["virtual_connection"]["object_class"] = "string"
let attributes["virtual_connection"]["pins"] = "collection"
let attributes["virtual_connection"]["weight"] = "int"
let attributes["clock_balance_group"]={}
let attributes["clock_balance_group"]["name"] = "string"
let attributes["clock_balance_group"]["object_class"] = "string"
"" Reassign to a global variable ""
let g:TclComplete#attributes = attributes
