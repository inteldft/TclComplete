let options = {}
let options["add_attachment"] = ["-file_name","-object",]
let options["add_buffer"] = ["-inverter_pair","-lib_cell","-new_cell_names","-new_net_names","-no_of_cells",]
let options["add_buffer_on_route"] = ["-allow_insertion_over_cell","-allow_physical_feedthrough_buffer","-bus_cell_prefix","-cell_prefix","-detect_layer","-dont_allow_insertion_over_cell","-first_distance","-first_distance_length_ratio","-lib_cell","-location","-max_distance_for_incomplete_route","-max_distance_route_to_gas_station","-max_distance_to_route","-max_distance_to_spare_cell","-net_prefix","-not_spare_cell_aware","-on_top_hierarchy","-only_global_routed_nets","-punch_port","-repeater_distance","-repeater_distance_length_ratio","-respect_blockages","-respect_gas_station","-respect_voltage_areas","-scaled_by_layer","-scaled_by_width","-snap_to_sites","-user_specified_buffers","-user_specified_bus_buffers","-verbose","-voltage_area_specific_lib_cells",]
let options["add_eco_repeater"] = ["-cell_name","-input_net_name","-lib_cell","-load","-output_net_name",]
let options["add_feedthrough_buffers"] = ["-buffer_side","-logical","-nets","-type","-user_buffer","-verbose",]
let options["add_pins_to_virtual_connection"] = ["-object","-pins",]
let options["add_port_protection_diodes"] = ["-diode_lib_cell","-ignore_dont_touch","-port","-prefix",]
let options["add_port_state"] = ["-state",]
let options["add_power_state"] = []
let options["add_pst_state"] = ["-pst","-state",]
let options["add_redundant_vias"] = ["-effort","-list_only","-nets","-timing_preserve_hold_slack_threshold","-timing_preserve_nets","-timing_preserve_setup_slack_threshold",]
let options["add_shield_association"] = ["-nets","-objects",]
let options["add_spare_cells"] = ["-boundary","-cell_name","-density_aware_ratio","-hier_cell","-ignore_blockage_types","-input_pin_connect_type","-lib_cell","-num_cells","-num_instances","-voltage_areas",]
let options["add_tie_cells"] = ["-objects","-tie_high_lib_cells","-tie_low_lib_cells",]
let options["add_to_bound"] = []
let options["add_to_bundle"] = ["-before_object","-bundle","-prepend",]
let options["add_to_collection"] = ["-unique",]
let options["add_to_edit_group"] = []
let options["add_to_group"] = []
let options["add_to_io_guide"] = ["-before",]
let options["add_to_io_ring"] = []
let options["add_to_matching_type"] = []
let options["add_to_multisource_clock_sink_group"] = ["-name","-sinks",]
let options["add_to_must_join_ports"] = []
let options["add_to_net"] = []
let options["add_to_net_bus"] = []
let options["add_to_pin_blockage"] = []
let options["add_to_pin_guide"] = []
let options["add_to_port_bus"] = []
let options["add_to_routing_corridor"] = []
let options["add_to_rp_group"] = ["-allow_overlap","-blockage","-cells","-column","-free_placement","-height","-num_columns","-num_rows","-orientation","-override_alignment","-pin_name","-row","-rp_group","-width",]
let options["add_via_mapping"] = ["-force","-from","-from_icc_file","-to","-transform","-weight",]
let options["alias"] = []
let options["align_objects"] = ["-anchor","-anchor_side","-group","-margin","-offset","-parent","-side","-to","-to_box",]
let options["align_pins"] = ["-change_layer_height","-change_layer_width",]
let options["all_clocks"] = ["-design","-mode",]
let options["all_connected"] = ["-leaf","-physical_context",]
let options["all_corners"] = ["-design",]
let options["all_exceptions"] = ["-design","-mode",]
let options["all_fanin"] = ["-flat","-levels","-only_cells","-pin_levels","-startpoints_only","-step_into_hierarchy","-to","-trace_arcs",]
let options["all_fanout"] = ["-clock_tree","-endpoints_only","-flat","-from","-levels","-only_cells","-pin_levels","-step_into_hierarchy","-trace_arcs",]
let options["all_high_transitive_fanout"] = ["-nets","-threshold","-through_buf_inv",]
let options["all_inputs"] = ["-clock","-edge_triggered","-level_sensitive",]
let options["all_modes"] = ["-design",]
let options["all_outputs"] = ["-clock","-edge_triggered","-level_sensitive",]
let options["all_registers"] = ["-async_pins","-cells","-clock","-clock_pins","-data_pins","-edge_triggered","-fall_clock","-level_sensitive","-master_slave","-no_hierarchy","-output_pins","-rise_clock","-slave_clock_pins",]
let options["all_scenarios"] = ["-design",]
let options["all_transitive_fanin"] = ["-flat","-levels","-only_cells","-startpoints_only","-to",]
let options["all_transitive_fanout"] = ["-endpoints_only","-flat","-from","-levels","-only_cells",]
let options["analyze_design_violations"] = ["-drc_nets","-endpoints","-fanout","-max_slack","-min_slack","-output","-slack","-stage","-type",]
let options["analyze_lib_cell_placement"] = ["-gifs","-lib_cells","-max_cells","-no","-region","-threshold","-trials",]
let options["analyze_power_plan"] = ["-nets","-pad_references","-power_budget","-read_power_file","-report_track_utilization_only","-use_terminals_as_pads","-voltage",]
let options["analyze_subcircuit"] = ["-apply_annotation","-clock","-configuration","-create_spice_deck","-driver_subckt_files","-extraction","-from","-name","-net","-num_simulation_cycles","-rc_include_file_suffix","-run_simulation","-simulator","-spef_input_file_suffix","-spice_header_files","-to","-verbose","-write_annotation",]
let options["append_to_collection"] = ["-unique",]
let options["apropos"] = ["-symbols_only",]
let options["assign_3d_interchip_nets"] = ["-bumps","-matching_types","-nets",]
let options["associate_mv_cells"] = ["-all","-isolation_cells","-level_shifters","-power_switches","-retention_registers",]
let options["associate_supply_set"] = ["-handle",]
let options["attach_drc_error_data"] = ["-keep","-name",]
let options["audit_scripts"] = ["-input","-skip_hidden",]
let options["balance_clock_groups"] = []
let options["cd"] = []
let options["change_abstract"] = ["-cells","-force","-label","-lib","-promote_constraints","-references","-reload","-view",]
let options["change_link"] = ["-design",]
let options["change_names"] = ["-dont_touch","-hierarchy","-include_sub_blocks","-instance","-log_changes","-new_name","-rules","-skip_physical_only_cells","-verbose",]
let options["change_reference"] = ["-design","-module","-verbose",]
let options["change_selection"] = ["-add","-clock_trees","-name","-remove","-replace","-toggle","-type",]
let options["change_view"] = ["-cells","-force","-label","-lib","-references","-reload","-view",]
let options["characterize_block_pg"] = ["-compile_pg_script","-output_directory",]
let options["check_3d_design"] = ["-bump_cluster","-chip_placement","-logical_physical_consistency","-matching_type","-physical_contact","-physical_design_rule","-verbose",]
let options["check_boundary_cells"] = ["-error_view",]
let options["check_bufferability"] = ["-driver","-hierarchy","-loads","-nets","-nosplit","-verbose","-voltage_area",]
let options["check_busplan_constraints"] = ["-check_ref","-ref_buses",]
let options["check_clock_trees"] = ["-clocks","-message_limit",]
let options["check_consistency_settings"] = ["-output","-tool","-work_dir",]
let options["check_design"] = ["-checks","-ems_database","-open_message_browser",]
let options["check_duplicates"] = ["-blocks","-object_types","-remove","-return_as_collection","-verbose",]
let options["check_feedthroughs"] = ["-cells","-close_to_edge","-feedthrough_length","-filter_by_length","-include_buffered","-include_original_feedthroughs","-mixed","-net_constraints","-pure","-redundant","-reused_feedthroughs","-self","-shape","-tolerance_distance","-topo_constraints","-unused_feedthroughs",]
let options["check_finfet_grid"] = ["-hierarchical","-objects",]
let options["check_freeze_silicon"] = []
let options["check_hier_design"] = ["-references","-stage",]
let options["check_host_options"] = ["-host_options","-work_dir",]
let options["check_io_placement"] = ["-bump_assignment","-cells","-error_view","-filename","-flipping","-gap","-io_guides","-matching_types","-min_pitch","-output_directory","-overlap","-pad_assignment_file","-pad_to_guide_assignment","-power_constraints","-signal_constraints","-unplaced",]
let options["check_legality"] = ["-cells","-check_distance","-output_tcl","-verbose",]
let options["check_license"] = []
let options["check_lvs"] = ["-check_child_cells","-check_top_level_blockages","-check_zero_spacing_blockages","-checks","-exclude_child_cell_types","-max_errors","-nets","-open_reporting","-report_floating_pins",]
let options["check_mib_alignment"] = ["-cell_row","-layers","-pg","-verbose","-wire_tracks",]
let options["check_mib_for_pin_placement"] = ["-asymmetric_connections","-cells","-nets","-swapped_connections","-top_level_terminal_locations",]
let options["check_mv_design"] = ["-erc_mode","-max_message_count","-power_connectivity","-voltage_threshold",]
let options["check_netlist"] = ["-cells","-hierarchical","-nets","-ports",]
let options["check_objects_for_push_down"] = ["-cells",]
let options["check_pg_connectivity"] = ["-check_block_pins","-check_macro_pins","-check_pad_pins","-check_std_cell_pins","-error_view_name","-max_floating_cluster_size","-nets","-write_connectivity_file",]
let options["check_pg_drc"] = ["-bottom_layer","-check_detail_route_shapes","-check_metal_on_track","-check_min_metal_area_on_pins","-coordinates","-do_not_check_shapes_in_lib_cells","-ignore_clock_nets","-ignore_keepout_margins","-ignore_std_cells","-load_routing_of_all_nets","-nets","-no_gui","-output","-top_layer",]
let options["check_pg_missing_vias"] = ["-honor_routing_blockage","-ignore_shield_route","-ignore_small_intersections","-nets","-output_file","-via_rule_file","-write_default_via_rule_file",]
let options["check_physical_constraints"] = []
let options["check_pin_placement"] = ["-alignment","-alignment_histogram","-alignment_report_file","-alignment_tolerance_distance","-blocked_only","-cell_type","-connection_type","-corner_keep_out","-detour_tolerance","-error_view","-exclude_unplaced_objects","-filename","-layer_mismatch_only","-layers","-missing","-net_length","-nets","-off_edge","-offset","-order","-output_directory","-pin_blockage","-pin_detour","-pin_guide","-pin_mask_constraint","-pin_size","-pin_spacing","-pin_type","-pins","-ports","-pre_route","-report_net_details","-routing_corridor","-self","-shorts","-sides","-single_pin","-stacking","-synthesized_pins","-technology_spacing_rules","-wide_track","-wire_track",]
let options["check_placement_constraints"] = []
let options["check_pre_pin_placement"] = []
let options["check_routability"] = ["-access_edge_whole_side","-allow_via_rotation","-blocked_range","-blocked_range_via_side","-check_frozen_net_blocked_ports","-check_lib_via_cut_blockage","-check_min_grid","-check_no_net_pins","-check_non_standard_cell_blocked_ports","-check_out_of_boundary","-check_pg_blocked_ports","-check_real_metal_blockage_overlap_pin","-check_redundant_pg_shapes","-check_routing_track_space","-check_shield","-check_standard_cell_blocked_ports","-check_via_cut_blockage","-connect_standard_cells_within_pins","-error_data","-honor_layer_constraints","-obey_access_edges","-obey_direction_preference","-report_no_access_edge","-standard_cell_search_range",]
let options["check_routes"] = ["-antenna","-check_from_frozen_shapes","-check_from_user_shapes","-coordinates","-drc","-nets","-open_net","-report_all_open_nets","-voltage_area",]
let options["check_routing_corridors"] = []
let options["check_rp_constraints"] = ["-analyze_placement","-no_adv","-no_pdc","-no_rp_constraints","-region","-threshold","-trials","-verbose",]
let options["check_sadp_tracks"] = []
let options["check_scan_chain"] = ["-chain_name",]
let options["check_supply_equivalence"] = ["-functional","-pst","-verbose",]
let options["check_tcd_cells"] = ["-include_small_windows","-lib_cells","-window_size","-window_step",]
let options["check_timing"] = ["-all","-corners","-exclude","-include","-modes","-override_defaults","-scenarios",]
let options["clock"] = []
let options["clock_opt"] = ["-from","-list_only","-to",]
let options["close_blocks"] = ["-force","-purge","-save",]
let options["close_drc_error_data"] = ["-force","-save",]
let options["close_ems_databases"] = ["-save",]
let options["close_lib"] = ["-all","-compress","-force","-purge","-save_designs",]
let options["collection_to_list"] = ["-brace_with_quotes","-name_only","-newline","-no_braces","-no_sort","-objects","-truncate",]
let options["color_macro_pins"] = []
let options["commit_blackbox_timing"] = ["-convert_placement_abstract",]
let options["commit_block"] = ["-library","-verbose",]
let options["commit_upf"] = ["-infer_supply_from_pg_net","-skip_resolve_pg_net",]
let options["compare_collections"] = ["-order_dependent",]
let options["compare_floorplans"] = ["-input","-top_level_only","-verbosity",]
let options["compile_boundary_cells"] = ["-add_placement_blockage",]
let options["compile_pg"] = ["-ignore_drc","-ignore_via_drc","-strategies","-tag","-undo","-via_rule",]
let options["compute_area"] = ["-objects",]
let options["compute_budget_constraints"] = ["-balance","-boundary","-busplans","-estimate_timing","-fanin_cone","-fanout_cone","-feedthrough","-input","-latency_targets","-modes","-no_estimate_timing","-ocv_delay","-ocv_percent","-output","-pins","-setup_delay","-slack","-unspecified",]
let options["compute_clock_latency"] = ["-verbose",]
let options["compute_dff_connections"] = ["-dont_include_abstracts","-host_options","-include_blocks","-max_fanout","-max_gate","-max_reg","-retrace_blocks","-work_dir",]
let options["compute_polygons"] = ["-objects1","-objects2","-operation",]
let options["connect_freeze_silicon_tie_cells"] = ["-cells","-max_fanout","-max_wire_length","-tie_high_lib_cell","-tie_low_lib_cell",]
let options["connect_logic_net"] = ["-ports","-reconnect",]
let options["connect_net"] = ["-design","-net",]
let options["connect_pg_net"] = ["-all_blocks","-automatic","-block","-design","-net","-verbose",]
let options["connect_pins"] = ["-design","-driver","-incremental","-port_name",]
let options["connect_power_switch"] = ["-ack_out","-ack_port_name","-direction","-keep_order","-lib_pin","-mode","-object_list","-port_name","-ring_direction","-source","-start_point","-voltage_area",]
let options["connect_supply_net"] = ["-ports","-vct",]
let options["convert_aocv_pocv"] = ["-corners","-depth",]
let options["copy_block"] = ["-force","-from_block","-to_block",]
let options["copy_collection"] = []
let options["copy_lib"] = ["-force","-from_lib","-merge","-no_designs","-to_lib",]
let options["copy_objects"] = ["-delta","-from","-group","-net","-rotate_by","-to","-x_pitch","-x_pitch_type","-x_times","-y_pitch","-y_pitch_type","-y_times",]
let options["copy_relative_placement"] = ["-from","-to","-to_cells",]
let options["copy_to_layer"] = ["-geo_masks","-layer","-net","-shape_use",]
let options["cputime"] = ["-all","-format","-verbose",]
let options["create_3d_mirror_bumps"] = ["-bumps","-force","-from","-prefix","-ref_cell","-to",]
let options["create_abstract"] = ["-all_blocks","-blocks","-estimate_timing","-force_recreate","-host_options","-include_objects","-placement","-read_only","-timing_level","-work_dir",]
let options["create_abut_rules"] = ["-hard_keepout","-keepout_width","-number_of_references","-output","-soft_keepout","-use_lib",]
let options["create_backend_tcd_cells"] = ["-avoid_route_guide","-bbox","-check_only","-combined_tcd_cells","-density","-icovl_spacing","-include_small_windows","-lib_cells","-max_tcd_spacing","-min_tcd_count","-orientation","-other_cell_spacing","-place_at_window_center","-snap_to_fin_grid","-stack_with_backend","-stack_with_frontend","-stack_with_macro","-tcd_spacing","-window_size",]
let options["create_blackbox"] = ["-boundary","-library","-new_name","-target_boundary_area","-type",]
let options["create_blackbox_clock_network_delay"] = ["-corners","-max","-min","-modes","-value",]
let options["create_blackbox_constraint"] = ["-clock","-corners","-edge","-fall_to","-from","-hold","-modes","-rise_to","-setup","-to","-value",]
let options["create_blackbox_delay"] = ["-clock","-corners","-fall_from","-fall_to","-from","-max","-min","-modes","-rise_from","-rise_to","-to","-value",]
let options["create_blackbox_drive_type"] = ["-input_transition_fall","-input_transition_rise","-lib_cell",]
let options["create_blackbox_load_type"] = ["-lib_cell",]
let options["create_block"] = ["-force",]
let options["create_bound"] = ["-boundary","-cell","-design_type","-diamond","-dimensions","-effort","-exclusive","-hierarchical_only","-name","-type",]
let options["create_bound_shape"] = ["-bound","-boundary",]
let options["create_boundary_cells"] = ["-add_metal_cut_allowed","-at_va_boundary","-bottom_boundary_cells","-bottom_left_inside_corner_cells","-bottom_left_outside_corner_cell","-bottom_right_inside_corner_cells","-bottom_right_outside_corner_cell","-bottom_tap_cell","-do_not_swap_top_and_bottom_inside_corner_cell","-enable_prerouted_net_check","-insert_into_blocks","-left_boundary_cell","-min_row_width","-mirror_left_boundary_cell","-mirror_left_inside_corner_cell","-mirror_left_outside_corner_cell","-mirror_right_boundary_cell","-mirror_right_inside_corner_cell","-mirror_right_outside_corner_cell","-no_1x","-prefix","-right_boundary_cell","-separator","-tap_distance","-top_boundary_cells","-top_left_inside_corner_cells","-top_left_outside_corner_cell","-top_right_inside_corner_cells","-top_right_outside_corner_cell","-top_tap_cell","-voltage_area",]
let options["create_budget_busplan"] = ["-force","-from","-name","-nets","-rule",]
let options["create_buffer_trees"] = ["-from","-hfs_fanout_threshold","-incremental","-lib_cells","-no_density_abort","-no_legalize","-optimize_congestion","-optimize_congestion_box","-use_imrd","-verbose",]
let options["create_bump_array"] = ["-bbox","-boundary","-delta","-lib_cell","-name","-orientation","-origin","-pattern","-repeat",]
let options["create_bundle"] = ["-name",]
let options["create_bundles_from_patterns"] = ["-bundle_grouping","-maximum_nets","-minimum_nets","-net_name_prefix","-net_order","-no_angle_brackets","-no_braces","-no_brackets","-no_colons","-no_parentheses","-no_underlines",]
let options["create_bus_routing_style"] = ["-corner_type","-for","-force","-gap","-layer_spacings","-layer_widths","-shield_placement","-valid_layers",]
let options["create_busplans"] = ["-add_start_end_cells","-auto","-force","-from","-name","-nets","-reset","-rule","-to","-verbose",]
let options["create_cell"] = ["-design",]
let options["create_channel_congestion_map"] = ["-boundary","-channel_width_threshold",]
let options["create_check_design_strategy"] = ["-define_check","-define_group",]
let options["create_clock"] = ["-add","-comment","-name","-period","-waveform",]
let options["create_clock_balance_group"] = ["-corner","-name","-objects","-offset_latencies",]
let options["create_clock_buffer"] = ["-clock","-location","-new_cell_name","-new_net_name","-replace","-sinks","-snap","-source",]
let options["create_clock_drivers"] = ["-boundary","-boxes","-configuration","-hierarchy","-input_pin","-keepouts","-lib_cells","-loads","-locations","-max_displacement","-output_net_name","-prefix","-short_outputs","-template","-transfer_wires_from",]
let options["create_clock_rp_groups"] = ["-auto_shape","-cells","-distance","-max_rp_rows","-max_sinks","-min_sinks","-timing_driven",]
let options["create_clock_skew_group"] = ["-mode","-name","-objects",]
let options["create_clock_straps"] = ["-allow_floating","-allow_splitting","-backoff","-bias","-bias_margins","-bias_to_nets","-boundary","-clear","-create_ends","-detect_length","-grids","-keepouts","-layers","-length","-margins","-nets","-spine_direction","-types","-widths",]
let options["create_command_group"] = ["-info",]
let options["create_corner"] = ["-copy",]
let options["create_custom_shields"] = ["-keep_session","-nets",]
let options["create_density_rule"] = ["-layer","-library","-max_density","-max_gradient_density","-min_density","-tech","-window_size",]
let options["create_dff_trace_filters"] = ["-blocks","-filename","-patterns","-type",]
let options["create_differential_group"] = ["-for","-force","-gap","-layer_spacings","-layer_widths","-shield_placement","-twist_interval","-twist_offset","-twist_style","-valid_layers",]
let options["create_diodes"] = ["-options",]
let options["create_drc_error"] = ["-actual_spacing","-direction","-endpoints","-error_data","-error_type","-height_required","-information","-layers","-must_fix","-objects","-pin_edge","-points","-polygons","-polylines","-required_spacing","-shape_uses","-status","-width_required",]
let options["create_drc_error_data"] = ["-checker_name","-checker_version","-file_name","-information","-name",]
let options["create_drc_error_shapes"] = ["-endpoints","-error_data","-layers","-points","-polygons","-polylines",]
let options["create_drc_error_type"] = ["-brief_format","-brief_info","-error_class","-error_data","-name","-num_detected_errors","-required_objects","-severity","-verbose_format","-verbose_info",]
let options["create_eco_bus_buffer_pattern"] = ["-distance","-first_buffer","-measure_from","-name","-repeat_after","-user_specified_distance",]
let options["create_edit_group"] = ["-cell","-group_use","-name","-ungroup_on_remove",]
let options["create_ems_database"] = []
let options["create_ems_message"] = ["-parameters","-rule",]
let options["create_ems_rule"] = ["-message","-name","-parameters","-severity",]
let options["create_frame"] = ["-block_all","-block_core_margin","-color_based_dpt_flow","-connect_within_pin","-convert_metal_blockage_to_zero_spacing","-create_zero_spacing_blockages_around_pins","-design_rule_via_blockage_layers","-drc_distances","-enable_via_regions_for_all_design_types","-hierarchical","-include_nondefault_via","-include_routing_pg_ports","-keepout_spacing_for_non_pin_shapes","-merge_metal_blockage","-pin_channel_distances","-pin_must_connect_area_layers","-pin_must_connect_area_thresholds","-port_contact_selections","-preserve_metal_blockage","-remove_non_pin_shapes","-source_drain_annotation","-trim_metal_blockage_around_pin",]
let options["create_freeze_silicon_leq_change_list"] = ["-cells","-output",]
let options["create_frontend_tcd_cells"] = ["-bbox","-check_only","-density","-icovl_spacing","-include_small_windows","-lib_cells","-max_tcd_spacing","-min_tcd_count","-orientation","-other_cell_spacing","-place_at_window_center","-respect_blockage","-snap_to_fin_grid","-tcd_spacing","-window_size",]
let options["create_generated_clock"] = ["-add","-combinational","-comment","-divide_by","-duty_cycle","-edge_shift","-edges","-invert","-master_clock","-multiply_by","-name","-source",]
let options["create_geo_mask"] = ["-merge","-objects",]
let options["create_grid"] = ["-layers","-orientations","-pg_strategy","-site_arrays","-site_rows","-type","-x_offset","-x_step","-y_offset","-y_step",]
let options["create_group"] = ["-allow_duplicate_names","-name","-remove_when","-type",]
let options["create_icovl_cells"] = ["-bbox","-check_only","-icovl_spacing","-lib_cells","-orientation","-other_cell_spacing","-over_icovl_routing_guide_extension","-over_icovl_routing_guide_layers","-partitions","-placement_blockage_extension","-routing_blockage_extension","-routing_blockage_layers","-tcd_spacing","-type",]
let options["create_io_break_cells"] = ["-cells","-location","-reference_cells",]
let options["create_io_corner_cell"] = ["-cell","-reference_cell",]
let options["create_io_filler_cells"] = ["-extension_bbox","-io_guides","-overlap_cells","-prefix","-reference_cells",]
let options["create_io_guide"] = ["-line","-min_pitch","-name","-offset","-pad_cells","-side",]
let options["create_io_ring"] = ["-bbox","-corner_height","-guides","-inside","-name","-offset","-pad_cell_list",]
let options["create_keepout_margin"] = ["-inner","-layers","-max_padding_per_macro","-min_padding_per_macro","-outer","-tracks_per_macro_pin","-type",]
let options["create_layer"] = ["-after","-before","-layer_type","-mask_name","-name","-number","-purpose","-tech",]
let options["create_left_right_filler_cells"] = ["-boundaries","-follow_stdcell_orientation","-lib_cells","-prefix","-rules","-voltage_areas",]
let options["create_length_limit"] = ["-for","-force","-min_value",]
let options["create_lib"] = ["-base_lib","-convert_sites","-ref_libs","-scale_factor","-technology","-use_technology_lib",]
let options["create_logic_net"] = []
let options["create_logic_port"] = ["-direction",]
let options["create_macro_array"] = ["-align","-create_group","-fill_pattern","-flip_alternate_cols","-flip_alternate_rows","-horizontal_channel_height","-name","-num_cols","-num_rows","-orientation","-vertical_channel_width",]
let options["create_macro_relative_location_placement"] = ["-hierarchical","-snap_to_grid",]
let options["create_marker_layers"] = ["-cells","-design","-horizontal_extension","-references","-vertical_extension",]
let options["create_mask_constraint_routing_blockages"] = ["-cells","-create_placement_blockages","-self",]
let options["create_matching_type"] = ["-name","-uniquify",]
let options["create_mim_capacitor_array"] = ["-boundary","-lib_cell","-orientation","-prefix","-x_increment","-y_increment",]
let options["create_mismatch_config"] = ["-ref_config",]
let options["create_mode"] = []
let options["create_module"] = ["-design",]
let options["create_multibit"] = ["-lib_cell","-name",]
let options["create_multisource_clock_sink_group"] = ["-driver_object","-name","-sinks","-type",]
let options["create_mv_cells"] = ["-all","-generate_strategy","-isolation","-level_shifter","-strategy_output","-verbose",]
let options["create_net"] = ["-cell","-design","-ground","-power","-tie_high","-tie_low",]
let options["create_net_bus"] = ["-block","-cell","-create_nets","-design",]
let options["create_net_priority"] = ["-for","-force","-priority",]
let options["create_net_shielding"] = ["-disabled_layers","-enclose_pins","-enclose_vias","-for","-force","-gap","-layer_gaps","-layer_max_gaps","-layer_widths","-max_gap","-min_segment","-sharing","-shield_net","-shield_net_2","-via_defs","-width",]
let options["create_pad_rings"] = ["-create","-drc","-max_shrink_routing_boundaries_for_all_boundary_pads","-max_target_layer","-min_shrink_routing_boundaries_for_all_boundary_pads","-min_target_layer","-nets","-route_pins_on_layer","-sides","-undo",]
let options["create_pg_composite_pattern"] = ["-add_patterns","-nets","-parameters","-via_rule",]
let options["create_pg_macro_conn_pattern"] = ["-direction","-excluded_pins","-layers","-nets","-number","-parameters","-pin_conn_type","-pin_layers","-pitch","-spacing","-via_rule","-width",]
let options["create_pg_region"] = ["-block","-core","-design_boundary","-exclude_macros","-exclude_regions","-expand","-expand_by_edge","-group_of_ios","-group_of_macros","-io_offset","-join_regions","-macro_offset","-polygon","-remove_jog","-remove_notch","-update","-voltage_area",]
let options["create_pg_ring_pattern"] = ["-corner_bridge","-horizontal_layer","-horizontal_spacing","-horizontal_width","-nets","-parameters","-side_layer","-side_spacing","-side_width","-vertical_layer","-vertical_spacing","-vertical_width","-via_rule",]
let options["create_pg_special_pattern"] = ["-honor_max_stdcell_strap_distance","-insert_channel_straps","-insert_physical_cell_alignment_straps","-insert_power_switch_alignment_straps","-insert_terminal_alignment_straps","-parameters","-terminal_alignment_via_rule",]
let options["create_pg_stapling_vias"] = ["-align_track","-contact_code","-from_layer","-from_shapes","-ignore_drc","-mark_as","-mask","-max_array_size","-nets","-offset","-pitch","-regions","-tag","-to_layer","-to_shapes","-via_masters",]
let options["create_pg_std_cell_conn_pattern"] = ["-check_std_cell_drc","-layers","-mark_as_follow_pin","-parameters","-rail_mask","-rail_shift","-rail_width",]
let options["create_pg_strap"] = ["-direction","-drc","-extend_high","-extend_low","-high_end","-layer","-low_end","-mark_as","-mask","-mask_constraint","-net","-pitch","-start","-stop","-tag","-via_rule","-width",]
let options["create_pg_vias"] = ["-allow_parallel_objects","-drc","-from_layers","-from_types","-insert_additional_vias","-mark_as","-nets","-shapes","-tag","-to_layers","-to_types","-via_masters","-within_bbox",]
let options["create_pg_wire_pattern"] = ["-center","-direction","-extend_high","-extend_low","-high_end_reference_point","-layer","-low_end_reference_point","-mask","-mask_constraint","-parameters","-pitch","-spacing","-track_alignment","-trim","-width",]
let options["create_pin"] = ["-design","-direction",]
let options["create_pin_blockage"] = ["-boundary","-cell","-feedthrough_only","-layers","-name",]
let options["create_pin_guide"] = ["-boundary","-cell","-exclusive","-layers","-name","-parents","-pin_spacing",]
let options["create_placement"] = ["-congestion","-congestion_driven_restructuring","-congestion_effort","-effort","-floorplan","-host_options","-incremental","-timing_driven","-use_seed_locs",]
let options["create_placement_blockage"] = ["-blocked_percentage","-boundary","-category","-cell","-name","-purpose","-type",]
let options["create_poly_rect"] = ["-boundary","-layers",]
let options["create_port"] = ["-cell","-design","-direction","-port_type",]
let options["create_port_bus"] = ["-block","-cell","-create_ports","-design",]
let options["create_power_domain"] = ["-available_supplies","-elements","-include_scope","-scope","-supply","-update",]
let options["create_power_state_group"] = []
let options["create_power_switch"] = ["-ack_delay","-ack_port","-control_port","-domain","-error_state","-input_supply_port","-off_state","-on_partial_state","-on_state","-output_supply_port","-supply_set",]
let options["create_power_switch_array"] = ["-align_marker","-boundary","-checkerboard","-lib_cell","-offset_start","-orient","-pattern","-pg_straps","-pg_strategy","-power_switch","-prefix","-siterow_offset","-siterow_pitch","-snap_to_site_row","-switch_number","-voltage_area","-voltage_area_shape","-x_offset","-x_pitch","-y_offset","-y_pitch",]
let options["create_power_switch_ring"] = ["-boundary","-continue_pattern","-end_point","-filler_cells","-inner_corner_cell","-inner_corner_cell_orient","-lib_cell","-orient","-outer_corner_cell","-outer_corner_cell_orient","-pattern","-power_switch","-prefix","-snap_to_site_row","-start_point","-switch_number","-through_points","-vertical_filler_cells","-vertical_lib_cell","-vertical_lib_cell_orient","-voltage_area","-voltage_area_shape","-x_offset","-x_pitch","-y_offset","-y_pitch",]
let options["create_pr_rule"] = ["-abut_table","-library","-row_spacing","-tech",]
let options["create_pst"] = ["-supplies",]
let options["create_purpose"] = ["-force","-name","-number","-tech",]
let options["create_qor_snapshot"] = ["-corners","-max_paths","-modes","-name","-nosplit","-nworst","-power","-scenarios","-significant_digits","-zero_wire_load",]
let options["create_rdl_power_extension"] = ["-bbox","-from_previous_extension","-ground_net","-layer","-mode","-power_net","-remove_nets","-width_variation",]
let options["create_rdl_shields"] = ["-layers","-mode","-nets","-nets_in_file","-shield_on_bump","-shield_routing_tie","-shield_via_tie","-trim_floating",]
let options["create_routing_blockage"] = ["-allow_metal_fill_only","-allow_via_ladder","-blockage_group_id","-boundary","-boundary_external","-boundary_internal","-cell","-layers","-name_prefix","-net_types","-reserve_for_top_level_routing","-zero_spacing",]
let options["create_routing_corridor"] = ["-boundary","-cell","-end_endcap","-max_layer_name","-min_layer_name","-name","-object","-path","-start_endcap","-width",]
let options["create_routing_corridor_shape"] = ["-boundary","-end_endcap","-max_layer_name","-min_layer_name","-path","-routing_corridor","-start_endcap","-width",]
let options["create_routing_guide"] = ["-access_preference","-boundary","-cell","-design_boundary_blockage","-forbidden_preferred_grid_extension","-horizontal_track_utilization","-layers","-max_patterns","-metal_cut_allowed","-name","-pin_access","-preferred_direction_only","-river_routing","-single_row_via_ladder_pattern_must_join_allowed","-standard_cell_region","-switch_preferred_direction","-switched_direction_only","-vertical_track_utilization",]
let options["create_routing_rule"] = ["-cuts","-default_reference_rule","-driver_taper_distance","-ignore_spacing_to_blockage","-ignore_spacing_to_pg","-ignore_spacing_to_shield","-mask_constraints","-multiplier_spacing","-multiplier_width","-rdl_taper_distances","-rdl_taper_widths","-reference_rule_name","-shield","-shield_spacings","-shield_widths","-snap_to_track","-spacing_length_thresholds","-spacing_weight_levels","-spacings","-taper_distance","-taper_over_pin_layers","-taper_under_pin_layers","-via_spacings","-vias","-widths",]
let options["create_rp_group"] = ["-columns","-design","-name","-rows",]
let options["create_sadp_track_rule"] = ["-name","-pattern","-sadp_spacing",]
let options["create_scenario"] = ["-corner","-init_from","-mode","-name",]
let options["create_shape"] = ["-boundary","-end_endcap","-end_extension","-fill_cell","-height","-justification","-layer","-net","-orientation","-origin","-path","-port","-shape_type","-shape_use","-start_endcap","-start_extension","-text","-width",]
let options["create_shaping_blockage"] = ["-boundary","-cell","-name","-purpose",]
let options["create_shields"] = ["-align_to_shape_end","-coaxial_above","-coaxial_above_skip_tracks","-coaxial_above_user_spacing","-coaxial_below","-coaxial_below_skip_tracks","-coaxial_below_user_spacing","-coaxial_skip_tracks_on_layers","-ignore_shielding_net_pins","-ignore_shielding_net_rails","-include_adjacent_layers","-nets","-pg_via_tie_effort_level","-preferred_direction_only","-shield_via_tie_effort_level","-shielding_mode","-with_ground",]
let options["create_site_array"] = ["-above","-aligned","-below","-bottom","-boundary","-core_offset","-default","-direction","-flip_alternate_row","-flip_first_row","-inner_margin","-name","-site","-top","-transparent","-voltage_area","-x_margin","-y_margin",]
let options["create_site_def"] = ["-height","-is_default","-library","-name","-symmetry","-tech","-type","-width",]
let options["create_site_row"] = ["-name","-orientation","-origin","-site","-site_count","-site_orientation","-x_margin",]
let options["create_stdcell_fillers"] = ["-bboxes","-continue_on_error","-ignore_hard_blockages","-lib_cells","-post_eco","-prefix","-rules","-smallest_cell_size","-utilization","-voltage_area",]
let options["create_supernet"] = ["-design","-name",]
let options["create_supply_net"] = ["-domain","-resolve","-reuse",]
let options["create_supply_port"] = ["-direction","-domain",]
let options["create_supply_set"] = ["-function","-update",]
let options["create_tap_cells"] = ["-at_distance_only","-distance","-insert_into_blocks","-lib_cell","-mirrored_row_lib_cell","-offset","-pattern","-prefix","-preserve_distance_continuity","-row_end_tap_bypass","-separator","-skip_fixed_cells","-voltage_area",]
let options["create_taps"] = ["-import","-layer","-name","-nocheck","-of_objects","-point","-snap_distance","-supply_net","-top_pg",]
let options["create_tech"] = ["-force","-library",]
let options["create_terminal"] = ["-direction","-eeq_class","-name","-object","-of_objects","-port",]
let options["create_topological_constraint"] = ["-cell","-end_layers","-end_object","-end_offset","-end_offset_range","-end_sides","-start_layers","-start_object","-start_offset","-start_offset_range","-start_sides",]
let options["create_topology_edge"] = ["-constraint_groups","-endpoint0","-endpoint1","-name","-net",]
let options["create_topology_node"] = ["-boundary","-centroid","-driver","-name","-net",]
let options["create_track"] = ["-bbox","-cell","-coord","-count","-dir","-end_grid_high_offset","-end_grid_high_steps","-end_grid_low_offset","-end_grid_low_steps","-layer","-mask_pattern","-reserved_for_width","-space","-width",]
let options["create_undo_marker"] = []
let options["create_utilization_configuration"] = ["-as_user_default","-capacity","-exclude","-force","-include","-scope",]
let options["create_via"] = ["-cut_mask_constraint","-cut_pattern","-lower_mask_constraint","-net","-orientation","-origin","-pitch","-port","-shape_use","-size","-upper_mask_constraint","-via_def",]
let options["create_via_def"] = ["-cut_layer","-cut_pattern","-cut_size","-design","-force","-is_default","-is_excluded_for_signal_route","-library","-lower_enclosure","-lower_mask_pattern","-mask_pattern","-min_columns","-min_cut_spacing","-min_rows","-redundant_via_insertion_only","-shapes","-source_type","-tech","-upper_enclosure","-upper_mask_pattern",]
let options["create_via_region"] = ["-boundary","-design","-force","-rotate","-terminal","-via_def",]
let options["create_via_rule"] = ["-cut_layer_names","-cut_names","-cut_rows","-cuts_per_row","-design","-library","-name","-tech",]
let options["create_virtual_connection"] = ["-name","-pins","-weight",]
let options["create_voltage_area"] = ["-cell","-cells","-ground","-guard_band","-is_fixed","-merge_regions","-name","-power","-power_domains","-region","-target_utilization",]
let options["create_voltage_area_rule"] = ["-allow_pass_through","-allow_physical_feedthrough","-default_rule","-name","-voltage_areas",]
let options["create_voltage_area_shape"] = ["-above","-below","-bottom","-cells","-exclusive","-guard_band","-merge_regions","-region","-target_utilization","-top","-voltage_area",]
let options["create_vtcell_fillers"] = ["-boundary","-clear_vt_information","-prefix","-region","-separator","-voltage_area",]
let options["create_wire_matching"] = ["-for","-force","-match_type","-relative","-tolerance",]
let options["current_block"] = ["-quiet",]
let options["current_corner"] = []
let options["current_design"] = ["-quiet",]
let options["current_instance"] = []
let options["current_lib"] = ["-quiet",]
let options["current_mode"] = []
let options["current_scenario"] = []
let options["cut_rows"] = ["-all","-within",]
let options["date"] = []
let options["define_antenna_accumulation_mode"] = ["-cut_to_metal","-metal_to_cut",]
let options["define_antenna_area_rule"] = ["-diode_distance","-max_area","-mode",]
let options["define_antenna_layer_ratio_scale"] = ["-accumulate_scale","-layer","-layer_scale",]
let options["define_antenna_layer_rule"] = ["-diode_ratio","-layer","-mode","-name","-nratio","-pratio","-ratio","-scale_factor",]
let options["define_antenna_rule"] = ["-area_threshold","-cut_nratio","-cut_pratio","-cut_ratio","-diode_mode","-metal_nratio","-metal_pratio","-metal_ratio","-mode","-name","-protected_cut_scale","-protected_metal_scale",]
let options["define_name_rules"] = ["-add_dummy_nets","-allowed","-case_insensitive","-check_bus_indexing","-check_internal_net_name","-collapse_name_space","-dont_change_bus_members","-dont_change_ports","-dummy_net_prefix","-equal_ports_nets","-first_restricted","-inout_ports_equal_nets","-last_restricted","-map","-max_length","-prefix","-remove_chars","-remove_irregular_port_bus","-remove_port_bus","-replacement_char","-reserved_words","-reset","-restricted","-special","-target_bus_naming_style","-type",]
let options["define_proc_attributes"] = ["-command_group","-define_arg_groups","-define_args","-dont_abbrev","-hidden","-hide_body","-info","-permanent","-return",]
let options["define_user_attribute"] = ["-classes","-name","-one_of","-persistent","-quiet","-range_max","-range_min","-type",]
let options["derive_cell_snap_data"] = ["-force",]
let options["derive_clock_balance_constraints"] = ["-slack_less_than",]
let options["derive_clock_balance_points"] = ["-clocks","-corners","-output","-reference_latency",]
let options["derive_clock_cell_references"] = ["-output",]
let options["derive_hier_antenna_property"] = ["-design_name",]
let options["derive_macro_relative_location"] = ["-anchor_corner","-anchor_object","-cells","-cluster_spacing","-hierarchical","-offset_type","-output_file","-use_bbox",]
let options["derive_mask_constraint"] = []
let options["derive_pg_mask_constraint"] = ["-derive_cut_mask","-nets","-overwrite","-verbose",]
let options["derive_placement_blockages"] = ["-force","-hierarchical",]
let options["derive_preferred_macro_locations"] = ["-file",]
let options["derive_route_connection"] = []
let options["diceTclLoadHelper"] = []
let options["disconnect_3d_bumps"] = ["-nets",]
let options["disconnect_net"] = ["-all","-design","-net",]
let options["distribute_objects"] = ["-anchor","-anchor_side","-group","-margin","-parent","-pitch","-side","-spacing","-to","-to_box",]
let options["echo"] = ["-n",]
let options["eco_netlist"] = ["-by_block","-by_verilog_file","-compare_module_subsets","-compare_pg","-compare_physical_only_cells","-compare_target_modules","-cross_physical_hierarchy","-extract_timing_eco_changes","-golden_lib","-working_block","-working_lib","-write_changes","-write_changes_per_module","-write_summary",]
let options["eco_update_supply_net"] = ["-cells",]
let options["edit_block"] = []
let options["edit_ems_rule"] = ["-message","-name","-parameters","-severity",]
let options["edit_module"] = []
let options["ensemble"] = []
let options["error_info"] = []
let options["estimate_timing"] = ["-force_user_corner","-host_options","-nets","-optimized_blocks","-pins",]
let options["eval_with_undo"] = ["-atomic","-disable",]
let options["exit"] = []
let options["expand_objects"] = ["-offset","-side",]
let options["expand_outline"] = ["-design","-force","-keep","-no_def","-strip",]
let options["explore_logic_hierarchy"] = ["-cell","-collapse","-create_module_boundary","-expand","-force","-name","-organize","-output","-place","-rectangular","-remove","-threshold","-use_existing_placement","-utilization","-virtual_group","-virtual_ungroup",]
let options["export_advanced_technology_rules"] = ["-exclude_lib_cells",]
let options["filter_collection"] = ["-nocase","-regexp",]
let options["find_objects"] = ["-direction","-exact","-leaf_only","-non_leaf","-object_type","-pattern","-transitive",]
let options["fix_placement_color_mask"] = []
let options["fix_signal_em"] = ["-nets",]
let options["flip_objects"] = ["-anchor","-flip","-x","-y",]
let options["foreach_in_collection"] = []
let options["generate_net_pattern"] = ["-apply","-output","-route_mode",]
let options["generate_sadp_tracks"] = ["-auto_fill","-color","-count","-create_pg_route","-exact","-layer","-pitch","-rule_name","-start","-stop",]
let options["get_abstract_type"] = []
let options["get_antenna_rule_names"] = ["-library","-mode",]
let options["get_app_option_value"] = ["-block","-details","-name","-system_default","-user_default",]
let options["get_app_options"] = ["-block","-global","-non_default","-quiet",]
let options["get_app_var"] = ["-default","-details","-list","-only_changed_vars",]
let options["get_attribute"] = ["-class","-name","-objects","-quiet","-value_list",]
let options["get_block_objects"] = ["-block","-filter","-quiet",]
let options["get_blocks"] = ["-all","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-explicit","-filter","-hierarchical","-implicit","-lib_cells","-nocase","-of_objects","-open","-quiet","-regexp",]
let options["get_bound_shapes"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_bounds"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_budgets"] = ["-all_pin_constraints","-all_pin_data","-all_pins","-all_segments","-blocks","-clocks","-fanin_cone","-fanin_segments","-fanout_cone","-fanout_segments","-filter","-input","-of_pin","-output","-path_types","-pin","-pin_constraints","-pin_data",]
let options["get_bundles"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_busplans"] = ["-filter","-of_object","-quiet",]
let options["get_cell"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-intersect","-nocase","-of_objects","-physical_context","-quiet","-regexp","-touching","-within",]
let options["get_cells"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-intersect","-nocase","-of_objects","-physical_context","-quiet","-regexp","-touching","-within",]
let options["get_cells_of_scan_chain"] = ["-chain",]
let options["get_clock_balance_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-of_objects","-quiet","-regexp",]
let options["get_clock_group_groups"] = []
let options["get_clock_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-of_objects","-quiet","-regexp",]
let options["get_clock_skew_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-of_objects","-quiet","-regexp",]
let options["get_clock_tree_pins"] = ["-assign_to_variable","-clocks","-corner","-expect","-expect_at_least","-filter","-from","-groups_from","-index_range","-metrics","-mode","-of_objects","-quiet","-scan_all_hierarchical_pins","-scenario","-sort_by","-through","-to","-total","-unique_cells","-unique_nets","-value_for_undefined_attributes","-verbose",]
let options["get_clocks"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-quiet","-regexp",]
let options["get_command_option_values"] = ["-command","-current","-default",]
let options["get_constraint_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp","-type",]
let options["get_core_area"] = ["-design",]
let options["get_corners"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_cputime"] = ["-all","-format","-verbose",]
let options["get_current_ems_database"] = []
let options["get_current_mismatch_config"] = []
let options["get_date"] = []
let options["get_defined_attributes"] = ["-application","-class","-details","-return_classes","-user",]
let options["get_defined_commands"] = ["-details","-groups",]
let options["get_density_rules"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp","-tech",]
let options["get_design_checks"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_design_rules"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp","-tech",]
let options["get_designs"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-quiet","-regexp",]
let options["get_domain_elements"] = []
let options["get_drc_error_data"] = ["-all","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_drc_error_types"] = ["-error_data","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_drc_errors"] = ["-boundary","-error_data","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_eco_bus_buffer_patterns"] = []
let options["get_edit_groups"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_edit_setting"] = ["-auto_display_hidden","-expand_hit_blockage","-expand_hit_constraint","-expand_hit_macro_cell","-hierarchical_routing","-honor_ndr","-ignore_locked","-keep_pin_on_edge","-pin_layer_policy","-select_center_line","-select_center_vertex","-select_edge","-select_partial_object","-select_vertex","-self_intersection","-specified_pin_layer","-update_color_mask","-update_floorplan",]
let options["get_edrc_setting"] = ["-check_drc","-dpt_odd_cycle","-dpt_precolor","-enclosed_via_spacing_rule","-end_of_line_spacing_rule","-filter_same_net_spacing","-general_via_spacing_rule","-honor_ndr","-max_error_limit","-max_processing_time","-max_shape_limit","-metal_span_spacing_rule","-metal_width_rule","-minimum_edge_rule","-minimum_length_and_area_rule","-rdl_acute_angle_rule","-rdl_right_angle_rule","-show_error_browser","-via_density_rule","-via_enclosure_rule",]
let options["get_ems_databases"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_ems_rules"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_estimated_wirelength"] = ["-nets",]
let options["get_exception_groups"] = ["-filter",]
let options["get_exceptions"] = ["-design","-expect","-expect_at_least","-fall_from","-fall_through","-fall_to","-filter","-from","-quiet","-rise_from","-rise_through","-rise_to","-through","-to",]
let options["get_fill_cells"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-quiet","-regexp",]
let options["get_flat_cells"] = ["-all","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-nocase","-of_objects","-quiet","-regexp",]
let options["get_flat_nets"] = ["-all","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-nocase","-of_objects","-quiet","-regexp",]
let options["get_flat_pins"] = ["-all","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-nocase","-of_objects","-quiet","-regexp",]
let options["get_generated_clock"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-quiet","-regexp",]
let options["get_generated_clocks"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-quiet","-regexp",]
let options["get_grids"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp","-type",]
let options["get_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_input_delays"] = ["-corners","-expect","-expect_at_least","-filter","-modes","-of_objects","-quiet","-scenarios",]
let options["get_io_guides"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_io_rings"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_keepout_margins"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp","-type",]
let options["get_latch_loop_groups"] = ["-loop_breakers_only","-of_objects",]
let options["get_layers"] = ["-all_purposes","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_lib"] = ["-all","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-explicit","-filter","-implicit","-nocase","-of_objects","-quiet","-regexp",]
let options["get_lib_cell"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hsc","-include_subcells","-nocase","-of_objects","-quiet","-regexp",]
let options["get_lib_cells"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hsc","-include_subcells","-nocase","-of_objects","-quiet","-regexp",]
let options["get_lib_pin"] = ["-all","-at","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hsc","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_lib_pins"] = ["-all","-at","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hsc","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_lib_timing_arcs"] = ["-expect","-expect_at_least","-filter","-from","-of_objects","-quiet","-to",]
let options["get_libs"] = ["-all","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-explicit","-filter","-implicit","-nocase","-of_objects","-quiet","-regexp",]
let options["get_license"] = ["-quantity",]
let options["get_licenses"] = ["-quantity",]
let options["get_matching_types"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_mem"] = []
let options["get_message_ids"] = ["-type",]
let options["get_message_info"] = ["-error_count","-id","-info_count","-limit","-occurrences","-suppressed","-warning_count",]
let options["get_mib_objects"] = ["-add","-quiet",]
let options["get_mismatch_objects"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mismatch_type","-nocase","-of_objects","-quiet","-regexp","-repair_status",]
let options["get_mismatch_types"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_modes"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_modules"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_multisource_clock_sink_groups"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_net"] = ["-boundary_type","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-include_shielded","-nocase","-of_objects","-physical_context","-quiet","-regexp","-segments","-shielded_only","-top_net_of_hierarchical_group",]
let options["get_net_buses"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-physical_context","-quiet","-regexp",]
let options["get_net_estimation_rules"] = ["-filter","-quiet",]
let options["get_nets"] = ["-boundary_type","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-include_shielded","-nocase","-of_objects","-physical_context","-quiet","-regexp","-segments","-shielded_only","-top_net_of_hierarchical_group",]
let options["get_object_occurrences"] = ["-quiet",]
let options["get_objects_by_location"] = ["-at","-classes","-design","-expect","-expect_at_least","-filter","-hierarchical","-include_fill_shapes","-intersect","-quiet","-touching","-within",]
let options["get_output_delays"] = ["-corners","-expect","-expect_at_least","-filter","-modes","-of_objects","-quiet","-scenarios",]
let options["get_overlap_blockages"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_parasitic_techs"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp",]
let options["get_path_group"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-quiet","-regexp",]
let options["get_path_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-mode","-nocase","-quiet","-regexp",]
let options["get_pg_regions"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_pin"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-intersect","-leaf","-nocase","-of_objects","-physical_context","-quiet","-regexp","-touching","-within",]
let options["get_pin_blockages"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_pin_guides"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_pins"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-intersect","-leaf","-nocase","-of_objects","-physical_context","-quiet","-regexp","-touching","-within",]
let options["get_placement_blockages"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-quiet","-regexp","-touching","-within",]
let options["get_port"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-intersect","-nocase","-of_objects","-physical_context","-quiet","-regexp","-touching","-within",]
let options["get_port_antenna_property"] = ["-layer","-port",]
let options["get_port_buses"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-physical_context","-quiet","-regexp",]
let options["get_ports"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-intersect","-nocase","-of_objects","-physical_context","-quiet","-regexp","-touching","-within",]
let options["get_power_clock_scaling"] = ["-scenarios",]
let options["get_power_derate"] = ["-internal","-leakage","-scenarios","-switching","-user",]
let options["get_power_domains"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_power_group"] = ["-default","-user",]
let options["get_power_group_objects"] = []
let options["get_power_strategies"] = ["-domain","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_power_switch_patterns"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_pr_rules"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp","-tech",]
let options["get_purposes"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_related_supply_nets"] = ["-expand","-expect","-expect_at_least","-filter","-ground","-in_block_upf","-quiet",]
let options["get_routes_between_objects"] = ["-quiet",]
let options["get_routing_blockages"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-include_lib_cell","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_routing_corridor_shapes"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_routing_corridors"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_routing_guides"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-quiet","-regexp","-touching","-within",]
let options["get_routing_rules"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_rp_blockages"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_rp_group_objects"] = ["-blockage","-cell","-column","-hierarchical","-row","-rp_group",]
let options["get_rp_groups"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp","-top",]
let options["get_scan_chain_count"] = []
let options["get_scenarios"] = ["-corners","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-modes","-nocase","-of_objects","-quiet","-regexp",]
let options["get_selection"] = ["-count","-create_slct_buses","-design","-fewer_than","-more_than","-name","-num","-slct_targets","-slct_targets_operation","-type","-type_list",]
let options["get_shapes"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-include_fill","-include_lib_cell","-include_shield","-intersect","-nocase","-of_objects","-quiet","-regexp","-shield_only","-touching","-within",]
let options["get_shaping_blockages"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_site_arrays"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_site_defs"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp","-tech",]
let options["get_site_rows"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_snap_setting"] = ["-class","-cursor_edge","-edge_radius","-enabled","-fix_orientation","-macro_by_color","-object_edge","-preferred_track","-user_grid",]
let options["get_supernets"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-hsc","-nocase","-of_objects","-quiet","-regexp",]
let options["get_supply_nets"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp","-segments","-top_net_of_hierarchical_group",]
let options["get_supply_ports"] = ["-exact","-exclude_power_switch","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_supply_sets"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_svf"] = []
let options["get_switching_activity"] = ["-corners","-fall","-modes","-path_sources","-related_clock","-rise","-scenarios","-state_condition",]
let options["get_techs"] = ["-all","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-of_objects","-quiet","-regexp",]
let options["get_terminals"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-include_lib_cell","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_timing_arcs"] = ["-design","-expect","-expect_at_least","-filter","-from","-of_objects","-quiet","-to",]
let options["get_timing_paths"] = ["-corners","-delay_type","-exception","-exclude","-fall_exclude","-fall_from","-fall_through","-fall_to","-from","-groups","-include_hierarchical_pins","-max_paths","-modes","-nworst","-path_type","-report_by","-rise_exclude","-rise_from","-rise_through","-rise_to","-scenarios","-slack_lesser_than","-sort_by","-start_end_pair","-through","-to",]
let options["get_topological_constraints"] = ["-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_topology_edges"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_topology_nodes"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-nocase","-of_objects","-quiet","-regexp",]
let options["get_tracks"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_undo_info"] = ["-all","-command","-current","-details","-name","-system","-user",]
let options["get_user_units"] = ["-input","-numeric","-output","-type",]
let options["get_utilization_configurations"] = ["-block","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp","-scope",]
let options["get_via_defs"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp","-tech",]
let options["get_via_regions"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_via_rules"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-library","-nocase","-of_objects","-quiet","-regexp","-tech",]
let options["get_vias"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-include_lib_cell","-include_shield","-intersect","-nocase","-of_objects","-quiet","-regexp","-shield_only","-touching","-within",]
let options["get_view_switch_list"] = ["-design","-explicit","-global","-library",]
let options["get_virtual_connections"] = ["-of_objects",]
let options["get_voltage_area_rules"] = ["-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-nocase","-quiet","-regexp",]
let options["get_voltage_area_shapes"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_voltage_areas"] = ["-at","-design","-exact","-expect","-expect_at_least","-expect_each_pattern_matches","-filter","-hierarchical","-intersect","-nocase","-of_objects","-quiet","-regexp","-touching","-within",]
let options["get_vsdc"] = []
let options["get_working_design_stack"] = ["-instance",]
let options["group_cells"] = ["-cell_name","-module_name","-phys_wrapper",]
let options["group_path"] = ["-comment","-critical_range","-default","-fall_from","-fall_through","-fall_to","-from","-name","-priority","-rise_from","-rise_through","-rise_to","-through","-to","-weight",]
let options["gui_add_missing_vias"] = ["-max_layer","-min_layer",]
let options["gui_bin"] = ["-attr","-bar_brush","-bin_range","-boundary","-clct","-cmd","-create_slct_buses","-exact_binning","-filter_cmd","-ignore_values","-lower_bound","-lower_bound_strict","-nice_level","-numBin","-num_bins","-overflow","-return_values","-slct_targets","-slct_targets_operation","-small_is_good","-underflow","-upper_bound","-upper_bound_strict","-value_list",]
let options["gui_change_highlight"] = ["-add","-all_colors","-collection","-color","-remove","-toggle",]
let options["gui_check_drc_errors"] = ["-filter_same_net_spacing","-honor_ndr","-layers","-limit_area","-max_error_limit","-max_processing_time","-max_shape_limit","-of_objects","-rules","-show",]
let options["gui_create_attrgroup"] = ["-attr_list","-class","-name",]
let options["gui_create_pref_category"] = ["-category",]
let options["gui_create_pref_key"] = ["-category","-description","-keep_value_if_exist","-key","-legal_value_list","-max","-min","-read_only","-save_on_exit","-string_to_int_map","-value","-value_type",]
let options["gui_create_task"] = ["-default","-help_string","-icon","-item_root","-menu_string","-name",]
let options["gui_create_task_item"] = ["-item_root","-name","-page","-search_terms","-task",]
let options["gui_create_tk_palette_type"] = ["-create_command","-dock_edge","-icon","-title","-type","-window_types",]
let options["gui_create_vm"] = ["-bot_exaggeration","-discrete","-float","-help_topic","-icon","-infotip","-mid_exaggeration","-name","-netfilter","-show_only_pins_of_nets","-title","-top_exaggeration","-update_cmd",]
let options["gui_create_vm_objects"] = []
let options["gui_create_vmbucket"] = ["-above","-at","-below","-collection","-color","-exaggeration","-infotip","-maxval","-minval","-name","-netfilter","-number","-pattern","-title","-visible","-vmname",]
let options["gui_delete_attrgroup"] = ["-all","-class","-name",]
let options["gui_edit_vmbucket_contents"] = ["-add","-collection","-name","-remove","-replace","-vmname",]
let options["gui_eval_command"] = ["-command","-echo","-history","-honor_preview","-preview",]
let options["gui_exist_pref_category"] = ["-category",]
let options["gui_exist_pref_key"] = ["-category","-key",]
let options["gui_get_bucket_option"] = ["-bucket","-default","-map","-option",]
let options["gui_get_bucket_option_list"] = ["-map",]
let options["gui_get_current_task"] = []
let options["gui_get_highlight"] = ["-all_colors","-color","-more_than","-return_select_bus",]
let options["gui_get_highlight_options"] = ["-all_colors","-auto_cycle_color","-current_color",]
let options["gui_get_layer_widths"] = ["-current","-default","-layer","-user",]
let options["gui_get_map_list"] = []
let options["gui_get_map_option"] = ["-default","-map","-option",]
let options["gui_get_map_option_list"] = ["-map",]
let options["gui_get_pref_keys"] = ["-category",]
let options["gui_get_pref_value"] = ["-category","-key",]
let options["gui_get_task_list"] = []
let options["gui_get_vm"] = ["-bot_exaggeration","-buckets","-discrete","-float","-help_topic","-icon_file","-infotip","-mid_exaggeration","-name","-netfilter","-show_only_pins_of_nets","-title","-top_exaggeration","-update_cmd",]
let options["gui_get_vmbucket"] = ["-collection","-color","-exaggeration","-infotip","-maxval","-minval","-name","-netfilter","-number","-objcount","-pattern","-title","-visible","-vmname",]
let options["gui_get_window_ids"] = ["-parent","-type",]
let options["gui_get_window_pref_categories"] = ["-window","-window_type",]
let options["gui_get_window_pref_keys"] = ["-category","-window","-window_type",]
let options["gui_get_window_pref_value"] = ["-category","-key","-window","-window_type",]
let options["gui_get_window_types"] = ["-type",]
let options["gui_list_attrgroups"] = ["-all","-attr_list","-class","-full","-name","-tcl",]
let options["gui_load_cell_density_mm"] = ["-area",]
let options["gui_load_path_analyzer_flylines"] = []
let options["gui_load_pin_density_mm"] = ["-area",]
let options["gui_rail_map_options"] = ["-backward_min_max","-backward_power_export","-backward_power_map","-build_scale","-build_threads","-dep_mode","-enable_report","-mode","-preview_depth","-preview_display_focus","-preview_display_full","-preview_focus","-preview_focus_area","-preview_focus_depth","-preview_full","-preview_limit","-preview_limit_3","-preview_limit_4","-preview_limit_5","-preview_limit_6","-preview_report_focus","-preview_report_full","-report_footer","-report_header","-report_image","-report_into_db","-report_legend","-report_map_file","-report_map_mark","-report_map_perf","-report_path","-report_path_current","-report_prefix","-report_result","-report_scale_focus","-report_scale_full","-report_summary","-report_verbose","-skip_floating","-skip_floating_export","-test_control","-test_control2","-test_control3",]
let options["gui_read_timing_paths"] = ["-blocks","-cells","-file","-report","-strict_validate",]
let options["gui_remove_pref_key"] = ["-category","-key",]
let options["gui_remove_vm"] = ["-name",]
let options["gui_remove_vmbucket"] = ["-all","-name","-vmname",]
let options["gui_report_task"] = ["-file","-item_root","-task",]
let options["gui_set_bucket_option"] = ["-bucket","-default","-map","-option","-value",]
let options["gui_set_current_task"] = ["-task",]
let options["gui_set_highlight_options"] = ["-auto_cycle_color","-current_color","-next_color",]
let options["gui_set_layer_widths"] = ["-clear","-layer","-values",]
let options["gui_set_map_option"] = ["-default","-map","-option","-value",]
let options["gui_set_pref_value"] = ["-category","-key","-value",]
let options["gui_set_task_list"] = ["-tasks",]
let options["gui_set_vm"] = ["-bot_exaggeration","-buckets","-float","-help_topic","-icon","-infotip","-mid_exaggeration","-name","-netfilter","-set_exaggerations","-show_only_pins_of_nets","-title","-top_exaggeration","-update_cmd",]
let options["gui_set_vmbucket"] = ["-above","-at","-below","-collection","-color","-exaggeration","-infotip","-maxval","-minval","-name","-netfilter","-number","-pattern","-title","-visible","-vmname",]
let options["gui_set_window_pref_key"] = ["-category","-key","-value","-value_type","-window","-window_type",]
let options["gui_show_map"] = ["-map","-show","-window",]
let options["gui_start"] = ["-file","-no_windows",]
let options["gui_stop"] = []
let options["gui_trim_dangling_wires"] = []
let options["gui_update_attrgroup"] = ["-add","-anchor","-attr","-attr_list","-class","-delete","-move","-name",]
let options["gui_update_pref_file"] = ["-file",]
let options["gui_update_vm"] = ["-name",]
let options["gui_update_vm_annotations"] = ["-add","-center","-clear","-color","-draw_net","-info_tip","-line_style","-pattern","-query_command","-query_text","-text","-type","-width",]
let options["gui_write_timing_paths"] = ["-comment","-file","-overwrite","-tag",]
let options["help"] = ["-groups","-verbose",]
let options["help_app_options"] = ["-category","-scope","-verbose",]
let options["help_attributes"] = ["-application","-user","-verbose",]
let options["history"] = ["-h","-r",]
let options["identify_channels"] = ["-cross_area","-cross_area_height","-cross_area_width","-cut_polyrect","-horizontal_threshold","-output_filename","-vertical_threshold",]
let options["identify_multibit"] = ["-apply","-cells","-exclude_instance","-exclude_library_cells","-input_map_file","-mv_cell","-no_dft_opt","-output_file","-register","-slack_threshold","-slack_threshold_file",]
let options["index_collection"] = []
let options["initialize_floorplan"] = ["-boundary","-coincident_boundary","-control_type","-core_offset","-core_utilization","-flip_first_row","-honor_pad_limit","-keep_boundary","-keep_detail_route","-keep_objects","-keep_pg_route","-keep_placement","-orientation","-origin_offset","-pin_snap","-row_core_ratio","-shape","-side_length","-side_ratio","-site_def","-use_site_row",]
let options["insert_buffer"] = ["-inverter_pair","-lib_cell","-new_cell_names","-new_net_names","-no_of_cells",]
let options["insert_via_ladders"] = ["-allow_drcs","-allow_patching","-clean","-connect_within_metal","-ignore_rippable_shapes","-ignore_routing_shape_drcs","-ndr_on_top_layer_only","-nets","-pattern_must_join_over_pin_layer","-relax_line_end_via_enclosure_rule","-relax_pin_layer_metal_spacing_rules","-remove_routing_shapes_below_net_via_ladder_top_layer","-shift_vias_on_transition_layers","-strictly_honor_cut_table","-user_debug","-verbose",]
let options["legalize_placement"] = ["-boundary","-cells","-incremental","-moveable_distance","-post_route","-priority",]
let options["legalize_rp_groups"] = ["-legalize_over_rp",]
let options["link"] = ["-force","-incremental","-rebind","-verbose",]
let options["link_block"] = ["-force","-incremental","-rebind","-verbose",]
let options["link_design"] = ["-force","-incremental","-rebind","-verbose",]
let options["list_attributes"] = ["-application","-class","-nosplit",]
let options["list_blocks"] = ["-lib_cells","-ref_libs",]
let options["list_commands"] = ["-options","-status",]
let options["list_constraints"] = ["-nosplit","-significant_digits",]
let options["list_licenses"] = []
let options["load_block_constraints"] = ["-all_blocks","-blocks","-host_options","-type","-work_dir",]
let options["load_busplans"] = ["-buses","-only_create","-replace_existing","-verbose","-xml_file",]
let options["load_constraints"] = ["-auto_clock","-force","-promote",]
let options["load_metal_pattern_density"] = []
let options["load_upf"] = ["-noecho","-scope","-strict_check","-supplemental",]
let options["magnet_placement"] = ["-avoid_soft_blockage","-cells","-exclude_buffers","-get_collection","-hierarchy_mode","-logical_levels","-mark_fixed","-mark_legalize_only","-move_fixed","-move_legalize_only","-multiple_long_port_mode","-only_report_magnet_cells","-stop_by_sequential_cells","-stop_on_sequential_cells","-stop_points",]
let options["man"] = ["-html",]
let options["map_freeze_silicon"] = ["-eco_cell","-filler_map_strategy","-lib_cells_for_filler_recovery","-map_file","-spare_cell",]
let options["map_isolation_cell"] = ["-domain","-lib_cells",]
let options["map_level_shifter_cell"] = ["-domain","-lib_cells",]
let options["map_power_switch"] = ["-domain","-lib_cells",]
let options["map_retention_cell"] = ["-domain","-elements","-lib_cell_type","-lib_cells","-lib_model_name",]
let options["mark_clock_trees"] = ["-clear","-clock_cell_spacing","-clocks","-dont_touch","-fix_sinks","-freeze_routing","-routing_rules","-synthesized",]
let options["mem"] = []
let options["merge_abstract"] = ["-all_blocks","-blocks","-force","-host_options",]
let options["merge_clock_gates"] = ["-clocks",]
let options["merge_objects"] = []
let options["merge_stream"] = ["-cell_log_file","-compress_gds","-format","-merge_cell_shapes","-merge_conflict_suffix","-merge_files","-oasis_compression_level","-rename_cell","-rename_conflicting_cell","-top_cell","-units","-verbose",]
let options["modify_busplan"] = ["-add_guide","-add_register","-after","-balance_registers","-before","-change_rule","-load_launch_capture_budget","-location","-move_element","-name","-reconnect_elements","-remove_elements","-rename",]
let options["modify_rp_groups"] = ["-add_columns","-add_rows","-flip_column","-flip_row","-remove_columns","-remove_rows","-swap_columns","-swap_rows",]
let options["move_block"] = ["-force","-from_block","-to_block",]
let options["move_block_origin"] = ["-design","-to",]
let options["move_lib"] = ["-force","-from_lib","-to_lib",]
let options["move_objects"] = ["-delta","-from","-group","-rotate_by","-to","-x","-y",]
let options["open_attachment"] = ["-mode","-of_object",]
let options["open_block"] = ["-check","-edit","-read","-ref_libs_for_edit",]
let options["open_drc_error_data"] = ["-checkonly","-file_name","-readonly","-readwrite",]
let options["open_ems_database"] = []
let options["open_lib"] = ["-edit","-read","-ref_libs_for_edit",]
let options["optimize_dft"] = ["-clock_aware",]
let options["optimize_rdl_routes"] = ["-layer","-nets","-nets_in_file","-objects","-reserve_power_resources",]
let options["optimize_routability"] = ["-check_drc_rules","-drc_rules","-flip","-keepout_width","-layer_rules","-remove_keepouts","-route",]
let options["optimize_routes"] = ["-max_detail_route_iterations","-nets","-reroute_all_shapes_in_nets",]
let options["option"] = []
let options["parallel_execute"] = ["-commands_only","-list_allowed_commands","-max_cores",]
let options["parse_proc_arguments"] = ["-args",]
let options["part"] = []
let options["place_eco_cells"] = ["-cells","-channel_aware","-displacement_threshold","-eco_changed_cells","-fixed_connection_net_weight","-honor_user_net_weight","-ignore_pin_connection","-legalize_mode","-legalize_only","-max_displacement_threshold","-max_fanout","-no_legalize","-remove_filler_references","-unplaced_cells","-use_virtual_connection",]
let options["place_freeze_silicon"] = ["-cells","-lib_cells_for_filler_recovery","-map_spare_cells_only","-min_filler_distance","-no_spare_cell_swapping","-write_map_file",]
let options["place_io"] = ["-bump_assignment_only","-include_unassigned_pads","-incremental","-io_guide","-match_terminals_to_bumps","-matching_types","-pad_assignment_file","-rule",]
let options["place_opt"] = ["-from","-list_only","-to",]
let options["place_pins"] = ["-cells","-exclude_nets","-nets","-nets_to_exclude_from_routing","-pins","-ports","-self","-use_existing_routing",]
let options["pop_up_objects"] = ["-blocks","-cells",]
let options["print_suppressed_messages"] = []
let options["printvar"] = ["-application","-user_defined",]
let options["promote_clock_data"] = ["-auto_clock","-balance_points","-cells","-mesh_annotations",]
let options["promote_constraints"] = ["-auto_clock","-cts","-force",]
let options["propagate_3d_connections"] = ["-check_only","-nets",]
let options["propagate_3d_matching_types"] = ["-check_only","-force","-from","-matching_types","-to",]
let options["propagate_pin_mask_constraint"] = []
let options["propagate_pin_mask_to_via_metal"] = ["-block",]
let options["propagate_switching_activity"] = ["-corners","-modes","-scenarios",]
let options["push_down_clock_trunks"] = ["-clock",]
let options["push_down_objects"] = ["-cells",]
let options["push_rdl_routes"] = ["-bounding_box","-direction","-layer","-mode","-nets","-nets_in_file","-objects","-sweep_range",]
let options["pwd"] = []
let options["query_objects"] = ["-class","-truncate","-verbose",]
let options["query_qor_snapshot"] = ["-and","-columns","-directory","-display","-filters","-group_by","-name","-output_file","-sort_by","-type",]
let options["quit"] = []
let options["read_aif"] = ["-ignore_assign_nets","-pad_to_ref_list","-use_port_name",]
let options["read_cell_expansion"] = ["-input","-scale_factor",]
let options["read_def"] = ["-add_def_only_objects","-convert_sites","-design","-no_incremental","-syntax_only","-traverse_physical_hierarchy",]
let options["read_drc_error_file"] = ["-drc_type","-error_data","-file",]
let options["read_lib_package"] = ["-destination","-overwrite",]
let options["read_name_map"] = []
let options["read_net_estimation_rules"] = ["-filename",]
let options["read_ocvm"] = ["-corners",]
let options["read_parasitic_tech"] = ["-layermap","-name","-tlup",]
let options["read_parasitics"] = ["-block","-corner_spef","-validate",]
let options["read_pin_constraints"] = ["-file_name",]
let options["read_saif"] = ["-corners","-exclude_sdpd","-modes","-nocase","-normalize","-path","-scenarios","-strip_path",]
let options["read_sdc"] = ["-echo","-syntax_only","-version",]
let options["read_signal_em_constraints"] = ["-encrypted","-format",]
let options["read_tech_file"] = ["-convert_sites",]
let options["read_tech_lef"] = ["-design","-merge_action","-syntax_only",]
let options["read_top_level_netlist"] = ["-connections","-design_name","-format","-ignore_blocks","-map_file","-output",]
let options["read_verilog"] = ["-design","-library","-top",]
let options["read_verilog_outline"] = ["-allocation","-buffer_cells","-dense_modules","-depth","-design","-glue_cell_count","-keep_port_depth","-large_threshold","-leaf_cells","-library","-macro_cells","-partition","-port_modules","-sparse_modules","-target_block_size","-target_cell_count","-top",]
let options["read_virtual_pad_file"] = []
let options["rebind_block"] = ["-verbose",]
let options["record_layout_editing"] = ["-output","-start","-stop",]
let options["record_signoff_eco_changes"] = ["-compress","-def","-init","-input","-start","-stop",]
let options["recover_rp_placement"] = ["-all","-blockage",]
let options["recycle_programmable_spare_cells"] = ["-cells","-lib_cells_for_filler_recovery",]
let options["redirect"] = ["-append","-channel","-compress","-file","-tee","-variable",]
let options["redo"] = ["-all","-check_only","-levels","-marker","-silent",]
let options["refine_opt"] = ["-end_points","-from","-list_only","-nets","-path_groups","-to",]
let options["refine_placement"] = ["-congestion_effort","-coordinates","-effort","-perturbation_level",]
let options["refresh_performance_via_ladder_constraints"] = []
let options["refresh_via_ladders"] = ["-nets",]
let options["remove_abstract"] = []
let options["remove_annotated_check"] = ["-all","-clock","-corners","-fall","-from","-hold","-modes","-nochange_high","-nochange_low","-period","-recovery","-removal","-rise","-scenarios","-setup","-to","-width",]
let options["remove_annotated_delay"] = ["-all","-corners","-from","-modes","-scenarios","-to",]
let options["remove_annotated_power"] = ["-all","-scenarios",]
let options["remove_annotated_transition"] = ["-all","-corners","-modes","-scenarios",]
let options["remove_antenna_rules"] = ["-library","-name",]
let options["remove_attachments"] = ["-of_object",]
let options["remove_attributes"] = ["-name","-objects","-quiet",]
let options["remove_blackbox_timing"] = []
let options["remove_block_pin_constraints"] = ["-cells","-pin_spacing_control","-self",]
let options["remove_blocks"] = ["-force",]
let options["remove_bound_shapes"] = ["-all","-force","-verbose",]
let options["remove_boundary_cell_rules"] = ["-all","-at_va_boundary","-bottom_boundary_cells","-bottom_left_inside_corner_cells","-bottom_left_outside_corner_cell","-bottom_right_inside_corner_cells","-bottom_right_outside_corner_cell","-bottom_tap_cell","-do_not_swap_top_and_bottom_inside_corner_cell","-insert_into_blocks","-left_boundary_cell","-min_horizontal_jog","-min_row_width","-mirror_left_boundary_cell","-mirror_left_inside_corner_cell","-mirror_left_outside_corner_cell","-mirror_right_boundary_cell","-mirror_right_inside_corner_cell","-mirror_right_outside_corner_cell","-no_1x","-prefix","-right_boundary_cell","-separator","-tap_distance","-top_boundary_cells","-top_left_inside_corner_cells","-top_left_outside_corner_cell","-top_right_inside_corner_cells","-top_right_outside_corner_cell","-top_tap_cell",]
let options["remove_bounds"] = ["-all","-force","-verbose",]
let options["remove_buffer"] = ["-from","-net",]
let options["remove_buffer_trees"] = ["-all","-from","-hfs_fanout_threshold","-no_clustering","-source_of","-verbose",]
let options["remove_buffers"] = ["-from","-net",]
let options["remove_bundle_pin_constraints"] = ["-bundles","-cells","-self",]
let options["remove_bundles"] = []
let options["remove_busplans"] = ["-from",]
let options["remove_case_analysis"] = []
let options["remove_cell"] = ["-all","-design","-force",]
let options["remove_cells"] = ["-all","-design","-force",]
let options["remove_clock"] = ["-all",]
let options["remove_clock_balance_groups"] = ["-all",]
let options["remove_clock_balance_points"] = ["-balance_points","-clock","-corners",]
let options["remove_clock_cell_spacings"] = ["-clocks","-lib_cells",]
let options["remove_clock_drivers"] = ["-prefix",]
let options["remove_clock_gating_check"] = ["-fall","-high","-hold","-low","-rise","-setup",]
let options["remove_clock_groups"] = ["-all","-asynchronous","-exclusive","-logically_exclusive","-name","-physically_exclusive",]
let options["remove_clock_latency"] = ["-clock","-corners","-modes","-scenarios","-source",]
let options["remove_clock_routing_rules"] = ["-clocks","-default_rule","-net_type","-nets","-rule",]
let options["remove_clock_sense"] = ["-all","-clocks",]
let options["remove_clock_skew_groups"] = []
let options["remove_clock_transition"] = ["-corners","-modes","-scenarios",]
let options["remove_clock_tree_options"] = ["-all","-clocks","-copy_exceptions_across_modes","-corners","-target_latency","-target_skew",]
let options["remove_clock_tree_reference_subset"] = ["-clocks",]
let options["remove_clock_trees"] = ["-clock_repeaters_only","-clocks","-keep_ideal_clock_attributes","-keep_struct",]
let options["remove_clock_trunk_endpoints"] = ["-clock","-corners",]
let options["remove_clock_uncertainty"] = ["-corners","-fall","-fall_from","-fall_to","-from","-hold","-modes","-rise","-rise_from","-rise_to","-scenarios","-setup","-to",]
let options["remove_clocks"] = ["-all",]
let options["remove_colors"] = []
let options["remove_constraint_groups"] = ["-all",]
let options["remove_corners"] = ["-all",]
let options["remove_custom_shields"] = ["-keep_session","-nets",]
let options["remove_data_check"] = ["-all","-clock","-corners","-fall_from","-fall_to","-from","-hold","-modes","-rise_from","-rise_to","-scenarios","-setup","-to",]
let options["remove_density_rules"] = ["-all","-library","-tech",]
let options["remove_dff_trace_filters"] = ["-all","-blocks","-patterns","-type",]
let options["remove_disable_clock_gating_check"] = []
let options["remove_disable_timing"] = ["-from","-loop_break","-to",]
let options["remove_drc_error_data"] = ["-force",]
let options["remove_drc_error_types"] = ["-error_data",]
let options["remove_drc_errors"] = ["-error_data",]
let options["remove_drive_resistance"] = ["-corners","-modes","-scenarios",]
let options["remove_driving_cell"] = ["-clock","-clock_fall","-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["remove_eco_bus_buffer_patterns"] = ["-all","-verbose",]
let options["remove_eco_repeater"] = ["-keep_net_name",]
let options["remove_edit_groups"] = ["-all","-force","-verbose",]
let options["remove_ems_rules"] = ["-all",]
let options["remove_feedthroughs"] = ["-cells","-include_original_feedthroughs","-nets",]
let options["remove_fill_cells"] = ["-all",]
let options["remove_floorplan_rules"] = ["-all","-lib_cells","-object_types",]
let options["remove_from_bound"] = []
let options["remove_from_bundle"] = ["-all","-bundle",]
let options["remove_from_collection"] = ["-intersect",]
let options["remove_from_edit_group"] = []
let options["remove_from_group"] = []
let options["remove_from_io_guide"] = []
let options["remove_from_io_ring"] = []
let options["remove_from_matching_type"] = ["-auto_fix",]
let options["remove_from_multisource_clock_sink_group"] = ["-name","-sinks",]
let options["remove_from_net"] = ["-force",]
let options["remove_from_net_bus"] = []
let options["remove_from_pin_blockage"] = []
let options["remove_from_pin_guide"] = []
let options["remove_from_port_bus"] = []
let options["remove_from_routing_corridor"] = []
let options["remove_from_rp_group"] = ["-blockage","-cells","-rp_group",]
let options["remove_generated_clock"] = ["-all",]
let options["remove_generated_clocks"] = ["-all",]
let options["remove_grids"] = ["-all",]
let options["remove_groups"] = ["-verbose",]
let options["remove_host_options"] = ["-all","-name","-target",]
let options["remove_ideal_latency"] = ["-all","-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["remove_ideal_network"] = ["-all",]
let options["remove_ideal_transition"] = ["-all","-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["remove_ignored_layers"] = ["-all","-max_routing_layer","-min_routing_layer","-rc_congestion_ignored_layers",]
let options["remove_individual_pin_constraints"] = ["-nets","-pins","-ports",]
let options["remove_input_delay"] = ["-clock","-clock_fall","-corners","-fall","-level_sensitive","-max","-min","-modes","-rise","-scenarios",]
let options["remove_io_guides"] = ["-all","-force","-verbose",]
let options["remove_io_rings"] = ["-all","-force","-verbose",]
let options["remove_keepout_margins"] = []
let options["remove_layer_map_file"] = ["-format","-library",]
let options["remove_license"] = ["-keep",]
let options["remove_licenses"] = ["-keep",]
let options["remove_macro_constraints"] = ["-align_pins_to_tracks","-alignment_grid","-alignment_orientation_set","-alignment_point","-allowed_orientations","-preferred_location",]
let options["remove_macro_relative_location"] = ["-hierarchical",]
let options["remove_matching_types"] = ["-all","-verbose",]
let options["remove_max_capacitance"] = ["-corners","-modes","-scenarios",]
let options["remove_max_fanout"] = []
let options["remove_max_lvth_percentages"] = []
let options["remove_max_time_borrow"] = ["-corners","-modes","-scenarios",]
let options["remove_max_transition"] = ["-corners","-modes","-scenarios",]
let options["remove_min_capacitance"] = ["-corners","-modes","-scenarios",]
let options["remove_min_pulse_width"] = ["-corners","-high","-low","-modes","-scenarios",]
let options["remove_modes"] = ["-all",]
let options["remove_modules"] = ["-design",]
let options["remove_multisource_clock_sink_groups"] = []
let options["remove_multisource_clock_subtree_constraints"] = ["-cells","-clocks","-ignore_for_icg_reordering","-names","-pins","-target_level",]
let options["remove_multisource_clock_subtree_options"] = ["-clocks","-corners","-dont_merge_cells","-driver_objects","-max_total_wire_delay","-names","-target_level",]
let options["remove_multisource_clock_tap_options"] = ["-clocks","-dont_merge_cells","-names",]
let options["remove_multisource_global_clock_trees"] = ["-nets","-prefix",]
let options["remove_net"] = ["-all","-design","-force","-remove_shapes",]
let options["remove_net_buses"] = ["-all","-block","-cell","-design","-force",]
let options["remove_net_estimation_rules"] = []
let options["remove_net_weight_effort"] = ["-nets",]
let options["remove_nets"] = ["-all","-design","-force","-remove_shapes",]
let options["remove_objects"] = ["-force",]
let options["remove_ocvm"] = ["-coefficient","-corners","-derate",]
let options["remove_output_delay"] = ["-clock","-clock_fall","-corners","-fall","-level_sensitive","-max","-min","-modes","-rise","-scenarios",]
let options["remove_path_group"] = ["-all",]
let options["remove_path_groups"] = ["-all",]
let options["remove_pg_mask_constraints"] = ["-all",]
let options["remove_pg_patterns"] = ["-all",]
let options["remove_pg_regions"] = ["-all","-force",]
let options["remove_pg_strategies"] = ["-all",]
let options["remove_pg_strategy_via_rules"] = ["-all",]
let options["remove_pg_via_master_rules"] = ["-all",]
let options["remove_physical_objects"] = ["-quiet","-remove_disconnected",]
let options["remove_pin_blockages"] = ["-all","-force","-verbose",]
let options["remove_pin_guides"] = ["-all","-force","-verbose",]
let options["remove_pins"] = ["-design","-force",]
let options["remove_pins_from_virtual_connection"] = ["-object","-pins",]
let options["remove_placement_blockages"] = ["-all","-force","-verbose",]
let options["remove_placement_spacing_rules"] = ["-all","-label","-rule",]
let options["remove_pop_up_object_options"] = ["-object_type",]
let options["remove_port_buses"] = ["-all","-block","-cell","-design","-force",]
let options["remove_ports"] = ["-design","-force","-remove_shapes",]
let options["remove_post_route_filler"] = ["-hierarchical","-skip_filler_type_check",]
let options["remove_power_io_constraints"] = ["-io_guide_list",]
let options["remove_pr_rules"] = ["-all",]
let options["remove_programmable_spare_cell_mapping_rule"] = ["-all","-psc_type_id",]
let options["remove_propagated_clock"] = []
let options["remove_propagated_clocks"] = []
let options["remove_push_down_object_options"] = ["-object_type",]
let options["remove_qor_snapshot"] = ["-all","-name",]
let options["remove_rail_integrity_strategy"] = ["-all",]
let options["remove_redundant_shapes"] = ["-initial_drc_from_input","-layers","-nets","-remove_dangling_shapes","-remove_floating_shapes","-remove_loop_shapes","-report_changed_nets","-route_types",]
let options["remove_route_aware_estimation"] = []
let options["remove_routes"] = ["-area_fill","-core_wire","-detail_route","-follow_pin","-global_route","-keep_frozen_nets","-keep_pg_pins_at_boundary","-lib_cell_pin_connect","-macro_pin_connect","-net_types","-nets","-opc","-rdl","-ring","-shield_route","-stripe","-user_route","-zero_skew",]
let options["remove_routing_blockages"] = ["-all","-force","-verbose",]
let options["remove_routing_corridor_shapes"] = ["-all","-force","-verbose",]
let options["remove_routing_corridors"] = ["-all","-force","-verbose",]
let options["remove_routing_guides"] = ["-all","-force","-verbose",]
let options["remove_routing_rules"] = ["-all","-verbose",]
let options["remove_rp_group_options"] = ["-allow_non_rp_cells","-allow_non_rp_cells_on_blockages","-anchor_corner","-group_orientation","-rp_only_keepout_margin",]
let options["remove_rp_groups"] = ["-all","-hierarchical",]
let options["remove_sadp_track_rule"] = ["-all",]
let options["remove_scan_def"] = []
let options["remove_scenarios"] = ["-all",]
let options["remove_sdc"] = ["-corners","-design","-exclude","-include","-modes","-scenarios",]
let options["remove_sense"] = ["-all","-clocks","-type",]
let options["remove_shapes"] = ["-force","-verbose",]
let options["remove_shaping_blockages"] = ["-all","-force","-verbose",]
let options["remove_shield_association"] = ["-nets","-objects",]
let options["remove_si_delay_analysis"] = ["-aggressors","-ignore_arrival","-victims",]
let options["remove_signal_io_constraints"] = ["-io_guide_list",]
let options["remove_site_arrays"] = ["-all","-force","-verbose",]
let options["remove_site_defs"] = ["-all","-library","-tech","-verbose",]
let options["remove_site_rows"] = ["-all","-force","-verbose",]
let options["remove_stdcell_fillers_with_violation"] = ["-boundary","-check_between_fixed_objects","-check_only","-name","-post_eco",]
let options["remove_supernet_exceptions"] = ["-all","-cells","-pins",]
let options["remove_supernets"] = ["-design",]
let options["remove_taps"] = []
let options["remove_target_library_subset"] = ["-objects","-top",]
let options["remove_tech"] = []
let options["remove_terminals"] = ["-force","-verbose",]
let options["remove_tie_cells"] = ["-objects",]
let options["remove_timing_paths_disabled_blocks"] = []
let options["remove_topological_constraints"] = ["-all",]
let options["remove_topology_edges"] = ["-all","-verbose",]
let options["remove_topology_nodes"] = ["-all","-verbose",]
let options["remove_track_constraint"] = ["-all","-block","-layer","-mask","-track_direction",]
let options["remove_tracks"] = ["-all","-dir","-force","-layer","-verbose",]
let options["remove_utilization_configurations"] = ["-all","-scope",]
let options["remove_via_defs"] = ["-design","-library","-tech","-verbose",]
let options["remove_via_ladder_constraints"] = ["-all","-pins",]
let options["remove_via_ladder_rules"] = []
let options["remove_via_ladders"] = ["-nets",]
let options["remove_via_mappings"] = ["-all","-from","-to",]
let options["remove_via_regions"] = ["-design","-verbose",]
let options["remove_via_rules"] = ["-all","-design","-library","-tech",]
let options["remove_vias"] = ["-force","-verbose",]
let options["remove_virtual_connections"] = ["-all",]
let options["remove_virtual_pads"] = ["-all","-coordinate","-layer","-net",]
let options["remove_voltage_area_rules"] = ["-all","-verbose",]
let options["remove_voltage_area_shapes"] = ["-all","-force","-verbose",]
let options["remove_voltage_areas"] = ["-all","-force","-verbose",]
let options["rename"] = []
let options["rename_block"] = ["-force","-from_block","-hierarchical","-to_block","-verbose",]
let options["reopen_block"] = ["-edit","-force","-new","-read",]
let options["replace_fillers_by_rules"] = ["-adjacent_non_od_cells","-both_violation_tap","-constraint_fillers","-direct_replace","-eco_attribute","-eco_target","-exception_cells","-fillers_to_replace","-illegal_abutment","-layer","-left_end","-left_violation_tap","-max_constraint_length","-non_constraint_fillers","-non_constraint_left_fillers","-non_constraint_right_fillers","-patching_fillers","-prefix","-random_replace","-refill_table","-replace_abutment","-replacement_rule","-right_end","-right_violation_tap","-tap_cells","-tap_distance_range","-target_fillers",]
let options["report_3d_chip_placement"] = ["-all","-chips",]
let options["report_abstracts"] = []
let options["report_activity"] = ["-corners","-driver","-modes","-print_objects","-rtl","-scenarios","-show_zeros","-verbose",]
let options["report_annotated_check"] = ["-nosplit",]
let options["report_annotated_delay"] = ["-cell","-min","-net","-nosplit","-significant_digits","-summary",]
let options["report_annotated_power"] = ["-list_annotated","-scenarios","-significant_digits","-supply_net",]
let options["report_annotated_transition"] = ["-nosplit","-significant_digits",]
let options["report_antenna_rules"] = ["-library","-mode",]
let options["report_app_options"] = ["-as_list","-block","-global","-non_default",]
let options["report_app_var"] = ["-only_changed_vars","-verbose",]
let options["report_attachments"] = ["-of_object",]
let options["report_attribute"] = ["-application","-class","-compact","-nosplit",]
let options["report_attributes"] = ["-application","-class","-compact","-nosplit",]
let options["report_block_pin_constraints"] = ["-cells","-self",]
let options["report_block_shaping"] = ["-cells","-channel","-chimney_area","-core_area_violations","-detour_estimate","-error_view","-flyline_crossing","-hierarchical","-orientation_violations","-overlaps","-unaligned_pins_estimate","-utilization_from_target","-verbose",]
let options["report_block_to_top_map"] = ["-blocks","-path","-warnings","-waveform",]
let options["report_boundary_cell_rules"] = []
let options["report_bounds"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_budget"] = ["-blocks","-busplans","-fanin_segments","-fanout_segments","-hold_through","-html","-html_dir","-input","-latency","-output","-pins","-through","-warning_pins",]
let options["report_buffer_trees"] = ["-connections","-depth","-from","-hierarchy","-physical",]
let options["report_bundle_pin_constraints"] = ["-bundles","-cells","-self",]
let options["report_bundles"] = []
let options["report_busplan_constraints"] = []
let options["report_busplans"] = ["-location","-start_end_cells","-xml_file",]
let options["report_case_analysis"] = ["-all","-mode","-nosplit",]
let options["report_cell"] = ["-connections","-nosplit","-power","-pvt","-significant_digits","-verbose",]
let options["report_cell_em"] = ["-cells","-nosplit","-pins","-significant_digits",]
let options["report_cell_modes"] = ["-missing","-nosplit",]
let options["report_cells"] = ["-connections","-nosplit","-power","-pvt","-significant_digits","-verbose",]
let options["report_check_design_strategy"] = ["-checks",]
let options["report_clock"] = ["-attributes","-groups","-modes","-nosplit","-significant_digits","-skew",]
let options["report_clock_balance_groups"] = []
let options["report_clock_balance_points"] = ["-balance_points","-clock","-nosplit","-significant_digits",]
let options["report_clock_cell_spacings"] = ["-clocks",]
let options["report_clock_gating_check"] = ["-nosplit","-significant_digits",]
let options["report_clock_gating_checks"] = ["-nosplit","-significant_digits",]
let options["report_clock_power"] = ["-clocks","-corners","-modes","-nosplit","-scenarios","-significant_digits","-type",]
let options["report_clock_qor"] = ["-all","-clocks","-corners","-from","-histogram_bins","-histogram_max","-histogram_min","-histogram_type","-largest","-modes","-nosplit","-per_clock_root","-robustness_corner","-scenarios","-show_paths","-show_verbose_paths","-significant_digits","-skew_group","-smallest","-through","-to","-trace_beyond_exception","-type",]
let options["report_clock_routing_rules"] = []
let options["report_clock_settings"] = ["-clocks","-nosplit","-significant_digits","-type",]
let options["report_clock_skew_groups"] = ["-nosplit",]
let options["report_clock_timing"] = ["-capture","-clock","-clock_crossing","-clock_synthesis_view","-corners","-derate","-fall","-from","-from_clock","-greater_than","-hold","-include_uncertainty_in_skew","-launch","-lesser_than","-modes","-nets","-nosplit","-nworst","-physical","-rise","-scenarios","-setup","-show_clocks","-significant_digits","-slack_lesser_than","-through","-to","-to_clock","-type","-variation","-verbose",]
let options["report_clock_tree_options"] = ["-nosplit",]
let options["report_clock_tree_reference_subset"] = ["-clocks",]
let options["report_clock_trunk_endpoints"] = ["-clock","-corners","-nosplit","-script","-significant_digits",]
let options["report_clock_trunk_qor"] = ["-clock","-endpoint_limit","-from_block","-nosplit","-significant_digits","-sort_by","-to_block","-violating_only",]
let options["report_clocks"] = ["-attributes","-groups","-modes","-nosplit","-significant_digits","-skew",]
let options["report_congestion"] = ["-boundary","-include_soft_congestion_map","-layers","-mode","-nosplit","-overflow_threshold","-rerun_global_router","-significant_digits",]
let options["report_constraint"] = ["-all_violators","-corners","-max_capacitance","-max_delay","-max_transition","-min_capacitance","-min_delay","-min_pulse_width","-modes","-nosplit","-scenarios","-significant_digits","-verbose",]
let options["report_constraint_groups"] = ["-count","-nosplit","-type",]
let options["report_constraint_mapping_file"] = ["-constraint_type","-design",]
let options["report_constraints"] = ["-all_violators","-corners","-max_capacitance","-max_delay","-max_transition","-min_capacitance","-min_delay","-min_pulse_width","-modes","-nosplit","-scenarios","-significant_digits","-verbose",]
let options["report_corners"] = ["-significant_digits","-verbose",]
let options["report_crpr"] = ["-corners","-from","-from_clock","-hold","-modes","-scenarios","-setup","-significant_digits","-to","-to_clock",]
let options["report_delay_calculation"] = ["-clock","-corner","-crosstalk","-from","-load","-min","-mode","-process_label","-process_number","-pvt","-scenario","-significant_digits","-source_fall","-source_rise","-temperature","-to","-transition","-voltage",]
let options["report_density_gradient_options"] = []
let options["report_design"] = ["-all","-floorplan","-hierarchical","-library","-netlist","-nosplit","-routing",]
let options["report_design_mismatch"] = ["-mismatch_type","-nosplit","-repair_status","-verbose",]
let options["report_design_rules"] = ["-all","-library","-nosplit","-tech","-verbose",]
let options["report_disable_timing"] = ["-mode","-nosplit",]
let options["report_dont_touch"] = ["-all",]
let options["report_eco_bus_buffer_patterns"] = []
let options["report_eco_physical_changes"] = ["-cells","-min_displacement","-min_estimated_length","-min_net_length_ratio","-type",]
let options["report_eco_placement_net_weight"] = ["-nets","-output",]
let options["report_edit_groups"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_ems_database"] = ["-name",]
let options["report_ems_rules"] = ["-all",]
let options["report_exceptions"] = ["-dominant","-fall_from","-fall_through","-fall_to","-from","-ignored","-nosplit","-rise_from","-rise_through","-rise_to","-through","-to",]
let options["report_extraction_options"] = ["-all","-corners",]
let options["report_feedthroughs"] = ["-file_name_prefix","-include_buffered","-include_original_feedthroughs","-nets","-reporting_style","-self",]
let options["report_floorplan_rules"] = ["-lib_cells","-object_types",]
let options["report_frame_properties"] = ["-block","-diffusion_width_height","-implant_width","-library","-output","-source_drain_annotation",]
let options["report_freeze_ports"] = ["-all",]
let options["report_grids"] = ["-ref_blocks","-type",]
let options["report_groups"] = ["-nosplit","-verbose",]
let options["report_hierarchy"] = ["-block","-hierarchical","-no_leaf","-nosplit","-physical_context",]
let options["report_hierarchy_options"] = ["-blocks",]
let options["report_host_options"] = ["-nosplit",]
let options["report_ignored_layers"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_incomplete_upf"] = ["-max_message_count",]
let options["report_individual_pin_constraints"] = ["-constraint_type","-nets","-pins","-ports",]
let options["report_io_guides"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_io_rings"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_isolate_ports"] = ["-all",]
let options["report_keepout_margins"] = []
let options["report_latch_loop_groups"] = ["-loop_breakers_only","-nosplit","-of_objects","-path_breakers_only",]
let options["report_lib"] = ["-antenna","-include_db_mapping","-min_pin_layer","-nosplit","-parasitic_tech","-pattern_must_join_pin","-pattern_must_join_pin_exclusion_list","-physical","-placement_constraints","-routability","-technology_lib","-timing_arcs","-verbose","-wire_track_colors","-wire_tracks",]
let options["report_lib_cells"] = ["-columns","-objects",]
let options["report_lib_pins"] = ["-columns","-objects",]
let options["report_lib_timing_arcs"] = ["-columns","-objects",]
let options["report_macro_constraints"] = ["-align_pins_to_tracks","-alignment_grid","-allowed_orientations","-preferred_location",]
let options["report_macro_relative_location"] = ["-hierarchical","-nosplit",]
let options["report_matching_types"] = ["-nosplit",]
let options["report_mibs"] = []
let options["report_min_pulse_width"] = ["-all_violators","-corners","-modes","-nosplit","-scenarios","-significant_digits",]
let options["report_mismatch_configs"] = ["-all","-config_list","-nosplit",]
let options["report_modes"] = ["-nosplit","-significant_digits",]
let options["report_multibit"] = ["-nosplit",]
let options["report_multisource_clock_sink_groups"] = []
let options["report_multisource_clock_subtree_constraints"] = ["-clocks","-names",]
let options["report_multisource_clock_subtree_options"] = ["-clocks","-names",]
let options["report_multisource_clock_tap_options"] = ["-clocks","-names",]
let options["report_mv_lib_cells"] = ["-verbose",]
let options["report_mv_path"] = ["-all_not_associated","-all_path","-cell","-full_path","-isolation","-level_shifter","-net","-pin","-shifting",]
let options["report_name_rules"] = []
let options["report_names"] = ["-hierarchy","-include_sub_blocks","-rules","-skip_physical_only_cells",]
let options["report_net"] = ["-connections","-nosplit","-physical","-segments","-significant_digits","-verbose",]
let options["report_net_buses"] = ["-nosplit","-verbose",]
let options["report_net_estimation_rules"] = []
let options["report_net_fanout"] = ["-connections","-depth","-hierarchical","-high_fanout","-nosplit","-physical","-threshold","-tree","-upper_bound","-verbose",]
let options["report_net_weight_effort"] = ["-nets",]
let options["report_nets"] = ["-connections","-nosplit","-physical","-segments","-significant_digits","-verbose",]
let options["report_ocvm"] = ["-cell_delay","-clock","-coefficient","-corner","-corner_sigma","-data","-early","-fall","-late","-lib_cell","-list_annotated","-list_not_annotated","-min_depth","-mode","-net_delay","-nosplit","-rise","-scenario","-significant_digits","-type",]
let options["report_parasitic_parameters"] = ["-corners",]
let options["report_parasitics"] = ["-corner","-early","-fall","-late","-mode","-percentile","-rise","-scenario","-significant_digits","-xcap",]
let options["report_path_group"] = ["-modes","-nosplit",]
let options["report_path_groups"] = ["-modes","-nosplit",]
let options["report_pg_mask_constraints"] = ["-tcl",]
let options["report_pg_patterns"] = ["-tcl",]
let options["report_pg_regions"] = []
let options["report_pg_strategies"] = ["-tcl",]
let options["report_pg_strategy_via_rules"] = ["-tcl",]
let options["report_pg_via_master_rules"] = ["-tcl",]
let options["report_pin_blockages"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_pin_guides"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_pin_placement"] = ["-cells","-format","-nets","-pins","-ports","-self",]
let options["report_placement"] = ["-error_view","-hard_macro_density_gradient_violations","-hard_macro_hierarchy_perimeter","-hard_macro_orientation_violations","-hard_macro_overlap","-hard_macro_pin_track_violations","-hard_macro_route_over","-hierarchical","-ignore_fixed","-macro_spacing_rule","-physical_hierarchy_violations","-poly_rule","-swimming_pool_area","-thin_channel_area","-user_grid","-verbose","-voltage_area_violations","-wirelength",]
let options["report_placement_spacing_rules"] = []
let options["report_pop_up_object_options"] = ["-object_type",]
let options["report_port"] = ["-design_rule","-drive","-input_delay","-nosplit","-output_delay","-verbose",]
let options["report_port_buses"] = ["-nosplit","-verbose",]
let options["report_port_protection_diodes"] = []
let options["report_ports"] = ["-design_rule","-drive","-input_delay","-nosplit","-output_delay","-verbose",]
let options["report_power"] = ["-blocks","-cell_power","-corners","-early","-force","-hierarchy","-include_boundary_nets","-leaf","-levels","-modes","-net_power","-nosplit","-scenarios","-significant_digits","-verbose",]
let options["report_power_calculation"] = ["-capacitance","-early","-fall","-fall_transition","-probability","-rise","-rise_transition","-scenarios","-significant_digits","-toggle_rate","-transition","-verbose",]
let options["report_power_clock_scaling"] = ["-scenarios",]
let options["report_power_derate"] = ["-include_inherited","-nosplit","-scenarios","-significant_digits",]
let options["report_power_domain"] = ["-nosplit",]
let options["report_power_domains"] = ["-nosplit",]
let options["report_power_groups"] = []
let options["report_power_io_constraints"] = ["-io_guide_list","-significant_digits",]
let options["report_power_scopes"] = ["-nosplit",]
let options["report_power_switch_patterns"] = ["-nosplit",]
let options["report_power_switch_placement_patterns"] = []
let options["report_pr_rules"] = ["-all","-library","-nosplit","-tech",]
let options["report_programmable_spare_cell_mapping_rule"] = ["-all","-psc_type_id",]
let options["report_pst"] = ["-derived","-nosplit","-psts","-supplies","-voltage_type",]
let options["report_push_down_object_options"] = ["-object_type",]
let options["report_pvt"] = ["-mismatched","-nosplit","-object_list","-significant_digits",]
let options["report_qor"] = ["-corners","-include","-modes","-nosplit","-scenarios","-significant_digits","-summary",]
let options["report_qor_snapshot"] = ["-directory","-display","-name","-save_as",]
let options["report_rail_integrity_strategy"] = []
let options["report_rdl_routes"] = ["-create_error_data","-file","-nets","-nets_in_file","-open_nets",]
let options["report_ref_libs"] = ["-library",]
let options["report_reference"] = ["-hierarchical","-nosplit",]
let options["report_references"] = ["-hierarchical","-nosplit",]
let options["report_routing_corridors"] = ["-nosplit","-output","-significant_digits","-verbose",]
let options["report_routing_guides"] = ["-level","-rectangle",]
let options["report_routing_rules"] = ["-nosplit","-of_objects","-output","-significant_digits","-verbose",]
let options["report_rp_groups"] = ["-all","-critical","-non_critical","-unplaced","-verbose",]
let options["report_sadp_track_rule"] = ["-all","-nosplit","-significant_digits",]
let options["report_scan_chains"] = []
let options["report_scenarios"] = ["-corners","-modes","-nosplit","-scenarios",]
let options["report_shaping_options"] = []
let options["report_shields"] = ["-nets","-output","-per_layer",]
let options["report_si_calculation"] = ["-clock","-corner","-fall","-max","-min","-mode","-rise","-scenario","-significant_digits","-source_fall","-source_rise",]
let options["report_si_delay_analysis"] = ["-excluded","-ignored_arrival","-nosplit",]
let options["report_signal_em"] = ["-nets","-significant_digits","-verbose","-violated",]
let options["report_signal_io_constraints"] = ["-io_guide_list","-significant_digits",]
let options["report_site_defs"] = ["-library","-nosplit","-significant_digits","-tech",]
let options["report_size_only"] = ["-all",]
let options["report_stage"] = ["-clock","-corner","-fall","-max","-min","-mode","-rise","-scenario","-significant_digits","-source_fall","-source_rise",]
let options["report_supernet_exceptions"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_supply_net"] = ["-nosplit",]
let options["report_supply_nets"] = ["-nosplit",]
let options["report_supply_ports"] = ["-nosplit",]
let options["report_supply_sets"] = ["-nosplit",]
let options["report_switching_activity"] = ["-cells","-corners","-coverage","-essential","-hierarchy","-list_low_activity","-modes","-nosplit","-scenarios","-switching_activity_types","-toggle_rate_limit","-verbose",]
let options["report_taps"] = ["-static_current",]
let options["report_target_library_subset"] = ["-nosplit","-objects","-top",]
let options["report_threshold_voltage_group"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_threshold_voltage_groups"] = ["-nosplit","-significant_digits","-verbose",]
let options["report_timing"] = ["-attributes","-capacitance","-corners","-crosstalk_delta","-delay_type","-derate","-exception","-exclude","-fall_exclude","-fall_from","-fall_through","-fall_to","-from","-groups","-include_hierarchical_pins","-input_pins","-max_paths","-modes","-nets","-nosplit","-nworst","-path_type","-physical","-process","-report_by","-rise_exclude","-rise_from","-rise_through","-rise_to","-scenarios","-significant_digits","-skip_transparency_window","-slack_lesser_than","-sort_by","-start_end_pair","-temperature","-through","-to","-transition_time","-variation","-voltage",]
let options["report_timing_derate"] = ["-aocvm_guardband","-corners","-include_inherited","-increment","-nosplit","-pocvm_coefficient_scale_factor","-pocvm_guardband","-significant_digits",]
let options["report_topological_constraints"] = ["-all",]
let options["report_topology_edges"] = ["-design","-nosplit","-significant_digits","-verbose",]
let options["report_topology_nodes"] = ["-design","-nosplit","-significant_digits","-verbose",]
let options["report_track_constraints"] = []
let options["report_tracks"] = ["-dir","-layer","-nosplit","-significant_digits",]
let options["report_transitive_fanin"] = ["-nosplit","-to",]
let options["report_transitive_fanout"] = ["-from","-nosplit",]
let options["report_unbound"] = ["-cell","-hierarchical","-site_array","-site_row","-verbose","-via",]
let options["report_units"] = ["-nosplit",]
let options["report_user_units"] = ["-nosplit",]
let options["report_utilization"] = ["-config","-of_objects","-scope","-verbose",]
let options["report_versions"] = []
let options["report_via_defs"] = ["-design","-library","-nosplit","-significant_digits","-tech","-verbose",]
let options["report_via_ladder_constraints"] = ["-nosplit","-pins",]
let options["report_via_ladder_rules"] = ["-nosplit",]
let options["report_via_mapping"] = ["-from","-nosplit","-to",]
let options["report_via_regions"] = ["-design","-nosplit","-significant_digits","-verbose",]
let options["report_via_rules"] = ["-all","-design","-library","-nosplit","-tech","-verbose",]
let options["report_virtual_pads"] = []
let options["report_voltage_area_rules"] = ["-nosplit",]
let options["report_voltage_areas"] = ["-design","-hierarchical","-nosplit","-significant_digits","-verbose",]
let options["reset_app_options"] = ["-block","-user_default",]
let options["reset_cell_mode"] = []
let options["reset_design"] = []
let options["reset_path"] = ["-all","-fall","-fall_from","-fall_through","-fall_to","-from","-hold","-rise","-rise_from","-rise_through","-rise_to","-setup","-through","-to",]
let options["reset_paths"] = ["-all","-fall","-fall_from","-fall_through","-fall_to","-from","-hold","-rise","-rise_from","-rise_through","-rise_to","-setup","-through","-to",]
let options["reset_placement"] = ["-spread_cells",]
let options["reset_power_clock_scaling"] = ["-all","-scenarios",]
let options["reset_power_derate"] = ["-groups","-scenarios",]
let options["reset_power_group"] = ["-all","-name",]
let options["reset_pvt"] = ["-corners",]
let options["reset_switching_activity"] = ["-corners","-modes","-path_sources","-scenarios","-state_condition",]
let options["reset_timing_derate"] = ["-aocvm_guardband","-corners","-hierarchical_net_delay","-increment","-pocvm_coefficient_scale_factor","-pocvm_guardband","-scalar","-variation",]
let options["reset_upf"] = []
let options["reshape_objects"] = ["-add","-cut","-cut_by_locked","-gap","-gap_min_spacing","-ignore_end_cap","-keep_inside","-via_cut_pattern",]
let options["resize_objects"] = ["-area","-aspect","-bbox","-delta","-force","-height","-quiet","-scale","-simple","-utilization","-width",]
let options["resize_polygons"] = ["-objects","-size",]
let options["resolve_pg_nets"] = ["-check_only","-design","-verbose",]
let options["revert_blocks"] = []
let options["revert_cell_sizing"] = ["-adjacent_cell_distance","-cells","-include_adjacent_sized_cells",]
let options["rotate_objects"] = ["-anchor","-angle","-orient","-pivot",]
let options["route_auto"] = ["-max_detail_route_iterations","-reuse_existing_global_route","-route_nondefault_nets_first","-save_after_detail_route","-save_after_global_route","-save_after_track_assignment","-save_cell_prefix","-stop_after_track_assignment",]
let options["route_busplans"] = ["-force","-incremental","-quick","-reduce_virtual_pins",]
let options["route_clock_straps"] = ["-fishbone_fanout","-fishbone_layers","-fishbone_span","-fishbone_sub_span","-max_detail_route_iterations","-nets","-stop_after_global_route","-topology",]
let options["route_custom"] = ["-keep_session","-nets",]
let options["route_detail"] = ["-coordinates","-incremental","-initial_drc_from_input","-max_number_iterations","-start_iteration",]
let options["route_eco"] = ["-max_detail_route_iterations","-max_reported_nets","-nets","-open_net_driven","-reroute","-reuse_existing_global_route","-utilize_dangling_wires",]
let options["route_fishbone"] = ["-nets","-stop_after_global_route",]
let options["route_global"] = ["-congestion_map_only","-effort_level","-floorplan","-host_options","-reuse_existing_global_route","-virtual_flat",]
let options["route_group"] = ["-all_clock_nets","-floorplan","-from_file","-global_planning","-max_detail_route_iterations","-nets","-reuse_existing_global_route","-route_nondefault_nets_first","-stop_after_global_route","-utilize_dangling_wires",]
let options["route_opt"] = ["-xtalk_reduction",]
let options["route_rdl_differential"] = ["-allow_push_neighbor_nets","-layers","-mode","-nets","-nets_in_file","-objects",]
let options["route_rdl_flip_chip"] = ["-layers","-nets","-nets_in_file","-objects","-reuse_existing_global_route","-skip_detail_route",]
let options["route_track"] = []
let options["run_block_compile_pg"] = ["-host_options","-skip_top",]
let options["run_block_script"] = ["-blocks","-cells","-force","-host_options","-name","-reuse_processes","-run_order","-script","-var_list","-work_dir",]
let options["run_monitor_gui"] = ["-kill","-nolaunch",]
let options["saif_map"] = ["-hsep","-read_map","-start","-stop","-type","-write_map",]
let options["save_block"] = ["-as","-compress","-force","-hierarchical","-label","-verbose",]
let options["save_drc_error_data"] = ["-as",]
let options["save_ems_database"] = ["-all","-as","-overwrite",]
let options["save_lib"] = ["-all","-as","-compress","-version",]
let options["save_upf"] = ["-exclude","-for_empty_blackbox","-for_etm","-force_no_reference","-force_reference","-format","-full_chip","-include",]
let options["send_status"] = ["-status",]
let options["set_3d_chip_placement"] = ["-chip","-location","-orientation","-scaling_factor",]
let options["set_annotated_check"] = ["-clock","-corners","-fall","-from","-hold","-increment","-modes","-nochange_high","-nochange_low","-override_increment","-period","-recovery","-removal","-rise","-scenarios","-setup","-to","-width",]
let options["set_annotated_delay"] = ["-cell","-corners","-fall","-from","-max","-min","-modes","-net","-rise","-scenarios","-to",]
let options["set_annotated_power"] = ["-internal","-leakage","-scenarios","-supply_net",]
let options["set_annotated_transition"] = ["-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_aocvm_coefficient"] = []
let options["set_app_options"] = ["-as_user_default","-block","-category","-list","-name","-value",]
let options["set_app_var"] = ["-default",]
let options["set_attribute"] = ["-class","-name","-objects","-quiet","-value",]
let options["set_base_lib"] = ["-base_lib","-library",]
let options["set_blackbox_clock_port"] = []
let options["set_blackbox_port_drive"] = ["-input_transition_fall","-input_transition_rise","-type",]
let options["set_blackbox_port_load"] = ["-factor","-type","-value",]
let options["set_block_grid_references"] = ["-adjust_snap_point_of_cell","-designs","-grid","-reset","-snap_point",]
let options["set_block_pin_constraints"] = ["-allow_feedthroughs","-allowed_layers","-cells","-corner_keepout_distance","-corner_keepout_num_tracks","-exclude_sides","-hard_constraints","-pin_spacing","-pin_spacing_distance","-self","-sides","-stacking_allowed",]
let options["set_block_to_top_map"] = ["-auto_clock","-block","-clock","-corner","-ignore_waveform","-inverted_clock","-mode","-path","-report_only","-unused_clock",]
let options["set_boundary_budget_constraints"] = ["-auto","-corner","-default","-driving_cell","-fanin_capacitance","-from_pin","-input_transition_fall","-input_transition_rise","-library","-load_capacitance","-max_transition","-name","-pin",]
let options["set_boundary_cell_rules"] = ["-add_metal_cut_allowed","-at_va_boundary","-bottom_boundary_cells","-bottom_left_inside_corner_cells","-bottom_left_outside_corner_cell","-bottom_right_inside_corner_cells","-bottom_right_outside_corner_cell","-bottom_tap_cell","-do_not_swap_top_and_bottom_inside_corner_cell","-insert_into_blocks","-left_boundary_cell","-min_horizontal_jog","-min_horizontal_separation","-min_row_width","-min_vertical_jog","-min_vertical_separation","-mirror_left_boundary_cell","-mirror_left_inside_corner_cell","-mirror_left_outside_corner_cell","-mirror_right_boundary_cell","-mirror_right_inside_corner_cell","-mirror_right_outside_corner_cell","-no_1x","-prefix","-right_boundary_cell","-separator","-tap_distance","-top_boundary_cells","-top_left_inside_corner_cells","-top_left_outside_corner_cell","-top_right_inside_corner_cells","-top_right_outside_corner_cell","-top_tap_cell",]
let options["set_budget_margins"] = ["-actual","-capture","-clock","-corner","-default","-from_clock","-hold","-launch","-postcts","-prects","-setup","-target","-to_clock",]
let options["set_budget_options"] = ["-add_blocks","-adjust_latency","-all","-capture_fixed_delay","-capture_hold_fix","-feed_fixed_delay","-feed_hold_fix","-launch_fixed_delay","-launch_hold_fix","-remove_blocks","-reset","-top_level",]
let options["set_budget_shell_latencies"] = ["-block","-block_mode","-block_output","-clock","-corner","-early","-fall","-late","-rise",]
let options["set_bundle_pin_constraints"] = ["-allow_feedthroughs","-allowed_layers","-bundle_order","-bundles","-cells","-keep_pins_together","-length","-pin_spacing","-pin_spacing_distance","-range","-self","-sides","-width",]
let options["set_busplan_constraints"] = ["-from","-remove","-to","-to_value","-type",]
let options["set_case_analysis"] = []
let options["set_cell_hierarchy_type"] = ["-boundary","-type",]
let options["set_cell_location"] = ["-coordinates","-design","-fixed","-ignore_fixed","-orientation",]
let options["set_cell_mode"] = ["-quiet",]
let options["set_cell_site"] = ["-cells","-height_type","-library","-site_def",]
let options["set_cell_vt_type"] = ["-lib_cells","-silent","-vt_type",]
let options["set_clock_balance_points"] = ["-balance_points","-clock","-consider_for_balancing","-corners","-delay","-early","-fall","-late","-rise",]
let options["set_clock_cell_spacing"] = ["-clocks","-lib_cells","-x_spacing","-y_spacing",]
let options["set_clock_gating_check"] = ["-fall","-high","-hold","-low","-rise","-setup",]
let options["set_clock_groups"] = ["-allow_paths","-asynchronous","-comment","-group","-logically_exclusive","-name","-physically_exclusive",]
let options["set_clock_latency"] = ["-clock","-corners","-dynamic","-early","-fall","-late","-max","-min","-modes","-rise","-scenarios","-source",]
let options["set_clock_routing_rules"] = ["-clocks","-default_rule","-max_routing_layer","-min_routing_layer","-net_type","-nets","-rules",]
let options["set_clock_sense"] = ["-clock_leaf","-clocks","-logical_stop_propagation","-negative","-positive","-pulse","-stop_propagation",]
let options["set_clock_transition"] = ["-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_clock_tree_options"] = ["-clocks","-copy_exceptions_across_modes","-corners","-from_mode","-target_latency","-target_skew","-to_mode",]
let options["set_clock_tree_reference_subset"] = ["-clocks","-lib_cells",]
let options["set_clock_trunk_endpoints"] = ["-clock","-corners","-delay",]
let options["set_clock_uncertainty"] = ["-corners","-fall","-fall_from","-fall_to","-from","-hold","-modes","-rise","-rise_from","-rise_to","-scenarios","-setup","-to",]
let options["set_colors"] = ["-color","-color_name","-cycle_color","-depth","-hierarchy_types","-keep",]
let options["set_command_option_value"] = ["-command","-current","-default","-option","-position","-undefined","-value",]
let options["set_consistency_settings_options"] = ["-corner","-default","-early","-exec_path","-report","-saved_session","-script","-star_corner","-tluplus","-tool",]
let options["set_constraint_mapping_file"] = ["-reset",]
let options["set_corner_status"] = ["-active","-corners","-hold","-label","-max_capacitance","-max_transition","-min_capacitance","-modes","-power","-setup",]
let options["set_current_command_mode"] = ["-command","-mode",]
let options["set_current_ems_database"] = ["-reset",]
let options["set_current_mismatch_config"] = ["-enable",]
let options["set_data_check"] = ["-clock","-corners","-fall_from","-fall_to","-from","-hold","-modes","-rise_from","-rise_to","-scenarios","-setup","-to",]
let options["set_db_file_mapping"] = ["-library",]
let options["set_density_gradient_options"] = ["-cluster_threshold","-edge_zone_width","-gradient_tolerance","-min_macro_size","-outer_zone_width","-white_space_density",]
let options["set_design_attributes"] = ["-attribute","-elements","-models",]
let options["set_disable_clock_gating_check"] = []
let options["set_disable_timing"] = ["-from","-loop_break","-to",]
let options["set_domain_supply_net"] = ["-primary_ground_net","-primary_power_net",]
let options["set_dont_touch"] = []
let options["set_dont_touch_network"] = ["-clear","-clock_only","-no_propagate",]
let options["set_drive"] = ["-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_drive_resistance"] = ["-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_driving_cell"] = ["-clock","-clock_fall","-corners","-dont_scale","-fall","-from_pin","-input_transition_fall","-input_transition_rise","-lib_cell","-library","-max","-min","-modes","-multiply_by","-no_design_rule","-pin","-rise","-scenarios",]
let options["set_eco_placement_net_weight"] = ["-nets","-reset","-weight",]
let options["set_eco_power_intention"] = ["-cells",]
let options["set_edit_setting"] = ["-auto_display_hidden","-default","-expand_hit_blockage","-expand_hit_constraint","-expand_hit_macro_cell","-hierarchical_routing","-honor_ndr","-ignore_locked","-keep_pin_on_edge","-pin_layer_policy","-select_center_line","-select_center_vertex","-select_edge","-select_partial_object","-select_vertex","-self_intersection","-specified_pin_layer","-update_color_mask","-update_floorplan",]
let options["set_edrc_setting"] = ["-check_drc","-default","-dpt_odd_cycle","-dpt_precolor","-enclosed_via_spacing_rule","-end_of_line_spacing_rule","-filter_same_net_spacing","-general_via_spacing_rule","-honor_ndr","-max_error_limit","-max_processing_time","-max_shape_limit","-metal_span_spacing_rule","-metal_width_rule","-minimum_edge_rule","-minimum_length_and_area_rule","-rdl_acute_angle_rule","-rdl_right_angle_rule","-show_error_browser","-via_density_rule","-via_enclosure_rule",]
let options["set_equivalent"] = ["-function_only","-nets","-sets",]
let options["set_extraction_options"] = ["-corners","-default","-early_cap_scale","-early_ccap_ratio","-early_ccap_scale","-early_ccap_threshold","-early_res_scale","-early_vr_horizontal_cap_scale","-early_vr_horizontal_res_scale","-early_vr_vertical_cap_scale","-early_vr_vertical_res_scale","-early_vr_via_res_scale","-enable_ccap_or_filtering","-honor_mask_constraints","-include_pin_resistance","-late_cap_scale","-late_ccap_ratio","-late_ccap_scale","-late_ccap_threshold","-late_res_scale","-late_vr_horizontal_cap_scale","-late_vr_horizontal_res_scale","-late_vr_vertical_cap_scale","-late_vr_vertical_res_scale","-late_vr_via_res_scale","-operating_frequency","-process_scale","-real_metalfill_extraction","-reference_direction","-virtual_shield_extraction",]
let options["set_false_path"] = ["-comment","-fall","-fall_from","-fall_through","-fall_to","-from","-hold","-reset_path","-rise","-rise_from","-rise_through","-rise_to","-setup","-through","-to",]
let options["set_fanout_load"] = []
let options["set_fixed_objects"] = ["-unfix",]
let options["set_floorplan_area_rules"] = ["-forbidden_list","-forbidden_ranges","-layers","-lib_cells","-max","-min","-name","-object_types","-valid_list","-valid_ranges",]
let options["set_floorplan_enclosure_rules"] = ["-follow_rotations","-forbidden_list","-forbidden_ranges","-from_corner","-from_object_types","-ignore_rotate90","-layers","-max","-min","-must_enclose","-name","-offset","-sides","-step","-to_corner","-to_lib_cells","-to_object_types","-valid_list","-valid_ranges",]
let options["set_floorplan_halo_rules"] = ["-follow_rotations","-forbidden_list","-forbidden_ranges","-from_object_types","-ignore_rotate90","-layers","-max","-min","-must_enclose","-name","-offset","-sides","-step","-to_lib_cells","-to_object_types","-type","-valid_list","-valid_ranges",]
let options["set_floorplan_spacing_rules"] = ["-directions","-follow_rotations","-forbidden_list","-forbidden_ranges","-from_layers","-from_lib_cells","-from_object_types","-ignore_rotate90","-max","-min","-min_parallel_run_length","-name","-no_overlap","-offset","-step","-to_layers","-to_lib_cells","-to_object_types","-valid_list","-valid_ranges",]
let options["set_floorplan_width_rules"] = ["-direction","-forbidden_list","-forbidden_ranges","-layers","-lib_cells","-max","-min","-name","-object_types","-offset","-step","-type","-valid_list","-valid_ranges",]
let options["set_freeze_ports"] = ["-all","-clock","-data",]
let options["set_grid"] = ["-layers","-orientations","-pg_strategy","-reset","-site_arrays","-site_rows","-x_offset","-x_step","-y_offset","-y_step",]
let options["set_hierarchy_options"] = ["-blocks","-enable_planning","-from_level","-to_level",]
let options["set_host_options"] = ["-add_hosts","-max_cores","-name","-num_processes","-submit_command","-submit_protocol","-target","-timeout","-work_dir",]
let options["set_ideal_latency"] = ["-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_ideal_network"] = ["-no_propagate",]
let options["set_ideal_transition"] = ["-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_ignored_layers"] = ["-max_routing_layer","-min_routing_layer","-rc_congestion_ignored_layers","-verbose",]
let options["set_individual_pin_constraints"] = ["-allow_feedthroughs","-allowed_layers","-cells","-length","-location","-nets","-off_edge","-offset","-pin_spacing","-pin_spacing_distance","-pins","-ports","-sides","-width",]
let options["set_input_delay"] = ["-add_delay","-clock","-clock_fall","-corners","-fall","-level_sensitive","-max","-min","-modes","-network_latency_included","-reference_pin","-rise","-scenarios","-source_latency_included",]
let options["set_input_transition"] = ["-clock","-clock_fall","-corners","-fall","-max","-min","-modes","-rise","-scenarios",]
let options["set_interfaces"] = ["-design","-force",]
let options["set_isolate_ports"] = ["-driver","-force","-type",]
let options["set_isolation"] = ["-applies_to","-clamp_value","-diff_supply_only","-domain","-elements","-exclude_elements","-isolation_ground_net","-isolation_power_net","-isolation_sense","-isolation_signal","-isolation_supply_set","-location","-name_prefix","-name_suffix","-no_isolation","-sink","-source","-update",]
let options["set_isolation_control"] = ["-domain","-isolation_sense","-isolation_signal","-location",]
let options["set_latch_loop_breaker"] = ["-avoid","-pin","-remove",]
let options["set_latency_adjustment_options"] = ["-clocks_to_update","-exclude_clocks","-ocv_included","-reference_clock",]
let options["set_latency_budget_constraints"] = ["-clock","-corner","-crp","-default","-early_dynamic","-early_latency","-from_clock","-late_dynamic","-late_latency","-latency_offset","-source","-to_clock",]
let options["set_layer_map_file"] = ["-format","-library","-map_file",]
let options["set_level_shifter"] = ["-applies_to","-domain","-elements","-exclude_elements","-force_shift","-location","-name_prefix","-name_suffix","-no_shift","-rule","-threshold","-update",]
let options["set_lib_cell_purpose"] = ["-exclude","-include",]
let options["set_load"] = ["-fall","-max","-min","-pin_load","-rise","-subtract_pin_load","-wire_load",]
let options["set_locked_objects"] = ["-unlock",]
let options["set_macro_constraints"] = ["-align_pins_to_tracks","-alignment_grid","-alignment_orientation_set","-alignment_point","-allowed_orientations","-preferred_location",]
let options["set_macro_relative_location"] = ["-anchor_corner","-anchor_object","-offset","-offset_type","-scale_edge","-target_corner","-target_object","-target_orientation","-used_length",]
let options["set_max_capacitance"] = ["-clock_path","-corners","-data_path","-db","-modes","-scenarios",]
let options["set_max_delay"] = ["-comment","-fall","-fall_from","-fall_through","-fall_to","-from","-ignore_clock_latency","-reset_path","-rise","-rise_from","-rise_through","-rise_to","-through","-to",]
let options["set_max_fanout"] = []
let options["set_max_lvth_percentage"] = []
let options["set_max_time_borrow"] = ["-corners","-modes","-scenarios",]
let options["set_max_transition"] = ["-clock_path","-corners","-data_path","-db","-modes","-scenarios",]
let options["set_message_info"] = ["-id","-limit","-stop_off","-stop_on",]
let options["set_min_capacitance"] = ["-clock_path","-corners","-data_path","-db","-modes","-scenarios",]
let options["set_min_delay"] = ["-comment","-fall","-fall_from","-fall_through","-fall_to","-from","-ignore_clock_latency","-reset_path","-rise","-rise_from","-rise_through","-rise_to","-through","-to",]
let options["set_min_pulse_width"] = ["-corners","-high","-low","-modes","-scenarios",]
let options["set_multicycle_path"] = ["-comment","-end","-fall","-fall_from","-fall_through","-fall_to","-from","-hold","-reset_path","-rise","-rise_from","-rise_through","-rise_to","-setup","-start","-through","-to",]
let options["set_multisource_clock_subtree_constraints"] = ["-cells","-clock","-ignore_for_icg_reordering","-name","-pins","-target_level",]
let options["set_multisource_clock_subtree_options"] = ["-balance_levels","-clock","-corners","-dont_merge_cells","-driver_objects","-enable_icg_reordering","-max_total_wire_delay","-name","-target_level",]
let options["set_multisource_clock_tap_options"] = ["-clock","-dont_merge_cells","-driver_objects","-name","-num_taps",]
let options["set_net_estimation_rule"] = ["-horizontal_value","-parameter","-unset","-value","-vertical_value",]
let options["set_net_weight_effort"] = ["-nets","-verbose","-virtual_flat","-weight_effort",]
let options["set_object_layer"] = ["-force","-layers","-of_objects",]
let options["set_object_shape"] = ["-area","-keep_area","-lengths","-rotate","-shape","-utilization",]
let options["set_operating_conditions"] = ["-analysis_type","-library","-max","-max_library","-min","-min_library","-object_list",]
let options["set_output_delay"] = ["-add_delay","-clock","-clock_fall","-corners","-fall","-group_path","-level_sensitive","-max","-min","-modes","-network_latency_included","-reference_pin","-rise","-scenarios","-source_latency_included",]
let options["set_parasitic_parameters"] = ["-corners","-early_spec","-early_temperature","-late_spec","-late_temperature","-library",]
let options["set_parasitics_parameters"] = ["-corners","-early_spec","-early_temperature","-late_spec","-late_temperature","-library",]
let options["set_partial_on_translation"] = ["-full_on_tools","-off_tools",]
let options["set_path_margin"] = ["-comment","-corners","-fall","-fall_from","-fall_through","-fall_to","-from","-hold","-reset_path","-rise","-rise_from","-rise_through","-rise_to","-setup","-through","-to",]
let options["set_pg_mask_constraint"] = ["-track_alignment_mode","-track_alignment_offset","-width",]
let options["set_pg_strategy"] = ["-blockage","-blocks","-core","-design_boundary","-extension","-macros","-pattern","-pg_regions","-polygon","-voltage_areas",]
let options["set_pg_strategy_via_rule"] = ["-via_rule",]
let options["set_pg_via_master_rule"] = ["-allow_multiple","-contact_code","-cut_mask","-cut_spacing","-offset","-offset_start","-orient","-snap_reference_point","-track_alignment","-via_array_dimension","-via_site_ratio",]
let options["set_pin_budget_constraints"] = ["-all","-all_modes","-all_pins","-early_boundary","-feedthrough","-from_clock","-from_clock_fall","-from_clock_rise","-from_delay","-from_percent","-frozen","-inputs","-internal","-internal_delay","-internal_percent","-late_boundary","-modes","-none","-not_frozen","-not_same_as_feedthrough","-not_same_as_mib","-not_same_as_modes","-not_same_as_pin","-outputs","-reset","-same_as_feedthrough","-same_as_mib","-same_as_modes","-same_as_pin","-to_clock","-to_clock_fall","-to_clock_rise","-to_delay","-to_percent",]
let options["set_placement_spacing_label"] = ["-lib_cells","-name","-row","-side",]
let options["set_placement_spacing_rule"] = ["-labels",]
let options["set_placement_status"] = []
let options["set_pocvm_corner_sigma"] = ["-corners",]
let options["set_pop_up_object_options"] = ["-block_action","-object_type","-pins_as_terminals","-routing_overlap_check",]
let options["set_port_antenna_property"] = ["-add","-data","-port","-replace",]
let options["set_port_attributes"] = ["-applies_to","-attribute","-clamp_value","-driver_supply","-elements","-feedthrough","-model","-ports","-receiver_supply","-repeater_supply","-unconnected",]
let options["set_power_clock_scaling"] = ["-period","-ratio","-scenarios",]
let options["set_power_derate"] = ["-groups","-internal","-leakage","-scenarios","-switching",]
let options["set_power_group"] = ["-name",]
let options["set_power_io_constraints"] = ["-io_guide_object","-offset","-ratio","-reference_cell","-share","-spacing",]
let options["set_power_strategy_attribute"] = []
let options["set_power_switch_placement_pattern"] = ["-connect_mode","-direction","-driver","-name","-pattern","-placement_type","-port_net_name",]
let options["set_process_label"] = ["-clear","-corners","-early","-late","-library","-object_list",]
let options["set_process_number"] = ["-clear","-corners","-early","-late","-library","-object_list",]
let options["set_programmable_spare_cell_mapping_rule"] = ["-compatible","-dont_overlap_pg_stripe_layer","-multi_height_merge","-multi_height_split","-partial_overlap_pg_stripe_layer","-psc_type_id",]
let options["set_propagated_clock"] = []
let options["set_push_down_object_options"] = ["-allow_multi_rail_cells","-block_action","-collinear_margin","-ignore_misalignment","-location_based_terminal_naming","-object_type","-pin_meet_fatwire_rule","-routing_overlap_check","-top_action",]
let options["set_pvt_configuration"] = ["-add","-clear_filter","-name","-process_labels","-process_numbers","-rule","-temperatures","-voltages",]
let options["set_rail_integrity_strategy"] = ["-allow_stacked_endpoint_vias_outside_of_overlapping_area","-area_edge_condition","-core","-cut_merged_shape","-discontinuous_connection_directionality","-discontinuous_connection_threshold","-enable_discontinuous_connection_check","-error_data","-exclude_cell_masters","-exclude_macros","-exclude_polygon","-existing_stacked_via_check_mode","-filter_layer_net_shapes","-ideal_sourced_dangling_vias","-ignore_conn_view_eeq_for_physical_connectivity_tracing","-ignore_discontinuous_connection_object_types","-ignore_discontinuous_connection_routing_layers","-ignore_discontinuous_connection_shape_types","-ignore_minimum_via_criterion","-ignore_other_pg_net_shapes","-ignore_other_shape_net_types","-ignore_pin_shape_layers","-ignore_pins_by_cell","-ignore_pins_by_cell_type","-ignore_routing_blockage_layers","-ignore_routing_blockages","-ignore_small_overlapping_area","-ignore_touching_floating_pin_shape_errors","-ignore_via_enclosure_shape","-macros","-max_via_distance_along_parallel_wires","-merge_same_layer_shapes","-missing_via_net_shape_direction","-missing_via_rule","-nets","-no_stack","-non_ideal_sourced_floating_shapes","-override_conn_view_eeq_class_to_interpret_as_same_class","-pg_pin_floating_connection_check","-pg_regions","-polygon","-use_conn_view","-via_existence_check_merge_via_cut","-via_existence_check_partially_enclosed","-voltage_areas",]
let options["set_ref_libs"] = ["-add","-before","-clear","-library","-rebind","-ref_libs","-remove","-use_technology_lib",]
let options["set_reference"] = ["-block","-design","-of_object","-pin_map","-pin_rebind","-pin_verbose","-reference","-to_block","-to_module",]
let options["set_related_supply_net"] = ["-ground","-object_list","-power",]
let options["set_report_configuration"] = ["-columns","-default","-dynamic_width","-filler_string","-overflow_method","-report",]
let options["set_retention"] = ["-domain","-elements","-no_retention","-restore_condition","-restore_signal","-retention_condition","-retention_ground_net","-retention_power_net","-retention_supply_set","-save_condition","-save_signal","-update",]
let options["set_retention_control"] = ["-assert_r_mutex","-assert_rs_mutex","-assert_s_mutex","-domain","-restore_signal","-save_signal",]
let options["set_retention_elements"] = ["-elements",]
let options["set_route_opt_target_endpoints"] = ["-hold_endpoints","-hold_timing","-ldrc_objects","-reset","-scenario","-setup_endpoints","-setup_timing",]
let options["set_routing_rule"] = ["-clear","-default_rule","-max_layer_is_user","-max_layer_mode","-max_layer_mode_soft_cost","-max_routing_layer","-min_layer_is_user","-min_layer_mode","-min_layer_mode_soft_cost","-min_routing_layer","-no_rule","-rule",]
let options["set_rp_group_options"] = ["-alignment","-allow_non_rp_cells","-allow_non_rp_cells_on_blockages","-anchor_column","-anchor_corner","-anchor_row","-group_orientation","-move_effort","-optimization_restriction","-pin_name","-place_around_fixed_cells","-rp_only_keepout_margin","-tiling_type","-utilization","-x_offset","-y_offset",]
let options["set_scenario_status"] = ["-active","-all","-cell_em","-dynamic_power","-hold","-leakage_power","-max_capacitance","-max_transition","-min_capacitance","-none","-setup","-signal_em",]
let options["set_scope"] = []
let options["set_segment_budget_constraints"] = ["-delay","-from","-remove","-rule","-to",]
let options["set_sense"] = ["-clock_leaf","-clocks","-negative","-positive","-pulse","-stop_propagation","-type",]
let options["set_shaping_options"] = ["-add_channel_blockages","-guard_band_size","-keep_top_level_together","-min_channel_size","-reset","-utilization_slack",]
let options["set_si_delay_analysis"] = ["-aggressors","-exclude","-ignore_arrival","-victims",]
let options["set_signal_io_constraints"] = ["-constraint","-file","-io_guide_object",]
let options["set_site_array_stack_order"] = ["-above","-below","-bottom","-lower","-raise","-top",]
let options["set_size_only"] = ["-all_instances",]
let options["set_snap_setting"] = ["-class","-cursor_edge","-default","-edge_radius","-enabled","-fix_orientation","-macro_by_color","-object_edge","-preferred_track","-snap","-user_grid",]
let options["set_starrc_in_design"] = ["-config",]
let options["set_supernet_exceptions"] = ["-disable_cells","-pins",]
let options["set_svf"] = ["-append","-off","-replace",]
let options["set_switching_activity"] = ["-base_clock","-corners","-modes","-path_sources","-period","-scenarios","-state_condition","-static_probability","-toggle_rate",]
let options["set_target_library_subset"] = ["-clock","-data","-dont_use","-objects","-only_here","-top",]
let options["set_technology"] = ["-node",]
let options["set_temperature"] = ["-clear","-corners","-min","-object_list",]
let options["set_threshold_voltage_group_type"] = ["-type",]
let options["set_timing_derate"] = ["-aocvm_guardband","-cell_check","-cell_delay","-clock","-corners","-data","-dynamic","-early","-fall","-increment","-late","-max","-min","-net_delay","-pocvm_coefficient_scale_factor","-pocvm_guardband","-rise","-static","-variation",]
let options["set_timing_paths_disabled_blocks"] = ["-all_sub_blocks",]
let options["set_track_constraint"] = ["-block","-grid","-label","-layer","-mask","-offset","-origin","-track_direction",]
let options["set_user_units"] = ["-input","-output","-type","-value",]
let options["set_via_def"] = ["-pitch","-size","-via_def","-vias",]
let options["set_via_ladder_constraints"] = ["-pins",]
let options["set_via_ladder_rules"] = ["-all_clock_inputs","-all_clock_outputs","-all_instances_of","-all_pins_driving","-default_ladders","-master_pin_map","-master_pin_map_file","-remove_all_rules",]
let options["set_via_ladder_spacing"] = ["-cells","-distance","-lib_cells",]
let options["set_view_switch_list"] = ["-design","-global","-library",]
let options["set_virtual_pad"] = ["-coordinate","-layer","-net",]
let options["set_voltage"] = ["-cell","-corners","-dynamic","-min","-min_dynamic","-object_list","-pg_pin_name",]
let options["set_voltage_area"] = ["-add_cells","-add_power_domains","-ground","-is_fixed","-merge_regions","-name","-power","-remove_all_cells","-remove_cells","-remove_power_domains",]
let options["set_voltage_area_shape"] = ["-above","-add_cells","-below","-bottom","-lower","-raise","-remove_all_cells","-remove_cells","-top",]
let options["set_vsdc"] = ["-append","-off","-replace",]
let options["set_vt_filler_rule"] = ["-filler_cells","-quiet","-silent","-vt_type",]
let options["set_working_design"] = ["-level","-pop","-push",]
let options["set_working_design_stack"] = []
let options["shape_blocks"] = ["-channels","-constraint_file","-host_options","-incremental","-pg_strategy",]
let options["signoff_calculate_hier_antenna_property"] = ["-contact_layers","-contact_layers_between_m0_diffusion","-diffusion_layers","-gate_class1_marking_layers","-gate_class2_marking_layers","-gate_class3_marking_layers","-m0_layers_for_diffusion_connection","-m0_layers_for_poly_connection","-poly_layers","-report_diodes","-top_cell_pin_only","-treat_source_drain_as_diodes","-v0_layers_between_m1_m0",]
let options["signoff_check_design"] = ["-read_frame_view","-short_with_metal_fill",]
let options["signoff_check_drc"] = ["-auto_eco","-check_all_runset_layers","-coordinates","-error_data","-excluded_coordinates","-pre_eco_design","-select_layers","-select_rules","-unselect_rules",]
let options["signoff_create_metal_fill"] = ["-all_runset_layers","-auto_eco","-coordinates","-excluded_coordinates","-fill_all_tracks","-mode","-nets","-output_colored_fill","-pre_eco_design","-remove_by_rule","-report_density","-select_layers","-timing_preserve_setup_slack_threshold","-track_fill","-track_fill_parameter_file",]
let options["signoff_fix_drc"] = ["-coordinates","-excluded_coordinates","-max_number_repair_loop","-nets","-select_rules","-start_repair_loop","-timing_preserve_setup_slack_threshold","-unselect_rules",]
let options["signoff_fix_isolated_via"] = ["-check_only","-error_data","-save_design","-track_fill_runset_include_file","-update_track_fill",]
let options["signoff_report_metal_density"] = ["-coordinates","-output","-select_layers","-starting_point",]
let options["size_cell"] = ["-lib_cell","-max_distance_to_spare_cell","-not_spare_cell_aware",]
let options["sizeof_collection"] = []
let options["snap_cells_to_block_grid"] = ["-cells","-designs","-grid",]
let options["snap_object_shapes"] = ["-bottom","-edge_number","-edge_policy","-grid","-left","-right","-top",]
let options["snap_objects"] = []
let options["sort_collection"] = ["-descending","-dictionary",]
let options["source"] = ["-continue_on_error","-echo","-verbose",]
let options["split_clock_cells"] = ["-cells","-loads",]
let options["split_constraints"] = ["-compress","-corners","-design_subblocks","-force","-hier_abstract_subblocks","-modes","-nosplit","-output","-sdc_only","-upf_only",]
let options["split_fanout"] = ["-cell_prefix","-driver","-hierarchy","-lib_cell","-loads","-max_distance_for_incomplete_route","-max_fanout","-net","-net_prefix","-on_route","-respect_blockages",]
let options["split_multibit"] = ["-cells","-exclude_instance","-lib_cells","-path_groups","-slack_threshold",]
let options["split_objects"] = ["-gap","-gap_min_spacing","-ignore_end_cap","-line","-rect",]
let options["split_polygons"] = ["-objects","-output","-split",]
let options["split_rdl_routes"] = ["-from_layers","-mode","-nets","-nets_in_file","-number_of_routes","-objects","-spacings","-to_layers","-via_interval","-widths",]
let options["spread_objects"] = ["-anchor","-from","-margin","-parent","-to","-vertical",]
let options["spread_spare_cells"] = ["-boundary","-cells","-density_aware_ratio","-ignore_blockage_types","-voltage_areas",]
let options["spread_wires"] = ["-min_jog_length","-min_jog_spacing_by_layer_name","-pitch","-timing_preserve_hold_slack_threshold","-timing_preserve_nets","-timing_preserve_setup_slack_threshold",]
let options["start_busplan_gui"] = []
let options["start_gui"] = ["-file","-no_windows",]
let options["stop_gui"] = []
let options["suppress_message"] = []
let options["swap_objects"] = []
let options["synthesize_clock_trees"] = ["-clocks","-postroute","-propagate_only","-routed_clock_stage",]
let options["synthesize_clock_trunk_endpoints"] = ["-blocks","-clocks","-estimate_timing","-host_options","-work_dir",]
let options["synthesize_clock_trunks"] = ["-clock",]
let options["synthesize_multisource_clock_subtrees"] = ["-clocks","-from","-list_only","-to",]
let options["synthesize_multisource_clock_taps"] = ["-clocks",]
let options["synthesize_multisource_global_clock_trees"] = ["-leaves","-lib_cells","-nets","-prefix","-roots","-skip_pin_connections","-use_zroute_for_pin_connections",]
let options["transform_polygons"] = ["-coordinate","-inverse","-objects","-orientation",]
let options["trim_pg_mesh"] = ["-drc","-layers","-nets","-shapes","-trim_to","-types","-undo","-verbose",]
let options["unalias"] = []
let options["uncommit_block"] = ["-design","-remove_design","-type","-verbose",]
let options["undo"] = ["-check_only","-levels","-marker","-silent",]
let options["ungroup_cells"] = ["-all","-flatten","-simple_names",]
let options["uniquify"] = ["-uniquify_children","-verbose",]
let options["uniquify_block"] = ["-library",]
let options["unsuppress_message"] = []
let options["update_constraint_mapping_file"] = ["-remove_all","-remove_blocks","-remove_types",]
let options["update_timing"] = ["-full",]
let options["upf_version"] = []
let options["verify_rail_integrity"] = ["-integrity_layout_strategies","-script_only",]
let options["verify_via_ladders"] = ["-nets","-shift_vias_on_transition_layers",]
let options["which"] = []
let options["widen_wires"] = ["-spreading_widening_relative_weight","-timing_preserve_hold_slack_threshold","-timing_preserve_nets","-timing_preserve_setup_slack_threshold","-widen_widths_by_layer_name",]
let options["win_select_objects"] = ["-again_at","-at","-create_slct_buses","-index","-intersect","-line","-radius","-root","-slct_targets","-slct_targets_operation","-visible","-within",]
let options["win_set_filter"] = ["-class","-expand_cell_types","-filter","-highlighted_only","-layer","-start_level","-stop_level","-user_filter","-user_filter_cmd","-visible",]
let options["win_set_select_class"] = ["-all","-visible",]
let options["write_aif"] = ["-bumps","-hierarchy","-use_port_name",]
let options["write_app_var"] = ["-all","-only_changed_vars","-output",]
let options["write_blackbox_timing_script"] = ["-qtm_directory","-qtm_format",]
let options["write_budgets"] = ["-blocks","-compress","-design_subblocks","-force","-full_budget_blocks","-hier_abstract_subblocks","-nosplit","-output","-shell_subblocks","-top","-verbose",]
let options["write_busplans"] = ["-implementation_script","-multi_cycle_script","-xml_file",]
let options["write_cell_expansion"] = ["-output","-scale_factor",]
let options["write_def"] = ["-bus_delimiters","-compress","-convert_sites","-exclude","-exclude_physical_status","-include","-include_physical_status","-include_tech_via_definitions","-no_marker_layer","-objects","-only_master_variant","-traverse_physical_hierarchy","-units","-version","-via_as_fixed",]
let options["write_default_pg_pattern"] = ["-output_filename","-type",]
let options["write_dff_trace_filters"] = ["-filename","-overwrite","-type",]
let options["write_drc_error_data"] = ["-error_data","-file_name","-overwrite",]
let options["write_ems_rules"] = ["-all","-overwrite","-rule",]
let options["write_floorplan"] = ["-add_def_dependencies","-blocks","-compress","-def_units","-def_version","-exclude","-force","-format","-include","-nosplit","-objects","-output",]
let options["write_frame_options"] = ["-block","-format","-library","-output",]
let options["write_gds"] = ["-allow_design_mismatch","-bbox_list","-block_map","-bus_delimiters","-compress","-connect_below_cut_metal","-design","-disable_output_mask_layers","-exclude_empty_block","-fill","-flat_vias","-foreign","-hierarchy","-ignore_cut_datatype_tbl_mapping","-instance_property","-keep_data_type","-layer_map","-layer_map_format","-layers","-lib_cell_view","-library","-long_names","-mask_shifted_suffix","-mask_shifted_suffix_without_constraint","-merge_conflict_suffix","-merge_files","-merge_gds_top_cell","-merge_overwrite_conflicting_cell","-net_property","-no_marker_layer","-output_net_text","-output_pin","-pin_property","-propagate_pin_mask_to_via_metal","-rename_cell","-switch_view_list","-units","-use_block_name","-via_matrix_property","-view","-write_default_layers","-write_instance_blockage_mask","-write_instance_via_mask",]
let options["write_io_constraints"] = ["-filename","-format",]
let options["write_lef"] = ["-design","-include","-library","-properties","-slice_polygon","-version",]
let options["write_lib_package"] = ["-blocks","-exclude_design_view","-exclude_ref_libs","-library","-verbose",]
let options["write_macro_relative_location"] = ["-file","-hierarchical",]
let options["write_matching_types"] = ["-file_name","-from_existing_assignment",]
let options["write_name_map"] = []
let options["write_net_estimation_rules"] = ["-format","-net_estimation_rule","-script",]
let options["write_oasis"] = ["-allow_design_mismatch","-bbox_list","-block_map","-bus_delimiters","-compress","-connect_below_cut_metal","-design","-fill","-flat_vias","-foreign","-hierarchy","-ignore_cut_datatype_tbl_mapping","-instance_property","-keep_data_type","-layer_map","-layer_map_format","-layers","-lib_cell_view","-library","-mask_shifted_suffix","-mask_shifted_suffix_without_constraint","-merge_conflict_suffix","-merge_files","-merge_oasis_top_cell","-merge_overwrite_conflicting_cell","-net_property","-no_marker_layer","-output_net_text","-output_pin","-pin_property","-propagate_pin_mask_to_via_metal","-rename_cell","-switch_view_list","-units","-use_block_name","-via_matrix_property","-view","-write_default_layers","-write_instance_blockage_mask","-write_instance_via_mask",]
let options["write_parasitics"] = ["-compress","-hierarchical","-no_name_mapping","-output",]
let options["write_pin_constraints"] = ["-bundle_pin_constraint","-bundles","-cells","-exclude_nets","-file_name","-from_existing_pins","-nets","-physical_pin_constraint","-pins","-ports","-self","-topological_map",]
let options["write_rail_integrity_strategy"] = ["-output",]
let options["write_routes"] = ["-nets","-objects","-output",]
let options["write_rp_groups"] = ["-all","-blockage","-cell","-create","-file_name","-hierarchical","-nosplit","-rp_group",]
let options["write_saif"] = ["-cells","-corners","-duration","-exclude_sdpd","-modes","-no_hierarchy","-propagated","-scenarios","-switching_activity_types",]
let options["write_sanity_check_point"] = ["-output","-stage",]
let options["write_script"] = ["-compress","-corners","-exclude","-force","-format","-include","-modes","-nosplit","-output",]
let options["write_sdc"] = ["-compress","-corner","-exclude","-include","-mode","-nosplit","-output","-scenario","-version",]
let options["write_shadow_eco"] = ["-cells","-command_style","-disable_undo","-nets","-output","-reporting_style","-self","-set_shadow_status",]
let options["write_taps"] = ["-file",]
let options["write_tech_file"] = ["-library",]
let options["write_verilog"] = ["-compress","-exclude","-force_no_reference","-force_reference","-hierarchy","-include","-only_master_variant","-split_bus","-switch_view_list","-top_module_first",]
let options["write_virtual_pad_file"] = []
let options["CmdSpec"] = []
let options["LoadBLT"] = []
let options["LoadLib"] = []
let options["LoadLib_high"] = []
let options["LoadNewFlowManagerBuilder"] = []
let options["NflTclFindTheFullPath"] = []
let options["POST_all_steps"] = []
let options["P_all_inputs_minus_clocks"] = []
let options["P_apply_scon"] = []
let options["P_astro_upsize_script"] = ["-fix_ratio","-out","-vio_report",]
let options["P_back2back"] = ["-out",]
let options["P_cell_usage"] = ["-out",]
let options["P_connect_net_to_pin_of_cell"] = ["-net","-pin",]
let options["P_continue"] = ["-scr","-snapshot",]
let options["P_create_port"] = []
let options["P_create_unique_object_name"] = ["-basename","-max_integer","-no_warning","-object","-start_integer",]
let options["P_debug"] = []
let options["P_drv_cell"] = []
let options["P_echo"] = []
let options["P_elapsed_time"] = ["-end","-mesg","-quiet","-start","-timestamp",]
let options["P_error"] = []
let options["P_fatal"] = []
let options["P_find_common_collection"] = []
let options["P_find_file_ext"] = ["-ext","-only","-tag",]
let options["P_find_proc"] = ["-only","-tag",]
let options["P_get_best_driver"] = ["-load","-ref","-ref_pin",]
let options["P_get_cells"] = []
let options["P_get_children"] = []
let options["P_get_clock_pins"] = []
let options["P_get_clockgate_clock_pins"] = []
let options["P_get_clockgate_enable_pins"] = []
let options["P_get_clockgate_output_pins"] = []
let options["P_get_clocks"] = []
let options["P_get_data_pins"] = []
let options["P_get_design_name"] = []
let options["P_get_enable_pins"] = []
let options["P_get_hier_scon"] = []
let options["P_get_lib"] = []
let options["P_get_libcells"] = []
let options["P_get_libpins"] = []
let options["P_get_license"] = []
let options["P_get_makevars"] = []
let options["P_get_nets"] = []
let options["P_get_object_pins"] = []
let options["P_get_objects"] = []
let options["P_get_output_pins"] = []
let options["P_get_pins"] = []
let options["P_get_ports"] = []
let options["P_get_preset_pins"] = []
let options["P_get_ref_name"] = []
let options["P_get_reset_pins"] = []
let options["P_get_scon_from_rtl"] = ["-latest","-rtlm","-rtlp","-sdm",]
let options["P_get_scr_proc_name"] = []
let options["P_get_si_pins"] = []
let options["P_get_so_pins"] = []
let options["P_get_variable_val"] = []
let options["P_hookup_port"] = ["-no_hier","-pin","-port",]
let options["P_info"] = []
let options["P_interrupt"] = ["-scr",]
let options["P_is_DC"] = []
let options["P_is_ENCOUNTER"] = []
let options["P_is_FE"] = []
let options["P_is_ICC"] = []
let options["P_is_ICC2"] = []
let options["P_is_MAGMA"] = []
let options["P_is_MG"] = []
let options["P_is_PC"] = []
let options["P_is_PSYN"] = []
let options["P_is_PT"] = []
let options["P_is_SNPS"] = []
let options["P_is_collection"] = []
let options["P_is_synopsys_tool"] = []
let options["P_lminus"] = []
let options["P_process_high_fanout_signal"] = []
let options["P_process_synchronizer_cells"] = []
let options["P_proj_analyze"] = ["-base","-design","-hier","-inc","-pkg","-prm","-src","-type",]
let options["P_proj_change_names"] = ["-nohier","-rule","-verbose",]
let options["P_put_scan_attributes"] = []
let options["P_read_lib_db"] = []
let options["P_rename_soft_macro"] = ["-prefix",]
let options["P_report_logic_levels"] = []
let options["P_rpt_unmapped"] = ["-output",]
let options["P_run_cmd"] = []
let options["P_save_tmp_db"] = []
let options["P_seal_cmd"] = []
let options["P_set_disable"] = []
let options["P_set_fix_multiple_port_nets"] = ["-nohier",]
let options["P_set_fp"] = []
let options["P_set_maxdelay"] = []
let options["P_set_mcp"] = ["-edge","-fall_from","-fall_through","-fall_to","-from","-reference","-rise_from","-rise_through","-rise_to","-through","-to","-type",]
let options["P_set_mindelay"] = []
let options["P_sid"] = []
let options["P_sod"] = []
let options["P_source_proj_setup"] = ["-before","-force",]
let options["P_split"] = ["-char","-count","-l2r","-str",]
let options["P_store_syn_vars"] = ["-group","-proc",]
let options["P_swap_srflop"] = ["-lib","-log","-srflop_list",]
let options["P_timestamp"] = ["-prefix","-quiet",]
let options["P_true"] = []
let options["P_unloaded_regs"] = []
let options["P_warning"] = []
let options["T_absName"] = []
let options["T_check_vars"] = []
let options["T_chmod"] = []
let options["T_closeLog"] = []
let options["T_cp"] = []
let options["T_debug"] = []
let options["T_debugF"] = []
let options["T_debugS"] = []
let options["T_diff"] = []
let options["T_dumpState"] = []
let options["T_error"] = []
let options["T_errorF"] = []
let options["T_eval"] = []
let options["T_existSet"] = []
let options["T_fatal"] = []
let options["T_fatalF"] = []
let options["T_fileCheck"] = []
let options["T_fileCheckP"] = []
let options["T_fstring"] = []
let options["T_fstring_add_index"] = []
let options["T_fstring_det_range"] = []
let options["T_getLineCount"] = []
let options["T_getScrDir"] = []
let options["T_getScrName"] = []
let options["T_getSubName"] = []
let options["T_gets"] = []
let options["T_info"] = []
let options["T_isNumber"] = []
let options["T_lcommon"] = []
let options["T_lminus"] = []
let options["T_ln"] = []
let options["T_lreverse"] = []
let options["T_lsearch"] = []
let options["T_lunique"] = []
let options["T_mkdir"] = []
let options["T_mputs"] = []
let options["T_openLog"] = []
let options["T_parseArgs"] = []
let options["T_parseStatus"] = []
let options["T_printUsage"] = []
let options["T_printVar"] = []
let options["T_printVarDebug"] = []
let options["T_puts"] = []
let options["T_readWriteStatus"] = []
let options["T_remove_start_end_spaces"] = []
let options["T_reset_T_Quiet"] = []
let options["T_rm"] = []
let options["T_sel2list"] = []
let options["T_set_T_Quiet"] = []
let options["T_setarr"] = []
let options["T_singleList"] = []
let options["T_spin"] = []
let options["T_split"] = []
let options["T_touch"] = []
let options["T_true"] = []
let options["T_unset"] = []
let options["T_unsetIndex"] = []
let options["T_warning"] = []
let options["T_warningF"] = []
let options["__h2t_create_shape_icc2"] = []
let options["__h2t_create_trunk_snps"] = []
let options["__h2t_get_pin_port_layer_width"] = []
let options["__h2t_get_port_pin_layer_width"] = []
let options["__h2t_process_layerless_pin_port"] = []
let options["__h2t_set_custom_attr"] = []
let options["_h2t_apply_nets_order"] = []
let options["_h2t_format_bbox"] = []
let options["_h2t_process_opts"] = []
let options["_load_Oratcl"] = []
let options["_load_tclreadline"] = []
let options["aH"] = []
let options["aV"] = []
let options["add_attribute"] = []
let options["add_exception_clm_from_fifoentry"] = []
let options["add_exception_on_gasket_flops"] = []
let options["add_exception_on_lane_in_flops"] = []
let options["add_exception_on_stepdown_flops"] = []
let options["add_post_stage"] = []
let options["add_post_step"] = []
let options["add_pre_stage"] = []
let options["add_pre_step"] = []
let options["add_set_sense_to_bypass_mux"] = []
let options["als_add_to_last_command"] = []
let options["als_change_highlight"] = ["-add","-color","-remove",]
let options["als_get_highlight"] = ["-color",]
let options["als_history_grep"] = []
let options["als_list_attributes_grep"] = []
let options["als_load_aliases"] = []
let options["als_pop_from_cell"] = []
let options["als_print_all_connected"] = []
let options["als_print_collection"] = ["-annotate","-attribute",]
let options["als_print_list"] = ["-range",]
let options["als_push_to_cell"] = []
let options["als_stages"] = []
let options["als_steps"] = []
let options["analyze_timing_correlation"] = ["-clear_work_dir","-delay_calculation_style","-disable_compatibility_settings","-enable_ccs_rcv_cap","-enable_compatibility_settings","-overwrite_work_dir","-pass_rate_threshold","-pt_exec_path","-pt_post_link_script","-pt_pre_link_script","-pt_search_path","-pt_user_script","-save_pt_session","-scenarios","-script_only","-si_enable_analysis","-use_pt_save_session","-verbose","-waveform_analysis_mode","-work_dir",]
let options["append_var"] = []
let options["apr_define_user_attributes"] = []
let options["apr_duplicate_slos_return_hfn"] = []
let options["apr_gen_latest_nlib_manifest"] = []
let options["apr_get_aocvm_voltage_for_corner"] = []
let options["apr_icc_ctsizer_run_flow"] = []
let options["apr_icc_lr_run_flow"] = []
let options["apr_icc_lrdp_run_flow"] = []
let options["apr_lr_check_env_vars"] = []
let options["apr_lr_overrride_tool_versions"] = []
let options["apr_lr_ovr_tools"] = []
let options["apr_lr_restore_saved_vars_and_tool_versions"] = []
let options["apr_lr_setup_run_dir"] = []
let options["apr_netlist"] = []
let options["apr_pt_ctsizer_run_flow"] = []
let options["apr_pt_lr_run_flow"] = []
let options["apr_pt_lrdp_run_flow"] = []
let options["apr_read_aocvm"] = ["-corner","-table",]
let options["apr_reports"] = []
let options["apr_run_rumba_flow"] = []
let options["apr_save_stage"] = []
let options["assign_track_in_bin"] = []
let options["auto_execok"] = []
let options["auto_import"] = []
let options["auto_load"] = []
let options["auto_load_index"] = []
let options["auto_mkindex"] = []
let options["auto_mkindex_old"] = []
let options["auto_proc"] = []
let options["auto_qualify"] = []
let options["auto_reset"] = []
let options["bab_create_new_mw_cell"] = []
let options["block_grid"] = []
let options["bound_to_lego"] = []
let options["build_trunking_bboxes_for_fivr_dt62_right_fp"] = []
let options["cP"] = []
let options["cPx"] = []
let options["cPy"] = []
let options["calc_area"] = []
let options["calculate_tracks"] = []
let options["check_wires_for_pushdown"] = ["-nets",]
let options["checkerboard_horizontal"] = []
let options["checkerboard_vertical"] = []
let options["cips_source"] = []
let options["clean_floorplan"] = []
let options["clp"] = []
let options["col_release_data"] = []
let options["compare_checksum"] = ["-icc2","-pt",]
let options["convert_nets_for_swizzle"] = []
let options["cp_block"] = []
let options["cr_align_repeaters_to_trunks"] = ["-layer","-move_repeater_routing","-nets","-repeater_name",]
let options["cr_boolean"] = []
let options["cr_check_ports"] = []
let options["cr_check_terminals"] = []
let options["cr_checkerboard_repeaters"] = ["-nets","-preview","-repeater_collection","-repeater_name_pattern","-spread_mult",]
let options["cr_complete_nets_detail"] = ["-max_layer","-min_layer","-nets","-shield","-shield_name",]
let options["cr_complete_track_region"] = ["-fill_trunk_name","-pattern","-track_region",]
let options["cr_create_boundary_route_guide"] = []
let options["cr_create_cover_routing_blockage"] = []
let options["cr_create_finish_metal"] = ["-backoff","-backoff_multiplier","-backoff_override_value","-bbox","-color","-exclude_power","-extra_min_width_shrink","-get_rid_of_min_width","-layer","-preview","-width",]
let options["cr_create_ladders"] = ["-add_routing_blockage","-cells","-do_not_add_vias","-layer_width_straps","-pin","-preview","-use_full_cell_bbox",]
let options["cr_create_terminals"] = ["-add_metal","-additional_attributes","-bbox","-center_coord","-custom_tag","-do_not_check_shorts","-edge","-hi","-layer","-lo","-of_cell","-port_names","-preview","-shield","-shield_name","-shield_type","-term_bbox","-term_length","-term_length_multiplier","-terminal_names","-track_num","-track_step","-width",]
let options["cr_create_track_region"] = ["-dont_delete_existing_tracks","-pattern","-track_region",]
let options["cr_create_track_shared_trunks"] = ["-complete_routing","-do_not_check_shorts","-exclude_cells","-find_free_tracks","-h_track_freedom","-ignore_boundary_guide","-layer","-nets","-of_cells","-preview","-pullback_lb","-pullback_rt","-ref_net","-ref_obj","-shield","-shield_name","-shield_type","-to_trunk","-track_num","-use_ref_obj_layer","-v_track_freedom","-width",]
let options["cr_create_tracks_region"] = ["-anchor","-bbox","-extend","-layer","-name","-of_track_width","-pattern",]
let options["cr_create_trunk"] = ["-bbox","-do_not_check_shorts","-exclude_cells","-find_free_tracks","-gravity","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-layer","-net_bbox_override","-nets","-num_wires","-of_cells","-preview","-pullback_lb","-pullback_rt","-shield","-shield_name","-shield_type","-track_num","-track_step","-v_track_freedom","-width",]
let options["cr_create_trunk_from_here_to_there"] = ["-avoid_area","-avoid_layers","-bloat_channel","-bloat_zone","-channel","-clean_channel_tracks","-clean_named_zone_tracks","-clean_zone_tracks","-clear","-clear_zone","-create_port","-custom_attr","-custom_tag","-cutout_area","-cutout_bloat","-cutout_pullback","-display_channel","-display_zone","-do_not_check_shorts","-do_not_cutout_nets","-edge_overhang","-edge_pullback","-edge_pullback_custom","-find_free_tracks","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-just_clear_zone","-log_track_number","-nets","-nets_order","-num_wires","-preview","-remove","-reuse_channel_tracks","-reuse_zone_tracks","-shield","-shield_name","-shield_pullback","-shield_type","-skip_tracks","-snap_to_track","-stepping","-swizzle","-topology","-track_overrides_pin","-trim_area","-use_pin","-v_track_freedom","-verbose","-wrong_way_metal","-zone",]
let options["cr_create_trunk_on_track"] = ["-bbox","-custom_tag","-delete","-do_not_check_shorts","-exclude_cells","-find_free_tracks","-group","-h_track_freedom","-hi","-ignore_boundary_guides","-include_power_for_free_tracks","-layer","-lo","-net_bbox_override","-net_path_area","-nets","-num_wires","-of_cells","-preview","-pullback_lb","-pullback_rt","-shield","-shield_name","-shield_type","-track_num","-track_step","-v_track_freedom","-width",]
let options["cr_create_trunk_straps_for_pins"] = ["-do_not_check_shorts","-extension_direction","-extension_distance","-layer","-nets","-of_cells","-preview","-route_type","-shield","-shield_name","-snap_to_track","-width",]
let options["cr_create_trunks_from_pin_to_pin"] = ["-complete_routing","-dir_follows_sign","-do_not_check_shorts","-extensions","-find_free_tracks","-h_track_freedom","-layer_legs","-nets","-preview","-pullback_lb","-pullback_rt","-return_track_info","-shield","-shield_name","-shield_type","-start_from","-v_track_freedom",]
let options["cr_create_trunks_from_pins_to_point"] = ["-complete_routing","-create_terminals","-do_not_check_shorts","-extension_direction","-extension_distance","-layer","-min_layer","-nets","-of_cells","-pin_layer","-preview","-push_pins","-shield","-shield_name","-shield_type","-snap_to_track","-use_routespec","-width",]
let options["cr_create_trunks_from_pins_to_trunk"] = ["-cluster_proximity","-complete_routing","-do_not_check_shorts","-find_free_tracks","-h_track_freedom","-include_power_for_free_tracks","-layer","-min_layer","-nets","-of_cells","-offset_cell_pin","-pin_direction","-preview","-pullback_lb","-pullback_rt","-shield","-shield_name","-shield_type","-track_offset","-use_existing_shape","-use_routespec","-v_track_freedom","-width",]
let options["cr_create_trunks_from_ports"] = ["-backoff_from_ports","-complete_routing","-do_not_check_shorts","-extension_direction","-extension_distance","-find_free_tracks","-h_layer_override","-h_track_freedom","-ignore_boundary_guide","-include_power_for_free_tracks","-layer","-min_layer","-nets","-preview","-pullback_lb","-pullback_rt","-shield","-shield_name","-shield_type","-use_port_width","-use_routespec","-v_layer_override","-v_track_freedom","-width",]
let options["cr_create_trunks_from_ports_to_trunk"] = ["-backoff_from_ports","-complete_routing","-do_not_check_shorts","-find_free_tracks","-h_layer_override","-h_track_freedom","-layer","-min_layer","-nets","-preview","-pullback_lb","-pullback_rt","-shield","-shield_name","-shield_type","-use_routespec","-v_layer_override","-v_track_freedom","-width",]
let options["cr_create_vias_for_custom_shields"] = ["-advanced_drc_off","-delete","-shield_layers","-shield_nets","-tag",]
let options["cr_create_vias_for_preroutes"] = ["-advanced_drc_off","-bbox","-delete","-from_layer","-nets","-tag","-to_layer",]
let options["cr_create_wire_on_track"] = ["-adjust_wire","-area_bbox","-delete","-do_not_check_shorts","-group","-layer","-net_name","-num_wires","-of_track_width","-preview","-shield","-shield_name","-track_num","-track_step",]
let options["cr_delete_track_region"] = ["-pattern","-reset_to_default","-track_region",]
let options["cr_extract_track_shared_trunks"] = ["-layer_from","-layer_to","-min_length","-nets","-output","-preview","-start_track_num","-width_from","-width_to",]
let options["cr_get_agressor_locations"] = ["-backoff","-backoff_multiplier","-backoff_override_value","-bbox","-color","-exclude_power","-extra_min_width_shrink","-get_rid_of_min_width","-layer","-preview","-width",]
let options["cr_is_odd"] = []
let options["cr_place_repeaters"] = ["-append_suffix","-do_not_stagger","-exclude_cells","-layer","-layer_weight","-nets","-of_cells","-preview","-remove","-repeater_cutlines","-repeater_distance","-repeater_locations","-repeater_name","-repeater_number","-repeater_relative_cutlines","-repeater_suffix","-repeater_type","-stagger_mult",]
let options["cr_report_failed_trunks"] = ["-layer","-nets","-width",]
let options["cr_restore_itar_attributes_on_nets"] = ["-nets","-user_attr",]
let options["cr_trim_antennas"] = ["-nets","-user_attr",]
let options["cr_trunk_flopped_nets_p2p"] = ["-hlayer","-hwidth","-main_trunk_layer","-main_trunk_loc","-main_trunk_ref_net","-nets","-position_sequentials","-preview","-repeater_distance","-repeater_locations","-repeater_name","-repeater_number","-repeater_type","-start_from","-track_step","-vlayer","-vwidth",]
let options["create_bs_upf"] = ["-blocks","-budget_shell_nlib","-budget_shell_nlib_dir","-debug",]
let options["create_cell_pin_fingers"] = []
let options["create_constraint_file_header"] = []
let options["create_ctp_block_constraints"] = []
let options["create_fib_con_vias"] = []
let options["create_gigfig_from_ply"] = []
let options["create_marker_around"] = ["-micron","-objects",]
let options["create_offgrid_tracks_for_hip_pin"] = []
let options["create_partition_tcon"] = []
let options["create_pg_mesh_pattern"] = ["-layers","-parameters","-via_rule",]
let options["crfm"] = []
let options["cs"] = []
let options["cul"] = []
let options["decode_snps_version"] = []
let options["delete_dice_diff_record_iter"] = []
let options["delete_dice_key_iter"] = []
let options["delite_save_stage"] = []
let options["dice_annotation_get_allowed_values"] = []
let options["dice_annotation_get_category"] = []
let options["dice_annotation_get_changed_time_from_file"] = []
let options["dice_annotation_get_choice_info"] = []
let options["dice_annotation_get_choice_label"] = []
let options["dice_annotation_get_default_sub_value"] = []
let options["dice_annotation_get_default_value"] = []
let options["dice_annotation_get_description"] = []
let options["dice_annotation_get_html_description"] = []
let options["dice_annotation_get_keys"] = []
let options["dice_annotation_get_keys_with_value"] = []
let options["dice_annotation_get_label"] = []
let options["dice_annotation_get_last_changed_time"] = []
let options["dice_annotation_get_name"] = []
let options["dice_annotation_get_previous_value"] = []
let options["dice_annotation_get_sub_value"] = []
let options["dice_annotation_get_sub_value_allowed_values"] = []
let options["dice_annotation_get_sub_value_data_type"] = []
let options["dice_annotation_get_sub_value_info"] = []
let options["dice_annotation_get_sub_value_label"] = []
let options["dice_annotation_get_sub_value_tags"] = []
let options["dice_annotation_get_type"] = []
let options["dice_annotation_get_value"] = []
let options["dice_annotation_get_value_from_file"] = []
let options["dice_annotation_get_value_source"] = []
let options["dice_annotation_get_value_source_from_file"] = []
let options["dice_annotation_has_restricted_values"] = []
let options["dice_annotation_has_strict_value_enforcement"] = []
let options["dice_annotation_has_value"] = []
let options["dice_annotation_has_value_from_file"] = []
let options["dice_annotation_last_result_was_local"] = []
let options["dice_annotation_remove_data"] = []
let options["dice_annotation_revert_to_file"] = []
let options["dice_annotation_set_default_value"] = []
let options["dice_annotation_set_sub_value"] = []
let options["dice_annotation_set_value"] = []
let options["dice_clone_key"] = []
let options["dice_constraint_get_allowed_values"] = []
let options["dice_constraint_get_category"] = []
let options["dice_constraint_get_changed_time_from_file"] = []
let options["dice_constraint_get_choice_info"] = []
let options["dice_constraint_get_choice_label"] = []
let options["dice_constraint_get_default_sub_value"] = []
let options["dice_constraint_get_default_value"] = []
let options["dice_constraint_get_description"] = []
let options["dice_constraint_get_html_description"] = []
let options["dice_constraint_get_keys"] = []
let options["dice_constraint_get_keys_with_value"] = []
let options["dice_constraint_get_label"] = []
let options["dice_constraint_get_last_changed_time"] = []
let options["dice_constraint_get_name"] = []
let options["dice_constraint_get_previous_value"] = []
let options["dice_constraint_get_sub_value"] = []
let options["dice_constraint_get_sub_value_allowed_values"] = []
let options["dice_constraint_get_sub_value_data_type"] = []
let options["dice_constraint_get_sub_value_info"] = []
let options["dice_constraint_get_sub_value_label"] = []
let options["dice_constraint_get_sub_value_tags"] = []
let options["dice_constraint_get_type"] = []
let options["dice_constraint_get_value"] = []
let options["dice_constraint_get_value_from_file"] = []
let options["dice_constraint_get_value_source"] = []
let options["dice_constraint_get_value_source_from_file"] = []
let options["dice_constraint_has_restricted_values"] = []
let options["dice_constraint_has_strict_value_enforcement"] = []
let options["dice_constraint_has_value"] = []
let options["dice_constraint_has_value_from_file"] = []
let options["dice_constraint_last_result_was_local"] = []
let options["dice_constraint_remove_data"] = []
let options["dice_constraint_revert_to_file"] = []
let options["dice_constraint_set_default_value"] = []
let options["dice_constraint_set_sub_value"] = []
let options["dice_constraint_set_value"] = []
let options["dice_data_type_get"] = []
let options["dice_data_type_get_compressed_value"] = []
let options["dice_data_type_get_name"] = []
let options["dice_data_type_get_uncompressed_value"] = []
let options["dice_data_type_is_valid_format"] = []
let options["dice_data_type_is_valid_value"] = []
let options["dice_diff_record_accept_candidate_info"] = []
let options["dice_diff_record_accept_file_info"] = []
let options["dice_diff_record_do_comparison"] = []
let options["dice_diff_record_finish_comparison"] = []
let options["dice_diff_record_get_annotation"] = []
let options["dice_diff_record_get_constraint"] = []
let options["dice_diff_record_get_diff_records"] = []
let options["dice_diff_record_get_diff_records_iter"] = []
let options["dice_diff_record_get_key"] = []
let options["dice_diff_record_get_new_change_time"] = []
let options["dice_diff_record_get_new_user_name"] = []
let options["dice_diff_record_get_new_value"] = []
let options["dice_diff_record_get_new_value_source"] = []
let options["dice_diff_record_get_old_change_time"] = []
let options["dice_diff_record_get_old_user_name"] = []
let options["dice_diff_record_get_old_value"] = []
let options["dice_diff_record_get_old_value_source"] = []
let options["dice_diff_record_get_type"] = []
let options["dice_diff_record_iter_add_filter_to_include_record"] = []
let options["dice_diff_record_iter_clear_filters"] = []
let options["dice_diff_record_iter_count"] = []
let options["dice_diff_record_iter_empty"] = []
let options["dice_diff_record_iter_get_next"] = []
let options["dice_diff_record_iter_reset"] = []
let options["dice_discard_cell"] = []
let options["dice_get_annotation"] = []
let options["dice_get_annotations"] = []
let options["dice_get_configuration"] = []
let options["dice_get_configurations"] = []
let options["dice_get_constraint"] = []
let options["dice_get_constraints"] = []
let options["dice_get_data_type"] = []
let options["dice_get_key"] = []
let options["dice_get_key_types"] = []
let options["dice_get_records"] = []
let options["dice_key_add_key"] = []
let options["dice_key_add_to_group"] = []
let options["dice_key_attach_configuration"] = []
let options["dice_key_clear_configuration"] = []
let options["dice_key_get_alias"] = []
let options["dice_key_get_all_keys"] = []
let options["dice_key_get_attached_configuration"] = []
let options["dice_key_get_attached_configuration_from_file"] = []
let options["dice_key_get_cell_name"] = []
let options["dice_key_get_configuration_name"] = []
let options["dice_key_get_description"] = []
let options["dice_key_get_file_keys_in_group"] = []
let options["dice_key_get_groups"] = []
let options["dice_key_get_keys_in_group"] = []
let options["dice_key_get_keys_in_group_iter"] = []
let options["dice_key_get_name"] = []
let options["dice_key_get_type"] = []
let options["dice_key_group_get_keys"] = []
let options["dice_key_group_get_keys_of_type"] = []
let options["dice_key_group_get_types"] = []
let options["dice_key_group_has_type"] = []
let options["dice_key_isa_key_group"] = []
let options["dice_key_iter_count"] = []
let options["dice_key_iter_empty"] = []
let options["dice_key_iter_get_next"] = []
let options["dice_key_iter_reset"] = []
let options["dice_key_remove_all_keys"] = []
let options["dice_key_remove_from_group"] = []
let options["dice_key_remove_key"] = []
let options["dice_key_set_alias"] = []
let options["dice_key_set_configuration"] = []
let options["dice_key_set_description"] = []
let options["dice_key_set_name"] = []
let options["dice_needs_to_save"] = []
let options["dice_read_file"] = []
let options["dice_record_get_allowed_values"] = []
let options["dice_record_get_category"] = []
let options["dice_record_get_changed_time_from_file"] = []
let options["dice_record_get_choice_info"] = []
let options["dice_record_get_choice_label"] = []
let options["dice_record_get_default_sub_value"] = []
let options["dice_record_get_default_value"] = []
let options["dice_record_get_description"] = []
let options["dice_record_get_html_description"] = []
let options["dice_record_get_keys"] = []
let options["dice_record_get_keys_with_value"] = []
let options["dice_record_get_label"] = []
let options["dice_record_get_last_changed_time"] = []
let options["dice_record_get_name"] = []
let options["dice_record_get_previous_value"] = []
let options["dice_record_get_sub_value"] = []
let options["dice_record_get_sub_value_allowed_values"] = []
let options["dice_record_get_sub_value_data_type"] = []
let options["dice_record_get_sub_value_info"] = []
let options["dice_record_get_sub_value_label"] = []
let options["dice_record_get_sub_value_tags"] = []
let options["dice_record_get_type"] = []
let options["dice_record_get_value"] = []
let options["dice_record_get_value_from_file"] = []
let options["dice_record_get_value_source"] = []
let options["dice_record_get_value_source_from_file"] = []
let options["dice_record_has_restricted_values"] = []
let options["dice_record_has_strict_value_enforcement"] = []
let options["dice_record_has_value"] = []
let options["dice_record_has_value_from_file"] = []
let options["dice_record_isa_annotation"] = []
let options["dice_record_isa_constraint"] = []
let options["dice_record_last_result_was_local"] = []
let options["dice_record_remove_data"] = []
let options["dice_record_revert_to_file"] = []
let options["dice_record_set_default_value"] = []
let options["dice_record_set_sub_value"] = []
let options["dice_record_set_type"] = []
let options["dice_record_set_value"] = []
let options["dice_revert_to_file"] = []
let options["dice_save_file"] = []
let options["dice_write_copy_of_file"] = []
let options["dice_write_file"] = []
let options["dice_write_local_settings"] = []
let options["disable_debug_msg"] = []
let options["does_it_collide"] = []
let options["dp_fn_eco_create_net_shape"] = []
let options["dp_fn_eco_create_rename_eco_file"] = []
let options["dp_fn_eco_create_terminal"] = []
let options["dp_reports"] = []
let options["dp_save_stage"] = []
let options["dump_floorplan"] = []
let options["duplicate_blockages_from_hard_type_to_hard_macro_type"] = []
let options["eB"] = []
let options["eL"] = []
let options["eR"] = []
let options["eT"] = []
let options["ebb_bbox_poly"] = []
let options["edm"] = []
let options["enable_debug_msg"] = []
let options["even_or_odd"] = []
let options["exec_cp"] = []
let options["expand_bus"] = []
let options["expand_if_gvar_is_array"] = []
let options["exprs"] = []
let options["extract_post"] = []
let options["extract_pre"] = []
let options["extract_star"] = []
let options["fclego"] = []
let options["fclego_hier"] = []
let options["fcommand"] = []
let options["find_clock_name_and_frequency"] = []
let options["fix_bs_nlib"] = []
let options["fix_min_libraries"] = []
let options["fix_module_name"] = []
let options["flatLappend"] = []
let options["flatLinsert"] = []
let options["flow_checker"] = []
let options["flow_lib_setup"] = []
let options["fs"] = []
let options["fusion_reports"] = []
let options["fusion_save_stage"] = []
let options["ga"] = []
let options["generate_structural_raw_rpt"] = []
let options["generate_structural_raw_rpt_for_unit"] = []
let options["getTerminatedProcess"] = []
let options["get_abutted_clock_nets"] = []
let options["get_clock_boundary_cell"] = []
let options["get_clock_driving_cell"] = []
let options["get_constraint_file_by_keyword"] = []
let options["get_description_from_help"] = []
let options["get_die_area"] = []
let options["get_die_area2"] = []
let options["get_filler_cell_from_icv_def"] = []
let options["get_hier"] = []
let options["get_info"] = []
let options["get_leaf"] = []
let options["get_non_abutted_clock_pins"] = []
let options["get_object_name"] = []
let options["get_options_from_help"] = []
let options["get_options_from_man"] = []
let options["get_power_domain_elements"] = []
let options["get_proc_source"] = []
let options["get_proc_source_history"] = []
let options["get_tmp_var"] = []
let options["get_track_capacity"] = []
let options["get_track_capacity_from_100"] = []
let options["get_unix_variable"] = []
let options["get_visa_clock_stamp_pin"] = []
let options["getenv"] = []
let options["getsome_buffers"] = []
let options["getvar"] = ["-names","-nosubst","-quiet",]
let options["gh2"] = []
let options["gh_cjb"] = []
let options["glist_search_and_insert"] = []
let options["gnb"] = []
let options["gnnl"] = []
let options["greph"] = []
let options["gs"] = []
let options["gsn"] = []
let options["gui_change_layer"] = ["-layer","-object",]
let options["gui_change_via_def"] = ["-via","-via_def",]
let options["gui_change_via_size"] = ["-columns","-rows","-via",]
let options["gui_get_setting"] = ["-list","-setting","-window",]
let options["gui_highlight_nets_of_selected"] = ["-flylines",]
let options["gui_select_bounds_of_selected"] = []
let options["gui_select_bundles_of_selected"] = []
let options["gui_select_cells_of_selected"] = []
let options["gui_select_connected_net_shapes"] = ["-cross_net","-hierarchical",]
let options["gui_select_connected_rdl_net_shapes"] = []
let options["gui_select_connections_of_selected"] = []
let options["gui_select_constraint_groups_of_selected"] = []
let options["gui_select_input_connections_of_selected"] = []
let options["gui_select_macros_of_selected"] = []
let options["gui_select_matching_types_of_selected"] = []
let options["gui_select_mib_cells_of_selected"] = []
let options["gui_select_mib_connections_of_selected"] = []
let options["gui_select_net_buses_of_selected"] = []
let options["gui_select_net_routing_of_selected"] = []
let options["gui_select_net_shapes_of_selected"] = []
let options["gui_select_net_vias_of_selected"] = []
let options["gui_select_nets_of_selected"] = ["-hierarchical",]
let options["gui_select_objects_of_selected_edit_group"] = []
let options["gui_select_output_connections_of_selected"] = []
let options["gui_select_port_buses_of_selected"] = []
let options["gui_select_ports_of_selected_power_supply_nets"] = []
let options["gui_select_power_domains_of_selected"] = []
let options["gui_select_primary_power_supply_nets_of_selected"] = []
let options["gui_select_routing_corridors_of_selected"] = []
let options["gui_select_rp_blockages_of_selected"] = []
let options["gui_select_rp_groups_of_selected"] = []
let options["gui_select_shapes_of_selected"] = []
let options["gui_select_site_arrays_of_selected"] = []
let options["gui_select_site_rows_of_selected"] = []
let options["gui_select_supernets_of_selected"] = []
let options["gui_select_terminals_of_selected"] = []
let options["gui_select_topology_edges_of_selected"] = []
let options["gui_select_topology_nodes_of_selected"] = []
let options["gui_select_topology_of_selected"] = []
let options["gui_select_tracks_of_selected"] = []
let options["gui_select_voltage_areas_of_selected"] = []
let options["gui_set_select_menu_adds_to_selection"] = ["-value",]
let options["gui_set_setting"] = ["-setting","-value","-window",]
let options["gui_show_man_page"] = ["-apropos","-html",]
let options["h2t"] = ["-avoid_area","-avoid_layers","-bloat_channel","-bloat_zone","-channel","-clean_channel_tracks","-clean_named_zone_tracks","-clean_zone_tracks","-clear","-clear_zone","-create_port","-custom_attr","-custom_tag","-cutout_area","-cutout_bloat","-cutout_pullback","-display_channel","-display_zone","-do_not_check_shorts","-do_not_cutout_nets","-edge_overhang","-edge_pullback","-edge_pullback_custom","-find_free_tracks","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-just_clear_zone","-log_track_number","-nets","-nets_order","-num_wires","-preview","-remove","-reuse_channel_tracks","-reuse_zone_tracks","-shield","-shield_name","-shield_pullback","-shield_type","-skip_tracks","-snap_to_track","-stepping","-swizzle","-topology","-track_overrides_pin","-trim_area","-use_pin","-v_track_freedom","-verbose","-wrong_way_metal","-zone",]
let options["heal_bboxes_after_convert_from_polygon"] = []
let options["hlb"] = []
let options["hnb"] = []
let options["ib"] = []
let options["icc2_dump_icc_mcmm_config"] = ["-outdir","-regsub_from_to_file",]
let options["iccpp_adjust_bbox_to_min_length"] = []
let options["iccpp_com_annotate_rule_based_track_info"] = ["-bbox","-cutline","-group","-layer","-width",]
let options["iccpp_com_display_tracks"] = []
let options["iccpp_com_empty_tracks_in_bbox"] = []
let options["iccpp_com_get_rule_based_track_capacity"] = ["-bbox","-layer","-width",]
let options["iccpp_com_get_rule_based_track_info"] = ["-layer",]
let options["iccpp_com_get_rule_based_track_info_flat"] = ["-bbox","-cutline","-layer","-text_annotation","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_cntr"] = ["-bbox","-cutline","-exclude_bbox","-layer","-text_annotation","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t"] = ["-bbox","-cutline","-exclude_bbox","-layer","-skip_tracks","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_itar"] = ["-bbox","-cutline","-exclude_bbox","-layer","-skip_tracks","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_cntr_width_h2t_snps"] = ["-bbox","-cutline","-exclude_bbox","-layer","-skip_tracks","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_no_tracks_defined"] = ["-bbox","-cutline","-layer","-text_annotation","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_simple"] = ["-bbox","-layer","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_width_h2t"] = ["-bbox","-cutline","-layer","-text_annotation","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_width_h2t_itar"] = ["-bbox","-cutline","-layer","-text_annotation","-width",]
let options["iccpp_com_get_rule_based_track_info_flat_width_h2t_snps"] = ["-bbox","-cutline","-layer","-width",]
let options["iccpp_com_track_num_to_track_info"] = ["-bbox","-centerline","-clear","-display","-group","-layer","-track_num","-width",]
let options["iccpp_com_xy_to_track_info"] = ["-bbox","-centerline","-clear","-display","-dont_init_spreading","-group","-layer","-nets","-point","-snap_to_dir","-width",]
let options["iccpp_cr_create_term_from_bbox"] = ["-add_metal","-area_bbox","-associate_shield_nets","-delete","-do_not_check_shorts","-group","-layer","-net_bbox","-port_name","-preview","-shield","-shield_name","-shield_type","-term_name","-track",]
let options["iccpp_cr_create_trunk_from_here_to_there"] = ["-avoid_area","-avoid_layers","-bloat_channel","-bloat_zone","-channel","-clean_channel_tracks","-clean_named_zone_tracks","-clean_zone_tracks","-clear","-create_port","-custom_attr","-custom_tag","-cutout_area","-cutout_bloat","-cutout_pullback","-do_not_check_shorts","-do_not_cutout_nets","-edge_overhang","-edge_pullback","-edge_pullback_custom","-find_free_tracks","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-log_track_number","-nets","-nets_order","-preview","-reuse_channel_tracks","-reuse_zone_tracks","-shield","-shield_name","-shield_pullback","-shield_type","-skip_tracks","-snap_to_track","-stepping","-swizzle","-topology","-trim_area","-use_pin","-v_track_freedom","-wrong_way_metal","-zone",]
let options["iccpp_cr_create_trunk_from_here_to_there_for_swizzle"] = ["-avoid_area","-avoid_layers","-bloat_channel","-bloat_zone","-channel","-clean_channel_tracks","-clean_named_zone_tracks","-clean_zone_tracks","-clear","-create_port","-custom_attr","-custom_tag","-cutout_area","-cutout_bloat","-cutout_pullback","-do_not_check_shorts","-do_not_cutout_nets","-edge_overhang","-edge_pullback","-edge_pullback_custom","-find_free_tracks","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-log_track_number","-nets","-nets_order","-preview","-reuse_channel_tracks","-reuse_zone_tracks","-shield_pullback","-skip_tracks","-snap_to_track","-stepping","-swizzle","-topology","-trim_area","-use_pin","-v_track_freedom","-wrong_way_metal","-zone",]
let options["iccpp_cr_create_trunk_from_here_to_there_with_pin_shielding"] = ["-avoid_area","-avoid_layers","-bloat_channel","-bloat_zone","-channel","-clean_channel_tracks","-clean_named_zone_tracks","-clean_zone_tracks","-clear","-create_port","-custom_attr","-custom_tag","-cutout_pullback","-do_not_check_shorts","-edge_overhang","-edge_pullback","-edge_pullback_custom","-find_free_tracks","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-log_track_number","-nets","-nets_order","-preview","-reuse_channel_tracks","-reuse_zone_tracks","-shield","-shield_name","-shield_pullback","-shield_type","-skip_tracks","-snap_to_track","-stepping","-swizzle","-topology","-use_pin","-v_track_freedom","-wrong_way_metal","-zone",]
let options["iccpp_cr_create_trunk_from_here_to_there_with_shielding"] = ["-avoid_area","-avoid_layers","-bloat_channel","-bloat_zone","-channel","-clean_channel_tracks","-clean_named_zone_tracks","-clean_zone_tracks","-clear","-create_port","-custom_attr","-custom_tag","-cutout_area","-cutout_bloat","-cutout_pullback","-do_not_check_shorts","-do_not_cutout_nets","-edge_overhang","-edge_pullback","-edge_pullback_custom","-find_free_tracks","-h_track_freedom","-ignore_boundary_guides","-include_power_for_free_tracks","-log_track_number","-nets","-nets_order","-preview","-reuse_channel_tracks","-reuse_zone_tracks","-shield","-shield_name","-shield_pullback","-shield_type","-skip_tracks","-snap_to_track","-stepping","-swizzle","-topology","-trim_area","-use_pin","-v_track_freedom","-wrong_way_metal","-zone",]
let options["iccpp_cr_create_trunks_from_pin_to_pin"] = ["-dir_follows_sign","-do_not_check_shorts","-extensions","-layer_legs","-nets","-preview","-shield","-shield_name","-shield_type","-start_from",]
let options["iccpp_cr_create_trunks_from_pins_to_point"] = ["-create_terminals","-do_not_check_shorts","-extention_direction","-extention_distance","-layer","-min_layer","-nets","-of_cells","-pin_layer","-preview","-push_pins","-shield","-shield_name","-shield_type","-snap_to_track","-width",]
let options["iccpp_cr_create_trunks_from_pins_to_trunk"] = ["-cluster_proximity","-do_not_check_shorts","-layer","-min_layer","-nets","-of_cells","-offset_cell_pin","-pin_direction","-preview","-shield","-shield_name","-shield_type","-track_offset","-use_existing_shape","-width",]
let options["iccpp_cr_create_trunks_from_ports"] = ["-backoff_from_ports","-do_not_check_shorts","-extention_direction","-extention_distance","-layer","-min_layer","-nets","-preview","-shield","-shield_name","-shield_type","-use_port_width","-width",]
let options["iccpp_cr_create_trunks_from_ports_to_trunk"] = ["-backoff_from_ports","-do_not_check_shorts","-layer","-min_layer","-nets","-preview","-shield","-shield_name","-shield_type","-width",]
let options["iccpp_cr_create_wire_from_net_bbox"] = ["-area_bbox","-associate_shield_nets","-delete","-do_not_check_shorts","-group","-layer","-net_bbox","-net_name","-preview","-shield","-shield_name","-shield_type","-track",]
let options["iccpp_cr_create_wire_from_net_bbox_h2t"] = ["-area_bbox","-associate_shield_nets","-delete","-do_not_check_shorts","-group","-layer","-net_bbox","-net_name","-preview","-shield","-shield_name","-shield_type","-track","-width",]
let options["iccpp_cr_create_wire_from_net_bbox_with_track"] = ["-area_bbox","-associate_shield_nets","-delete","-do_not_check_shorts","-group","-layer","-net_bbox","-net_name","-preview","-shield","-shield_name","-shield_type","-track",]
let options["iccpp_cr_place_flops"] = ["-layer","-layer_weight","-nets","-repeater_distance","-repeater_name","-repeater_number","-xy",]
let options["iccpp_cr_remove_user_shape_antennas"] = ["-nets",]
let options["iccpp_cr_remove_vias_for_preroutes"] = ["-layer","-nets","-tag",]
let options["iccpp_cr_track_shared_trunks"] = ["-complete_routing","-do_not_check_shorts","-layer","-nets","-preview","-ref_net","-ref_obj","-shield","-shield_name","-shield_type","-to_trunk","-track_num","-use_ref_obj_layer","-width",]
let options["iccpp_cr_trim_antennas"] = ["-interactive","-nets","-user_attr",]
let options["iccpp_cr_zroute_in_window"] = []
let options["iccpp_create_ladders"] = []
let options["iccpp_create_straps_snps"] = []
let options["iccpp_create_zone_from_start_end_zones"] = []
let options["iccpp_get_bbox_from_zone_type"] = []
let options["iccpp_get_capacity_snps"] = []
let options["iccpp_get_max_layer"] = []
let options["iccpp_get_max_layer_from_layers_width"] = []
let options["iccpp_get_pins_of_direction_of_cell"] = []
let options["iccpp_ladders_get_cell_capacities"] = []
let options["iccpp_launch_gui"] = []
let options["iccpp_lw_2_l"] = []
let options["idb"] = []
let options["info_var"] = ["-defined","-history","-is_array","-property","-type",]
let options["initDuetEnvVars"] = []
let options["insert_clock_boundary_buffer"] = []
let options["interleave_bus"] = []
let options["is_abutting"] = []
let options["is_false"] = []
let options["is_fully_abutted_cell"] = []
let options["is_odd"] = []
let options["is_true"] = []
let options["je_get_boundary_edge_coord"] = []
let options["lappend_var"] = []
let options["ldr_order_list"] = []
let options["legox"] = []
let options["legoy"] = []
let options["libsetup_build_hip_lib_glob"] = []
let options["libsetup_build_lib_glob"] = []
let options["libsetup_find_relevant_hip_libs"] = []
let options["libsetup_max_to_min_lib_regex"] = []
let options["libsetup_wildcard_hip_voltage"] = []
let options["libsetup_wildcard_voltage"] = []
let options["list_of_configulate_gvars"] = []
let options["listcomp"] = []
let options["lminus"] = ["-exact",]
let options["lminus_var"] = []
let options["loadTpr"] = []
let options["load_duet"] = []
let options["load_duetX"] = []
let options["load_duet_gui_pkg"] = []
let options["load_duet_splash"] = []
let options["load_duet_tcl"] = []
let options["load_duettclreadline_package"] = []
let options["load_ubm"] = []
let options["loadvfs"] = []
let options["lremove_var"] = []
let options["ls"] = []
let options["mO"] = []
let options["match_net_delay_custom"] = []
let options["mcmm_set_link_target_lib"] = []
let options["mkdir_fresh"] = []
let options["module_list"] = []
let options["module_list_0"] = []
let options["my1272fill"] = []
let options["myevalcmd"] = []
let options["myevalmsg"] = []
let options["new_win"] = []
let options["nypd_toolbox"] = []
let options["orderBBOX"] = []
let options["origin_to_lego"] = []
let options["pa_create_parade_cmd_file"] = []
let options["parseOptions"] = []
let options["patch_gui_files"] = []
let options["pdintent2spec"] = ["-blocks","-pd_intent_file_path",]
let options["pin_order"] = []
let options["pin_order_hor"] = []
let options["pkg_mkIndex"] = []
let options["pp_gcbb"] = []
let options["pre_stamp_stepdown_clock"] = []
let options["print_debug"] = []
let options["print_error"] = []
let options["print_fatal"] = []
let options["print_info"] = []
let options["print_log"] = []
let options["print_log_raw"] = []
let options["print_message_info"] = ["-ids","-summary",]
let options["print_time"] = ["-msg","-stage","-tag",]
let options["print_vars"] = ["-print","-regexp","-value",]
let options["print_warning"] = []
let options["printenv"] = []
let options["proc_args"] = []
let options["proc_body"] = []
let options["process_ptlr_collaterals"] = []
let options["prune_list"] = []
let options["pv_import_library_attributes"] = []
let options["pwrlite_estimate_power"] = []
let options["pwrlite_gen_saif_all_units"] = ["-delay_model","-outdir","-testname","-verilog",]
let options["pwrlite_gen_unit_testlists"] = ["-outdir","-testlist","-testname",]
let options["pwrlite_generate_netattr"] = []
let options["pwrlite_generate_saif"] = []
let options["pwrlite_get_active_power"] = []
let options["pwrlite_get_clock_power"] = []
let options["pwrlite_open_file"] = []
let options["pwrlite_process_testlist_file"] = []
let options["pwrlite_rdt_process_args"] = []
let options["pwrlite_report_power"] = []
let options["pwrlite_saif_est_power"] = []
let options["quit!"] = []
let options["rb"] = []
let options["rdt_add_additional_link_libs"] = []
let options["rdt_add_env_var_to_result"] = []
let options["rdt_add_post_stage"] = []
let options["rdt_add_post_step"] = []
let options["rdt_add_pre_stage"] = []
let options["rdt_add_pre_step"] = []
let options["rdt_add_priority_path"] = []
let options["rdt_add_priority_path_cleanly"] = []
let options["rdt_add_stage"] = []
let options["rdt_add_step"] = []
let options["rdt_all_steps_done"] = []
let options["rdt_apr_generate_pv_cmd_file"] = []
let options["rdt_call_configulate_local"] = ["-block","-cmdline","-xml",]
let options["rdt_call_polaris"] = []
let options["rdt_check_stop_after"] = []
let options["rdt_constrain_visa_logic"] = ["-scenario",]
let options["rdt_continue_on_error"] = []
let options["rdt_convert_seconds"] = []
let options["rdt_convert_to_seconds"] = []
let options["rdt_convert_units"] = ["-from","-to","-value",]
let options["rdt_copy_collateral"] = ["-dssc_ver","-file_type","-flow","-output_dir","-stage",]
let options["rdt_custom_procs"] = []
let options["rdt_done"] = ["-stage",]
let options["rdt_dont_use"] = []
let options["rdt_dump_xml_files"] = []
let options["rdt_error_handler"] = []
let options["rdt_fail_on_error"] = []
let options["rdt_fix_min_lib_nom_process"] = []
let options["rdt_fix_min_libs_nom_process"] = []
let options["rdt_format_configulate_lib_result"] = []
let options["rdt_gen_parallel_rpts"] = ["-run_dir","-stage",]
let options["rdt_gen_visa_hier_report"] = ["-stage",]
let options["rdt_generate_rdt_log"] = []
let options["rdt_get_all_corners"] = ["-block","-work_dir",]
let options["rdt_get_all_modes"] = ["-block","-work_dir",]
let options["rdt_get_all_scenarios"] = ["-block","-work_dir",]
let options["rdt_get_analysis_type_from_corner"] = []
let options["rdt_get_block_data"] = ["-block","-block_name","-debug","-keys","-noheaders","-set_gvars","-work_dir",]
let options["rdt_get_block_list"] = ["-block","-fval","-work_dir",]
let options["rdt_get_corner_default_voltage"] = []
let options["rdt_get_corner_of_scenario"] = []
let options["rdt_get_current_corner"] = []
let options["rdt_get_current_mode"] = []
let options["rdt_get_current_scenario"] = []
let options["rdt_get_default_scenario"] = []
let options["rdt_get_derate_data"] = ["-alt","-analysis_type","-block","-corner","-derate","-flow","-grid_size","-model_type","-variant","-view","-work_dir",]
let options["rdt_get_dont_use_list"] = ["-groupfile",]
let options["rdt_get_dont_use_reasons"] = ["-groupfile",]
let options["rdt_get_file_history"] = []
let options["rdt_get_flow_status"] = []
let options["rdt_get_g_corner_details_value"] = []
let options["rdt_get_global_voltages"] = ["-corner",]
let options["rdt_get_lib_attribute_data"] = ["-alt","-block","-flow","-model_type","-variant","-view","-work_dir",]
let options["rdt_get_lib_basename"] = []
let options["rdt_get_lib_data"] = ["-alt_type","-block","-cell_type","-corner","-file","-flow","-headers","-lib","-model_type","-variant","-view","-work_dir",]
let options["rdt_get_lib_settings_data"] = ["-alt","-block","-flow","-headers","-model_type","-scenario","-settings_label","-view","-work_dir",]
let options["rdt_get_lib_ver_data"] = ["-block","-library","-manifest","-print_libname","-section","-work_dir",]
let options["rdt_get_library_list"] = ["-block","-work_dir",]
let options["rdt_get_license"] = ["-max_attempts","-wait",]
let options["rdt_get_logfile_length"] = []
let options["rdt_get_logscan_pointer"] = []
let options["rdt_get_min_max_corners_of"] = []
let options["rdt_get_mode_of_scenario"] = []
let options["rdt_get_parallel_rpts_done"] = []
let options["rdt_get_parallel_rpts_pending"] = []
let options["rdt_get_parallel_rpts_running"] = []
let options["rdt_get_pdk_data"] = ["-fval","-headers","-separator","-work_dir",]
let options["rdt_get_pdk_settings"] = ["-block","-headers","-model_type","-stdlib_type","-technology","-view","-work_dir",]
let options["rdt_get_pvc"] = ["-block","-corner","-debug","-noheaders","-set_gvars","-work_dir",]
let options["rdt_get_rail_voltage"] = ["-corner","-min","-rail",]
let options["rdt_get_relevant_scenario_data"] = ["-block","-keys","-scenario","-work_dir",]
let options["rdt_get_relevant_scenarios"] = ["-block","-flow","-primary","-work_dir",]
let options["rdt_get_scenario_data"] = ["-block","-debug","-keys","-noheaders","-scenario","-set_gvars","-work_dir",]
let options["rdt_get_scr_proc_name"] = []
let options["rdt_get_step_metrics"] = []
let options["rdt_get_subflow_load_stage"] = []
let options["rdt_icv_polaris"] = []
let options["rdt_is_parent_stage_complete"] = []
let options["rdt_is_step_done"] = []
let options["rdt_is_valid_stage"] = []
let options["rdt_is_xml_file_empty"] = ["-xml",]
let options["rdt_kill_parallel_rpts"] = []
let options["rdt_lib_setup"] = []
let options["rdt_list_flow"] = ["-sources",]
let options["rdt_list_signoff_stages"] = []
let options["rdt_list_stages"] = []
let options["rdt_list_steps"] = ["-print","-sources",]
let options["rdt_logscan_fail"] = []
let options["rdt_lower_scons_with_hier"] = []
let options["rdt_map_LV_syn_clock"] = []
let options["rdt_mark_stage"] = ["-duration","-memory","-stage","-step_sequence",]
let options["rdt_mem_diff"] = []
let options["rdt_mem_get_stamp"] = []
let options["rdt_mem_set"] = []
let options["rdt_mem_to_string"] = []
let options["rdt_parse_block_setup"] = []
let options["rdt_print_configulate_calls"] = []
let options["rdt_print_configulate_gvars"] = []
let options["rdt_print_error"] = []
let options["rdt_print_gvar_history"] = []
let options["rdt_print_info"] = []
let options["rdt_print_proc_source"] = []
let options["rdt_print_reports"] = []
let options["rdt_print_scripts_search_path"] = []
let options["rdt_print_step_footer"] = []
let options["rdt_print_step_header"] = []
let options["rdt_print_warn"] = []
let options["rdt_printvar"] = []
let options["rdt_proc_source"] = []
let options["rdt_record_procs"] = []
let options["rdt_remove_stage"] = ["-flow","-stage",]
let options["rdt_remove_step"] = ["-name",]
let options["rdt_reorder_link_library_with_max_lib_first"] = []
let options["rdt_replace_cornerdetails"] = []
let options["rdt_replace_cornerdetails_dotprocess"] = []
let options["rdt_report_dont_use"] = ["-cell",]
let options["rdt_report_stage_status"] = []
let options["rdt_reset_logscan_pointer"] = ["-line","-unset",]
let options["rdt_reset_stage"] = []
let options["rdt_return_lib_vt_type"] = []
let options["rdt_run_CheckDiskSpace"] = []
let options["rdt_run_for_active_scenarios"] = []
let options["rdt_run_for_all_scenarios"] = []
let options["rdt_run_logscan"] = ["-aux_rules","-check_only","-logfiles","-rules","-skip_logfile_header_lines","-summary_file",]
let options["rdt_run_lv"] = []
let options["rdt_run_multiple_sessions"] = ["-bits","-mode","-os","-rundir",]
let options["rdt_run_pending_parallel_rpt"] = []
let options["rdt_run_signoff"] = []
let options["rdt_run_step"] = []
let options["rdt_save_attributes"] = ["-change_stage","-change_step","-flow_status","-parent_run","-stage","-stage_run","-step_attr",]
let options["rdt_scenario_timing_constraints"] = ["-scenario",]
let options["rdt_sd_scenario_path_care"] = []
let options["rdt_set_mcmm_config"] = []
let options["rdt_signoff_status"] = ["-stage",]
let options["rdt_source_if_exists"] = ["-display","-inclusive","-local","-require","-silent",]
let options["rdt_source_if_exists_in_scenario"] = ["-display","-inclusive","-local","-require","-scenario","-silent",]
let options["rdt_source_project_if_exists"] = []
let options["rdt_split_text_line"] = []
let options["rdt_start"] = []
let options["rdt_status"] = ["-leaf","-par_rpts","-stage",]
let options["rdt_step_run_status"] = ["-change_stage","-change_step","-stage","-stage_run","-step_attr",]
let options["rdt_step_search_and_insert"] = []
let options["rdt_timing_constraints"] = ["-scenario",]
let options["rdt_update_pv_search_path"] = []
let options["rdt_visa_additional_mco"] = []
let options["rdt_visa_extract_visa_hierarchy"] = []
let options["rdt_visa_extract_visa_level"] = []
let options["rdt_visa_get_probe_signal"] = []
let options["rdt_visa_physical_report"] = []
let options["rdt_visa_rtl_check"] = []
let options["rdt_visa_trace_check_iso_levelshifter"] = []
let options["rdt_visa_trace_connectivity"] = []
let options["rdt_visa_trace_connectivity_return_pin"] = []
let options["rdt_wrap"] = ["-body","-disable","-post","-pre","-stage","-step",]
let options["rdt_xml_2_mcmm_config"] = []
let options["rdt_zip_files"] = ["-logs","-reports","-stage",]
let options["reconnect_fishbone_style_power_switch"] = ["-ack_pin_name","-ctrl_pin_name","-sw_cells",]
let options["reconstruct_topo"] = []
let options["remove_duplicate_timing_contexts"] = ["-analyze_only","-exclude_group_path_directives",]
let options["remove_pre_stamp_stepdown_clock"] = []
let options["remove_shapes_over_cell"] = []
let options["remove_unambiguous_pins"] = []
let options["report_active_debug_codes"] = []
let options["report_custom_power_data"] = ["-cell_internals_data_file","-cust_rpt_module_file","-help","-no_io","-outdir","-stdcell_regex","-unswitched_limit",]
let options["report_hierarchical_z"] = ["-attributes","-block","-maxDepth","-outDir","-rootCell","-stage",]
let options["report_visa_clocks"] = []
let options["reset_origin"] = []
let options["reset_origin_move_block"] = []
let options["reset_origin_top"] = []
let options["restore_correlation_status"] = []
let options["return_proc_source"] = []
let options["rhz_fill_power_domains"] = []
let options["rhz_fill_stdcells_data"] = []
let options["rhz_generate_reports"] = []
let options["rhz_get_cells_at_depth"] = []
let options["rhz_vectorian_add"] = []
let options["rhz_vectorian_mult"] = []
let options["rls_table"] = ["-breaks","-csv_mode","-file","-footer","-format","-header","-no_separator","-offset","-repeat_header","-spacious","-table","-title","-to","-width_limit",]
let options["rls_table_echo"] = []
let options["roundto"] = []
let options["routePins"] = []
let options["routeTerm"] = []
let options["runRDT"] = ["-init","-jump","-load","-load_cel","-load_path","-mark_loaded_stage","-no_run","-reset_ebb_libs","-reset_start_stage","-signoff","-stage","-standalone","-start","-step","-stop","-subflow",]
let options["run_rdtpv"] = []
let options["sL"] = []
let options["sN"] = []
let options["sW"] = []
let options["save_correlation_status"] = []
let options["sb"] = []
let options["sd_abstract_to_design"] = []
let options["sd_abstract_to_frame"] = []
let options["sd_add_diffcheck"] = ["-include_macro_refs","-layer_name","-outputview","-phase","-pitch","-skip","-width",]
let options["sd_add_dop_diode"] = []
let options["sd_add_halo_metals"] = ["-no_partition_twire",]
let options["sd_add_polycheck"] = ["-datatype","-include_macro_refs","-layer_name","-outputview","-phase","-pitch","-skip","-width",]
let options["sd_add_routing_blockage_for_boundary"] = ["-for_create_strap_only",]
let options["sd_add_routing_blockage_for_macro"] = ["-additional_blkg",]
let options["sd_add_routing_blockage_for_va"] = ["-for_create_strap_only",]
let options["sd_aon_pg_hookup"] = ["-cells","-constraint_only","-incremental","-logtag",]
let options["sd_aon_pg_route"] = []
let options["sd_append_uin_parameters"] = []
let options["sd_apply_hip_pdn"] = []
let options["sd_base_layer_fill"] = []
let options["sd_base_layer_fill_step"] = []
let options["sd_base_layer_populate_lib"] = []
let options["sd_base_layer_populate_templates"] = []
let options["sd_base_layer_remove"] = []
let options["sd_base_layer_update_templates"] = []
let options["sd_block_clock_opt"] = []
let options["sd_block_place_opt"] = []
let options["sd_block_priority_route"] = []
let options["sd_block_route"] = []
let options["sd_block_user_priority_route"] = []
let options["sd_bottom_up_run_parallel_job"] = ["-script_name","-work_dir",]
let options["sd_boundary_fiducial_cells"] = []
let options["sd_calculate_gridpattern"] = []
let options["sd_call_diamond"] = []
let options["sd_change_names"] = []
let options["sd_channel_add_buffer_on_route"] = ["-distance","-max_layer","-min_layer","-nets","-repeater","-verbose","-vialadder",]
let options["sd_channel_block_recipe"] = ["-backoff","-debug","-distance","-keep_reps","-max_layer","-min_layer","-ports","-repeater","-save_steps","-steps","-use_gcr","-verbose","-vialadder","-widths",]
let options["sd_channel_blocks"] = []
let options["sd_channel_get_nets"] = []
let options["sd_channel_place_cells"] = ["-backoff","-keep_reps","-ports","-verbose",]
let options["sd_channel_place_cells_based_on_route"] = ["-first_distance","-keep_reps","-max_layer","-min_layer","-ports","-use_gcr","-widths",]
let options["sd_channel_priority_route"] = ["-cells","-debug","-max_layer","-min_layer","-use_gcr","-verbose","-vialadder","-widths",]
let options["sd_channel_remove_repeaters"] = ["-port","-supernet",]
let options["sd_channel_snap_cell_plc_at_coord"] = []
let options["sd_checkProcess"] = []
let options["sd_check_block_abutment"] = []
let options["sd_check_cell_area"] = []
let options["sd_check_fib_con"] = []
let options["sd_check_pin_placement"] = []
let options["sd_check_stitch_xmim"] = []
let options["sd_check_terminals"] = []
let options["sd_clean_up_block_level_power_hookup"] = []
let options["sd_clean_up_routing_blockage_groups"] = []
let options["sd_clk_load"] = []
let options["sd_clk_ndr_shielding"] = []
let options["sd_clk_push"] = []
let options["sd_clk_route"] = []
let options["sd_clk_shielding"] = []
let options["sd_clock_cleanup"] = []
let options["sd_commit_blocks"] = ["-same_lib",]
let options["sd_commit_blocks_same_lib"] = []
let options["sd_connect_ackport"] = ["-drv_pin","-rev_pin",]
let options["sd_connect_aon_supply_pins"] = ["-cells","-force",]
let options["sd_connect_ebb_enables"] = ["-reset_based_on_upf","-va_name",]
let options["sd_connect_pg_net"] = []
let options["sd_connect_power_switch_enables"] = []
let options["sd_constraints"] = []
let options["sd_consume_io_constraints"] = []
let options["sd_create_aabb_region"] = []
let options["sd_create_analog_pg_template"] = ["-file","-layers",]
let options["sd_create_analog_power_strap"] = ["-pg_regions",]
let options["sd_create_and_place_slos_logic"] = []
let options["sd_create_and_swap_abstracts"] = []
let options["sd_create_backoff_layer_blockage"] = []
let options["sd_create_backoff_layer_blockage_per_block"] = []
let options["sd_create_bbox_analog_power_strategies"] = ["-bbox","-grid_template","-layers","-nets","-pg_region","-recreate_template",]
let options["sd_create_black_box"] = []
let options["sd_create_black_box_by_default"] = []
let options["sd_create_black_box_pins"] = []
let options["sd_create_boundary_power_blockage"] = []
let options["sd_create_compl_pgr_blockage"] = []
let options["sd_create_custom_grid_vars"] = ["-pgr","-va",]
let options["sd_create_custom_power_strap"] = ["-bbox","-grid_template","-net","-pg_region",]
let options["sd_create_diffcheck"] = []
let options["sd_create_dir"] = ["-dir",]
let options["sd_create_dr_blockage_around_object"] = []
let options["sd_create_gas_station_wrapper"] = []
let options["sd_create_halo_id"] = []
let options["sd_create_hierarchical_power_strap"] = []
let options["sd_create_m0_power_straps_fill"] = []
let options["sd_create_macro_on_boundary_blockage"] = []
let options["sd_create_path_groups"] = ["-modes",]
let options["sd_create_patterns"] = ["-add_net_type","-outfile","-pattern","-region","-verbose",]
let options["sd_create_physical_only_modules"] = []
let options["sd_create_pin_pairings"] = []
let options["sd_create_pins_for_power_continuity"] = []
let options["sd_create_placement_abstracts"] = []
let options["sd_create_polycheck"] = []
let options["sd_create_port_polygon_for_terminals"] = []
let options["sd_create_power"] = []
let options["sd_create_power_straps"] = ["-custom_only","-custom_tags","-layers","-no_vias","-strategy_only",]
let options["sd_create_power_straps_m0"] = ["-keep_to_bnd","-keep_to_macro","-m0_width","-m2width_ts","-remove_only",]
let options["sd_create_prBoundary"] = []
let options["sd_create_pwr_blkg_from_objs"] = []
let options["sd_create_region_id"] = []
let options["sd_create_region_tracks"] = []
let options["sd_create_stdcell_fillers"] = []
let options["sd_create_stub_upf"] = []
let options["sd_create_timing_abstracts"] = []
let options["sd_create_timing_arcs_on_unconstrained_pins"] = []
let options["sd_create_top_va_pg_blockage"] = ["-hierarchical",]
let options["sd_create_trackfill_config"] = ["-layers","-out_dir",]
let options["sd_create_tracks"] = ["-bounding_box","-dont_delete","-exclusive","-layer","-pattern","-reserved","-skip_pg_track","-tag","-width",]
let options["sd_create_tracks_for_hip_pins"] = ["-cells","-layers","-pins",]
let options["sd_create_tracks_for_offgrid_pins"] = []
let options["sd_create_twire_corner_blockage"] = []
let options["sd_create_uin"] = ["-layers","-out_dir","-type",]
let options["sd_create_uin_gridpattern"] = []
let options["sd_create_uin_icv"] = []
let options["sd_create_uin_layers"] = []
let options["sd_create_uin_parameters"] = []
let options["sd_create_uin_v_layers"] = []
let options["sd_create_va_pg_blockage"] = []
let options["sd_create_visa_bound"] = []
let options["sd_create_xmim_lib"] = []
let options["sd_ctm_bumesh"] = []
let options["sd_ctm_clone_clock_gadget"] = []
let options["sd_ctm_create_dop_clocks"] = []
let options["sd_ctm_create_dops"] = []
let options["sd_ctm_detail_route"] = []
let options["sd_ctm_dop_enable_scan_repeater_duplication"] = []
let options["sd_ctm_dop_enable_split"] = []
let options["sd_ctm_enable_buffering"] = []
let options["sd_ctm_fishbone_route"] = []
let options["sd_ctm_initialize"] = []
let options["sd_ctm_level_balance"] = []
let options["sd_ctm_merge"] = []
let options["sd_ctm_optimize"] = []
let options["sd_ctm_post_setup"] = []
let options["sd_ctm_postroute_sizing"] = []
let options["sd_ctm_remove_dop_clocks"] = []
let options["sd_ctm_reports"] = []
let options["sd_ctm_route_dops"] = ["-dirty_mode","-dop_nets",]
let options["sd_ctm_set_clock_latency"] = []
let options["sd_ctm_set_visa_exceptions"] = []
let options["sd_ctm_sizing"] = []
let options["sd_ctp_create_clock_pins_at_block_center"] = []
let options["sd_cts"] = []
let options["sd_cts_ccd"] = []
let options["sd_cts_exceptions_for_icc"] = []
let options["sd_cts_params"] = []
let options["sd_cts_rename_cts_punch_port"] = []
let options["sd_cts_route_options"] = []
let options["sd_cts_setup"] = []
let options["sd_cts_store_hier_clk_pin_drivers"] = []
let options["sd_cts_trace_fain_to_first_ctech"] = []
let options["sd_customize_budgets"] = []
let options["sd_ddh"] = []
let options["sd_define_icc_wrappers"] = []
let options["sd_define_user_attributes"] = []
let options["sd_design_to_abstract"] = []
let options["sd_detect_netlist_ecos"] = []
let options["sd_dont_use"] = []
let options["sd_dop_cts"] = []
let options["sd_drc_bnd_spc_kor"] = []
let options["sd_dump_pdfx_power_connections"] = []
let options["sd_duplicate_slos"] = []
let options["sd_eco_apply_changelist"] = []
let options["sd_eco_boundary_cells"] = ["-action","-direction","-target_obj_boundary_list",]
let options["sd_eco_clk_repair"] = []
let options["sd_eco_connect_assignbuf_ceco"] = []
let options["sd_eco_connect_net_ceco"] = []
let options["sd_eco_create_port_ceco"] = []
let options["sd_eco_gen_changelist"] = []
let options["sd_eco_legalize"] = []
let options["sd_eco_optimize"] = []
let options["sd_eco_place_pins"] = []
let options["sd_eco_place_unplaced_cells"] = []
let options["sd_eco_rc_to_icc2_changelist"] = ["-icc2_changelist","-rc_changelist",]
let options["sd_eco_remove_dfm"] = []
let options["sd_eco_reset_dfm_stages"] = []
let options["sd_eco_route"] = []
let options["sd_eco_save_pre_eco_state"] = []
let options["sd_eco_scan_repair"] = []
let options["sd_eco_tieoff"] = []
let options["sd_enable_abstract_cmds"] = []
let options["sd_enable_hold_fixing"] = []
let options["sd_endcap_cells"] = []
let options["sd_estimate_timing"] = []
let options["sd_estimate_timing_pre_checks"] = []
let options["sd_expand_all_mi_block_pg_blockages"] = []
let options["sd_extend_macro_pins_on_boundary"] = []
let options["sd_extract_collaterals_for_capr_sapr"] = []
let options["sd_extraction_options_setup"] = ["-corners",]
let options["sd_fdr_constraints"] = ["-out_path","-scenarios",]
let options["sd_fdr_get_physical_clock"] = []
let options["sd_fdr_map_all_clocked_fdrs"] = []
let options["sd_fdr_read_attributes_file"] = []
let options["sd_fdr_read_clock_sources"] = []
let options["sd_fdr_set_attributes"] = []
let options["sd_fdr_write_vrlg_attr"] = ["-flow","-outfile",]
let options["sd_fib_cells"] = []
let options["sd_fib_con"] = []
let options["sd_fill"] = []
let options["sd_fill_get_keepout_cells_list"] = []
let options["sd_fill_mark_hv_nets"] = []
let options["sd_fill_post_process"] = []
let options["sd_fill_run_calibre"] = []
let options["sd_fill_run_dfm"] = []
let options["sd_fill_run_icc"] = []
let options["sd_fill_run_icv"] = []
let options["sd_fill_run_qea"] = []
let options["sd_find_accessible_tap"] = ["-cell","-direction","-distance","-nwell_break_names","-nwell_break_refs","-tap_cells",]
let options["sd_find_closest_cell"] = ["-cell","-direction","-distance","-include_variants","-inst_names","-ref_cells",]
let options["sd_find_unique_bound_name"] = []
let options["sd_fix_ipb"] = []
let options["sd_floorplan_design"] = []
let options["sd_fn_assign_srsn_per_net_groups"] = []
let options["sd_fn_cache_constraint_mapping_file"] = []
let options["sd_fn_calculate_track_region"] = ["-cell","-coordinate",]
let options["sd_fn_check_fix_illegal_name"] = []
let options["sd_fn_convert_ps_pg_grid"] = []
let options["sd_fn_create_black_box"] = []
let options["sd_fn_create_black_box_abstract"] = []
let options["sd_fn_create_black_box_initialize_and_hollow"] = []
let options["sd_fn_create_black_box_pin_constraints"] = []
let options["sd_fn_create_black_box_source_pdintent"] = []
let options["sd_fn_create_black_box_timing"] = []
let options["sd_fn_create_block_host_options"] = []
let options["sd_fn_create_feedthru_supplies"] = []
let options["sd_fn_create_gas_station_wrapper"] = []
let options["sd_fn_create_keepout_margin"] = []
let options["sd_fn_create_partition_bbox_abstract"] = []
let options["sd_fn_create_stub_upf"] = ["-outdir","-stub_modules","-upf_dir",]
let options["sd_fn_create_track_check_edge"] = ["-bounding_box","-direction","-exclusive","-index","-points",]
let options["sd_fn_create_wire_on_power_track"] = []
let options["sd_fn_duplicate_terminal"] = ["-attr","-port","-terms",]
let options["sd_fn_eco_concat_verilog_file"] = ["-out_file","-v_files","-v_list",]
let options["sd_fn_eco_count_sequence_diff"] = []
let options["sd_fn_eco_create_bus"] = []
let options["sd_fn_eco_data_analysis_max_string_match"] = []
let options["sd_fn_eco_data_analysis_string_match"] = []
let options["sd_fn_eco_dump_net_shape"] = []
let options["sd_fn_eco_dump_terminals"] = []
let options["sd_fn_eco_get_ignore_modules"] = []
let options["sd_fn_eco_get_latters_diff"] = []
let options["sd_fn_eco_get_pin_nets"] = []
let options["sd_fn_eco_get_string_match"] = []
let options["sd_fn_eco_rename_advisory"] = []
let options["sd_fn_eco_write_ref_data"] = []
let options["sd_fn_execute_run_block_script"] = []
let options["sd_fn_find_dangling_partition_pins"] = []
let options["sd_fn_find_excluded_nets_for_place_pins"] = []
let options["sd_fn_fix_upf_for_icc"] = []
let options["sd_fn_found_input_upf_files"] = []
let options["sd_fn_gas_station_unwrap_hier"] = []
let options["sd_fn_gen_budgets"] = []
let options["sd_fn_get_custom_polygons"] = []
let options["sd_fn_get_io_connected_cells"] = ["-net","-type",]
let options["sd_fn_get_pg_geo_of_pgr_va"] = []
let options["sd_fn_get_ref_libs"] = []
let options["sd_fn_hack_split_constraints_upf"] = []
let options["sd_fn_hier_commit_upf"] = []
let options["sd_fn_ideal_network"] = []
let options["sd_fn_insert_level_shifter"] = ["-power",]
let options["sd_fn_load_black_box_upf"] = []
let options["sd_fn_load_incremental_upf"] = []
let options["sd_fn_parse_log_file_to_find_out_failed_jobs"] = []
let options["sd_fn_pg_calculate_alt_pwrgrid_config"] = []
let options["sd_fn_place"] = []
let options["sd_fn_place_cell"] = []
let options["sd_fn_place_global_dic_cells"] = ["-dic_distance","-num_dics","-remove_existing",]
let options["sd_fn_place_global_fid_cells"] = ["-global_fid_distance","-num_global_fids","-remove_existing",]
let options["sd_fn_propagate_driver_supply"] = []
let options["sd_fn_propagate_soft_macro_pg_terminal"] = []
let options["sd_fn_ps_connect_top_pg"] = ["-cells",]
let options["sd_fn_ps_create_rb_on_pg"] = ["-cell","-layers","-net",]
let options["sd_fn_pvt_setup"] = ["-analysis","-corner",]
let options["sd_fn_read_block_tcl_files"] = []
let options["sd_fn_read_pspec"] = []
let options["sd_fn_remove_extract_layer_constraints"] = []
let options["sd_fn_remove_twire_shorts"] = []
let options["sd_fn_remove_wiretracks_and_power_straps"] = []
let options["sd_fn_reports_pspec"] = []
let options["sd_fn_restore_srsn"] = []
let options["sd_fn_run_a_command_on_blocks"] = ["-command",]
let options["sd_fn_run_block_script"] = []
let options["sd_fn_run_parallel_set_of_commands_on_block"] = ["-blocks","-command_list",]
let options["sd_fn_run_step"] = []
let options["sd_fn_save_srsn"] = []
let options["sd_fn_save_user_attributes"] = ["-outfile",]
let options["sd_fn_set_td_type_for_tsvs"] = []
let options["sd_fn_setup_ctp_config"] = []
let options["sd_fn_source_icc_file"] = ["-infile","-outfile","-tag",]
let options["sd_fn_synthesize_clock_trunks"] = []
let options["sd_fn_template_based_partition_bbt"] = ["-partition",]
let options["sd_fn_update_block_netlist"] = []
let options["sd_for_each_block_fib_cells"] = []
let options["sd_for_each_block_local_fiducial_cells"] = []
let options["sd_for_each_block_tap_cells"] = []
let options["sd_fp_boundary_size_check"] = []
let options["sd_frame_to_abstract"] = []
let options["sd_gcr_create_commands"] = ["-bus_with_signal_flow","-debug","-devtest","-nets","-outfile","-quick_route","-skip_pre_checking","-strip_pg_mesh","-trunk_only","-work_dir",]
let options["sd_gcr_create_patterns"] = ["-add_net_type","-outfile","-verbose","-work_dir",]
let options["sd_gcr_dump_bus_constraints"] = ["-outfile","-verbose","-work_dir",]
let options["sd_gcr_pin_analysis_debug"] = ["-outfile","-return","-standalone","-work_dir",]
let options["sd_gcr_routing_summary"] = ["-outfile","-work_dir",]
let options["sd_gen_budgets"] = []
let options["sd_gen_mw_from_icc2"] = []
let options["sd_gen_spef"] = []
let options["sd_generate_critical_nets"] = ["-add_options","-max_paths","-net_threshold","-slack_lesser_than",]
let options["sd_generate_icv_netlist"] = []
let options["sd_generate_pg_template"] = ["-custom_only","-file","-layers","-macro","-no_stack_vias","-no_vias",]
let options["sd_get_boundary_cells_from_gvar"] = ["-boundary_type_list","-layer",]
let options["sd_get_bus_layers_widths"] = ["-verbose",]
let options["sd_get_fill_layers"] = []
let options["sd_get_gvars"] = []
let options["sd_get_keepout_cells_list"] = []
let options["sd_get_macro_metal_layers"] = ["-hml_type","-macro_info","-macro_refs",]
let options["sd_get_normalized_pattern"] = ["-add_net_type","-mult","-pattern","-pitch","-verbose",]
let options["sd_get_pattern_from_track_def"] = ["-add_net_type","-track_def","-verbose",]
let options["sd_get_process_dot_num"] = []
let options["sd_get_trackfill_process"] = []
let options["sd_get_twire_config"] = ["-use_pg_nets","-uses_aon_nets",]
let options["sd_get_twire_edge_polygons"] = ["-layers",]
let options["sd_gridpattern_period"] = []
let options["sd_hier_apply_netlist_ecos"] = []
let options["sd_hier_insert_boundary_cells"] = []
let options["sd_hier_insert_ps_cells"] = []
let options["sd_hier_macro_pin_expose_to_block"] = []
let options["sd_hier_place"] = []
let options["sd_hier_ps_stitching"] = []
let options["sd_hier_push_down_pg"] = []
let options["sd_hier_push_pg_blockage"] = []
let options["sd_hier_set_up_rows"] = []
let options["sd_hierarchy_owner_wrapper"] = []
let options["sd_ideal_network"] = []
let options["sd_import_def"] = []
let options["sd_import_die_file"] = []
let options["sd_import_vars"] = []
let options["sd_incr_stdcell_power_hookup"] = ["-area","-cells",]
let options["sd_init_place"] = []
let options["sd_init_rpd"] = []
let options["sd_input_port_diode"] = []
let options["sd_insert_boundary_cells"] = []
let options["sd_insert_decaps"] = []
let options["sd_insert_fillers"] = []
let options["sd_insert_level_shifter"] = []
let options["sd_insert_ps_cells"] = []
let options["sd_insert_ps_cells_around_macro"] = ["-va",]
let options["sd_insert_ps_delay_cell"] = []
let options["sd_insert_top_block_dic_cells"] = []
let options["sd_insert_top_block_global_fid_cells"] = []
let options["sd_io_placement"] = []
let options["sd_iss_verify"] = []
let options["sd_iss_verify_check"] = []
let options["sd_iwsdb_close_tmp_lib"] = []
let options["sd_iwsdb_open_tmp_lib_and_block"] = []
let options["sd_iwsdb_recalc_offset_for_uin_gridpattern"] = []
let options["sd_iwsdb_return_parallel_libs"] = []
let options["sd_lbist_constraints"] = ["-scenarios",]
let options["sd_legalize_placement"] = []
let options["sd_limit_template_layers"] = ["-excl_layers","-excl_tags","-layers","-tags",]
let options["sd_load_aocvm"] = []
let options["sd_load_aocvm_gcd"] = ["-corner","-timing_mode",]
let options["sd_load_aocvm_legacy"] = ["-corner","-timing_mode","-voltage","-vt_list",]
let options["sd_load_app_option_info"] = []
let options["sd_load_base_db_for_eco"] = []
let options["sd_load_block_timing"] = []
let options["sd_load_incremental_srsn"] = []
let options["sd_load_incremental_upf"] = []
let options["sd_load_io_placement"] = []
let options["sd_load_macro_placement"] = []
let options["sd_load_ocvm"] = []
let options["sd_load_pg_grid"] = []
let options["sd_load_pocvm"] = []
let options["sd_load_post_split_constraints"] = []
let options["sd_load_pre_defined_shapes_for_blocks"] = []
let options["sd_load_routing_blockage_groups"] = []
let options["sd_load_td_routes"] = []
let options["sd_load_tm"] = []
let options["sd_load_tracks"] = []
let options["sd_load_upf"] = []
let options["sd_local_fiducial_cells"] = []
let options["sd_lr_check_env_vars"] = []
let options["sd_lr_overrride_tool_versions"] = []
let options["sd_lr_ovr_tools"] = []
let options["sd_lr_restore_saved_vars_and_tool_versions"] = []
let options["sd_lr_setup_run_dir"] = []
let options["sd_macro_pin_expose_to_block"] = []
let options["sd_macro_placement"] = []
let options["sd_macropowerswitchorder"] = ["-drive_p","-inputPortPattern","-outputPortPattern","-va_name",]
let options["sd_man_page"] = []
let options["sd_mark_critical_nets_for_qea_fill"] = ["-nets",]
let options["sd_mbist_constraints"] = ["-scenarios",]
let options["sd_mcmm_analyze_existing_labels"] = []
let options["sd_mcmm_corners_setup"] = []
let options["sd_mcmm_create_scenarios_and_status"] = []
let options["sd_mcmm_get_corner_default_voltage"] = []
let options["sd_mcmm_get_corner_of_scenario"] = []
let options["sd_mcmm_get_corner_priority_search_path"] = []
let options["sd_mcmm_get_corners_from_map"] = []
let options["sd_mcmm_get_default_scenario"] = []
let options["sd_mcmm_get_mode_of_scenario"] = []
let options["sd_mcmm_get_mode_priority_search_path"] = []
let options["sd_mcmm_get_process_label"] = []
let options["sd_mcmm_get_process_number"] = []
let options["sd_mcmm_get_scenario_constraint_files"] = []
let options["sd_mcmm_get_scenario_from_corner"] = []
let options["sd_mcmm_get_scenario_priority_search_path"] = []
let options["sd_mcmm_is_compatible_mode"] = []
let options["sd_mcmm_match_ebb_label"] = []
let options["sd_mcmm_match_ebb_label_from_dror"] = []
let options["sd_mcmm_match_library_labels_to_spec"] = []
let options["sd_mcmm_match_stdlib_label"] = []
let options["sd_mcmm_match_stdlib_label_from_dror"] = []
let options["sd_mcmm_post_setup_source"] = []
let options["sd_mcmm_report_and_verify_pvt"] = []
let options["sd_mcmm_set_corner_constraints"] = ["-corners",]
let options["sd_mcmm_set_max_transition"] = []
let options["sd_mcmm_set_mode_constraints"] = ["-modes",]
let options["sd_mcmm_set_parasitics_parameters"] = ["-corners",]
let options["sd_mcmm_set_process_labels_numbers"] = ["-corners",]
let options["sd_mcmm_set_scenario_constraints"] = ["-scenarios",]
let options["sd_mcmm_set_temperature"] = ["-corners",]
let options["sd_mcmm_set_voltage"] = ["-corners",]
let options["sd_mcmm_set_voltage_by_source"] = ["-corners",]
let options["sd_mcmm_setup"] = ["-keep_existing_scenarios","-skip_loading_constraints",]
let options["sd_mcmm_setup_from_file"] = []
let options["sd_mcmm_source_constraints_file"] = ["-filename","-flags","-logfile",]
let options["sd_mcmm_source_translated_icc_sdc_file"] = []
let options["sd_mcmm_timing_constraints"] = ["-corners","-modes","-scenarios",]
let options["sd_mcmm_verify_corner_name_type"] = []
let options["sd_merge_layout_files"] = ["-cell","-compress","-gds","-merge_list","-oasis","-units",]
let options["sd_metal_pre_fill"] = []
let options["sd_module_placement"] = []
let options["sd_n_site_cycling"] = []
let options["sd_need_m0cid_remapping"] = []
let options["sd_open_block"] = []
let options["sd_open_library"] = ["-block","-dont_copy","-init","-keep_all_blocks","-lib","-load","-readonly","-reset_references","-update_design_tech","-update_techfile",]
let options["sd_opportunistic_lfid_cells"] = []
let options["sd_outputs"] = []
let options["sd_outputs_aon_pg_net"] = []
let options["sd_outputs_box_file"] = ["-output_file",]
let options["sd_outputs_create_abstract"] = []
let options["sd_outputs_data_for_extraction"] = ["-generate_boxfile","-input_lib","-output_lib","-update_hips",]
let options["sd_outputs_def"] = []
let options["sd_outputs_def_dct"] = []
let options["sd_outputs_def_redhawk"] = []
let options["sd_outputs_fdr_write_vrlg_attr"] = []
let options["sd_outputs_floorplan_tcl"] = []
let options["sd_outputs_frame"] = []
let options["sd_outputs_gds"] = []
let options["sd_outputs_icv_netlist"] = []
let options["sd_outputs_iwsdb_write_donut"] = []
let options["sd_outputs_lef"] = []
let options["sd_outputs_macro_floorplan"] = []
let options["sd_outputs_oas"] = []
let options["sd_outputs_outputs_for_icc"] = []
let options["sd_outputs_pb_floorplan"] = []
let options["sd_outputs_saif"] = []
let options["sd_outputs_scandef"] = []
let options["sd_outputs_sdc"] = []
let options["sd_outputs_spef"] = []
let options["sd_outputs_upf_etm"] = []
let options["sd_outputs_upf_out"] = []
let options["sd_outputs_verilog"] = []
let options["sd_outputs_verilog_w_power"] = []
let options["sd_outputs_xyv"] = []
let options["sd_pg_calculate_blockage"] = ["-custom_pg","-domain_name",]
let options["sd_pg_calculate_custom_grid_blockage"] = ["-no_softmacro_blockage","-polygon",]
let options["sd_pg_regions"] = []
let options["sd_pg_set_strategy"] = ["-block","-blockages","-custom_tags","-net","-pg_pin","-tag","-va","-va_mode",]
let options["sd_pg_via0_via1_insertion"] = ["-dirty_mode",]
let options["sd_place"] = []
let options["sd_place_custom_2pass"] = []
let options["sd_place_exploration"] = []
let options["sd_place_hier_pins"] = []
let options["sd_place_pins"] = ["-nets",]
let options["sd_place_refine"] = []
let options["sd_placement_blockage"] = []
let options["sd_polaris_call"] = []
let options["sd_post_cts_opt"] = []
let options["sd_post_cts_setup"] = []
let options["sd_post_priority_route_report"] = ["-nets","-use_gcr","-work_dir",]
let options["sd_post_pushdown_clean_up"] = []
let options["sd_postplace_spare_cells"] = []
let options["sd_postprocss_verilog_netlist"] = []
let options["sd_postroute_tap_insertion"] = []
let options["sd_power_hookup_search_repair"] = []
let options["sd_power_switching_activity"] = []
let options["sd_pre_clock_route"] = []
let options["sd_pre_priority_route_report"] = ["-nets","-work_dir",]
let options["sd_prep_collateral_for_pt"] = []
let options["sd_preroute"] = []
let options["sd_priority_create_shields"] = ["-nets","-post_gcr",]
let options["sd_priority_place_hier_pins"] = []
let options["sd_priority_route"] = ["-debug","-devtest","-gcr_avoid_PG_tracks","-gcr_effort","-gcr_keep_session","-gcr_route_clocks","-gcr_skip_pre_checking","-gcr_specific_constr_only","-gcr_strip_pg_mesh","-nets","-shield_only","-use_gcr","-verbose","-work_dir",]
let options["sd_priority_route_group"] = ["-nets",]
let options["sd_process_dcszo_cells"] = []
let options["sd_process_ptlr_collaterals"] = []
let options["sd_propagate_driver_supply"] = []
let options["sd_propagate_pg_terminal"] = []
let options["sd_ps_handle_dangling_ack_net"] = ["-drv_pin","-is_top_level_port","-ps_ack_port","-ps_ack_port_net",]
let options["sd_ps_pg_hookup"] = ["-cells",]
let options["sd_ps_pg_hookup_use_cfg"] = ["-cells","-connect_layer","-incremental","-ps_pin_name",]
let options["sd_ps_remove_hookup"] = ["-cells",]
let options["sd_ps_report_chain_info"] = []
let options["sd_ps_snap_placement"] = []
let options["sd_ps_stitching"] = []
let options["sd_pt_ctsizer_run_flow"] = []
let options["sd_pt_lr_run_flow"] = []
let options["sd_pt_lrdp_run_flow"] = []
let options["sd_pteco_apr_eco_setting"] = []
let options["sd_pteco_fixer"] = []
let options["sd_push_down_pg"] = []
let options["sd_pushdown"] = []
let options["sd_pushdown_pv_voltage_map"] = []
let options["sd_pwr_hookup_interity_check"] = ["-checker_max_tracks_for_gcn","-checker_max_tracks_for_m0","-max_tracks_for_gcn_in_cell","-max_tracks_for_m0_in_cell",]
let options["sd_qea_fill_critical_net_flow"] = []
let options["sd_read_design"] = ["-force_full_view",]
let options["sd_read_design_for_delite"] = []
let options["sd_read_design_for_planning"] = []
let options["sd_read_design_for_split_constraints"] = []
let options["sd_read_layout_file"] = ["-cell","-oasis","-type",]
let options["sd_read_netspec"] = []
let options["sd_read_pin_constraints_in_tcl_format"] = []
let options["sd_read_pin_constraints_in_topo_format"] = []
let options["sd_read_pspec"] = []
let options["sd_read_pushdown_cells"] = []
let options["sd_read_pushdown_content"] = []
let options["sd_read_pushdown_routes_and_blockages"] = []
let options["sd_read_pv_voltage_mapfile"] = []
let options["sd_read_tspec"] = []
let options["sd_read_upf"] = []
let options["sd_read_user_collateral"] = []
let options["sd_read_voltage_tcl_file"] = []
let options["sd_reconcile_tintent"] = []
let options["sd_regen_budgets"] = []
let options["sd_remove_aon_pg_hookup"] = ["-cells",]
let options["sd_remove_critical_nets_for_qea_fill"] = []
let options["sd_remove_donut"] = []
let options["sd_remove_icc_wrappers"] = []
let options["sd_remove_level_shifter"] = []
let options["sd_remove_pg_pins_based_on_user_input"] = []
let options["sd_remove_priority_routes"] = ["-nets",]
let options["sd_remove_top_gas_station_wrapper"] = []
let options["sd_replace_module_netlist"] = []
let options["sd_report_pin_constraints"] = []
let options["sd_report_pin_placement_qor"] = []
let options["sd_reports_app_options"] = []
let options["sd_reports_area"] = []
let options["sd_reports_check_legality"] = []
let options["sd_reports_check_mv_design"] = []
let options["sd_reports_check_pin_placement"] = []
let options["sd_reports_check_routes"] = []
let options["sd_reports_clk_cap_histogram"] = []
let options["sd_reports_clk_latency"] = []
let options["sd_reports_clk_local_skew"] = []
let options["sd_reports_clk_local_skew_histogram"] = []
let options["sd_reports_clk_skew"] = []
let options["sd_reports_clk_structure"] = []
let options["sd_reports_clk_transition"] = []
let options["sd_reports_clock"] = []
let options["sd_reports_clock_drc_violators"] = []
let options["sd_reports_clock_tree_summary"] = []
let options["sd_reports_config_vars"] = []
let options["sd_reports_design_check"] = []
let options["sd_reports_design_qor"] = []
let options["sd_reports_design_report"] = []
let options["sd_reports_macro_data"] = []
let options["sd_reports_max_fanout_vio"] = []
let options["sd_reports_pdfx_content"] = []
let options["sd_reports_pdfx_power_connections"] = []
let options["sd_reports_pg_connectivity"] = []
let options["sd_reports_pg_drc"] = []
let options["sd_reports_pin_placement_qor"] = []
let options["sd_reports_ps_chain_info"] = []
let options["sd_reports_pspec"] = []
let options["sd_reports_qor"] = []
let options["sd_reports_secondary_power_bounds"] = []
let options["sd_reports_threshold_voltage_group"] = []
let options["sd_reports_vio_all"] = []
let options["sd_reports_vio_max_no_clock_expanded_nworst_100"] = []
let options["sd_reports_vio_max_nworst_100"] = []
let options["sd_reports_vio_min_no_clock_expanded_nworst_100"] = []
let options["sd_reports_vio_min_nworst_100"] = []
let options["sd_reports_zeroRC_timing"] = []
let options["sd_reset_library"] = []
let options["sd_restore_input_port_diode_connections"] = []
let options["sd_restore_pre_abstract_cmds"] = []
let options["sd_restore_user_default_app_options"] = []
let options["sd_route"] = []
let options["sd_route_add_via_ladders"] = ["-allow_drcs","-report_tag",]
let options["sd_route_global"] = []
let options["sd_route_opt"] = []
let options["sd_rpd_post_place"] = []
let options["sd_run_adr"] = []
let options["sd_run_conformal_check"] = ["-run_check",]
let options["sd_run_health_check"] = []
let options["sd_run_parallel_job"] = ["-blocks","-cells","-detach","-host_options","-run_order","-script_name","-var_list","-work_dir",]
let options["sd_run_rumba_flow"] = []
let options["sd_save_input_port_diode_connections"] = []
let options["sd_save_user_default_app_options"] = []
let options["sd_seq_chain_alignment"] = ["-anchors","-corridor","-run_place_pins",]
let options["sd_ser_insertion"] = []
let options["sd_set_antenna_rules"] = []
let options["sd_set_attributes"] = []
let options["sd_set_boundary_for_logical_black_box"] = []
let options["sd_set_boundary_insertion_variables"] = []
let options["sd_set_detail_route_shape_use_and_physical_status"] = ["-layers","-nets","-phys_status","-shape_use",]
let options["sd_set_freeze_port_constraints"] = ["-remove","-type",]
let options["sd_set_gvars_from_array"] = []
let options["sd_set_hierarchy_owner"] = []
let options["sd_set_host_options"] = []
let options["sd_set_io_preroute_constraints"] = ["-max_layer_constraint","-min_layer_constraint","-ports","-use_ndr",]
let options["sd_set_is_ft_noconn"] = []
let options["sd_set_is_ft_noconn_for_block"] = []
let options["sd_set_is_td"] = []
let options["sd_set_layer_costs"] = ["-costlist","-reset",]
let options["sd_set_min_max_ignored_layers"] = []
let options["sd_set_multi_vtlibs"] = []
let options["sd_set_parent_bbox"] = []
let options["sd_set_pg_td_true"] = []
let options["sd_set_pocvm_coeff_scale_factor"] = []
let options["sd_set_pocvm_guardband"] = []
let options["sd_set_preroute_constraints"] = []
let options["sd_set_priority_route_options"] = ["-trunk_only","-use_gcr",]
let options["sd_set_routing_direction"] = []
let options["sd_set_tile_symmetry"] = []
let options["sd_set_vt_groups"] = []
let options["sd_set_wiretracks"] = []
let options["sd_setup_ctp_config"] = []
let options["sd_setup_macro_placement_constraints"] = []
let options["sd_setup_parasitic_tech"] = []
let options["sd_setup_placement_constraints"] = []
let options["sd_setup_xmim"] = []
let options["sd_shape_blocks"] = []
let options["sd_shell_budgets"] = []
let options["sd_skew_groups_for_icc"] = []
let options["sd_snap_macro_placement"] = ["-pushdown",]
let options["sd_source_caliber_cbc_files"] = []
let options["sd_spare_cells"] = []
let options["sd_split_constraints"] = []
let options["sd_split_ps_chain"] = ["-control_signal","-domain_name","-use_g_var_libcell",]
let options["sd_stdcell_power_hookup"] = []
let options["sd_stitch_from_mapfile"] = []
let options["sd_stitch_physically_shorted_pins"] = []
let options["sd_stitch_xmim"] = []
let options["sd_swap_design_and_remove_abstract"] = []
let options["sd_swap_macrohalos_heml4"] = ["-macros",]
let options["sd_switch_to_donut"] = []
let options["sd_synthesize_clock_trunks"] = []
let options["sd_tap_cells"] = []
let options["sd_td_handler"] = []
let options["sd_test_budgets"] = []
let options["sd_tho_off"] = []
let options["sd_tho_on"] = []
let options["sd_tho_place"] = []
let options["sd_time_derate_setup"] = ["-corners",]
let options["sd_tm_attach_attribute"] = []
let options["sd_tm_create_terminal_blockage_on_boundary"] = []
let options["sd_tm_get_boundary"] = []
let options["sd_tm_popup"] = ["-disable_mim",]
let options["sd_tm_route_terminal_blockage_on_boundary"] = ["-layer","-only_blockages","-rects",]
let options["sd_tm_write_collateral"] = ["-convert_term_to_shape","-deleteCurrentLayerTM","-disable_mim","-dont_delete_top_metals","-generate_def","-skip_bu_tm",]
let options["sd_undo_pteco_apr_eco_setting"] = []
let options["sd_update_local_config_for_mcmm_run"] = []
let options["sd_update_uin_keepout_cells"] = []
let options["sd_upf_setup"] = []
let options["sd_uv_fill"] = []
let options["sd_vcx250_fill"] = []
let options["sd_vector_swap"] = []
let options["sd_via1_size"] = []
let options["sd_via_color"] = []
let options["sd_visa_set_clock_exceptions"] = []
let options["sd_visa_trace_connectivity"] = []
let options["sd_voltage_areas"] = []
let options["sd_waitForICVComplete"] = []
let options["sd_write_collateral"] = []
let options["sd_write_collateral_for_block"] = ["-block","-cache_dir","-formats",]
let options["sd_write_dp2apr_hand_shaking_ndm"] = []
let options["sd_write_evr_collateral"] = []
let options["sd_write_evr_collateral_for_one_cell"] = ["-cell","-file_name","-layers",]
let options["sd_write_icv_netlist"] = []
let options["sd_write_iss_cmdfile"] = []
let options["sd_write_layout_file"] = ["-cell","-compress","-create_port_for_terminals","-ignore_blocks","-lib","-output_file","-output_net_text","-rename_cell","-skip_fill_output","-use_donut",]
let options["sd_write_macro_spice"] = []
let options["sd_write_oas2ndm"] = ["-fillcell","-input_oasis_file","-input_top_cell","-ndm_lib_cell","-ndm_lib_name","-ndm_lib_path","-rundir",]
let options["sd_write_verilog_netlist"] = []
let options["sd_zt_brb_on_cell_pin_ends"] = []
let options["sd_zt_brb_on_pin_ends"] = ["-pin",]
let options["sd_zt_create_brb_around_macro"] = ["-back_off_half_dr","-macro",]
let options["sd_zt_create_fkp_over_macros"] = ["-layers",]
let options["sd_zt_create_staggered_pin_triplets"] = ["-layers",]
let options["sd_zt_extend_power_staples_neighbors"] = ["-terminals","-zt_staple_ext",]
let options["sd_zt_extend_power_staples_to_boundary"] = ["-layers",]
let options["sd_zt_extend_power_staples_to_macros"] = ["-layers",]
let options["sd_zt_get_dbbrg_layer_spacing"] = ["-layer",]
let options["sd_zt_neighbor_isolated_pins"] = ["-layers","-terminals",]
let options["sd_zt_pull_back_boundary_terms"] = ["-layers",]
let options["sd_zt_query_term_neighbor"] = ["-dir","-terminal",]
let options["sd_zt_remove_brb_on_cell_pin_ends"] = []
let options["sd_zt_stagger_pin_triplets"] = ["-layer","-length1","-length2","-length3","-length4","-length5","-length6",]
let options["seed_pspecs"] = []
let options["setDuetUser"] = []
let options["set_hidden_app_var"] = []
let options["set_info_var"] = ["-caller","-category","-one_of","-required","-type",]
let options["set_m14_pg_config_by_direction"] = []
let options["set_ssc_clock"] = ["-clock","-debug","-from","-to",]
let options["set_ssc_data_read"] = ["-clock","-debug","-from","-hold_args","-nofp","-setup_args","-to",]
let options["set_ssc_data_write"] = ["-clock","-debug","-from","-hold_args","-nofp","-setup_args","-to",]
let options["set_ssc_top_get_par_name"] = []
let options["set_ssc_top_get_unit_name"] = []
let options["set_ssc_top_get_unit_par_names"] = []
let options["set_tmp_var"] = []
let options["set_unix_variable"] = []
let options["setenv"] = []
let options["setvar"] = ["-constant","-info","-one_of","-property","-roulette","-subst","-type",]
let options["setvar_array"] = []
let options["setvar_array_copy_partial"] = ["-clean","-from_array","-from_tag","-to_array","-to_tag",]
let options["sh"] = []
let options["shell_debug"] = []
let options["snps_version_at_least"] = []
let options["snps_version_prior_to"] = []
let options["snps_version_within"] = []
let options["sort_bboxes_y_x_increasing"] = []
let options["source_pkg_file"] = []
let options["split_bins"] = []
let options["ss_remove_net_routing"] = []
let options["tclLog"] = []
let options["tclPkgSetup"] = []
let options["tclPkgUnknown"] = []
let options["tcl_findLibrary"] = []
let options["termWire"] = []
let options["test_rst"] = []
let options["tkerror"] = []
let options["tm_container"] = []
let options["unknown"] = []
let options["unset_tmp_var"] = []
let options["unsetenv"] = []
let options["unsetvar"] = ["-array",]
let options["update_local_config_for_mcmm_run"] = []
let options["v_mod_list"] = []
let options["visa_clocks_in_path_groups"] = []
let options["visa_constraints"] = []
let options["visa_create_clock_and_constraints"] = []
let options["visa_filter_clocks"] = []
let options["visa_find_outlane_number"] = []
let options["visa_get_unit_name"] = []
let options["visa_setup_tool"] = []
let options["visa_uncertainty"] = []
let options["visa_uncertainty_post_cts"] = []
let options["visa_uncertainty_post_process"] = []
let options["visa_unset_tool"] = []
let options["visa_write_need_visa_report"] = []
let options["write_bound"] = []
let options["write_checksum"] = ["-output_directory","-scenario","-type",]
let options["write_clock_trunks"] = ["-clock","-file",]
let options["write_create_clock_for_feedthroughs"] = []
let options["write_dim"] = []
let options["write_hidden_app_var"] = []
let options["write_inc_srsn_for_eco"] = ["-blocks",]
let options["write_placement"] = []
let options["write_pt_checksum"] = ["-output_directory","-pt_exec_path","-pt_user_script","-type",]
let options["ATC_UTILS::change_mode"] = []
let options["ATC_UTILS::check_write_correlation_files_status"] = []
let options["ATC_UTILS::collect_endpoints_reports"] = []
let options["ATC_UTILS::decode_pt_executable_version"] = []
let options["ATC_UTILS::execute_cmd"] = []
let options["ATC_UTILS::find_slew_collector_script"] = []
let options["ATC_UTILS::generate_diagnose_endpoints_cmd"] = []
let options["ATC_UTILS::get_most_critical_slack_endpoints"] = []
let options["ATC_UTILS::get_significant_digits"] = []
let options["ATC_UTILS::make_named_file"] = []
let options["ATC_UTILS::parse_diagnose_options"] = []
let options["ATC_UTILS::print_file"] = []
let options["ATC_UTILS::process_diagnose_tasks"] = []
let options["CLOCK_PLANNING_GUI::clean_data"] = []
let options["CLOCK_PLANNING_GUI::cluster_terms"] = []
let options["CLOCK_PLANNING_GUI::compute_color"] = []
let options["CLOCK_PLANNING_GUI::compute_min_max_metric_values"] = []
let options["CLOCK_PLANNING_GUI::compute_ocv_slack_degradation"] = []
let options["CLOCK_PLANNING_GUI::compute_uncached_clocks"] = []
let options["CLOCK_PLANNING_GUI::create_menu"] = []
let options["CLOCK_PLANNING_GUI::create_single_menu"] = []
let options["CLOCK_PLANNING_GUI::create_tk_clock_trunk_planning_manual_planning"] = []
let options["CLOCK_PLANNING_GUI::do_fix_violations"] = []
let options["CLOCK_PLANNING_GUI::do_trunk_buffering"] = []
let options["CLOCK_PLANNING_GUI::find_cyclic_path"] = []
let options["CLOCK_PLANNING_GUI::fix_violations"] = []
let options["CLOCK_PLANNING_GUI::get_bucket"] = []
let options["CLOCK_PLANNING_GUI::get_clock_trunk_cells"] = []
let options["CLOCK_PLANNING_GUI::get_constraint_mappings"] = []
let options["CLOCK_PLANNING_GUI::get_endpoint_latency"] = []
let options["CLOCK_PLANNING_GUI::get_grandmaster_clock"] = []
let options["CLOCK_PLANNING_GUI::get_interesting_clocks"] = []
let options["CLOCK_PLANNING_GUI::get_pin_or_port"] = []
let options["CLOCK_PLANNING_GUI::get_position_or_object"] = []
let options["CLOCK_PLANNING_GUI::get_selected_clock_pins"] = []
let options["CLOCK_PLANNING_GUI::get_test_info"] = []
let options["CLOCK_PLANNING_GUI::get_trunk_command"] = []
let options["CLOCK_PLANNING_GUI::get_vm_object"] = []
let options["CLOCK_PLANNING_GUI::get_vm_object_hi"] = []
let options["CLOCK_PLANNING_GUI::gui_add_clock_trunk_buffer"] = []
let options["CLOCK_PLANNING_GUI::gui_synthesize_clock_trunk"] = []
let options["CLOCK_PLANNING_GUI::has_selected_clock_pins"] = []
let options["CLOCK_PLANNING_GUI::has_violations"] = []
let options["CLOCK_PLANNING_GUI::is_buffer"] = []
let options["CLOCK_PLANNING_GUI::is_clock_enabled"] = []
let options["CLOCK_PLANNING_GUI::is_in_block"] = []
let options["CLOCK_PLANNING_GUI::is_inf"] = []
let options["CLOCK_PLANNING_GUI::is_repeater"] = []
let options["CLOCK_PLANNING_GUI::map"] = []
let options["CLOCK_PLANNING_GUI::mark_fanin"] = []
let options["CLOCK_PLANNING_GUI::mark_fanout"] = []
let options["CLOCK_PLANNING_GUI::num_format"] = []
let options["CLOCK_PLANNING_GUI::print_columns"] = []
let options["CLOCK_PLANNING_GUI::print_underlined"] = []
let options["CLOCK_PLANNING_GUI::reload_clock_trunk_vm"] = []
let options["CLOCK_PLANNING_GUI::safe_add"] = []
let options["CLOCK_PLANNING_GUI::switch_to_clock"] = []
let options["CLOCK_PLANNING_GUI::synthesize_clock_trunks_for_blocks"] = []
let options["CLOCK_PLANNING_GUI::update_min_max"] = []
let options["CLOCK_PLANNING_GUI::update_ocv_slack_degradation"] = []
let options["CLOCK_PLANNING_GUI::write_clock_trunks"] = []
let options["CORR::Stats"] = []
let options["CORR::addInfo"] = []
let options["CORR::computeStats"] = []
let options["CORR::correl_histogram"] = []
let options["CORR::doCorrel"] = []
let options["CORR::get_args"] = []
let options["CORR::mergeFile"] = []
let options["CORR::preprocess"] = []
let options["CORR::printDash"] = []
let options["CORR::printHeader"] = []
let options["CORR::printMetric"] = []
let options["CORR::printQorHeader"] = []
let options["CORR::printQorMetric"] = []
let options["CORR::printShortMetric"] = []
let options["CORR::showDetails"] = []
let options["CORR::showShortSummary"] = []
let options["CORR::showSummary"] = []
let options["CORR::showSummaryNew"] = []
let options["CORR::splitFile"] = []
let options["CORR::splitMergeFile"] = []
let options["Customize::CleanupBrowser"] = []
let options["Customize::HierBrowserSelChangedCB"] = []
let options["Customize::addContextOptions"] = []
let options["Customize::addSlctTargetsOptions"] = []
let options["Customize::begin_group_op"] = []
let options["Customize::begin_group_up"] = []
let options["Customize::end_group_op"] = []
let options["Customize::end_group_up"] = []
let options["Customize::find_executable"] = []
let options["Customize::get_all_nets"] = []
let options["Customize::get_attribute"] = []
let options["Customize::get_attribute_slct"] = []
let options["Customize::get_hier_browser_class"] = []
let options["Customize::get_path_groups"] = []
let options["Customize::get_timing_paths"] = []
let options["Customize::get_user_hier_list"] = []
let options["Customize::gui_get_float_attribute"] = []
let options["Customize::netscape_is_running"] = []
let options["Customize::openDesignList"] = []
let options["Customize::parse_url"] = []
let options["Customize::read_files_callback"] = []
let options["Customize::recover_user_locale"] = []
let options["Customize::source_tcl_file"] = []
let options["DP_UTIL::all_block_cells"] = []
let options["DP_UTIL::all_io_pads"] = []
let options["DP_UTIL::all_macro_cells"] = []
let options["DP_UTIL::captureWindow"] = []
let options["DP_UTIL::captureWindowSub"] = []
let options["DP_UTIL::delClass"] = []
let options["DP_UTIL::delObject"] = []
let options["DP_UTIL::destroyChildren"] = []
let options["DP_UTIL::disableWidgets"] = []
let options["DP_UTIL::enableWidgets"] = []
let options["DP_UTIL::errPopup"] = []
let options["DP_UTIL::getAbstractCells"] = []
let options["DP_UTIL::getAbstracts"] = []
let options["DP_UTIL::getAllAbstractCells"] = []
let options["DP_UTIL::getAllBlockInsts"] = []
let options["DP_UTIL::getHierBoundGroups"] = []
let options["DP_UTIL::getIOCellsOfPorts"] = []
let options["DP_UTIL::getLoadFile"] = []
let options["DP_UTIL::getPinOrPort"] = []
let options["DP_UTIL::getPortsOfCells"] = []
let options["DP_UTIL::getSaveFile"] = []
let options["DP_UTIL::getSelBlocks"] = []
let options["DP_UTIL::getSelCells"] = []
let options["DP_UTIL::getSelDataPins"] = []
let options["DP_UTIL::getSelHierBoundGroups"] = []
let options["DP_UTIL::getSelIOCells"] = []
let options["DP_UTIL::getSelMacros"] = []
let options["DP_UTIL::getSelPorts"] = []
let options["DP_UTIL::getSystemIcon"] = []
let options["DP_UTIL::getWattrSettings"] = []
let options["DP_UTIL::guiDesignCheck"] = []
let options["DP_UTIL::hidePalette"] = []
let options["DP_UTIL::invokePalette"] = []
let options["DP_UTIL::isEnabled"] = []
let options["DP_UTIL::isPaletteVisible"] = []
let options["DP_UTIL::msgPopup"] = []
let options["DP_UTIL::okCancel"] = []
let options["DP_UTIL::raiseWin"] = []
let options["DP_UTIL::removeFromList"] = []
let options["DP_UTIL::setBalloonHelp"] = []
let options["DP_UTIL::showBalloonHelp"] = []
let options["DP_UTIL::showStack"] = []
let options["DP_UTIL::sourceDebFile"] = []
let options["DP_UTIL::utilPopup"] = []
let options["DP_UTIL::vbind"] = []
let options["DP_UTIL::vbindAll"] = []
let options["DP_UTIL::vdel"] = []
let options["DP_UTIL::vdump"] = []
let options["DP_UTIL::vgen"] = []
let options["DP_UTIL::warnPopup"] = []
let options["EMS::actLOW"] = []
let options["EMS::mergeColl"] = []
let options["EMS::rptTim"] = []
let options["EMS::rptWindow"] = []
let options["EVR::convert_evr_tcl_to_icc"] = ["-replace","-safe","-to",]
let options["EVR::cut_wires_cell"] = ["-all","-attributes_to_add","-attributes_to_save","-bloat","-blockages","-bump_numbers","-create_block","-cut","-dr","-evr","-evr_cells","-hier","-icc","-multiple","-net_type_from_netname","-netlist","-nets","-not_strict","-pinconn_map","-pinlist","-pinlist_lowercase","-port_to_net","-rcext","-remove","-save","-terms","-to","-to_file","-to_inst_name","-top_cell",]
let options["EVR::find_all_cell_locations"] = ["-boundary",]
let options["EVR::find_cell_hier"] = ["-boundary",]
let options["EVR::find_cells"] = ["-boundary",]
let options["EVR::find_inst"] = ["-boundary",]
let options["EVR::get_cell_info"] = ["-hier","-multiple",]
let options["EVR::get_cell_poly"] = ["-bbox","-boundary","-hier","-multiple",]
let options["EVR::parse_netlist"] = ["-cell","-top_cell",]
let options["EVR::parse_pinlist"] = ["-include_cell","-lower",]
let options["EVR::place_cell"] = ["-dx","-dy","-inst","-o","-replace","-verbose","-view",]
let options["EVR::place_cell_auto"] = ["-hier","-inst","-optcell","-verbose","-view",]
let options["EVR::source_to"] = ["-cell","-create_block","-create_net","-dx","-dy","-hier","-layers","-nets","-o","-tag","-term2wire",]
let options["GCR_DELAY_MATCH::additional_loop"] = []
let options["GCR_DELAY_MATCH::calculate_formula"] = []
let options["GCR_DELAY_MATCH::check_and_report_pass_result"] = []
let options["GCR_DELAY_MATCH::cleanup"] = []
let options["GCR_DELAY_MATCH::cleanup_data"] = []
let options["GCR_DELAY_MATCH::clear_timing_start_points"] = []
let options["GCR_DELAY_MATCH::delta_delay"] = []
let options["GCR_DELAY_MATCH::delta_delay_length"] = []
let options["GCR_DELAY_MATCH::do_ddr_lengthing_routing"] = []
let options["GCR_DELAY_MATCH::do_delta_ddr_lengthing_routing"] = []
let options["GCR_DELAY_MATCH::do_nets_timing_converge"] = []
let options["GCR_DELAY_MATCH::do_unlen"] = []
let options["GCR_DELAY_MATCH::enable_log"] = []
let options["GCR_DELAY_MATCH::export_timing_start_points"] = []
let options["GCR_DELAY_MATCH::get_a_and_b"] = []
let options["GCR_DELAY_MATCH::get_achieve_pct"] = []
let options["GCR_DELAY_MATCH::get_all_receiver_pins"] = []
let options["GCR_DELAY_MATCH::get_avg_net_init_delay_length_value"] = []
let options["GCR_DELAY_MATCH::get_corners"] = []
let options["GCR_DELAY_MATCH::get_current_pass"] = []
let options["GCR_DELAY_MATCH::get_detail_route_length"] = []
let options["GCR_DELAY_MATCH::get_detail_route_length_gcr"] = []
let options["GCR_DELAY_MATCH::get_detail_route_length_gcr_internal"] = []
let options["GCR_DELAY_MATCH::get_lengthen_layer"] = []
let options["GCR_DELAY_MATCH::get_log_file"] = []
let options["GCR_DELAY_MATCH::get_match_bbox"] = []
let options["GCR_DELAY_MATCH::get_net_init_delay_length_value"] = []
let options["GCR_DELAY_MATCH::get_net_init_length_value"] = []
let options["GCR_DELAY_MATCH::get_nets_beyond_pct"] = []
let options["GCR_DELAY_MATCH::get_nets_delay_values"] = []
let options["GCR_DELAY_MATCH::get_nets_for_lengthing"] = []
let options["GCR_DELAY_MATCH::get_nets_highest_delay_delta_pct"] = []
let options["GCR_DELAY_MATCH::get_real_target_pct"] = []
let options["GCR_DELAY_MATCH::get_start_point_export_file"] = []
let options["GCR_DELAY_MATCH::get_target_pct"] = []
let options["GCR_DELAY_MATCH::get_timing_log_file"] = []
let options["GCR_DELAY_MATCH::get_timing_report_file"] = []
let options["GCR_DELAY_MATCH::get_timing_start_points"] = []
let options["GCR_DELAY_MATCH::get_tmp_dir"] = []
let options["GCR_DELAY_MATCH::get_working_nets"] = []
let options["GCR_DELAY_MATCH::incr_match_index"] = []
let options["GCR_DELAY_MATCH::init_formula"] = []
let options["GCR_DELAY_MATCH::init_match_bbox"] = []
let options["GCR_DELAY_MATCH::init_tmp_dir"] = []
let options["GCR_DELAY_MATCH::lmax"] = []
let options["GCR_DELAY_MATCH::lmin"] = []
let options["GCR_DELAY_MATCH::match_index"] = []
let options["GCR_DELAY_MATCH::max_string_length"] = []
let options["GCR_DELAY_MATCH::puts_log"] = []
let options["GCR_DELAY_MATCH::record_net_init_delay_length_values"] = []
let options["GCR_DELAY_MATCH::report_nets_timing_result"] = []
let options["GCR_DELAY_MATCH::report_pass_result"] = []
let options["GCR_DELAY_MATCH::report_user_result"] = []
let options["GCR_DELAY_MATCH::retrieve_nets_timing_result"] = []
let options["GCR_DELAY_MATCH::set_achieve_pct"] = []
let options["GCR_DELAY_MATCH::set_corners"] = []
let options["GCR_DELAY_MATCH::set_current_pass"] = []
let options["GCR_DELAY_MATCH::set_lengthen_layer"] = []
let options["GCR_DELAY_MATCH::set_nets_delay_values"] = []
let options["GCR_DELAY_MATCH::set_target_pct"] = []
let options["GCR_DELAY_MATCH::set_timing_start_points"] = []
let options["GCR_DELAY_MATCH::set_ur_uc"] = []
let options["GCR_DELAY_MATCH::set_working_nets"] = []
let options["GCR_DELAY_MATCH::start_nets_delay_match"] = []
let options["GCR_DELAY_MATCH::update_delay_value_on_fly"] = []
let options["GCR_DELAY_MATCH::update_formula"] = []
let options["GCR_DELAY_MATCH::update_formula_by_pass"] = []
let options["ICC2_CLOCK_TUNING::insert_clock_tuning_cells"] = []
let options["InputConstChecker::write_checksum_internal"] = []
let options["Misc::appendArgToCmd"] = []
let options["Misc::appendArgsAndEval"] = []
let options["Misc::appendArgsFromArray"] = []
let options["Misc::appendBoolArgsFromArray"] = []
let options["Misc::asClct"] = []
let options["Misc::asSlctList"] = []
let options["Misc::clearTransactionCache"] = []
let options["Misc::computeChangeOptionInfo"] = []
let options["Misc::copyNetlists"] = []
let options["Misc::create_timing_path_clct"] = []
let options["Misc::getSetTransactionCache"] = []
let options["Misc::getTransactionCache"] = []
let options["Misc::hasDesign"] = []
let options["Misc::identity"] = []
let options["Misc::init_window"] = []
let options["Misc::isClct"] = []
let options["Misc::normalize_bool"] = []
let options["Misc::removeNetlists"] = []
let options["Misc::reportSelection"] = []
let options["Misc::setTransactionCache"] = []
let options["Misc::setTransactionCallback"] = []
let options["Misc::silence"] = []
let options["Misc::trace1"] = []
let options["Misc::traceIn"] = []
let options["NYPD::CheckLegality"] = []
let options["NYPD::DrawGridMap"] = []
let options["NYPD::ECOLegalization"] = []
let options["NYPD::GetUserDefineBBox"] = []
let options["NYPD::GuiBrowseAppOptions"] = []
let options["NYPD::GuiCheckRules"] = []
let options["NYPD::GuiDefineExtBBox"] = []
let options["NYPD::GuiRemoveAnnoations"] = []
let options["NYPD::GuiSetAppOption"] = []
let options["NYPD::GuiShowEditAppOptions"] = []
let options["NYPD::GuiShowGridMap"] = []
let options["NYPD::GuiShowMapIndex"] = []
let options["NYPD::GuiToggleUseFullChip"] = []
let options["NYPD::Toolbox"] = []
let options["PGR::get_comp_pattern_commands"] = []
let options["PGR::get_wire_pat_name_list"] = []
let options["PGR::get_wire_pattern_commands"] = []
let options["PGR::process_wire_pat_dir_layer"] = []
let options["PGR::process_wire_pat_para"] = []
let options["PGR::process_wire_pat_setting"] = []
let options["PGR::test_multiple_layer"] = []
let options["PTEP::dump_groupTbl"] = []
let options["PTEP::parse_args"] = []
let options["PTEP::parse_correl_file"] = []
let options["PTEP::parse_file"] = []
let options["PTEP::summarize_groups"] = []
let options["PTEP::summarize_one_group"] = []
let options["PTEP::wns_percentage"] = []
let options["Qtcl::adjustCreateDialogOptions"] = []
let options["Qtcl::createExpander"] = []
let options["Qtcl::createHExpander"] = []
let options["Qtcl::createVExpander"] = []
let options["Qtcl::executeWithStandardCursor"] = []
let options["Qtcl::filter_copy_paste"] = []
let options["Qtcl::keycode"] = []
let options["Qtcl::pretty_dump_print"] = []
let options["above_fc::above_fc"] = ["-c4_r1_cell","-c4_r2_cell","-c4bump_lib","-calc_dimensions_only","-dic_lib","-die_file","-edm_edm_pins","-edm_etch_combined","-edm_lib","-etch_lib","-pkgtop_name","-shim_12pp_cell","-shim_8pp_cell","-shim_lib","-soc_edm_pins","-soc_lib","-soc_name",]
let options["above_fc::build_hier"] = []
let options["above_fc::c4info_to_die_file_entry"] = []
let options["above_fc::calc_dimensions"] = []
let options["above_fc::create_edm"] = []
let options["above_fc::create_shim"] = []
let options["above_fc::fill_shim"] = []
let options["above_fc::insert_dic_cells"] = []
let options["above_fc::process_die_file"] = ["-case","-dx","-dy","-o","-pkgtop",]
let options["above_fc::propagate_bumps"] = ["-default_layer","-pins",]
let options["above_fc::read_die_file_cells"] = ["-case","-dx","-dy","-o","-pkgtop",]
let options["auto_mkindex_parser::cleanup"] = []
let options["auto_mkindex_parser::command"] = []
let options["auto_mkindex_parser::commandInit"] = []
let options["auto_mkindex_parser::fullname"] = []
let options["auto_mkindex_parser::hook"] = []
let options["auto_mkindex_parser::indexEntry"] = []
let options["auto_mkindex_parser::init"] = []
let options["auto_mkindex_parser::mkindex"] = []
let options["auto_mkindex_parser::slavehook"] = []
let options["boo::EOUT"] = []
let options["boo::IOUT"] = []
let options["c4bump::connect_hierarchical_pins"] = ["-direction","-pin_name_list","-type",]
let options["c4bump::generate_c4_bump_files"] = ["-input_path","-library","-output_path","-top_block",]
let options["c4bump::hier_connect_net_to_pin"] = ["-net","-pins","-type",]
let options["c4bump::write_c4_bumps"] = []
let options["c4bump::write_loc_for_field"] = ["-debug","-depth","-file","-print",]
let options["cleanup::change_wire_owner_net_to_match_shorted"] = []
let options["cleanup::change_wire_via_owner_net_to_match_shorted"] = []
let options["cleanup::convert_rectangles_to_wires"] = []
let options["cleanup::convert_wires_to_routing_corridors"] = ["-match",]
let options["cleanup::create_terminals_matching_child_terminals"] = []
let options["cleanup::create_terminals_matching_pins"] = ["-layers",]
let options["cleanup::create_terminals_matching_wires"] = []
let options["cleanup::remove_duplicate_vias"] = ["-method","-netname",]
let options["cleanup::remove_null_shape_objects"] = ["-force","-layers",]
let options["clk_bu::bbox_is_overlapping"] = []
let options["clk_bu::bbox_of_objects"] = []
let options["clk_bu::check_glbdrv_legs"] = ["-cells",]
let options["clk_bu::clksrc_type"] = []
let options["clk_bu::closest_site"] = []
let options["clk_bu::common_cells"] = []
let options["clk_bu::find_closest_site"] = []
let options["clk_bu::get_bu_cells"] = []
let options["clk_bu::get_cell_bbox"] = []
let options["clk_bu::get_cells_info"] = []
let options["clk_bu::get_cells_not_on_site"] = []
let options["clk_bu::get_clk_bu_cells"] = []
let options["clk_bu::get_clk_bu_pins"] = []
let options["clk_bu::get_glbdrv_bu"] = []
let options["clk_bu::get_hierarchical_pin"] = []
let options["clk_bu::get_overlapped_cells"] = []
let options["clk_bu::get_overlapped_hips"] = []
let options["clk_bu::glbdrv_driver"] = []
let options["clk_bu::glbdrv_receivers"] = []
let options["clk_bu::is_cell_bbox_in_die"] = ["-bbox",]
let options["clk_bu::is_clock_cell"] = []
let options["clk_bu::is_glbdrv_on_site"] = []
let options["clk_bu::is_skipped_hier"] = []
let options["clk_bu::legalize_hard_macros"] = []
let options["clk_bu::parse_unit_per_partition"] = []
let options["clk_bu::print_clk_bu_feedback"] = []
let options["clk_bu::print_clk_bu_spec_file"] = []
let options["clk_bu::print_file_header"] = []
let options["clk_bu::separate_cells"] = []
let options["clk_bu::skip_std_cells"] = []
let options["clk_bu::support_upf"] = []
let options["clk_bu::wrip_off_pushdown_hier"] = []
let options["clkpush::bbox_get_center"] = []
let options["clkpush::break_assign_statements_for_pushdown"] = []
let options["clkpush::cleanup_connectivity"] = []
let options["clkpush::clk_decode_snps_version"] = []
let options["clkpush::clk_getvar"] = []
let options["clkpush::clk_load"] = []
let options["clkpush::clk_print_msg"] = []
let options["clkpush::clk_push"] = []
let options["clkpush::clk_push_one_level"] = []
let options["clkpush::clk_push_rename_nets"] = []
let options["clkpush::clk_remove_pushdown_suffixes"] = []
let options["clkpush::clk_snps_version_at_least"] = []
let options["clkpush::clock_port_get_rtl_port_name"] = []
let options["clkpush::create_clock_units"] = []
let options["clkpush::create_clock_units_for_block"] = []
let options["clkpush::create_clock_units_recursive"] = []
let options["clkpush::cut_clock_routing_over_slaves"] = []
let options["clkpush::disconnect_unrouted_clk_shadow_nets"] = []
let options["clkpush::filter_pushdown_nets"] = []
let options["clkpush::find_clock_inputs_for_remapping"] = []
let options["clkpush::find_in_order_blocks"] = []
let options["clkpush::find_outthrough_clock_routing"] = []
let options["clkpush::fix_ls_verilog_violations"] = []
let options["clkpush::force_pin_direction"] = []
let options["clkpush::get_assign_mappings"] = []
let options["clkpush::get_clk_dop_wrappers"] = []
let options["clkpush::get_clk_unit_hiers_for_block"] = []
let options["clkpush::get_clk_unit_rtl_port_name"] = []
let options["clkpush::get_clock_cell_mi_mappings"] = []
let options["clkpush::get_master_slaves_for_clocks"] = []
let options["clkpush::get_partition_from_point"] = []
let options["clkpush::get_point_in_hier"] = []
let options["clkpush::load_data"] = []
let options["clkpush::map_clock_inputs"] = []
let options["clkpush::mark_clock_ports"] = []
let options["clkpush::mark_dops_with_clock_type"] = []
let options["clkpush::merge_clk_unit"] = []
let options["clkpush::merge_clk_units_recursive"] = []
let options["clkpush::print_clk_unit_info_for_block"] = []
let options["clkpush::pushdown_clock_network"] = ["-buffered_nets","-clk_cells","-filter","-unbuffered_nets",]
let options["clkpush::reconnect_and_port_preserve_pins"] = []
let options["clkpush::reconnect_and_port_unrouted_clk_shadow_nets"] = []
let options["clkpush::reconnect_clk_in_partition"] = []
let options["clkpush::reconnect_mi_merged"] = []
let options["clkpush::remove_clock_data"] = []
let options["clkpush::remove_clock_units_from_block"] = []
let options["clkpush::remove_syn_iso_cell"] = []
let options["clkpush::remove_syn_iso_from_cb2_ls"] = []
let options["clkpush::rename_clock_unit_nets"] = []
let options["clkpush::update_clkbuilder_upf_data"] = []
let options["clkpush::update_clkbuilder_upf_data_for_block"] = []
let options["clkpush::update_connectivity"] = []
let options["clkpush::write_and_create_units"] = []
let options["clock::check_clock_cells"] = ["-clock_cells","-file","-verbose",]
let options["clock::fix_clock_cell_vt"] = ["-cells","-vt",]
let options["clock::get_clock_cells"] = ["-clock","-filter",]
let options["clock::replace_nonclock_cells"] = ["-cells",]
let options["clock::resize_cells_to_valid_size"] = ["-cells",]
let options["coll::collection_to_list"] = []
let options["coll::get_and_collection"] = []
let options["coll::get_and_not_collection"] = []
let options["coll::get_or_collection"] = []
let options["coll::is_a_collection"] = []
let options["coll::is_in_collection"] = []
let options["coll::is_same_collection"] = []
let options["collgen::add_net"] = ["-net","-nettype",]
let options["collgen::add_port"] = ["-port","-portdir","-porttype",]
let options["collgen::add_port_and_net"] = ["-net","-nettype","-port","-portdir","-porttype",]
let options["collgen::cell_is_supernet_transparent"] = []
let options["collgen::cgn_connect_net"] = ["-net","-pin",]
let options["collgen::check_cell_type"] = []
let options["collgen::clean_out_buffer"] = []
let options["collgen::cleanup_port"] = ["-debug","-filter","-ports",]
let options["collgen::cleanup_port_recursive_trace"] = []
let options["collgen::connect_port"] = ["-filehandle","-ports",]
let options["collgen::connect_port_recursive_trace"] = []
let options["collgen::copy_lib_and_refs"] = ["-no_refs",]
let options["collgen::disconnect_lower_block_tie_off_ports"] = []
let options["collgen::dump_floorplan"] = ["-format","-objects","-output_file",]
let options["collgen::dump_pin_constraints_for_selected"] = ["-no_fts","-objects",]
let options["collgen::dump_routes"] = ["-format","-objects","-output_file",]
let options["collgen::dump_terminals_per_block"] = ["-file_suffix","-objects","-outdir",]
let options["collgen::exec_command"] = []
let options["collgen::extract_modules_from_verilog_file"] = []
let options["collgen::generate_formality_do_file"] = ["-file_name",]
let options["collgen::generate_ft_driver_collateral"] = []
let options["collgen::generate_lec_commands_per_block"] = []
let options["collgen::generate_pushdown_hip_list"] = []
let options["collgen::get_net_segments"] = []
let options["collgen::get_tail_connectivity"] = ["-port_array","-ports",]
let options["collgen::get_tail_connectivity_recursive"] = []
let options["collgen::is_abutted"] = []
let options["collgen::read_wrapper_shadow_eco"] = ["-input_dir",]
let options["collgen::reconnect_lower_block_tie_off_ports"] = []
let options["collgen::reorder_port_order_for_lec_"] = []
let options["collgen::set_ft_driver_attributes"] = []
let options["collgen::set_td_type"] = ["-clear","-ports","-td_type",]
let options["collgen::set_td_type_recursive"] = []
let options["collgen::split_blocks"] = ["-blocks","-no_refs","-tlib",]
let options["collgen::trace_between"] = []
let options["collgen::trace_from"] = []
let options["collgen::trace_ft_driver_for_all_pins"] = []
let options["collgen::trace_ft_driver_for_cell"] = []
let options["collgen::trace_ft_driver_for_pinnames_"] = []
let options["collgen::trace_ft_driver_for_pins_"] = []
let options["collgen::write_clock_types_file"] = []
let options["collgen::write_clock_types_file_from_attr_file"] = []
let options["collgen::write_die_file_info"] = []
let options["collgen::write_dop_map_file"] = []
let options["collgen::write_feedthru_ports"] = []
let options["collgen::write_ft_driver"] = []
let options["collgen::write_ft_port_pair_"] = []
let options["collgen::write_generic_dont_touch"] = []
let options["collgen::write_hier_pg_def"] = []
let options["collgen::write_logical_ports"] = []
let options["collgen::write_macro_shell_verilog"] = ["-macro_list",]
let options["collgen::write_pg_def_for_block"] = []
let options["collgen::write_pg_ports"] = []
let options["collgen::write_shell_verilog"] = []
let options["collgen::write_shell_verilog_for_design_library"] = []
let options["collgen::write_syndp_inputs"] = []
let options["collgen::write_td_subset_cells"] = ["-block","-output_file","-path","-td_type",]
let options["collgen::write_td_subset_connectivity"] = ["-block","-output_file","-path","-td_type",]
let options["collgen::write_td_subset_routes"] = ["-block","-output_file","-path","-td_type",]
let options["collgen::write_track_region_config"] = []
let options["collgen::write_wrapper_shadow_eco"] = ["-append_output","-input_shadow_file","-nets","-output_dir",]
let options["common::check_error_counter"] = ["-return_num",]
let options["common::close_log"] = []
let options["common::disable_error_counter"] = []
let options["common::enable_error_counter"] = []
let options["common::format_msg"] = []
let options["common::get_caller"] = []
let options["common::open_log"] = []
let options["common::print"] = []
let options["comp::remove_icc_cmds_from_sdc_file"] = ["-cmds_to_remove","-sdc_file",]
let options["comp::translate_icc2_orientations"] = ["-file",]
let options["comp::translate_icc2_vias_file"] = ["-in_pg_vias_file","-in_signal_vias_file","-outfile",]
let options["comp::translate_icc_dc_dont_touch_cells_file"] = ["-infile","-outfile",]
let options["comp::translate_icc_place_file"] = ["-infile","-outfile",]
let options["comp::translate_icc_route_file"] = ["-infile","-outfile",]
let options["comp::translate_icc_sdc_file"] = ["-infile","-outfile","-sdc_lib_mapping_file",]
let options["comp::translate_icc_track_file"] = ["-infile","-outfile",]
let options["ctm::balance_levels"] = ["-clk","-level",]
let options["ctm::check_lib_constraints"] = ["-clks",]
let options["ctm::clone_clock_gadget"] = []
let options["ctm::ctmesh_save_step"] = []
let options["ctm::disable_multi_clocks"] = ["-clks",]
let options["ctm::duplicate_flop_chain"] = ["-bbox","-levels","-pins",]
let options["ctm::duplicate_instance"] = ["-copy_user_attributes","-inst","-pins","-prefix","-suffix",]
let options["ctm::get_clock_cells"] = ["-clk","-group","-level",]
let options["ctm::get_clock_leaf_pins"] = ["-clk","-group","-level",]
let options["ctm::get_clock_leaves"] = ["-clk","-group","-level",]
let options["ctm::get_clock_nets"] = ["-clk","-group","-level",]
let options["ctm::get_clock_var"] = ["-clk","-quiet",]
let options["ctm::get_exceptions"] = ["-clk","-group",]
let options["ctm::get_grid_nets"] = ["-clk","-group",]
let options["ctm::get_gridclk"] = ["-master",]
let options["ctm::get_non_buffer_driver"] = ["-pins",]
let options["ctm::nominalize_clock_cells"] = ["-clks",]
let options["ctm::remove_dangling_clock_cells"] = ["-clks",]
let options["ctm::report_clock_levels"] = ["-clks","-groups",]
let options["ctm::set_exceptions"] = ["-clocks","-ignore_gen_clocks","-ignore_pins","-stop_cells","-stop_pins",]
let options["ctm::set_ideal_latency"] = ["-clk","-scenario",]
let options["ctm::set_lib_constraints"] = []
let options["ctm::set_spine_net_timing"] = ["-clk",]
let options["ctm::set_stop_pins"] = ["-clocks","-pins",]
let options["ctm::stamp_gridnet_delays"] = ["-clks",]
let options["ctm::write_cell_delay_report"] = ["-clocks","-file",]
let options["ctm::write_latency_diff_report"] = ["-clocks","-file",]
let options["ctm::write_latency_expanded_report"] = ["-clocks","-file",]
let options["ctm::write_net_delay_report"] = ["-clocks","-file",]
let options["ctm::write_transition_report"] = ["-clocks","-file",]
let options["cts::add_cell_spacing_rule"] = []
let options["cts::compute_partition_latency_targets"] = []
let options["cts::create_par_latency_template"] = []
let options["cts::expand_refs"] = ["-return",]
let options["cts::generate_latency_target_reports"] = []
let options["cts::get_clk_delay_per_par"] = []
let options["cts::get_par_spec_latency"] = []
let options["cts::remove_cell_spacing_rule"] = []
let options["cts::set_constrainted_clock_max_transition"] = ["-clocks","-max_tran","-scenarios",]
let options["dfm::get_lib_base_paths"] = []
let options["dfm::get_runset_from_env"] = []
let options["dfm::get_runset_path_from_env"] = []
let options["dfm::print_tool_vars"] = []
let options["dfm::restore_icv"] = []
let options["dfm::restore_icwbev"] = []
let options["dfm::restore_tool"] = []
let options["dfm::save_run_files"] = []
let options["dfm::setup_icv"] = []
let options["dfm::setup_icwbev"] = []
let options["dfm::setup_rundir"] = []
let options["dfm::setup_tmpdir"] = []
let options["dfm::setup_tool"] = []
let options["dfm::setup_workdir"] = []
let options["dmm::create_ddh_config"] = []
let options["dmm::report_ddh"] = ["-file",]
let options["dmm::set_ddh_config"] = []
let options["dnd::_load"] = []
let options["dop::create_dop_strips_and_trunks"] = []
let options["dop::create_new_dops"] = []
let options["dop::get_dop_clocks"] = ["-force","-type",]
let options["dop::get_dop_output_nets"] = ["-clock","-force","-group","-type",]
let options["dop::get_dops"] = ["-clock","-force","-group","-type",]
let options["dop::get_groups_of_clock"] = ["-clk","-type",]
let options["dop::get_master_dop_pin"] = ["-dop_pins","-exception_pins",]
let options["dop::get_ref_clock"] = ["-group",]
let options["dop::insert_dop_via_ladder"] = ["-allow_drcs","-dop_nets","-dop_pins","-remove",]
let options["dop::legalize_dops"] = ["-dops","-layer",]
let options["dop::read_clock_types"] = ["-file","-force",]
let options["dop::reconnect_dop_taps"] = ["-dop_pins","-taps",]
let options["dop::shield_dop_nets"] = ["-dirty_mode","-dop_nets",]
let options["dop::snap_dops_to_m5_pg_grid"] = []
let options["dop::sort_by_location"] = []
let options["dop::update_dop_outnet_names"] = []
let options["dp_notifier::attach"] = []
let options["dp_notifier::detach"] = []
let options["dp_notifier::notify"] = []
let options["draw::add_text"] = ["-color","-location","-text","-width",]
let options["draw::clear"] = []
let options["draw::draw_alignment_edge"] = ["-color","-edge","-layer",]
let options["draw::draw_bbox"] = ["-bbox","-color","-cross","-width",]
let options["draw::draw_edge"] = []
let options["draw::draw_line"] = ["-color","-points","-type","-width",]
let options["draw::draw_polygon"] = ["-color","-points","-width",]
let options["draw::draw_routing_track"] = ["-colors","-layer","-width",]
let options["draw::draw_voltage_area"] = []
let options["dtDfm::V0_328_vss_fixing"] = ["-contact_name","-ground_name","-ground_voltage_areas","-keepin_cells_list","-power_name","-power_voltage_areas","-process_name","-write_def_file",]
let options["dtDfm::V0_328_vss_fixing_writeuin"] = []
let options["dtDfm::copyFromSTMToTop"] = []
let options["dtDfm::create_fill_vias"] = []
let options["dtDfm::delete_all_fill"] = []
let options["dtDfm::dummy__"] = []
let options["dtDfm::fill_base_layer"] = ["-density_boundary_assumption","-density_kor_assumption","-density_window_size","-density_window_x_offset","-density_window_x_stepping","-density_window_y_offset","-density_window_y_size","-density_window_y_stepping","-excludeKOR","-far_fill_density_target","-keepout_cells_list","-korspX","-korspY","-layer","-near_fill_density_target","-ply","-plys","-top_level_only_kor","-verbatim",]
let options["dtDfm::fill_base_layer_writeuin"] = []
let options["dtDfm::fill_metal_icv"] = ["-break_min_length","-break_offset","-break_pattern","-break_patterns","-cellname","-do_ungridded_fill","-grid_patterns","-hybrid","-layer","-offset","-outputcellname","-pattern","-property","-region_grids","-stub_property","-stubnet","-techname","-transition_offset","-transition_pattern","-transition_patterns","-transition_period","-viewname",]
let options["dtDfm::fill_metal_icv_checkcell"] = []
let options["dtDfm::fill_metal_icv_end"] = []
let options["dtDfm::fill_metal_icv_get_tech"] = []
let options["dtDfm::fill_metal_icv_init"] = ["-cellname","-do_final_texting","-explicit_parallel","-fast_read_fill_vias","-fillincelview","-fillinmw","-icv_options","-launch_script","-layer_map_for_mw","-mwlibrary","-mwoutpath","-nbclass","-nbpool","-nbslot","-netname_for_untexted_objects","-no_tracks_file","-only_write_uin","-outputcellname","-property","-rename_nets","-run_mode","-save_workdir","-skip_dummy_250","-skip_output","-skip_result_stm_output","-stream","-streamlined","-stub_property","-stubnet","-techname","-text_extensions","-uindir","-use_lnf_input","-use_pds","-verbatim","-viewname",]
let options["dtDfm::fill_metal_icv_print_error"] = []
let options["dtDfm::fill_metal_icv_print_info"] = []
let options["dtDfm::fill_metal_icv_readresults"] = []
let options["dtDfm::fill_metal_icv_run_streamlined"] = ["-layer_opts","-layers","-prune_cells_lists","-tiling_opts",]
let options["dtDfm::fill_metal_icv_runflow"] = []
let options["dtDfm::fill_metal_icv_saveas"] = []
let options["dtDfm::fill_metal_icv_streamlined_writeuin"] = []
let options["dtDfm::fill_metal_icv_write_break_pattern_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_cells_list_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_density_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_kor_options_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_kors_to_uin_whitebox_mode"] = []
let options["dtDfm::fill_metal_icv_write_output_options_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_pattern_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_region_grids_option_value_pair_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_region_grids_to_uin"] = []
let options["dtDfm::fill_metal_icv_write_transition_pattern_to_uin"] = []
let options["dtDfm::fill_metal_icv_writeuin"] = []
let options["dtDfm::fill_via_icv"] = ["-check_for_hv","-connect_to_existing_floating_metal","-ehv_nets","-fill_container_name","-hv_nets","-layers","-uhv_nets","-use_drawn_kor","-use_fill_kor","-use_global_kor","-use_pod_density_windows","-use_route_kor","-use_switch_id_kor","-verbatim",]
let options["dtDfm::fill_via_icv_get_net_name_list"] = []
let options["dtDfm::fill_via_icv_old"] = ["-cellname","-hookup_regions","-layer","-property","-stub_property","-techname","-viewname",]
let options["dtDfm::fill_via_icv_runflow"] = []
let options["dtDfm::fill_via_icv_write_hookup_regions_to_uin"] = []
let options["dtDfm::fill_via_icv_writeuin"] = []
let options["dtDfm::fill_via_icv_writeuin_vfill_layers"] = []
let options["dtDfm::fix_v0pax_dfmg"] = ["-excludeKOR","-keepin_cells_list","-keepout_cells_list","-keepout_cells_x_space","-keepout_cells_y_space","-korspX","-korspY","-layer","-result_container_name","-top_level_only_kor",]
let options["dtDfm::fix_v0pax_dfmg_writeuin"] = []
let options["dtDfm::fix_vcx250"] = ["-excludeKOR","-keepin_cells_list","-keepout_cells_list","-keepout_cells_x_space","-keepout_cells_y_space","-korspX","-korspY","-layer","-result_container_name","-top_level_only_kor",]
let options["dtDfm::fix_vcx250_writeuin"] = []
let options["dtDfm::getPeriodFromPattern"] = []
let options["dtDfm::get_cist_cmd_info"] = []
let options["dtDfm::get_pxl_ply"] = []
let options["dtDfm::interrupted"] = []
let options["dtDfm::is_dg_layer"] = []
let options["dtDfm::is_run_mode"] = []
let options["dtDfm::is_via_layer"] = []
let options["dtDfm::is_via_layer_by_name"] = []
let options["dtDfm::keylexist"] = []
let options["dtDfm::keylget"] = []
let options["dtDfm::keylset"] = []
let options["dtDfm::lremove"] = []
let options["dtDfm::powerhookup"] = ["-add_zt_m1_extensions","-bndry_y_min","-cell_height","-checker_max_tracks_for_gcn","-checker_max_tracks_for_m0","-dh_bonus_cells_list","-disable_dfm_bridging","-disable_m1_row_jumpers","-drawn_kor_x_space","-drawn_kor_y_space","-dsn_core_areas","-enable_m0_ek_mode","-force_hookup_cells_list","-ground_name","-ground_pin_names","-ground_rail_y_start","-ground_voltage_areas","-hookup_cell_names_list","-hookup_cell_names_list_xn","-hookup_via_settings","-icc2_mode","-keepin_cells_list","-keepout_cells_list","-keepout_cells_x_space","-keepout_cells_y_space","-limit_hookup_to_area","-m2_rail_width","-max_tracks_for_gcn_in_cell","-max_tracks_for_m0_in_cell","-power_name","-power_pin_names","-power_voltage_areas","-powerhookup_all_segments","-powerhookup_avoid_drv","-powerhookup_cells_area","-powerhookup_drv_vias_cells_list","-powerhookup_empty_area","-powerhookup_grid_count","-powerhookup_offset_locations","-process_name","-top_level_only_kor","-use_drawn_kor","-use_fill_kor","-use_global_kor","-use_route_kor","-use_xll_grid","-v0_master","-v1_master","-verbatim","-write_coord_file","-write_def_file_prefix","-write_user_shape_file",]
let options["dtDfm::powerhookup_writeuin"] = []
let options["dtDfm::powervia12dg"] = ["-keepout_cells_list","-power_nets","-process_name",]
let options["dtDfm::powervia12dg_writeuin"] = []
let options["dtDfm::read_stm"] = ["-convert_to_bbox","-from_cell","-from_view","-layers","-netname_for_untexted_objects","-path","-property","-rename_nets","-stub_property","-stubnet","-techname","-to_cell","-to_view",]
let options["dtDfm::rename_nets"] = ["-mw_cellname","-nets_to_rename",]
let options["dtDfm::rename_nets_writeuin"] = []
let options["dtDfm::reset_metal_fill_defaults_icv"] = []
let options["dtDfm::reset_via_fill_defaults_icv"] = []
let options["dtDfm::runFillFlow"] = []
let options["dtDfm::set_metal_fill_defaults_icv"] = ["-consider_off_grid","-excludeKOR","-fill_length","-half_dr_end_to_end","-korspX","-korspY","-layers","-use_fill_markers","-verbatim",]
let options["dtDfm::set_via_fill_defaults_icv"] = ["-consider_hv_violations","-density_boundary_assumption","-density_fill_downto","-density_kor_assumption","-density_target","-density_window_size","-density_window_x_offset","-density_window_x_stepping","-density_window_y_offset","-density_window_y_size","-density_window_y_stepping","-eco_region","-ehv_nets","-exclCells","-excludeKOR","-fast_density","-fill_container_name","-fill_net_names","-hv_nets","-icv_options","-iteration_count","-korspX","-korspY","-layers","-top_level_only_kor","-uhv_nets","-verbatim",]
let options["dtDfm::upsz_via"] = ["-excludeKOR","-keepin_cells_list","-keepout_cells_list","-keepout_cells_x_space","-keepout_cells_y_space","-korspX","-korspY","-layer","-result_container_name","-top_level_only_kor",]
let options["dtDfm::upsz_via_writeuin"] = []
let options["dtDfm::wait_on_pds_job"] = []
let options["dtDfm::writeKORsToUIN"] = []
let options["dtDfm::writeRegionGrids"] = []
let options["dtDfm::write_plys_to_uin"] = []
let options["eco::backup_changelist"] = []
let options["eco::backup_preeco_nlib"] = []
let options["eco::capture_cell_changes"] = []
let options["eco::checkpoint_save_and_report"] = []
let options["eco::connect_ps_cells"] = []
let options["eco::find_nearest_ps_cell"] = []
let options["eco::get_added_cells"] = ["-skip_capture",]
let options["eco::get_added_or_modified_cells"] = ["-skip_capture",]
let options["eco::get_modified_cells"] = ["-skip_capture",]
let options["eco::get_variant_cells"] = ["-skip_capture",]
let options["eco::insert_power_switches"] = ["-aon_connect","-boundary","-dont_chain","-dont_snap","-x_incr","-y_incr",]
let options["eco::insert_ps_around_rp"] = ["-ps_x_incr","-ps_y_incr","-rp_bloat_x","-rp_bloat_y",]
let options["eco::reset_flow"] = []
let options["eco::reset_identify_eco_attributes"] = []
let options["eco::set_run_tag"] = []
let options["eco::write_history_file"] = []
let options["fcde_dm::NflTclFindTheFullPath"] = []
let options["fcde_dm::load_udmpp_connan_tcl_files"] = []
let options["fcde_dm::load_udmpp_libs"] = []
let options["fcde_dm::load_udmpp_predecessors"] = []
let options["fcde_dm::load_udmpp_regression_libs"] = []
let options["fcde_dm::load_udmpp_tcl_files"] = []
let options["fevcheck::generate_lec_do_file"] = ["-mode",]
let options["file::append"] = []
let options["file::cmp_mtime"] = []
let options["file::cp_files"] = []
let options["file::create_icc_cmd_file"] = ["-cmds","-exit","-log_file","-out_file",]
let options["file::create_icc_setup_cmd_file"] = ["-at","-cmd_file","-dbb","-machine","-new_machine","-ot","-out_file","-ov","-project","-tool","-work_area_name","-xterm",]
let options["file::diff"] = []
let options["file::dir_diff"] = []
let options["file::is_line_comment"] = []
let options["file::read_file"] = []
let options["file::sort_files"] = []
let options["file::touch_file"] = []
let options["file::write_file"] = []
let options["foveros::align_bump_objects_to_tsv"] = []
let options["foveros::align_tsv_to_pd_intent"] = []
let options["foveros::check_bump_objects_consistency"] = []
let options["foveros::get_net"] = []
let options["foveros::import_die_file"] = ["-auto_net_creation","-case_sensitive","-diefile_netname_mapfile","-dx","-dy","-orientation",]
let options["foveros::load_pd_intent"] = []
let options["foveros::point_from_other_die"] = []
let options["foveros::point_to_other_die"] = []
let options["fp::backup_remove_hard_placement_blockages"] = []
let options["fp::check_terminal_offgrid"] = ["-fix","-terminals",]
let options["fp::check_terminal_width"] = ["-fix","-terminals",]
let options["fp::check_voltage_area"] = ["-logfile",]
let options["fp::create_ps_pg_grid"] = ["-cells","-grid_num","-grid_type","-indexes","-layers","-net_tag",]
let options["fp::create_routing_blockage_around_polygons"] = ["-enable_guides_on_boundary","-layers","-margin","-poly","-prefix",]
let options["fp::create_routing_blockage_for_macro"] = ["-layers",]
let options["fp::create_row"] = ["-flip_first_row","-tiles",]
let options["fp::create_rows_for_bonus"] = ["-tileinfo","-tilename",]
let options["fp::create_rows_for_core"] = ["-die_area","-name","-tilename",]
let options["fp::create_ubump_driver"] = []
let options["fp::define_custom_pg_config"] = ["-bbox","-custom_template","-reset","-tag","-tag_append","-vdd_net","-vss_net",]
let options["fp::extend_terminals"] = ["-layers","-ports",]
let options["fp::fix_voltage_area"] = []
let options["fp::get_track_location"] = ["-all","-dont_ignore_reserved_track","-ignore_power","-layer","-skip_track_next_to_power","-width",]
let options["fp::get_tracks_cross_bbox"] = ["-bbox","-endpoint_offset","-layer","-pitch","-tracks",]
let options["fp::is_boundary_terminal_layer"] = ["-layer",]
let options["fp::propagate_macro_pins_to_terminals"] = ["-all_pins","-convert_pg_pins","-debug","-for_framgen","-layers","-macros","-pins","-skip_mjc",]
let options["fp::pull_back_terminal_from_boundary"] = ["-port_list",]
let options["fp::pushdown_cells"] = ["-cells",]
let options["fp::remove_overlapping_ps_cells"] = []
let options["fp::restore_hard_placement_blockages"] = []
let options["fp::write_voltage_area"] = ["-gen_cmd","-outfile",]
let options["fp_edit::align_pins_from_selected"] = ["-anchor","-pins",]
let options["fp_edit::align_shape_pins_from_selected"] = ["-anchor","-objects",]
let options["fp_edit::calc_channel_width"] = ["-number_of_routes","-pattern",]
let options["fp_edit::calc_path_width"] = ["-bbox","-shape_dir",]
let options["fp_edit::calc_per_block_polygons"] = ["-poly",]
let options["fp_edit::change_width"] = ["-force","-non_preferred","-pins","-shapes","-width",]
let options["fp_edit::check_shapes_match_pattern"] = ["-layer","-pattern","-polygon","-return_offgrid","-snap_to_track","-terminals","-update_width",]
let options["fp_edit::construct_new_bbox_from_matching_pin_bbox_and_edge_and_direction"] = []
let options["fp_edit::copy_mi_routing"] = ["-master","-objects","-pin_map_file","-remove","-targets",]
let options["fp_edit::copy_shape_bbox"] = ["-bbox","-shape",]
let options["fp_edit::count_routing_tracks"] = ["-pattern","-range",]
let options["fp_edit::create_abutted_pins"] = ["-direction","-logical_pin_exists","-pins",]
let options["fp_edit::create_block_grids"] = []
let options["fp_edit::create_boundary_terminals_from_shapes"] = ["-shapes",]
let options["fp_edit::create_pin_guides_from_pins_with_distance_and_direction"] = ["-direction","-distance","-layers","-port","-route_corridor",]
let options["fp_edit::create_pins_under_terminals"] = ["-logical_pin_exists","-ports",]
let options["fp_edit::create_port_terminal"] = ["-coord","-layer","-port","-remove_existing_terminals","-snap_to_boundary","-term_length",]
let options["fp_edit::create_projected_top_level_terminal_for_port"] = []
let options["fp_edit::create_region_tracks"] = ["-bbox","-create_tracks","-file_name","-patterns","-ratio","-tag",]
let options["fp_edit::create_region_tracks_based_on_pins"] = ["-file_name","-no_filter","-pins","-range","-tag","-visualize","-yes_filter",]
let options["fp_edit::create_td_pin_shape"] = ["-bbox","-cell","-keep_existing_pin_shapes","-shapes",]
let options["fp_edit::create_td_pins_on_dangling_wires"] = ["-cells","-nets",]
let options["fp_edit::create_terminals_from_bbox"] = ["-bbox","-layer","-port",]
let options["fp_edit::create_terminals_from_shapes"] = ["-bbox_coord","-rm_shapes","-shapes",]
let options["fp_edit::create_top_level_terminal"] = ["-layer","-net",]
let options["fp_edit::cut_shapes_by_bbox"] = ["-bbox_coord","-rm_shapes","-shapes",]
let options["fp_edit::dump_block_boundaries"] = ["-cells",]
let options["fp_edit::extend_pins_to_side_and_preroute"] = ["-pins","-side",]
let options["fp_edit::extend_shapes_to_boundary"] = ["-shapes","-side",]
let options["fp_edit::extend_shapes_to_point"] = ["-point","-shapes",]
let options["fp_edit::find_combined_bbox_of_objects"] = []
let options["fp_edit::find_edge_on_boundary_closest_to_point_in_a_direction"] = []
let options["fp_edit::find_nearest_elem"] = []
let options["fp_edit::find_pattern"] = ["-layer","-quiet","-signal_only","-width",]
let options["fp_edit::focus_on_net"] = ["-nets","-remove",]
let options["fp_edit::get_legal_widths"] = []
let options["fp_edit::get_relative_rotation"] = []
let options["fp_edit::highlight_region_tracks"] = []
let options["fp_edit::identify_pattern"] = ["-layer","-width_space_list",]
let options["fp_edit::identify_track_pattern_based_on_pins"] = ["-no_filter","-pins","-yes_filter",]
let options["fp_edit::initialize_crt_legal_widths"] = []
let options["fp_edit::is_gui_enabled"] = []
let options["fp_edit::match_pattern"] = ["-patterns","-width_space_list",]
let options["fp_edit::over_bump_routing"] = ["-bbox","-list_of_patterns","-net",]
let options["fp_edit::port_up_shapes"] = ["-shapes",]
let options["fp_edit::project_pins_to_top_boundary"] = ["-direction","-pins",]
let options["fp_edit::push_down_pins"] = []
let options["fp_edit::remove_shield_routes"] = []
let options["fp_edit::remove_signal_routes"] = []
let options["fp_edit::report_track_patterns"] = ["-layer",]
let options["fp_edit::resize_shape"] = []
let options["fp_edit::return_phys_connected_shapes_and_vias"] = []
let options["fp_edit::route_aligned_ft_terminals"] = ["-terminals",]
let options["fp_edit::route_from_pins_given_direction_and_distance"] = ["-anchor_pin","-direction","-distance","-hlayer","-pins","-vlayer",]
let options["fp_edit::route_shape_by_shape"] = ["-pins","-topo",]
let options["fp_edit::route_signals_push_pins"] = ["-bundle","-hlayer","-hwidth","-is_td","-nets","-points","-push_down_pins","-vlayer","-vwidth",]
let options["fp_edit::route_simple_topology"] = ["-nets",]
let options["fp_edit::set_cells_grid"] = ["-cells","-grid","-snap",]
let options["fp_edit::snap_pins"] = ["-anchor","-objects","-port",]
let options["fp_edit::snap_poly_to_zero"] = ["-points",]
let options["fp_edit::sort_nets_based_on_pin_location"] = ["-direction","-pins",]
let options["fp_edit::un_port_terminals"] = ["-ports",]
let options["fp_edit::update_to_min_length"] = ["-shapes",]
let options["fp_gcr::calc_all_pins_bbox"] = []
let options["fp_gcr::gcr_group_routing"] = ["-debug","-effort","-group_size","-nets","-pref_step","-verbose","-work_dir",]
let options["fp_gcr::gcr_swizzle_routing"] = ["-jog_up","-layer","-nets",]
let options["fp_rpt::break_one_shape_and_reassign"] = ["-cut_line","-new_net","-original_net_side","-shape",]
let options["fp_rpt::break_wire_rename_net"] = ["-cells","-nets","-original_net_side",]
let options["fp_rpt::calc_one_rpt_grid"] = []
let options["fp_rpt::crawl_a_shape"] = []
let options["fp_rpt::get_checker_coord"] = []
let options["fp_rpt::get_timing_based_rpt_coord"] = ["-delay","-net","-start",]
let options["fp_rpt::get_unique_cell_name_ind"] = []
let options["fp_rpt::get_unique_net_name_ind"] = []
let options["fp_rpt::get_unique_net_name_rpt_ind"] = []
let options["fp_rpt::hc_check_cell_cbc_locations"] = []
let options["fp_rpt::init_checker_rpt_grid"] = []
let options["fp_rpt::insert_place_one_repeater"] = ["-buffer_lib_cell","-inverter_lib_cell","-net","-new_net","-original_net_side","-rpt_location","-rpt_name","-rpt_orientation","-shape",]
let options["fp_rpt::is_odd_ind"] = []
let options["fp_rpt::rpt_legalize_and_route_tails"] = ["-legalize","-route_tails","-rpt_cells",]
let options["fp_rpt::rpt_pwr_hookup"] = ["-cells","-power_supply_net",]
let options["fp_rpt::sd_insert_rpt_bboxes"] = ["-add_gnacs","-grid_width","-is_td","-nets","-on_top_hierarchy","-reset_structures","-respect_gas_station","-respect_voltage_areas","-rpt_lib_cell","-rpt_station_bboxes","-tail_routing",]
let options["fp_rpt::sd_insert_rpt_distance"] = ["-dump_command_line_only","-exclude_partitions","-is_td","-legalize","-nets","-on_top_hierarchy","-rpt_lib_cell","-rpt_partitions","-tail_routing",]
let options["fp_rpt::sd_place_existing_rpt"] = ["-bbox","-cells","-cells_in_grid","-grid_height_mult","-grid_width","-route_dir",]
let options["fp_rpt::sd_place_existing_rpt_based_on_routes"] = ["-anchors","-bbox","-cells","-grid_width","-route_dir",]
let options["fp_rpt::sd_remove_inv"] = ["-buf_lib_cell","-cells","-remove_buffer",]
let options["fp_rpt::sd_replace_buf_with_inv"] = ["-buffers","-inv_lib_cell",]
let options["fp_rpt::set_deterministic_cell_net_names"] = []
let options["fp_rpt::snap_coord_to_plc_grid"] = []
let options["geo::bbox_bloat_side"] = []
let options["geo::bbox_get_center"] = []
let options["geo::bbox_get_height"] = []
let options["geo::bbox_get_ll"] = []
let options["geo::bbox_get_ur"] = []
let options["geo::bbox_get_width"] = []
let options["geo::bbox_get_xh"] = []
let options["geo::bbox_get_xl"] = []
let options["geo::bbox_get_yh"] = []
let options["geo::bbox_get_yl"] = []
let options["geo::bbox_is_containing_pt"] = ["-no_touch",]
let options["geo::bbox_resize"] = []
let options["geo::bbox_translate"] = []
let options["geo::center_of_gravity"] = []
let options["geo::convert_bbox_to_polygon"] = []
let options["geo::convert_list_to_bbox"] = []
let options["geo::convert_polygon_to_bbox"] = []
let options["geo::create_windows"] = ["-columns","-rows","-within",]
let options["geo::do_bboxes_intersect"] = []
let options["geo::get_boundary_edges"] = ["-boundary","-edge_type",]
let options["geo::get_distance"] = []
let options["geo::get_intersect_edge"] = []
let options["geo::is_point_in_polygon"] = []
let options["geo::path_orientation"] = []
let options["geo::pin_is_on_boundary"] = []
let options["geo::point_get_points_xy_distance"] = []
let options["geo::point_resize_to_bbox"] = []
let options["geo::polygon_get_bbox"] = []
let options["geo::rect_2_bbox"] = []
let options["gui::highlight_nets"] = ["-layers","-nets","-terminal_only",]
let options["gui::select_cell"] = ["-highlight","-zoom",]
let options["gui::select_lib_cell"] = ["-highlight","-zoom",]
let options["gui::select_net"] = ["-highlight","-layers","-zoom",]
let options["gui::select_port"] = ["-highlight","-zoom",]
let options["gui::select_terminal"] = ["-highlight","-of_port","-zoom",]
let options["gui::zoom"] = ["-selection",]
let options["hc::check_bad_nets_for_pin_placement"] = []
let options["hc::check_nets_which_cannot_be_pushed_down"] = ["-nets",]
let options["hc::create_xor2spec_err_file"] = []
let options["hc::distributed_health_checks"] = ["-force","-init_summary","-top_only",]
let options["hc::distributed_health_checks_for_all_blocks"] = ["-force","-init_summary",]
let options["hc::runtime"] = ["-min_time","-start",]
let options["hc_cbc::check_cbc_boundary"] = ["-hpml","-no_report","-polygon","-stage","-top_block_only",]
let options["hc_cbc::check_cbc_multiple_boundary"] = ["-polygon","-stage",]
let options["hc_cbc::check_cbc_placement"] = ["-blocks","-stage",]
let options["hc_cbc::check_cbc_rule"] = []
let options["hc_cbc::check_clock_cells_cbc_placement"] = ["-stage",]
let options["hc_cbc::check_custom_cells_cbc_placement"] = ["-reference_name","-stage","-x_lego_number","-x_offset","-y_lego_number","-y_offset",]
let options["hc_cbc::check_fp_grid_size"] = []
let options["hc_cbc::check_hard_macro_minsize"] = ["-stage",]
let options["hc_collateral::check_clock_collgen_attributes"] = ["-stage",]
let options["hc_collateral::check_clockbuilder_objects_exist"] = ["-stage",]
let options["hc_collateral::check_output_collateral_sanity"] = ["-collateral_type","-stage",]
let options["hc_connectivity::check_cell_dangling_inputs"] = ["-gclk","-stage",]
let options["hc_connectivity::check_cell_names"] = ["-stage",]
let options["hc_connectivity::check_clock_connection_vs_pinlocation"] = ["-debug_file","-keep_detail_report","-nets","-out_dir","-rtl_connection_file","-stage","-verbose",]
let options["hc_connectivity::check_clock_p2p_length"] = ["-debug_file","-hcost","-keep_detail_report","-layer_prefix","-length_diff_tolerance","-net","-out_dir","-stage","-vcost","-verbose",]
let options["hc_connectivity::check_clock_p2p_polarity"] = ["-debug_file","-keep_detail_report","-net2run_cfg_file","-nets","-out_dir","-polarity","-stage","-verbose",]
let options["hc_connectivity::check_dangling_ports"] = ["-stage",]
let options["hc_connectivity::check_dangling_ports_pins"] = ["-stage",]
let options["hc_connectivity::check_feedthru_net_names_match_ports"] = ["-stage",]
let options["hc_connectivity::check_illegal_net_names"] = ["-stage",]
let options["hc_connectivity::check_multiple_drivers"] = ["-gclk","-nets","-stage",]
let options["hc_connectivity::check_port_net_names"] = ["-stage",]
let options["hc_connectivity::check_ports_with_illegal_direction"] = ["-stage",]
let options["hc_connectivity::check_spec_fev"] = ["-stage",]
let options["hc_connectivity::clock_clksrcnet_based_check_connection"] = []
let options["hc_connectivity::clock_clksrcnet_based_check_p2p_length"] = []
let options["hc_connectivity::clock_clksrcnet_based_check_p2p_polarity"] = []
let options["hc_connectivity::clock_connection_net_traverse"] = []
let options["hc_connectivity::clock_p2p_length_branch_tracing"] = []
let options["hc_connectivity::clock_p2p_length_get_branch_search_area"] = []
let options["hc_connectivity::clock_p2p_length_get_longest_net_shape"] = []
let options["hc_connectivity::clock_p2p_length_get_net_shape_intersect"] = []
let options["hc_connectivity::clock_p2p_length_get_pin_shape_intersect"] = []
let options["hc_connectivity::clock_p2p_length_get_routing_length"] = []
let options["hc_connectivity::clock_p2p_length_get_terminal_intersect"] = []
let options["hc_connectivity::clock_p2p_length_is_antenna"] = []
let options["hc_connectivity::clock_p2p_length_is_physically_connected"] = []
let options["hc_connectivity::clock_p2p_length_net_traverse"] = []
let options["hc_connectivity::clock_p2p_length_physical_conn_traverse"] = []
let options["hc_connectivity::clock_p2p_polarity_net_traverse"] = []
let options["hc_connectivity::report_ports_with_inout_direction"] = ["-gclk","-stage",]
let options["hc_connectivity::report_unconnected_pins"] = ["-stage",]
let options["hc_dfm::check_cell_area"] = []
let options["hc_drc::check_opens"] = ["-gclk","-max_errors","-nets","-stage",]
let options["hc_drc::check_route_drcs"] = ["-stage",]
let options["hc_drc::check_shorts"] = ["-gclk","-max_errors","-nets","-stage",]
let options["hc_extraction::check_vias_in_frams"] = ["-stage",]
let options["hc_extraction::fram_checker"] = []
let options["hc_floorplan::check_block_at_origin"] = []
let options["hc_floorplan::check_block_overlaps"] = ["-stage",]
let options["hc_floorplan::check_ebb_size_is_lego"] = ["-layer",]
let options["hc_floorplan::check_hip_spacing"] = ["-stage",]
let options["hc_floorplan::check_min_channel"] = ["-stage",]
let options["hc_floorplan::check_minspace_for_ports"] = []
let options["hc_floorplan::check_no_default_va"] = ["-stage",]
let options["hc_floorplan::check_port_supply_net"] = ["-block","-stage",]
let options["hc_floorplan::check_port_tie_offs"] = ["-stage",]
let options["hc_floorplan::check_ports_of_single_poly"] = []
let options["hc_floorplan::check_power_over_va_and_bounds"] = []
let options["hc_floorplan::check_power_up_cells"] = []
let options["hc_floorplan::check_ps_service_area"] = ["-stage",]
let options["hc_floorplan::check_same_power_aon_cells"] = ["-stage",]
let options["hc_floorplan::check_std_cell_power_hookup"] = ["-stage",]
let options["hc_floorplan::check_terminals_oob"] = ["-block_dir","-stage",]
let options["hc_floorplan::check_terminals_shorts"] = ["-stage",]
let options["hc_floorplan::check_top_layer_hip_power_pins_exposed"] = ["-stage",]
let options["hc_floorplan::check_va_boundaries_abutted"] = ["-stage",]
let options["hc_floorplan::check_va_dimensions"] = ["-stage",]
let options["hc_floorplan::check_xor_voltage_and_bounding_areas"] = ["-stage",]
let options["hc_floorplan::get_all_bounds"] = []
let options["hc_floorplan::is_ungated_power_domain"] = []
let options["hc_floorplan::rect_to_poly"] = []
let options["hc_gcr::check_hard_layer_mode_constraints_match_pin_layers"] = ["-nets","-outfile","-return","-warn","-work_dir",]
let options["hc_gcr::check_missing_terminals_on_priority_net_routing"] = ["-nets","-outfile","-return","-work_dir",]
let options["hc_gcr::check_pin_offgrid_and_access_using_gcr_patterns"] = ["-nets","-outfile","-return","-skip_gen","-verbose","-work_dir",]
let options["hc_gcr::check_route_boundary_pin_enclosure"] = ["-nets","-outfile","-return","-work_dir",]
let options["hc_gcr::check_unplaced_cells_on_priority_net_routing"] = ["-nets","-outfile","-return","-work_dir",]
let options["hc_general::check_lib_versions"] = ["-report",]
let options["hc_general::check_missing_library"] = ["-report",]
let options["hc_general::check_modification_time"] = ["-report",]
let options["hc_netspec::check_all_are_staples"] = []
let options["hc_netspec::check_allowed_layers_constraints"] = ["-debug","-layers","-min_length","-nets","-no_error","-tolerance","-usage","-verbose",]
let options["hc_netspec::check_attrxml_netspecs"] = ["-dice_dir","-dice_file","-excl_dtouch","-excl_layers","-excl_shield","-excl_width","-min_length","-min_seglen","-no_macros","-prop_fanout","-skip_fetch","-stage","-strict","-tolerance","-verbose",]
let options["hc_netspec::check_database_netspecs"] = ["-excl_layers","-excl_limit","-excl_match","-excl_shield","-excl_width","-min_length","-min_seglen","-no_macros","-prop_fanout","-stage","-strict","-tolerance","-verbose",]
let options["hc_netspec::check_dont_touch_constraints"] = ["-debug","-nets","-no_error","-repeaters","-usage","-verbose",]
let options["hc_netspec::check_length_limit_constraints"] = ["-min_value","-nets","-tolerance",]
let options["hc_netspec::check_length_match_constraints"] = ["-nets","-per_layer","-tolerance",]
let options["hc_netspec::check_multiple_shield_constraints"] = ["-constr","-debug","-gclk","-nets","-snets","-stype","-tol_match","-tol_space","-tol_width","-tolerance","-usage",]
let options["hc_netspec::check_shield_constraints"] = ["-debug","-err_info","-filter","-lshield","-min_length","-nets","-no_error","-no_macros","-snets","-stype","-tol_match","-tol_space","-tol_width","-tolerance","-usage","-verbose",]
let options["hc_netspec::check_width_per_layer_constraints"] = ["-debug","-lwidth","-min_length","-min_seglen","-nets","-no_error","-strict","-tolerance","-usage","-verbose",]
let options["hc_pin::check_critical_pin_placement_errors"] = ["-stage",]
let options["hc_pin::check_disallowed_layer_terminals"] = ["-disallowed_layers","-stage",]
let options["hc_pin::check_ebb_pin_placement_errors"] = ["-stage",]
let options["hc_pin::check_edge_terminals_below_spec_layer"] = ["-spec_layer","-stage",]
let options["hc_pin::check_nonedge_terminals_above_heml"] = ["-stage",]
let options["hc_pin::check_nonedge_terminals_minlength"] = ["-stage",]
let options["hc_pin::check_pg_pin_placement_errors"] = ["-skip_top","-stage",]
let options["hc_pin::check_pin_placement_errors"] = ["-skip_blocks","-skip_top","-stage",]
let options["hc_pin::check_pin_spacing_errors"] = ["-skip_blocks","-skip_top","-stage",]
let options["hc_pin::check_ports_missing_terminal"] = ["-stage",]
let options["hc_pin::check_ports_with_multi_terms"] = ["-skip_list","-stage",]
let options["hc_pin::check_terminal_widths_match_track_ref"] = ["-stage",]
let options["hc_pin::check_terminals_longer_than_threshold"] = ["-stage","-threshold",]
let options["hc_pin::check_terminals_minlength"] = ["-stage",]
let options["hc_pin::check_terminals_not_on_track"] = ["-stage",]
let options["hc_pin::check_terminals_within_hsml"] = ["-stage",]
let options["hc_pin::check_weave_ft_connections"] = ["-stage",]
let options["hc_placement::check_block_abutment"] = ["-debug","-mlph","-no_error","-stage",]
let options["hc_placement::check_block_abutment_helper"] = []
let options["hc_placement::check_cells_outside_block_boundary"] = ["-debug","-macros","-mlph","-no_error","-stage","-stdcells",]
let options["hc_placement::check_cells_within_voltage_area"] = ["-disallow_multiple_va_shapes","-stage",]
let options["hc_placement::check_clk_hip_spacing"] = ["-stage",]
let options["hc_placement::check_global_cell_relative_dist_adherence"] = ["-highlight","-stage","-template","-threshold",]
let options["hc_placement::check_global_clock_cell_attr"] = ["-stage",]
let options["hc_placement::check_hip_bound_for_logic_cells"] = ["-stage",]
let options["hc_placement::check_hip_to_parent_boundary"] = ["-stage",]
let options["hc_placement::check_negative_boundary_coordinates"] = ["-stage",]
let options["hc_placement::check_no_ebbs_touching_parent_boundary"] = ["-stage",]
let options["hc_placement::check_odi_vdm_placement"] = ["-mlph","-stage",]
let options["hc_placement::check_overlaps"] = []
let options["hc_placement::check_partition_boundary_halo_cells"] = ["-stage",]
let options["hc_placement::check_placement_legality"] = ["-ignore_expression","-stage",]
let options["hc_placement::check_unplaced_cells"] = ["-stage",]
let options["hc_placement::check_va_cell_spacing"] = ["-gclk","-stage",]
let options["hc_placement::check_va_hip_spacing"] = ["-stage",]
let options["hc_placement::format_bbox_for_array"] = []
let options["hc_placement::partition_abutt_check"] = []
let options["hc_power::check_no_power_above_hpml"] = ["-stage",]
let options["hc_power::check_pg_connectivity_errors"] = ["-stage",]
let options["hc_power::check_pg_drc_errors"] = ["-stage",]
let options["hc_power::check_pg_region_lego_compliance"] = ["-stage",]
let options["hc_power::check_power_domains_missing_voltage_areas"] = ["-stage",]
let options["hc_power::check_power_grid_missing_vias"] = ["-stage",]
let options["hc_power::check_power_supply_ports_correlation"] = ["-stage",]
let options["hc_power::check_voltage_area_lego_compliance"] = ["-stage",]
let options["hc_power::check_voltage_value_per_supply_net"] = ["-stage",]
let options["hc_route::FindPowerLinesInArea"] = ["-bbox","-layer","-no_shield",]
let options["hc_route::check_floating_vias"] = ["-gclk","-gui","-nets","-vias",]
let options["hc_route::check_global_clock_route_widths"] = ["-stage",]
let options["hc_route::check_missing_wires"] = ["-stage",]
let options["hc_route::check_non_preferred_direction_routes"] = ["-exclude_pg","-gclk","-layers","-stage",]
let options["hc_route::check_nonpg_missing_vias"] = ["-nets","-stage",]
let options["hc_route::check_null_via_shape_objects"] = ["-stage",]
let options["hc_route::check_objects_above_higher_metal_layers"] = []
let options["hc_route::check_preroute_block_intersection"] = ["-nets","-stage",]
let options["hc_route::check_preroute_completion"] = ["-nets","-stage",]
let options["hc_route::check_preroute_width_vs_length"] = ["-nets","-stage",]
let options["hc_route::check_route_hsml_compliance"] = ["-stage",]
let options["hc_route::check_route_shape_endcap_values"] = ["-stage",]
let options["hc_route::check_route_shape_type"] = ["-stage",]
let options["hc_route::check_route_terminal_intersection"] = ["-nets","-stage",]
let options["hc_route::check_signal_wire_shorts"] = ["-stage",]
let options["hc_route::check_wires_on_track"] = ["-gclk","-stage",]
let options["hc_route::check_wires_on_track_cb2_track_lines"] = ["-gclk","-stage",]
let options["hc_route::get_duplicate_shapes"] = ["-debug","-layer","-nets","-stage","-write_fixer_file",]
let options["hc_route::get_duplicate_vias"] = ["-cut_layer","-debug","-nets","-stage","-write_fixer_file",]
let options["hc_route::get_track_lines"] = ["-bbox","-include_power","-layer","-net","-no_hash_reset","-widths",]
let options["hc_route::report_clock_pushdown_failures"] = ["-stage",]
let options["hc_route::report_pushdown_failures"] = ["-stage",]
let options["hc_timing::check_impossible_constraints"] = ["-only_top","-stage",]
let options["hc_timing::check_io_constraints_clock"] = ["-only_top","-stage",]
let options["hc_timing::check_unconstrained_pins"] = ["-only_top","-stage",]
let options["hc_timing::check_unconstrained_ports"] = ["-only_top","-stage",]
let options["hc_timing::report_pg_with_clock_latency_set"] = ["-stage",]
let options["hc_timing::report_pins_with_no_timing_paths"] = ["-only_top","-stage",]
let options["hc_timing::report_tspec_read"] = ["-stage",]
let options["hc_timing::report_unclocked_sequentials"] = ["-only_top","-stage",]
let options["hc_tm::check_inputs"] = []
let options["hc_tm::check_tm_bu_collaterals"] = ["-create_terminal","-repair","-stage",]
let options["hc_tm::check_tsv_bump_alignment"] = ["-stage",]
let options["hc_upf::check_block_srsn"] = []
let options["hc_upf::check_hier_srsn"] = ["-stage",]
let options["hc_upf::check_isolation"] = ["-stage",]
let options["hc_upf::check_mv_design_violations"] = ["-dp_mode","-stage",]
let options["hc_upf::check_net_srsn"] = []
let options["hc_upf::check_srsn"] = ["-skip_partitions","-stage",]
let options["hc_upf::get_fn_pin_srsn"] = []
let options["hc_utils::add_summary"] = []
let options["hc_utils::apr_query_pwr_domains"] = []
let options["hc_utils::bbox_list_to_annotation"] = ["-color","-keep","-name",]
let options["hc_utils::bbox_list_to_err_file"] = ["-checker_name","-information","-layer_list","-object_list",]
let options["hc_utils::extract_runtime_from_health_check_logs"] = ["-block","-checks","-out_file","-reports_dir","-stage",]
let options["hc_utils::find_common_list"] = []
let options["hc_utils::init_summary"] = ["-clean_slate",]
let options["hc_utils::mark_err_files_based_on_text_waivers"] = ["-all_blocks",]
let options["hc_utils::parse_text_rpt_waivers"] = ["-list_of_checks","-milestone_closure","-stage_run","-standalone_run",]
let options["hc_utils::ps_ref"] = []
let options["hc_utils::runtime"] = ["-min_time","-start",]
let options["hc_utils::write_text_waivers_from_err_files"] = ["-all_blocks",]
let options["hc_utils::write_violation_rpt"] = []
let options["iccpp_com::append_param"] = []
let options["iccpp_com::balloon_aux"] = []
let options["iccpp_com::balloon_close"] = []
let options["iccpp_com::balloon_help"] = []
let options["iccpp_com::bbox_to_lo_hi"] = []
let options["iccpp_com::bootstrap"] = []
let options["iccpp_com::boundary_to_lo_hi"] = []
let options["iccpp_com::build_cached_poly"] = []
let options["iccpp_com::cancel_canvas_user_input"] = []
let options["iccpp_com::cb"] = []
let options["iccpp_com::clear_cached_poly"] = []
let options["iccpp_com::clear_flylines"] = []
let options["iccpp_com::clear_ideck"] = []
let options["iccpp_com::compress_nets"] = []
let options["iccpp_com::convert_from_polygon"] = []
let options["iccpp_com::dump_to_cmd_window"] = []
let options["iccpp_com::dump_to_output_window"] = []
let options["iccpp_com::eval_cmd"] = []
let options["iccpp_com::file_header"] = []
let options["iccpp_com::find_unobstructed_track"] = []
let options["iccpp_com::get_all_net_shapes"] = []
let options["iccpp_com::get_bbox"] = []
let options["iccpp_com::get_boundary_of_cell_and_net_shapes"] = []
let options["iccpp_com::get_first_64_char"] = []
let options["iccpp_com::get_line"] = []
let options["iccpp_com::get_metal_layers"] = []
let options["iccpp_com::get_param"] = []
let options["iccpp_com::get_param_names"] = []
let options["iccpp_com::get_point"] = []
let options["iccpp_com::get_process_name"] = []
let options["iccpp_com::get_rule_based_track_widths"] = []
let options["iccpp_com::get_tracks_in_bbox"] = []
let options["iccpp_com::gui_get_param"] = []
let options["iccpp_com::gui_set_param"] = []
let options["iccpp_com::ideck_bbox"] = []
let options["iccpp_com::ideck_bbox_lo_hi"] = []
let options["iccpp_com::ideck_line"] = []
let options["iccpp_com::ideck_poly"] = []
let options["iccpp_com::ideck_text"] = []
let options["iccpp_com::init_cached_poly"] = []
let options["iccpp_com::init_default_episode_recording"] = []
let options["iccpp_com::init_find_unobstructed_track"] = []
let options["iccpp_com::intersects_cached_track_info"] = []
let options["iccpp_com::is_bbox_occupied"] = []
let options["iccpp_com::is_bbox_occupied_use_cached_poly"] = []
let options["iccpp_com::is_track_occupied"] = []
let options["iccpp_com::log_tracer_add"] = []
let options["iccpp_com::log_tracer_cb"] = []
let options["iccpp_com::obj_get_defined_attributes"] = ["-application","-class",]
let options["iccpp_com::post_hook_cb"] = []
let options["iccpp_com::pre_hook_cb"] = []
let options["iccpp_com::process_canvas_user_input"] = []
let options["iccpp_com::rdt_source_if_exists"] = []
let options["iccpp_com::regexp_get_param_names"] = []
let options["iccpp_com::reset_params"] = []
let options["iccpp_com::return_canvas_user_input"] = []
let options["iccpp_com::return_route_guides_not_touching_boundary"] = []
let options["iccpp_com::set_param"] = []
let options["iccpp_com::sort_metal_layers"] = []
let options["iccpp_com::uncompress_nets"] = []
let options["iccpp_com::unset_param"] = []
let options["iccpp_com::valid"] = []
let options["iccpp_com::validate_bbox"] = []
let options["iccpp_com::zoom"] = []
let options["iccpp_com::zoom_to_bbox_selection"] = []
let options["iccpp_cr::add_commands_to_diamond"] = []
let options["iccpp_cr::add_rect_region"] = []
let options["iccpp_cr::add_to_track_region_list_cb"] = []
let options["iccpp_cr::align_repeaters_to_trunks"] = []
let options["iccpp_cr::and_complete_topology_cb"] = []
let options["iccpp_cr::apply_track_region_cb"] = []
let options["iccpp_cr::are_2_bboxes_close_enough"] = []
let options["iccpp_cr::bbox_to_boundary"] = []
let options["iccpp_cr::bbox_to_polygon"] = []
let options["iccpp_cr::bootstrap"] = []
let options["iccpp_cr::boundary_to_bbox"] = []
let options["iccpp_cr::break_wire"] = []
let options["iccpp_cr::build_cr_gui"] = []
let options["iccpp_cr::build_cr_tab"] = []
let options["iccpp_cr::chop_bbox_into_2"] = []
let options["iccpp_cr::clean_use_existing_shape"] = []
let options["iccpp_cr::clear_bbox_from_drag_cb"] = []
let options["iccpp_cr::commit_preview_for_wire_create_cb"] = []
let options["iccpp_cr::complete_prerouted_nets_cb"] = []
let options["iccpp_cr::compnets"] = []
let options["iccpp_cr::compnets_for_list"] = []
let options["iccpp_cr::convert_cutline_to_relative_cutline"] = []
let options["iccpp_cr::cr_checkerboard_rpt"] = []
let options["iccpp_cr::cr_click_center_point_of_track_cb"] = []
let options["iccpp_cr::cr_click_center_point_of_track_no_preview_cb"] = []
let options["iccpp_cr::cr_enable_track_sharing_cb"] = []
let options["iccpp_cr::cr_fill_from_tracks"] = []
let options["iccpp_cr::cr_get_bbox"] = []
let options["iccpp_cr::cr_get_bbox_cb"] = []
let options["iccpp_cr::cr_get_cutline_cb"] = []
let options["iccpp_cr::cr_get_rpt_cells"] = []
let options["iccpp_cr::cr_route_completion"] = []
let options["iccpp_cr::cr_route_completion_______OLD"] = []
let options["iccpp_cr::cr_select_complete_layer_cb"] = []
let options["iccpp_cr::cr_select_complete_width_cb"] = []
let options["iccpp_cr::cr_select_track_region_pattern_cb"] = []
let options["iccpp_cr::cr_select_track_region_snap_cb"] = []
let options["iccpp_cr::cr_selectlayer_cb"] = []
let options["iccpp_cr::cr_selectlayer_withlayer_cb"] = []
let options["iccpp_cr::cr_selectwidth_cb"] = []
let options["iccpp_cr::cr_turn_on_clustering_cb"] = []
let options["iccpp_cr::cr_turn_on_shielding_cb"] = []
let options["iccpp_cr::cr_viewtracks_cb"] = []
let options["iccpp_cr::create_bounds"] = []
let options["iccpp_cr::create_bounds_for_track_pattern_regions"] = []
let options["iccpp_cr::create_dummystore_for_track_pattern_regions"] = []
let options["iccpp_cr::create_ndr_from_ndr_array"] = []
let options["iccpp_cr::create_ndr_spec_from_net"] = []
let options["iccpp_cr::create_net_shape"] = []
let options["iccpp_cr::create_pin_topology"] = []
let options["iccpp_cr::create_poly_from_tracks"] = []
let options["iccpp_cr::create_repeaters_cb"] = []
let options["iccpp_cr::create_route_track_for_net"] = ["-layer","-nets",]
let options["iccpp_cr::create_shapes_from_tracks"] = []
let options["iccpp_cr::create_term_shape"] = []
let options["iccpp_cr::create_trunk_vias_cb"] = []
let options["iccpp_cr::create_trunks_from_pin_to_pin_cb"] = []
let options["iccpp_cr::create_trunks_from_pins_to_trunk_cb"] = []
let options["iccpp_cr::create_trunks_from_ports_to_pins_cb"] = []
let options["iccpp_cr::create_trunks_from_ports_to_pins_complete_cb"] = []
let options["iccpp_cr::create_trunks_from_ports_to_trunk_cb"] = []
let options["iccpp_cr::create_trunks_from_what_cb"] = []
let options["iccpp_cr::create_trunks_track_share"] = []
let options["iccpp_cr::create_user_grid"] = []
let options["iccpp_cr::create_zrt_shield"] = []
let options["iccpp_cr::csv_to_nets_intent"] = []
let options["iccpp_cr::cut_shapes"] = ["-bbox","-layer","-nets",]
let options["iccpp_cr::cut_shapes_on_iccpp_trunks"] = ["-bbox","-layer","-nets",]
let options["iccpp_cr::decode_snap_region"] = []
let options["iccpp_cr::delete_all_track_pattern_regions"] = []
let options["iccpp_cr::delete_bounds_for_track_pattern_regions"] = []
let options["iccpp_cr::delete_dummystore_for_track_pattern_regions"] = []
let options["iccpp_cr::delete_rect_region"] = []
let options["iccpp_cr::destroy_cr_gui"] = []
let options["iccpp_cr::develope_assemblies"] = []
let options["iccpp_cr::display_boundary_edges"] = []
let options["iccpp_cr::display_layer_gutters_cb"] = []
let options["iccpp_cr::do_bboxes_abut"] = []
let options["iccpp_cr::do_bboxes_intesect"] = []
let options["iccpp_cr::do_lohi_intesect"] = []
let options["iccpp_cr::does_wirebbox_have_obstructions"] = []
let options["iccpp_cr::does_wirebbox_have_obstructions_h2t"] = []
let options["iccpp_cr::drag_for_track_region_bbox"] = []
let options["iccpp_cr::drag_ideck_cb"] = []
let options["iccpp_cr::encode_snap_region"] = []
let options["iccpp_cr::expand_channel"] = []
let options["iccpp_cr::extend_pins_by_creating_trunks_cb"] = []
let options["iccpp_cr::extract_track_shared_trunks"] = []
let options["iccpp_cr::extract_trunks"] = []
let options["iccpp_cr::filterPathtoMenuAll"] = []
let options["iccpp_cr::find_hier_net_from_local"] = []
let options["iccpp_cr::find_net_notsharables"] = []
let options["iccpp_cr::fix_missed_via_ladders"] = []
let options["iccpp_cr::fn_get_bbox_of_flopped_chain"] = []
let options["iccpp_cr::fn_get_start_track_num"] = []
let options["iccpp_cr::fn_is_cell_location_legal"] = []
let options["iccpp_cr::fn_move_spread_flops"] = []
let options["iccpp_cr::fn_short_port_to_last_flopped_output"] = []
let options["iccpp_cr::fn_trunk_flopped_nets"] = []
let options["iccpp_cr::get_all_nets"] = []
let options["iccpp_cr::get_all_nets_old"] = []
let options["iccpp_cr::get_annotations_on_nets"] = []
let options["iccpp_cr::get_bbox_from_drag_cb"] = []
let options["iccpp_cr::get_bbox_from_track"] = []
let options["iccpp_cr::get_boundary_edge_coord_generic"] = []
let options["iccpp_cr::get_boundary_edge_lines"] = []
let options["iccpp_cr::get_boundary_edge_list"] = []
let options["iccpp_cr::get_boundary_edge_num_generic"] = []
let options["iccpp_cr::get_boundary_edge_touching_bbox"] = []
let options["iccpp_cr::get_bounds_for_track_pattern_regions"] = []
let options["iccpp_cr::get_cached_poly"] = []
let options["iccpp_cr::get_cell_bbox"] = []
let options["iccpp_cr::get_cell_bbox_in_bbox"] = []
let options["iccpp_cr::get_cell_from_click_cb"] = []
let options["iccpp_cr::get_cell_height"] = []
let options["iccpp_cr::get_cell_obj_bbox"] = []
let options["iccpp_cr::get_cell_orientation"] = []
let options["iccpp_cr::get_cell_pin_connected_to_net_rec"] = []
let options["iccpp_cr::get_cell_pins_connected_to_net"] = []
let options["iccpp_cr::get_cell_width"] = []
let options["iccpp_cr::get_cells"] = []
let options["iccpp_cr::get_cells_by_bbox"] = []
let options["iccpp_cr::get_cells_by_location"] = []
let options["iccpp_cr::get_curent_design"] = []
let options["iccpp_cr::get_current_cel"] = []
let options["iccpp_cr::get_cutline_from_drag_cb"] = []
let options["iccpp_cr::get_die_area_bbox"] = []
let options["iccpp_cr::get_die_area_boundary"] = []
let options["iccpp_cr::get_dummystore_for_track_pattern_regions"] = []
let options["iccpp_cr::get_dummystore_track_region"] = []
let options["iccpp_cr::get_dummystore_track_region_bbox"] = []
let options["iccpp_cr::get_dummystore_track_region_pattern"] = []
let options["iccpp_cr::get_end_pin_of_flopped_net"] = []
let options["iccpp_cr::get_flat_cells"] = []
let options["iccpp_cr::get_flat_pins"] = []
let options["iccpp_cr::get_free_track_poly"] = []
let options["iccpp_cr::get_full_nets_connected_to_net"] = []
let options["iccpp_cr::get_full_nets_connected_to_net_rec"] = []
let options["iccpp_cr::get_hard_ips_and_bboxes"] = []
let options["iccpp_cr::get_high_and_low_layer_from_tlayers"] = []
let options["iccpp_cr::get_how_far_to_extend"] = []
let options["iccpp_cr::get_iccpp_trunk_bbox"] = []
let options["iccpp_cr::get_iccpp_trunk_bbox_closest_perpendicular"] = []
let options["iccpp_cr::get_iccpp_trunk_bbox_longest_perpendicular"] = []
let options["iccpp_cr::get_iccpp_trunk_layer"] = []
let options["iccpp_cr::get_iccpp_trunk_layer_longest_perpendicular"] = []
let options["iccpp_cr::get_iccpp_trunk_shapes"] = []
let options["iccpp_cr::get_layer"] = []
let options["iccpp_cr::get_layer_dir"] = []
let options["iccpp_cr::get_layer_min_area"] = []
let options["iccpp_cr::get_layer_min_spacing"] = []
let options["iccpp_cr::get_layer_min_width"] = []
let options["iccpp_cr::get_list_NDRS_cb"] = []
let options["iccpp_cr::get_lo_hi_to_make_sharable"] = []
let options["iccpp_cr::get_location_list_from_cutlines"] = []
let options["iccpp_cr::get_location_list_from_relative_cutlines"] = []
let options["iccpp_cr::get_locations_to_place_repeaters"] = []
let options["iccpp_cr::get_ndr_rules_names"] = []
let options["iccpp_cr::get_net_bbox"] = []
let options["iccpp_cr::get_net_bbox_ICC2_FAST"] = []
let options["iccpp_cr::get_net_bbox_on_track"] = []
let options["iccpp_cr::get_net_bbox_pin_port_to_trunk"] = []
let options["iccpp_cr::get_net_bbox_pin_to_extention"] = []
let options["iccpp_cr::get_net_bbox_point_to_extention"] = []
let options["iccpp_cr::get_net_drv_rcv_bbox"] = []
let options["iccpp_cr::get_net_groups"] = []
let options["iccpp_cr::get_net_lo_hi"] = []
let options["iccpp_cr::get_net_names_list"] = []
let options["iccpp_cr::get_net_names_list_from_connectivity"] = []
let options["iccpp_cr::get_net_shapes"] = []
let options["iccpp_cr::get_net_type"] = []
let options["iccpp_cr::get_nets"] = []
let options["iccpp_cr::get_obj_bbox"] = []
let options["iccpp_cr::get_obj_layer"] = []
let options["iccpp_cr::get_obstructions_for_wirebbox_in_hard_macros"] = []
let options["iccpp_cr::get_obstructions_in_hard_macros"] = []
let options["iccpp_cr::get_pin_bbox_from_pin_collection"] = []
let options["iccpp_cr::get_pin_boundary_coord"] = []
let options["iccpp_cr::get_pin_collection_of_cell_edge"] = []
let options["iccpp_cr::get_pin_shapes"] = []
let options["iccpp_cr::get_pins"] = []
let options["iccpp_cr::get_pins_and_nets_on_cell_edge"] = []
let options["iccpp_cr::get_point_from_edge"] = []
let options["iccpp_cr::get_port_obstructions_intersecting_bbox"] = []
let options["iccpp_cr::get_ports"] = []
let options["iccpp_cr::get_preroute_vias_on_nets"] = []
let options["iccpp_cr::get_rect_region"] = []
let options["iccpp_cr::get_repeater_location_cb"] = []
let options["iccpp_cr::get_routing_blockages_by_location"] = []
let options["iccpp_cr::get_routing_guides_by_location"] = []
let options["iccpp_cr::get_shapes_by_location"] = []
let options["iccpp_cr::get_shapes_of_custom_shields"] = []
let options["iccpp_cr::get_shapes_on_nets"] = []
let options["iccpp_cr::get_sharable_nets"] = []
let options["iccpp_cr::get_site_row_orient"] = []
let options["iccpp_cr::get_term_extension_direction"] = []
let options["iccpp_cr::get_term_port_name"] = []
let options["iccpp_cr::get_tracks_bounding_boxes"] = []
let options["iccpp_cr::get_tracks_capacity"] = []
let options["iccpp_cr::get_user_grid"] = []
let options["iccpp_cr::get_via_by_location"] = []
let options["iccpp_cr::get_wire_bbox_from_track"] = []
let options["iccpp_cr::get_wire_bbox_from_track_with_micron_step"] = []
let options["iccpp_cr::grab_set_NDR_names"] = []
let options["iccpp_cr::grow_bbox"] = []
let options["iccpp_cr::gui_get_param"] = []
let options["iccpp_cr::gui_set_param"] = []
let options["iccpp_cr::guides_obstructing_wirebbox_in_hard_macros"] = []
let options["iccpp_cr::h2t_adjust_edge_leg"] = []
let options["iccpp_cr::h2t_build_cutout_polygon"] = []
let options["iccpp_cr::h2t_build_cutout_polygon_display"] = []
let options["iccpp_cr::h2t_build_exclude_bbox"] = []
let options["iccpp_cr::h2t_build_exclude_bbox_display"] = []
let options["iccpp_cr::h2t_build_track_array"] = []
let options["iccpp_cr::h2t_build_track_array_channel"] = []
let options["iccpp_cr::h2t_display_polygon"] = []
let options["iccpp_cr::h2t_get_boundary_edge_coord"] = []
let options["iccpp_cr::h2t_get_boundary_edge_num"] = []
let options["iccpp_cr::h2t_get_channel_bbox"] = []
let options["iccpp_cr::h2t_get_channel_coord_width"] = []
let options["iccpp_cr::h2t_get_channel_key"] = []
let options["iccpp_cr::h2t_get_channel_orient"] = []
let options["iccpp_cr::h2t_get_coord"] = []
let options["iccpp_cr::h2t_get_cutout_pullback"] = []
let options["iccpp_cr::h2t_get_half_dr_e2e"] = []
let options["iccpp_cr::h2t_get_hi_track_for_channel"] = []
let options["iccpp_cr::h2t_get_lo_track_for_channel"] = []
let options["iccpp_cr::h2t_get_pin_center_coord"] = []
let options["iccpp_cr::h2t_get_track_from_ref_coord"] = []
let options["iccpp_cr::h2t_get_user_half_dr_e2e"] = []
let options["iccpp_cr::h2t_heal_segments"] = []
let options["iccpp_cr::h2t_is_channel_flipped"] = []
let options["iccpp_cr::h2t_is_iccpp_special_net"] = []
let options["iccpp_cr::h2t_transform_coord_from_top_to_channel"] = []
let options["iccpp_cr::h2t_trim_and_cut_out_net_bbox"] = []
let options["iccpp_cr::iccpp_display_channels"] = []
let options["iccpp_cr::initialize"] = []
let options["iccpp_cr::initialize_1272"] = []
let options["iccpp_cr::initialize_1273"] = []
let options["iccpp_cr::initialize_1274"] = []
let options["iccpp_cr::initialize_generic"] = []
let options["iccpp_cr::is_cell_location_legal"] = []
let options["iccpp_cr::is_net_shielded"] = []
let options["iccpp_cr::is_pin_on_cell_instance_edge"] = []
let options["iccpp_cr::is_point_inside_cell_boundary"] = []
let options["iccpp_cr::isa_iccpp_trunk_on_net"] = []
let options["iccpp_cr::launch_cr_gui"] = []
let options["iccpp_cr::launch_netspec"] = []
let options["iccpp_cr::legs_layers_entry_eh"] = []
let options["iccpp_cr::list_swap"] = []
let options["iccpp_cr::list_to_array"] = []
let options["iccpp_cr::load_nets_from_file_cb"] = []
let options["iccpp_cr::lreverse"] = []
let options["iccpp_cr::merge_bboxes"] = []
let options["iccpp_cr::merge_objects"] = []
let options["iccpp_cr::ndr_array_from_nets_intent"] = []
let options["iccpp_cr::nets_list_selection_cb"] = []
let options["iccpp_cr::p2p_build_layers_list"] = []
let options["iccpp_cr::p2p_build_return_list"] = []
let options["iccpp_cr::p2p_build_segments_list"] = []
let options["iccpp_cr::p2p_create_wires_from_segments_list"] = []
let options["iccpp_cr::p2p_get_2pins_of_net"] = []
let options["iccpp_cr::p2p_get_2pins_of_net__old"] = []
let options["iccpp_cr::p2p_get_bbox_centerline"] = []
let options["iccpp_cr::p2p_get_coord_of_track"] = []
let options["iccpp_cr::p2p_get_end_of_pin"] = []
let options["iccpp_cr::p2p_get_layer_dir"] = []
let options["iccpp_cr::p2p_get_layer_width"] = []
let options["iccpp_cr::p2p_get_legs_extensions"] = []
let options["iccpp_cr::p2p_get_net_bbox"] = []
let options["iccpp_cr::p2p_get_tracks"] = []
let options["iccpp_cr::p2p_heal_segments_list"] = []
let options["iccpp_cr::p2p_snap_cntr"] = []
let options["iccpp_cr::p2p_snap_cntr__oldnew"] = []
let options["iccpp_cr::p2p_snap_segments_list"] = []
let options["iccpp_cr::place_repeater"] = []
let options["iccpp_cr::place_via_ladders"] = []
let options["iccpp_cr::place_via_ladders__OLD"] = []
let options["iccpp_cr::place_via_ladders___OLD2"] = []
let options["iccpp_cr::populate_cr_rep_name"] = []
let options["iccpp_cr::populate_nets_list"] = []
let options["iccpp_cr::populate_nets_list___OLD"] = []
let options["iccpp_cr::populate_track_pattern_list"] = []
let options["iccpp_cr::populate_track_region_list"] = []
let options["iccpp_cr::popupNetsMenu"] = []
let options["iccpp_cr::popup_track_region_menu"] = []
let options["iccpp_cr::preview_create_net_lo_hi_cb"] = []
let options["iccpp_cr::prune_pin_collection_for_cloud"] = []
let options["iccpp_cr::remove_all_trunks_cb"] = []
let options["iccpp_cr::remove_detailed_routing_on_nets"] = []
let options["iccpp_cr::remove_iccpp_trunk_on_net"] = []
let options["iccpp_cr::remove_iccpp_trunk_on_net_h2t"] = []
let options["iccpp_cr::remove_net_shape"] = []
let options["iccpp_cr::remove_routing_on_nets_cb"] = []
let options["iccpp_cr::remove_track_region_cb"] = []
let options["iccpp_cr::remove_trunk_antenna"] = []
let options["iccpp_cr::remove_trunk_cb"] = []
let options["iccpp_cr::remove_trunk_vias_cb"] = []
let options["iccpp_cr::remove_trunks"] = []
let options["iccpp_cr::reorder_track"] = []
let options["iccpp_cr::repeater_addrepeater_location_cb"] = []
let options["iccpp_cr::repeater_location_ideck_cb"] = []
let options["iccpp_cr::report_full_NDRs"] = []
let options["iccpp_cr::report_ladders"] = []
let options["iccpp_cr::report_opens"] = []
let options["iccpp_cr::return_bbox"] = []
let options["iccpp_cr::return_min_max_layer_for_net"] = []
let options["iccpp_cr::return_net_assemblies"] = []
let options["iccpp_cr::return_valid_widths"] = []
let options["iccpp_cr::ri_build_distance_repeater_list"] = []
let options["iccpp_cr::ri_build_fanout_reconnect_list"] = []
let options["iccpp_cr::ri_build_flat_repeater_location_list"] = []
let options["iccpp_cr::ri_build_locations_repeater_list"] = []
let options["iccpp_cr::ri_build_preview_segments_list"] = []
let options["iccpp_cr::ri_build_segments_list"] = []
let options["iccpp_cr::ri_build_xy_repeater_list"] = []
let options["iccpp_cr::ri_create_repeater_from_repeater_list"] = ["-exclude_cells","-of_cells","-preview",]
let options["iccpp_cr::ri_create_wires_from_segments_list"] = []
let options["iccpp_cr::ri_get_2pins_of_net"] = []
let options["iccpp_cr::ri_get_2pins_of_net__OLD"] = []
let options["iccpp_cr::ri_get_layer_weight"] = []
let options["iccpp_cr::ri_get_lib_cell_bbox"] = []
let options["iccpp_cr::ri_get_net_direction"] = []
let options["iccpp_cr::ri_get_obstructing_cells_to_repeater"] = []
let options["iccpp_cr::ri_get_out_repeater_net_name"] = []
let options["iccpp_cr::ri_get_repeater_location_list_for_segment"] = []
let options["iccpp_cr::ri_get_repeater_location_list_for_segment_from_locations"] = []
let options["iccpp_cr::ri_get_shape_length"] = []
let options["iccpp_cr::ri_grow_last_segnemt_of_segments_list"] = []
let options["iccpp_cr::ri_init_build_repeater_list"] = []
let options["iccpp_cr::ri_init_build_segments_list"] = []
let options["iccpp_cr::ri_legalize_repeater_location"] = []
let options["iccpp_cr::ri_legalize_repeaters"] = []
let options["iccpp_cr::ri_match_flat_pin_to_pin"] = []
let options["iccpp_cr::ri_reconnect_fanout_reconnect_list"] = []
let options["iccpp_cr::ri_remove_original_segments_from_segment_list"] = []
let options["iccpp_cr::ri_restore_fanout_reconnect_list"] = []
let options["iccpp_cr::ri_shrink_last_segnemt_of_segments_list"] = []
let options["iccpp_cr::ri_sort_repeater_location_list"] = []
let options["iccpp_cr::ri_sort_segments_by_vertex"] = []
let options["iccpp_cr::ri_sort_segments_list"] = []
let options["iccpp_cr::ri_split_segment_in_2_for_list"] = []
let options["iccpp_cr::ri_split_segments_list"] = []
let options["iccpp_cr::ri_update_segment_list"] = []
let options["iccpp_cr::route_nets_from_nets_intent"] = []
let options["iccpp_cr::route_to_existing_trunk"] = []
let options["iccpp_cr::route_with_ndr_for_nets_cb"] = []
let options["iccpp_cr::route_zrt_eco"] = []
let options["iccpp_cr::row_snapping_legal"] = []
let options["iccpp_cr::selectAll"] = []
let options["iccpp_cr::select_cr_rep_name"] = []
let options["iccpp_cr::set_cell_from_click_cb"] = []
let options["iccpp_cr::set_cell_from_click_filterfrom_cb"] = []
let options["iccpp_cr::set_cell_from_click_filterto_cb"] = []
let options["iccpp_cr::set_list_box"] = []
let options["iccpp_cr::set_object_gui_value_cb"] = []
let options["iccpp_cr::set_tracks_in_bounding_box"] = []
let options["iccpp_cr::set_trunking_style_cb"] = []
let options["iccpp_cr::set_user_grid"] = []
let options["iccpp_cr::short_port_to_last_flopped_output"] = []
let options["iccpp_cr::snap_coord_to_site_row"] = []
let options["iccpp_cr::snap_coord_to_site_row_icc2"] = []
let options["iccpp_cr::switchedTab"] = []
let options["iccpp_cr::toggle_power_regiong_gui_cb"] = []
let options["iccpp_cr::track_region_list_selection_cb"] = []
let options["iccpp_cr::transform_coordinates_to_top"] = []
let options["iccpp_cr::trim_antennas_on_nets"] = []
let options["iccpp_cr::trunk_tab_cb"] = []
let options["iccpp_cr::update_nets_list"] = []
let options["iccpp_cr::update_nets_list_cb"] = []
let options["iccpp_cr::validate_values_for_create_trunk_from_here_to_there"] = []
let options["iccpp_cr::xy_sort_pin_collection"] = []
let options["iccpp_cr::xy_to_track_info_ideck_cb"] = []
let options["iccpp_cr::zoom_and_highlight_cb"] = []
let options["iccpp_cr::zoom_cb"] = []
let options["iccpp_hc::bootstrap"] = []
let options["iccpp_hc::build_hc_gui"] = []
let options["iccpp_hc::build_hc_tab"] = []
let options["iccpp_hc::destroy_hc_gui"] = []
let options["iccpp_hc::generate_res_log"] = []
let options["iccpp_hc::initialize"] = []
let options["iccpp_hc::initialize_generic"] = []
let options["iccpp_hc::initialize_hip_insts"] = []
let options["iccpp_hc::initialize_hip_masters"] = []
let options["iccpp_hc::launch_hc_gui"] = []
let options["iccpp_hc::load_res_log"] = []
let options["iccpp_hc::run_all_checkers"] = []
let options["iccpp_hc::run_all_fp_checkers"] = []
let options["iccpp_hc::run_all_fram_checkers"] = []
let options["iccpp_hc::run_one_check"] = []
let options["iccpp_hc::run_selected_checkers"] = []
let options["iccpp_hc::switchedTab"] = []
let options["iccpp_hc::toggle_all_floorplan"] = []
let options["iccpp_hc::toggle_all_fram"] = []
let options["iccpp_hc::zoom_highlight_inst"] = []
let options["iccpp_hc::zoom_pt_or_bbox"] = []
let options["iccpp_iccpp::bootstrap"] = []
let options["iccpp_iccpp::build_gui"] = []
let options["iccpp_iccpp::destroy_gui"] = []
let options["iccpp_iccpp::initialize"] = []
let options["iccpp_iccpp::initialize_generic"] = []
let options["iccpp_iccpp::launch_gui"] = []
let options["iccpp_iccpp::switchedTab"] = []
let options["iccpp_ns::additem"] = []
let options["iccpp_ns::apply_cb"] = []
let options["iccpp_ns::apply_set_cb"] = []
let options["iccpp_ns::assigndefaultsetting"] = []
let options["iccpp_ns::bootstrap"] = []
let options["iccpp_ns::browseCB"] = []
let options["iccpp_ns::build_ns_gui"] = []
let options["iccpp_ns::build_ns_tab"] = []
let options["iccpp_ns::capitalize_first"] = []
let options["iccpp_ns::cbb_input_to_parent"] = []
let options["iccpp_ns::clear_table"] = []
let options["iccpp_ns::clearvalidatecheck"] = []
let options["iccpp_ns::compnets"] = []
let options["iccpp_ns::destroy_ns_gui"] = []
let options["iccpp_ns::dfs_get_net_name"] = []
let options["iccpp_ns::dumpvalidatereport"] = []
let options["iccpp_ns::fill_headers"] = []
let options["iccpp_ns::flushItems"] = []
let options["iccpp_ns::fpAddNets"] = []
let options["iccpp_ns::fpChangeSelected"] = []
let options["iccpp_ns::fpCopyLine"] = []
let options["iccpp_ns::fpDeleteLine"] = []
let options["iccpp_ns::fpHelp"] = []
let options["iccpp_ns::fpLoadInstNetSpec"] = []
let options["iccpp_ns::fpLoadNetSpec"] = []
let options["iccpp_ns::fpPasteLine"] = []
let options["iccpp_ns::fpSaveData"] = []
let options["iccpp_ns::fpUpdateNettype"] = []
let options["iccpp_ns::fpUpdateNobjects"] = []
let options["iccpp_ns::get_width_of_layer"] = []
let options["iccpp_ns::highlight_cb"] = []
let options["iccpp_ns::initialize"] = []
let options["iccpp_ns::initialize_1274"] = []
let options["iccpp_ns::initialize_generic"] = []
let options["iccpp_ns::isInRange"] = []
let options["iccpp_ns::is_horizontal_layer"] = []
let options["iccpp_ns::is_route"] = []
let options["iccpp_ns::launch_ns_gui"] = []
let options["iccpp_ns::lcontain"] = []
let options["iccpp_ns::loadvalidatereport"] = []
let options["iccpp_ns::lpOpusChangeLabel"] = []
let options["iccpp_ns::nets_list_selection_cb"] = []
let options["iccpp_ns::popupDifMenu"] = []
let options["iccpp_ns::routeselectednets"] = []
let options["iccpp_ns::singlecellcheck"] = []
let options["iccpp_ns::sync2itar"] = []
let options["iccpp_ns::validate_cell"] = []
let options["iccpp_ns::validatecheck"] = []
let options["iccpp_ns::zoom_fix_cb"] = []
let options["iccpp_pp::bootstrap"] = []
let options["ism::compare_signatures"] = []
let options["ism::create_object_signature"] = []
let options["ism::fn_get_hier_pg_region"] = []
let options["ism::generate_signatures_for_collection"] = []
let options["ism::get_all_objects"] = []
let options["ism::get_available_pd_intent_blocks"] = []
let options["ism::get_blockage_layers"] = []
let options["ism::get_collgen_filename"] = []
let options["ism::get_ism_attr_info"] = ["-attr_name",]
let options["ism::get_power_domain_info"] = []
let options["ism::init_user_attr_master_index"] = []
let options["ism::init_user_attr_vars"] = []
let options["ism::load_pd_intent"] = []
let options["ism::pd_intent_write_tms_blockages"] = []
let options["ism::pd_intent_write_tms_ndm_info"] = []
let options["ism::pd_intent_write_tms_terminals"] = []
let options["ism::pd_intent_write_tms_via_blockages"] = []
let options["ism::pdintent_delete_tms_coll"] = []
let options["ism::pdintent_remove_all"] = []
let options["ism::pdintent_write"] = ["-all_custom_cells_placement","-all_macros","-all_pgrs","-all_placement_blockages","-all_ports_tintent","-all_routing_blockages","-all_terminals","-all_vas","-include_tms","-path","-pgr_collection","-va_collection",]
let options["ism::pdintent_write_boundary"] = []
let options["ism::pdintent_write_custom_cells_placement"] = []
let options["ism::pdintent_write_ebb_blockages"] = []
let options["ism::pdintent_write_hier_pg_regions"] = []
let options["ism::pdintent_write_hier_voltage_areas"] = []
let options["ism::pdintent_write_io_placement"] = []
let options["ism::pdintent_write_pg_terminal_intent"] = []
let options["ism::pdintent_write_placement_blockages"] = []
let options["ism::pdintent_write_routing_blockages"] = []
let options["ism::pdintent_write_shapes"] = []
let options["ism::pdintent_write_tintent"] = []
let options["ism::pdintent_write_tms_coll"] = []
let options["ism::pdintent_write_va_blockages"] = []
let options["ism::print_signatures"] = []
let options["ism::split_pdintent_voltage_areas"] = []
let options["ism::write_object_signatures_for_diff"] = []
let options["itcl::delete_helper"] = []
let options["itcl::local"] = []
let options["layout_edit::add_gnac"] = ["-coordinate","-net",]
let options["layout_edit::get_nearest_legal_coord"] = ["-cell","-coordinate","-snap",]
let options["layout_edit::get_unique_cell_name"] = []
let options["list::l_num_format"] = []
let options["list::lcontain"] = []
let options["list::lempty"] = []
let options["list::lintersect3"] = []
let options["list::list_comm"] = []
let options["list::list_diff"] = []
let options["list::list_equal"] = []
let options["list::lmap"] = []
let options["list::lmax"] = []
let options["list::lmin"] = []
let options["list::lremove"] = []
let options["list::lrmdups"] = []
let options["list::lsort_bboxes_xl"] = []
let options["list::lsort_bboxes_yl"] = []
let options["list::lsubtract"] = []
let options["list::lvarcat"] = []
let options["list::lvardel"] = []
let options["list::lvarpop"] = []
let options["list::lvarpush"] = []
let options["list::numbered_lines_string"] = ["-cells","-locations","-max_lines","-no_sort",]
let options["lvision::read_mbist_files"] = []
let options["mcmm::dump_icc_mcmm_compatible_inputs"] = []
let options["mcmm::dump_icc_mcmm_data"] = []
let options["mcmm::dump_mcmm_config"] = []
let options["mcmm::manip_top_tcl"] = []
let options["mcmm::post_process_files"] = []
let options["mcmm_qor_cmd::close_files"] = []
let options["mcmm_qor_cmd::link_to_file_external"] = []
let options["mcmm_qor_cmd::link_to_file_internal"] = []
let options["mcmm_qor_cmd::link_to_file_line_external"] = []
let options["mcmm_qor_cmd::link_to_file_line_internal"] = []
let options["mcmm_qor_cmd::ss_collect_main_data"] = []
let options["mcmm_qor_cmd::ss_collect_snapshot_info"] = []
let options["mcmm_qor_cmd::ss_convert_tim_rpt_to_html"] = []
let options["mcmm_qor_cmd::ss_create_mcmm_qor_snapshot"] = []
let options["mcmm_qor_cmd::ss_create_print_footer"] = []
let options["mcmm_qor_cmd::ss_create_print_header"] = []
let options["mcmm_qor_cmd::ss_create_print_main"] = []
let options["mcmm_qor_cmd::ss_create_sum_index"] = []
let options["mcmm_qor_cmd::ss_generate_report_file"] = []
let options["mcmm_qor_cmd::ss_get_longest_grp_name"] = []
let options["mcmm_qor_cmd::ss_mcmm_read_constraint_file"] = []
let options["mcmm_qor_cmd::ss_mcmm_read_power_file"] = []
let options["mcmm_qor_cmd::ss_print_histogram"] = []
let options["mcmm_qor_cmd::ss_print_output"] = []
let options["mcmm_qor_cmd::ss_print_output_to_extern_html"] = []
let options["mcmm_qor_cmd::ss_print_output_to_html"] = []
let options["mcmm_qor_cmd::ss_print_sect_separator"] = []
let options["mcmm_qor_cmd::ss_print_value"] = []
let options["mcmm_qor_cmd::ss_print_value_hyperlink"] = []
let options["mcmm_qor_cmd::ss_print_value_to_html"] = []
let options["mcmm_qor_cmd::ss_print_value_to_sum"] = []
let options["mcmm_qor_cmd::ss_print_wns"] = []
let options["mcmm_qor_cmd::uninit_global_variables"] = []
let options["misc::collection2file"] = []
let options["misc::file2list"] = []
let options["misc::filecolumn2list"] = []
let options["misc::filter_collection_direction"] = []
let options["misc::find_bottom_up_inst_order"] = []
let options["misc::find_in_order_block_hierarchy"] = []
let options["misc::find_mlph_order"] = []
let options["misc::get_user_email"] = []
let options["misc::get_wire_direction"] = []
let options["misc::is_metal_layer"] = []
let options["misc::is_via_layer"] = []
let options["misc::isfloat"] = []
let options["misc::isinteger"] = []
let options["misc::isnumber"] = []
let options["misc::lcm"] = []
let options["misc::lcm_list"] = []
let options["misc::list2file"] = []
let options["misc::lsearch_number"] = []
let options["misc::man"] = []
let options["misc::orientation2_to_orientation"] = []
let options["misc::orientation_to_orientation2"] = []
let options["misc::randAZazStr"] = []
let options["misc::send_image_by_email"] = []
let options["misc::take_snapshot"] = []
let options["misc::time_format"] = []
let options["mpp::create_feedthru_supplies"] = []
let options["mpp::get_primary_domain"] = []
let options["mpp::get_primary_ground_net"] = []
let options["mpp::get_primary_power_net"] = []
let options["mpp::get_supply_voltage"] = []
let options["mpp::pushdown_pv_voltage_map"] = []
let options["mpp::read_pv_voltage_map"] = ["-file",]
let options["mpp::save_incremental_upf"] = ["-output",]
let options["mpp::write_voltage_tcl"] = ["-pv_voltage_map","-voltage_tcl",]
let options["msgcat::ConvertLocale"] = []
let options["msgcat::Init"] = []
let options["msgcat::mc"] = []
let options["msgcat::mcflmset"] = []
let options["msgcat::mcflset"] = []
let options["msgcat::mcload"] = []
let options["msgcat::mclocale"] = []
let options["msgcat::mcmax"] = []
let options["msgcat::mcmset"] = []
let options["msgcat::mcpreferences"] = []
let options["msgcat::mcset"] = []
let options["msgcat::mcunknown"] = []
let options["name::cell_hier_compare"] = []
let options["name::generate_unique_name"] = ["-name","-tag","-type",]
let options["netspec::extract_simulation_netlist"] = ["-driver_subckt_files","-from","-nets","-spice_header_files","-subckt_name","-to",]
let options["netspec::gcr_create_bus_constraint"] = ["-corner_type","-disabled_layers","-gap","-group_name","-min_segment","-shield","-shield_placement","-shield_spacings","-shield_widths","-snet","-valid_layers",]
let options["netspec::gcr_create_diffpair_constraint"] = ["-disabled_layers","-gap","-group_name","-min_segment","-shield","-shield_placement","-shield_spacings","-shield_widths","-snet","-valid_layers",]
let options["netspec::gcr_create_length_limit_constraint"] = ["-min_value",]
let options["netspec::gcr_create_length_match_constraint"] = ["-disabled_layers","-group_name","-match_type","-min_segment","-relative","-shield","-shield_spacings","-shield_widths","-snet","-style","-tolerance",]
let options["netspec::gcr_create_net_priority_constraint"] = ["-priority",]
let options["netspec::gcr_create_rv_constraint"] = ["-disabled_layers","-min_segment","-rv_spec","-shield","-shield_spacings","-shield_widths","-snet","-style",]
let options["netspec::gcr_create_shield_constraint"] = ["-disabled_layers","-min_segment","-shield_spacings","-shield_widths","-snet","-style",]
let options["netspec::get_constrained_nets"] = ["-dump","-gcr",]
let options["netspec::get_constraint_value"] = []
let options["netspec::get_nets_from_dice"] = []
let options["netspec::get_valid_layer_width"] = []
let options["netspec::ndr_create_routing_rule_from_rule_name"] = []
let options["netspec::ndr_update_net_routing_rule"] = ["-disabled_layers","-max_layer_mode","-max_layer_mode_soft_cost","-max_routing_layer","-min_layer_mode","-min_layer_mode_soft_cost","-min_routing_layer","-min_segment","-shield","-shield_spacings","-shield_widths","-snet","-style","-widths",]
let options["netspec::propagate_down"] = ["-force",]
let options["netspec::propagate_net_constraints"] = ["-constrs",]
let options["netspec::propagate_netspec"] = []
let options["netspec::propagate_up"] = ["-force",]
let options["netspec::read_attribute_xml_format"] = ["-array_name",]
let options["netspec::read_attribute_xml_format_helper"] = []
let options["netspec::read_attrxml"] = []
let options["netspec::read_dice_attrxml_files"] = ["-echo",]
let options["netspec::read_dice_format"] = ["-echo",]
let options["netspec::read_netspec"] = []
let options["netspec::remove_constraints_on_nets"] = []
let options["netspec::report_match_lengths"] = ["-group","-nets","-outfile","-per_layer","-report_file","-work_dir",]
let options["netspec::set_allowed_layers_from_net"] = ["-net","-tnets",]
let options["netspec::set_ndr_from_net"] = ["-net","-tnets",]
let options["netspec::write_constraints_from_attrxml"] = ["-add_lock","-append","-apply","-dice_dir","-dice_file","-prop_fanout",]
let options["nwshSetup::load_icv_menus"] = []
let options["nwtnAttrs::layerSet"] = []
let options["nwtnAttrs::load_xml_setup"] = []
let options["nwtnAttrs::netSet"] = []
let options["nwtnSetup::loadShellSetupFile"] = []
let options["nwtnSetup::loadUserFile"] = []
let options["nwtnSetup::loadUserPrefs"] = []
let options["nwtnSetup::loadUserSetupFile"] = []
let options["nwtnSetup::sameDirectory"] = []
let options["nwtnSetup::useRecentMouseTool"] = []
let options["nwtnSetup::useRecentStatusBar"] = []
let options["nwtnSetup::useSelectByNameStatusBar"] = []
let options["nwtnTables::setupColumnDefsForObjectClasses"] = []
let options["nwtnVS::errMsg"] = []
let options["nwtnVS::hasZoom"] = []
let options["nwtnVS::warnMsg"] = []
let options["parseOpt::CmdSpec"] = []
let options["parseOpt::buildCmd"] = []
let options["parseOpt::cancelCmd"] = []
let options["parseOpt::cmdSpec"] = []
let options["parseOpt::defaultCmd"] = []
let options["parseOpt::exec_validate_cmd"] = []
let options["parseOpt::getDefaultValues"] = []
let options["parseOpt::getOptionType"] = []
let options["parseOpt::get_one_of_string_list"] = []
let options["parseOpt::initDefaultValues"] = []
let options["parseOpt::okCmd"] = []
let options["parseOpt::open_gui"] = []
let options["parseOpt::parseOpt"] = []
let options["parseOpt::parseOpts"] = []
let options["parseOpt::parseOptsMain"] = []
let options["parseOpt::previewCmd"] = []
let options["parseOpt::printHelp"] = []
let options["parseOpt::redefine_proc_attributes"] = []
let options["parseOpt::unhide_cmd"] = []
let options["parseOpt::validate"] = []
let options["parseOpt::varPop"] = []
let options["pdn_tcl::hip_transform_pdn_tcl_file"] = []
let options["pdn_tcl::remove_all_pdn_tcl"] = []
let options["pdn_tcl::sd_get_pdn_tcl_file_from_noa"] = []
let options["pdn_tcl::sd_import_hip_pdn"] = []
let options["pdn_tcl::sd_route_hip_pdn"] = []
let options["pdn_tcl::translate_bbox"] = []
let options["pdn_tcl::translate_create_net_shape"] = []
let options["pdn_tcl::translate_create_shape"] = []
let options["pg_util::sd_add_missing_vias_on_ebb_pg_pins"] = []
let options["pg_util::sd_create_blkg_from_objs"] = []
let options["pg_util::sd_create_ebb_blanket_blockage"] = ["-boundary_offset","-cells","-include_ground","-layers",]
let options["pg_util::sd_pg_repair"] = ["-bbox","-layer","-net",]
let options["pg_util::sd_protect_pins_in_pg_region"] = ["-bbox","-layers","-size",]
let options["pg_util::sd_pull_back_pg_from_ebb"] = ["-cells","-force","-gap_size","-layer","-pg_net",]
let options["pg_util::sd_rm_straddle_pg_shapes_over_ebb"] = ["-cells","-force","-layer",]
let options["pinPairing::cell_get_boundary"] = []
let options["pinPairing::create_pin_pairing_stubs"] = ["-cells","-layer","-net_name","-verbose",]
let options["pinPairing::create_pin_pairing_stubs_acrossing_line"] = []
let options["pinPairing::extract_rule_based_track_rules"] = []
let options["pinPairing::extract_rule_based_track_rules_2_"] = []
let options["pinPairing::get_all_objects_crossing_line"] = []
let options["pinPairing::get_tracks_crossing_line"] = []
let options["pinPairing::layer_get_min_width"] = []
let options["pinPairing::layer_get_routing_direction"] = []
let options["pinPairing::object_is_of_interest"] = []
let options["pinPairing::remove_pin_pairing_stubs"] = ["-hierarchical",]
let options["pinPairing::track_get_type"] = []
let options["place::legalize_placement_posthook"] = []
let options["place::rpd_get_overlapped_cells"] = ["-vas",]
let options["place::rpd_process_layout_only_cells"] = ["-vas",]
let options["place::rpd_process_ps_cells"] = ["-vas",]
let options["place::rpd_restore_cells"] = []
let options["place::rpd_verify_rp"] = ["-check_only","-legalize","-log",]
let options["place::rpd_write_rsh"] = ["-input","-output",]
let options["place::swap_cell_types"] = ["-cells",]
let options["place::write_placement"] = ["-all","-filename","-ignore_fixed","-inst_list",]
let options["ppp::create_unambiguous_center_pins"] = []
let options["ppp::create_unambiguous_pins"] = []
let options["ppp::filter_cells_for_push_down"] = []
let options["ppp::find_automatic_exclude_nets_for_push_down"] = []
let options["ppp::pop_tm_terminals"] = ["-layers","-macros",]
let options["ppp::post_push_track_info_update"] = []
let options["ppp::push_blockages"] = []
let options["ppp::push_cells"] = []
let options["ppp::push_routes"] = ["-nets",]
let options["ppp::push_routing_guides"] = []
let options["ppp::push_rows"] = []
let options["ppp::push_voltage_areas"] = []
let options["ppp::re_initialize_floorplan"] = []
let options["ppp::store_original_track_bbox"] = []
let options["ps::get_pwr_grid_config"] = ["-layer","-net_type","-param",]
let options["ps::get_pwr_switch_config"] = ["-dont_snap",]
let options["ps::insert_ps_cells_around_macro"] = ["-get_ps_config","-macro_names","-va",]
let options["ps::ps_get_hierarchy"] = []
let options["ps::pull_point_into_va"] = ["-direction","-increment","-point","-va",]
let options["ps::snap_to_nearest_locn"] = ["-around_ebb","-ceil","-coord","-direction","-floor","-no_extra_check","-nolayersnap","-ps_ref_name",]
let options["ps_dfb::add_prespecified_daisy_chains"] = []
let options["ps_dfb::calculate_single_daisy_start_location"] = []
let options["ps_dfb::calculate_single_start_location"] = ["-start_direction","-switch_list","-voltage_area_name",]
let options["ps_dfb::calculate_start_location"] = ["-start_direction","-switch_control_signal_daisy_chain0","-switch_list","-voltage_area_name",]
let options["ps_dfb::create_power_switch_array_pattern_wa"] = ["-bbox","-orient","-pattern","-power_switch","-prefix","-snap_to_site_row","-voltage_area","-x_offset","-x_pitch","-y_offset","-y_pitch",]
let options["ps_dfb::disconnect_switch_cell"] = []
let options["ps_dfb::dont_touch_power_switch_nets"] = []
let options["ps_dfb::find_select_signals"] = []
let options["ps_dfb::get_chain_bbox"] = []
let options["ps_dfb::get_nearby_switch_cells"] = []
let options["ps_dfb::insert_ps_stitch_hfn"] = ["-native_snap_to_site_row","-power_domain",]
let options["ps_dfb::max_trans_report"] = []
let options["ps_dfb::only_daisy_chain"] = []
let options["ps_dfb::ps_connect_switches"] = []
let options["ps_dfb::ps_select_daisy_chain_switches"] = []
let options["ps_dfb::remove_switch_max_delay"] = []
let options["ps_dfb::replace_fishbone_with_daisy"] = ["-cells","-coords","-start_switch","-voltage_areas",]
let options["ps_dfb::report_long_switch_nets"] = ["-only_voltage_area",]
let options["ps_dfb::report_switch_transitions"] = []
let options["ps_dfb::set_switch_max_delay"] = []
let options["ps_dfb::show_daisy_chain"] = ["-domain","-remove",]
let options["ps_dfb::show_main_chain"] = ["-domain","-remove",]
let options["ps_dfb::show_power_switch_chain"] = ["-domain","-remove","-type",]
let options["ps_dfb::split_daisy_chain"] = []
let options["ps_dfb::stitching_daisy_fb"] = ["-no_rpts","-only_voltage_area","-search_box_diameter",]
let options["ps_dfb::switch_cell_detail_reports"] = []
let options["pvpd_utils::TclFindTheFullPath"] = []
let options["pvpd_utils::load_lib"] = []
let options["pwr::add_missing_via_at_va_edge"] = []
let options["pwr::add_pg_in_polygon"] = ["-layers","-polygon_list",]
let options["pwr::convert_pwr_shapes_to_terminals"] = ["-layers",]
let options["pwr::get_power_layers"] = ["-custom_only","-net_tag","-verbose",]
let options["pwr::remove_dangling_staple_pg"] = []
let options["pwr::remove_pg_in_polygon"] = ["-layers","-polygon_list",]
let options["pwr::remove_pg_terminals"] = []
let options["pwr::remove_power_grid"] = ["-dont_remove_terminal","-layer","-nets",]
let options["pwr::stdcell_hookup_via1"] = ["-m1_pitch","-output","-start_track","-via_master","-via_track_pitch",]
let options["pwr::write_power_grid"] = ["-outfile",]
let options["pwr_hookup::convert_shape_file_to_icc2"] = []
let options["pwr_hookup::create_stdcell_powerhookup"] = ["-allowed_via_master_overrides","-check_hookup_integrity","-post_route_hookup","-powerhookup_all_segments","-powerhookup_avoid_drv","-powerhookup_cells_area","-powerhookup_empty_area","-powerhookup_grid_count","-vcc_name","-via_master_overrides","-vss_name","-within",]
let options["pwr_hookup::find_flexfill_pwr_hookup_options"] = ["-optname_only",]
let options["pwr_hookup::get_first_gnd_rail"] = ["-core_lly","-tile_name","-y_first_gnd","-y_gnd",]
let options["pwr_hookup::get_hookup_layer_vias_and_shapes"] = ["-shapes","-vias",]
let options["pwr_hookup::get_hookup_layers"] = []
let options["pwr_hookup::get_process_name"] = []
let options["pwr_hookup::get_pwr_gnd_regions"] = ["-aon_area","-gnd_area","-pwr_area",]
let options["pwr_hookup::get_pwr_hookup_cell_patterns"] = []
let options["pwr_hookup::get_pwr_hookup_process_settings"] = ["-clear","-no_via_query",]
let options["pwr_hookup::get_pwr_hookup_ref_cell_info"] = ["-cell_ref_pattern","-exclude_macros","-possible_hookup_refs","-strict_exclude_refs","-within",]
let options["pwr_hookup::get_pwr_hookup_via_settings"] = []
let options["pwr_hookup::hookup_convert_cell_wildcards"] = ["-within",]
let options["pwr_hookup::modify_def_vias_section"] = ["-user_shape_file",]
let options["pwr_hookup::print_via_shape_summary"] = ["-remove","-shapes","-vias",]
let options["pwr_hookup::remove_stdcell_powerhookup"] = ["-net_names","-within",]
let options["pwr_hookup::set_hookup_via_type"] = ["-layer_name","-type",]
let options["pwr_hookup::tcl_to_icv_list"] = []
let options["q::get_cell_coordinates"] = []
let options["q::get_driver"] = []
let options["q::get_drivers_of_net"] = []
let options["q::get_heml"] = []
let options["q::get_hier"] = []
let options["q::get_highest_layer"] = ["-attribute","-template",]
let options["q::get_hpml"] = []
let options["q::get_hsml"] = []
let options["q::get_logic_between_pins"] = ["-add_end","-add_start","-end","-start",]
let options["q::get_macros"] = ["-filter","-of_objects",]
let options["q::get_next_size"] = ["-allow_dont_use","-levels",]
let options["q::get_pg_strategy_via_rules"] = []
let options["q::get_physical_context_power_domains"] = []
let options["q::get_power_domain_info"] = ["-domain_name","-no_gas_stations",]
let options["q::get_prev_size"] = ["-allow_dont_use","-levels",]
let options["q::get_receiver"] = []
let options["q::get_receivers_of_net"] = []
let options["q::get_techfile_field_hash"] = []
let options["q::get_techfile_info"] = ["-tech_dump",]
let options["q::get_tf_max_layers"] = []
let options["q::get_visa_xlms"] = []
let options["q::get_voltage_area_of_cell_location"] = ["-cell","-smallest_va",]
let options["q::is_buffer_inst"] = []
let options["q::is_buffer_lib_cell"] = []
let options["q::is_covered_by_blocks"] = []
let options["q::is_inverter_inst"] = []
let options["q::is_nested_va"] = ["-domain_name",]
let options["q::is_vertical_layer"] = ["-layer",]
let options["q::strip_techfile_comments"] = []
let options["rdt_tim_constr_ns::check_save_constraints_log_needs"] = []
let options["rdt_tim_constr_ns::env4rdt_timing_constraints"] = []
let options["rdt_tim_constr_ns::get_constraints_ordered_file"] = []
let options["rdt_tim_constr_ns::no_mcmm_timing_constraints"] = []
let options["rdt_tim_constr_ns::rdt_pv_timing_constraints"] = []
let options["rdt_tim_constr_ns::source_constraints_file"] = []
let options["rdt_xml_2_mcmm_config_ns::get_field"] = []
let options["rdt_xml_2_mcmm_config_ns::get_unique_search_path"] = []
let options["reconnectPswNS::buildSwIndexTables"] = []
let options["reconnectPswNS::buildSwsConnectionGroup"] = []
let options["reconnectPswNS::calculateCellDistanceToTrunkCell"] = []
let options["reconnectPswNS::changeCellConnsForMergedGroup"] = []
let options["reconnectPswNS::checkSwCellHasDiver"] = []
let options["reconnectPswNS::compareCandidateConns"] = []
let options["reconnectPswNS::comparePswConnX"] = []
let options["reconnectPswNS::comparePswConnY"] = []
let options["reconnectPswNS::connectGroups"] = []
let options["reconnectPswNS::disconnectPswConnection"] = []
let options["reconnectPswNS::disconnectPswsAbnormalYConnection"] = []
let options["reconnectPswNS::findCandidateConnectionWithMinimalDistanceToTrunkCell"] = []
let options["reconnectPswNS::findTargetConnectionsInGroups"] = []
let options["reconnectPswNS::findTrunkCells"] = []
let options["reconnectPswNS::getCellBBox"] = []
let options["reconnectPswNS::getCellLoadPinCells"] = []
let options["reconnectPswNS::getConnectionNormalDistance"] = []
let options["reconnectPswNS::getDriverCell"] = []
let options["reconnectPswNS::getDriverCellFromGroupOfCells"] = []
let options["reconnectPswNS::getLoadCellPins"] = []
let options["reconnectPswNS::getLoadCells"] = []
let options["reconnectPswNS::getNearestCoordinate"] = []
let options["reconnectPswNS::getSwCellHasNoDriverIfHave"] = []
let options["reconnectPswNS::getTrunkCellDirection"] = []
let options["reconnectPswNS::getTwoCellDistance"] = []
let options["reconnectPswNS::handlingOutlierGroups"] = []
let options["reconnectPswNS::mergeTwogroupsForConnectionAndChangeTargetGroupConnIfNecessary"] = []
let options["reconnectPswNS::traversePswsConnections"] = []
let options["refresh::dump_for_block_refresh"] = []
let options["refresh::dump_refresh"] = ["-blocks","-collateral_type","-filter","-objects",]
let options["refresh::dump_rptr_connectivity"] = ["-cells","-output_file",]
let options["refresh::hier_sort_bottom_up"] = ["-cells",]
let options["refresh::translate_eco_file"] = []
let options["refresh::write_eco_files"] = ["-golden_block","-golden_lib","-outdir","-pre_golden_lib",]
let options["rolluplib::cleanup"] = []
let options["rolluplib::copy"] = []
let options["rolluplib::gen_references"] = []
let options["rolluplib::main"] = ["-rollup_block","-rollup_lib","-source_lib",]
let options["rolluplib::run_checks"] = []
let options["route::get_net_wirelength"] = ["-net",]
let options["route::get_routing_layers"] = ["-above_layer","-below_layer","-next_layer","-no_metal","-no_via","-prev_layer",]
let options["route::reroute_shorts"] = ["-loop","-remove_all","-remove_constraints","-shorts_thresold",]
let options["route::set_via_color"] = ["-color_value","-power_net_only","-via_layer","-via_master",]
let options["route::set_via_ladder_rule"] = ["-config_file",]
let options["rpt::check_qor_report"] = ["-file",]
let options["rpt::clock_information"] = ["-clknets","-tag",]
let options["rpt::create_run_summary"] = ["-append","-report_dir","-stage_tag","-summary_file",]
let options["rpt::get_total_z"] = []
let options["rpt::power_domains"] = ["-file",]
let options["rpt::print_timing_path_summary"] = []
let options["rpt::pvt"] = ["-corner","-file",]
let options["rpt::qor"] = ["-corner","-file",]
let options["rpt::qor_summary"] = ["-file",]
let options["rpt::report_custom_powergrid_info"] = ["-outfile",]
let options["rpt::route_info_of_paths"] = ["-corner","-llist","-max_path","-mode","-nand_gate_area","-nworst","-outfile","-pathlist","-slack","-vlist",]
let options["rpt::route_info_one_path"] = ["-corner","-epoint","-llist","-mode","-nand_gate_area","-spoint","-vlist",]
let options["rpt::supply_nets"] = ["-file",]
let options["rpt::timing"] = ["-corner","-file","-mode",]
let options["rpt::zero_interconnect_timing"] = ["-tag",]
let options["ser_utils::filter_seq_by_avf"] = []
let options["ser_utils::filter_vecseq_fromser"] = []
let options["ser_utils::get_actual_reference"] = []
let options["ser_utils::get_next_cell_size_up"] = []
let options["ser_utils::get_ser_lib_cells"] = []
let options["ser_utils::insert_rcc"] = []
let options["ser_utils::insert_rts"] = []
let options["ser_utils::insert_seut"] = []
let options["ser_utils::report_registers"] = []
let options["ser_utils::report_ser_insertion_rate"] = []
let options["ser_utils::ser_assign_avf_values"] = []
let options["ser_utils::ser_assign_switching_af"] = []
let options["ser_utils::ser_assign_switching_af_input"] = []
let options["ser_utils::ser_set_reference_latch"] = []
let options["ser_utils::update_vec_scripts"] = []
let options["snpsBusyCursorSkipList::init"] = []
let options["snpsCalculateWindowGeometry::topLevel"] = []
let options["snpsCalculateWindowGeometry::topLevelLayout"] = []
let options["snpsCommandForm::script_editor_create"] = []
let options["snpsCommandForm::script_editor_exist"] = []
let options["snpsCommandForm::script_editor_group"] = []
let options["snpsCommandForm::script_editor_hide"] = []
let options["snpsCommandForm::script_editor_should_turn_on"] = []
let options["snpsCommandForm::script_editor_show"] = []
let options["snpsCommandForm::script_editor_toggle_on_off"] = []
let options["snpsCommandForm::set_script_editor_exist"] = []
let options["snpsCommandForm::set_script_editor_group"] = []
let options["snpsCurrInst::curInstCmdExists"] = []
let options["snpsCurrInst::getCurrentInstance"] = []
let options["snpsCurrInst::restoreCurrentInstance"] = []
let options["snpsCurrInst::saveCurrentInstance"] = []
let options["snpsCurrInst::saveCurrentInstanceAndSetCurrentInstanceToTop"] = []
let options["snpsCurrInst::setCurrentInstance"] = []
let options["snpsCurrInst::setCurrentInstanceToTop"] = []
let options["snpsDocBrowser::getAllManPageList"] = []
let options["snpsDocBrowser::getAproposAsHtml"] = []
let options["snpsDocBrowser::getErrorPage"] = []
let options["snpsDocBrowser::getIndexFromAproposOutputFile"] = []
let options["snpsDocBrowser::getIndexPageForCommandList"] = []
let options["snpsDocBrowser::getManIndex"] = []
let options["snpsDocBrowser::getManMessageIndex"] = []
let options["snpsDocBrowser::getManPageAsHtml"] = []
let options["snpsDocBrowser::getManPageAsHtml_builtinMan"] = []
let options["snpsDocBrowser::getManPageAsHtml_unixMan"] = []
let options["snpsDocBrowser::getManPageHome"] = []
let options["snpsDocBrowser::getManPageIndex"] = []
let options["snpsDocBrowser::getManPageList"] = []
let options["snpsDocBrowser::getManPageListFromDirectory"] = []
let options["snpsDocBrowser::getManPath"] = []
let options["snpsDocBrowser::getPerlCmd"] = []
let options["snpsDocBrowser::handleEmptyPage"] = []
let options["snpsDocBrowser::listDir"] = []
let options["snpsDocBrowser::new"] = []
let options["snpsDocBrowser::quote_url"] = []
let options["snpsDocBrowser::showManViewerDialog"] = []
let options["snpsDocBrowser::showUrlInDialog"] = []
let options["snpsDocBrowser::text2html"] = []
let options["snpsGuiMenuEnable::current_is_schematic"] = []
let options["snpsGuiMenuEnable::enable_if_regular_path_schematic"] = []
let options["snpsGuiMenuEnable::getListViewTypes"] = []
let options["snpsGuiMenuEnable::has_current_design"] = []
let options["snpsGuiMenuEnable::has_designs"] = []
let options["snpsGuiMenuEnable::has_hier_cells_selected"] = []
let options["snpsGuiSelect::can_get_shapes_of_selected"] = []
let options["snpsGuiSelect::get_via_defs_of_selected"] = []
let options["snpsGuiSelect::selectHighlighted"] = []
let options["snpsMRUPalette::add_mru_hot_keys"] = []
let options["snpsMRUPalette::show_mru_favorites"] = []
let options["snpsMRUPalette::show_mru_recent"] = []
let options["snpsPaletteGroup::addHVPages"] = []
let options["snpsPaletteGroup::createConsole"] = []
let options["snpsPaletteGroup::createPalette"] = []
let options["snpsPaletteGroup::createPaletteGroupPalettes"] = []
let options["snpsPaletteGroup::createScriptEditor"] = []
let options["snpsPaletteGroup::debug"] = []
let options["snpsPaletteGroup::debugVars"] = []
let options["snpsPaletteGroup::decodeEncodedPage"] = []
let options["snpsPaletteGroup::filterPages"] = []
let options["snpsPaletteGroup::getIndexedPaletteValue"] = []
let options["snpsPaletteGroup::initGroups"] = []
let options["snpsPaletteGroup::initPageHidden"] = []
let options["snpsPaletteGroup::isPageInOrder"] = []
let options["snpsPaletteGroup::isValidPage"] = []
let options["snpsPaletteGroup::matchPageValues"] = []
let options["snpsPaletteGroup::setCurrentPage"] = []
let options["snpsPaletteGroup::setExpandedAndCurrent"] = []
let options["snpsPaletteGroup::setExpandedAndCurrent1"] = []
let options["snpsPaletteGroup::stringToInt"] = []
let options["snpsPaletteGroup::use_palette_group"] = []
let options["snpsQoRSnapshot::appendOptionBool"] = []
let options["snpsQoRSnapshot::appendOptionList"] = []
let options["snpsQoRSnapshot::collectPaths"] = []
let options["snpsQoRSnapshot::commandHasOption"] = []
let options["snpsQoRSnapshot::commandNeedsInputValue"] = []
let options["snpsQoRSnapshot::comparePath"] = []
let options["snpsQoRSnapshot::createException"] = []
let options["snpsQoRSnapshot::doModal"] = []
let options["snpsQoRSnapshot::getFileName"] = []
let options["snpsQoRSnapshot::jumpToFileLine"] = []
let options["snpsQoRSnapshot::reEscape"] = []
let options["snpsQoRSnapshot::regScrollPos"] = []
let options["snpsQoRSnapshot::resetModal"] = []
let options["snpsQoRSnapshot::showPath"] = []
let options["snpsQoRSnapshot::showResults"] = []
let options["snpsQoRSnapshot::toHtml"] = []
let options["snpsQoRSnapshot::update3rdHtml"] = []
let options["snpsQoRSnapshot::updateHtml"] = []
let options["snpsReadDRC::_breakPolygon"] = []
let options["snpsReadDRC::_generateDRCTempFileName"] = []
let options["snpsReadDRC::_renameErrorType"] = []
let options["snpsTiledView::create_window"] = []
let options["snpsTiledView::init_window"] = []
let options["snpsTiledView::post_create_window"] = []
let options["snpsTiledView::pre_create_window"] = []
let options["snpsTiledView::use_tiled_view"] = []
let options["snpsUtils::absolute_path"] = []
let options["snpsUtils::strip_filename"] = []
let options["snpsWndFramework::addStandardWindowMenu"] = []
let options["snpsWndFramework::add_default_view_caption_menu"] = []
let options["snpsWndFramework::add_next_previous_window_menus"] = []
let options["snpsWndFramework::add_window_menu_cascade_views"] = []
let options["snpsWndFramework::add_window_menu_close_all_views"] = []
let options["snpsWndFramework::add_window_menu_close_all_windows"] = []
let options["snpsWndFramework::add_window_menu_close_view"] = []
let options["snpsWndFramework::add_window_menu_close_window"] = []
let options["snpsWndFramework::add_window_menu_hide_view"] = []
let options["snpsWndFramework::add_window_menu_maximize_views"] = []
let options["snpsWndFramework::add_window_menu_next_view"] = []
let options["snpsWndFramework::add_window_menu_next_window"] = []
let options["snpsWndFramework::add_window_menu_previous_view"] = []
let options["snpsWndFramework::add_window_menu_previous_window"] = []
let options["snpsWndFramework::add_window_menu_tile_views"] = []
let options["snpsWndFramework::add_window_menu_view_ops_heading"] = []
let options["snpsWndFramework::add_window_menu_window_ops_heading"] = []
let options["snpsWndFramework::checkEnableSwitchView"] = []
let options["snpsWndFramework::close_current_view"] = []
let options["snpsWndFramework::console_create"] = []
let options["snpsWndFramework::console_exist"] = []
let options["snpsWndFramework::console_group"] = []
let options["snpsWndFramework::console_hide"] = []
let options["snpsWndFramework::console_should_turn_on"] = []
let options["snpsWndFramework::console_show"] = []
let options["snpsWndFramework::console_toggle_on_off"] = []
let options["snpsWndFramework::create_action"] = []
let options["snpsWndFramework::early_start_callback"] = []
let options["snpsWndFramework::get_toplevel_id"] = []
let options["snpsWndFramework::installDefaultViewCaptionMenu"] = []
let options["snpsWndFramework::late_start_callback"] = []
let options["snpsWndFramework::maximize_current_view"] = []
let options["snpsWndFramework::minimize_current_view"] = []
let options["snpsWndFramework::normalize_menu_root"] = []
let options["snpsWndFramework::query_enable_maximize_current_view"] = []
let options["snpsWndFramework::query_enable_minimize_current_view"] = []
let options["snpsWndFramework::query_enable_restore_current_view"] = []
let options["snpsWndFramework::restore_current_view"] = []
let options["snpsWndFramework::set_console_exist"] = []
let options["snpsWndFramework::set_console_group"] = []
let options["snpsWndFramework::tqePaletteButtonPress"] = []
let options["snpsWndFramework::tqePaletteFocusIn"] = []
let options["snpsWndFramework::view_is_docked"] = []
let options["snpsWndFramework::x_cascade_tile_views"] = []
let options["snpsWndFramework::x_dock_undock_view"] = []
let options["tcl::CopyDirectory"] = []
let options["tcl::HistAdd"] = []
let options["tcl::HistChange"] = []
let options["tcl::HistClear"] = []
let options["tcl::HistEvent"] = []
let options["tcl::HistIndex"] = []
let options["tcl::HistInfo"] = []
let options["tcl::HistKeep"] = []
let options["tcl::HistNextID"] = []
let options["tcl::HistRedo"] = []
let options["tcl::Lassign"] = []
let options["tcl::Lempty"] = []
let options["tcl::Lget"] = []
let options["tcl::Lvarincr"] = []
let options["tcl::Lvarincr1"] = []
let options["tcl::Lvarpop"] = []
let options["tcl::Lvarpop1"] = []
let options["tcl::Lvarset"] = []
let options["tcl::Lvarset1"] = []
let options["tcl::Lvarset1nc"] = []
let options["tcl::MacOSXPkgUnknown"] = []
let options["tcl::OptAmbigous"] = []
let options["tcl::OptBadValue"] = []
let options["tcl::OptCheckType"] = []
let options["tcl::OptCreateTestProc"] = []
let options["tcl::OptCurAddr"] = []
let options["tcl::OptCurDesc"] = []
let options["tcl::OptCurDescFinal"] = []
let options["tcl::OptCurSetValue"] = []
let options["tcl::OptCurState"] = []
let options["tcl::OptCurrentArg"] = []
let options["tcl::OptDefaultValue"] = []
let options["tcl::OptDoAll"] = []
let options["tcl::OptDoOne"] = []
let options["tcl::OptError"] = []
let options["tcl::OptFlagUsage"] = []
let options["tcl::OptGetPrgCounter"] = []
let options["tcl::OptGuessType"] = []
let options["tcl::OptHasBeenSet"] = []
let options["tcl::OptHelp"] = []
let options["tcl::OptHits"] = []
let options["tcl::OptInstr"] = []
let options["tcl::OptIsCounter"] = []
let options["tcl::OptIsFlag"] = []
let options["tcl::OptIsOpt"] = []
let options["tcl::OptIsPrg"] = []
let options["tcl::OptKeyDelete"] = []
let options["tcl::OptKeyError"] = []
let options["tcl::OptKeyGetDesc"] = []
let options["tcl::OptKeyParse"] = []
let options["tcl::OptKeyRegister"] = []
let options["tcl::OptLengths"] = []
let options["tcl::OptMissingValue"] = []
let options["tcl::OptName"] = []
let options["tcl::OptNeedValue"] = []
let options["tcl::OptNewInst"] = []
let options["tcl::OptNextArg"] = []
let options["tcl::OptNextDesc"] = []
let options["tcl::OptNormalizeOne"] = []
let options["tcl::OptOptUsage"] = []
let options["tcl::OptParamType"] = []
let options["tcl::OptParse"] = []
let options["tcl::OptProc"] = []
let options["tcl::OptProcArgGiven"] = []
let options["tcl::OptSelection"] = []
let options["tcl::OptSetPrgCounter"] = []
let options["tcl::OptState"] = []
let options["tcl::OptTooManyArgs"] = []
let options["tcl::OptTree"] = []
let options["tcl::OptTreeVars"] = []
let options["tcl::OptType"] = []
let options["tcl::OptTypeArgs"] = []
let options["tcl::OptValue"] = []
let options["tcl::OptVarName"] = []
let options["tcl::SetMax"] = []
let options["tcl::SetMin"] = []
let options["tech::get_techfile_info"] = ["-layer","-type",]
let options["tech::get_tf_block"] = []
let options["tech::read_techfile_info"] = ["-techfile",]
let options["tm_custom_scripts::copy_shapes"] = []
let options["tm_custom_scripts::find_nets_by_mouse_pointer"] = []
let options["tm_custom_scripts::generate_trim_table"] = []
let options["tm_custom_scripts::get_trim_row_col_pitch"] = []
let options["tm_custom_scripts::insert_tv0"] = ["-force","-nets","-trim","-trimfile","-via_type","-within",]
let options["tm_custom_scripts::is_boundary_completely_inside"] = []
let options["tm_custom_scripts::parse_trim_table"] = []
let options["tm_custom_scripts::paste_shapes"] = []
let options["tm_custom_scripts::rename_shapes"] = ["-net",]
let options["tmtd::attach_terminal_attributes"] = []
let options["tmtd::bbox_get_xh"] = []
let options["tmtd::bbox_get_xl"] = []
let options["tmtd::bbox_get_yh"] = []
let options["tmtd::bbox_get_yl"] = []
let options["tmtd::boundary2bbox"] = []
let options["tmtd::change_ndm_to_design_view"] = ["-create","-ndm_ref_name",]
let options["tmtd::check_bu_collaterals"] = ["-create_terminal","-repair",]
let options["tmtd::check_for_tm_delete"] = []
let options["tmtd::check_inputs"] = []
let options["tmtd::check_obj_outside_boundary"] = []
let options["tmtd::check_object"] = []
let options["tmtd::cleanup_old_collaterals"] = []
let options["tmtd::compare_oas_or_gds"] = []
let options["tmtd::convert_tm1_terminals_into_c4bump"] = []
let options["tmtd::convert_tms_blockages_to_shape"] = []
let options["tmtd::create_blockage_via"] = []
let options["tmtd::create_def"] = ["-block","-def_file","-interface_nets","-noports","-tcl_file",]
let options["tmtd::create_ndm_block"] = []
let options["tmtd::delete_older_shapes"] = ["-cellname","-change_working_design","-current_block_name","-only_ports","-outside_terminals",]
let options["tmtd::filter_objects"] = []
let options["tmtd::find_child_pin_name"] = []
let options["tmtd::find_new_bbox"] = []
let options["tmtd::find_other_tm1_or_c4_shapes_connected"] = []
let options["tmtd::find_via_overhanged_shapes"] = []
let options["tmtd::generate_object_owner"] = []
let options["tmtd::generate_td_collateral_for_block"] = []
let options["tmtd::generate_td_collaterals"] = []
let options["tmtd::get_TopMetals_fromChildblocks"] = []
let options["tmtd::get_edge_boundary"] = []
let options["tmtd::get_ndm_info"] = []
let options["tmtd::handle_encroached_straddling_objects"] = []
let options["tmtd::interface_tm_delete"] = []
let options["tmtd::lempty"] = []
let options["tmtd::lmax"] = []
let options["tmtd::lmin"] = []
let options["tmtd::modify_bbox"] = []
let options["tmtd::poly_2_bbox"] = []
let options["tmtd::popup_block"] = []
let options["tmtd::print_process_variables"] = []
let options["tmtd::process_internal_nets"] = ["-current_block_name","-delete_blockage","-delete_obj","-nets","-only_shape","-only_via","-shapes",]
let options["tmtd::process_owner_attribute"] = ["-current_block_name","-force","-objects","-remove",]
let options["tmtd::process_shapes_from_frame"] = []
let options["tmtd::process_straddling_objs"] = []
let options["tmtd::rect_2_bbox"] = []
let options["tmtd::separate_pin_with_non_pin"] = []
let options["tmtd::source_bu_collateral"] = []
let options["tmtd::source_tm_collateral"] = []
let options["tmtd::tm_collateral_diff"] = ["-compare_coll_format","-compare_collateral","-ref_block","-ref_coll_format","-ref_collateral","-ref_lib",]
let options["tmtd::tm_consume_td_tm_file"] = ["-block","-lib","-td_tm_collateral",]
let options["tmtd::tm_validate_bu_with_original"] = ["-bu_collateral","-bu_file_format","-oas","-ref_block","-ref_lib",]
let options["tmtd::tms_write_gds"] = []
let options["tmtd::tms_write_oasis"] = []
let options["tmtd::transform_objects_parent_2_child"] = ["-child_orientation","-child_points","-object",]
let options["tmtd::transform_points_child_2_parent"] = ["-child_orientation","-child_origin","-from_points",]
let options["tmtd::transform_points_parent_2_child"] = ["-child_orientation","-child_origin","-from_points",]
let options["tmtd::viaParseICCTechFile"] = []
let options["tmtd::write_blockages"] = ["-objects","-output",]
let options["tmtd::write_mims"] = ["-objects","-output",]
let options["tmtd::write_out_tm_td_collaterals"] = []
let options["tmtd::write_terminals"] = ["-convert_to_shape","-objects","-output",]
let options["trace::cmd_trace_aux"] = []
let options["trace::hook_app_options"] = []
let options["trace::hook_reset_app_options"] = []
let options["trace::proc_hook"] = []
let options["trace::proc_trace_aux"] = []
let options["trace::source_hook"] = []
let options["trace::source_hook_leave"] = []
let options["trace::trace_command_execution"] = []
let options["trace::trace_errorInfo"] = []
let options["trace::trace_error_off"] = []
let options["trace::trace_error_on"] = []
let options["trace::trace_proc_override"] = []
let options["tsmc2snps::translate_FloorplanRuleChecker_cmd_tsmc2snps"] = []
let options["tspec::clipper"] = ["-nets","-reset",]
let options["tspec::consume_io_constraints"] = []
let options["tspec::create_bbt"] = ["-filename",]
let options["tspec::create_missing_timing_arcs"] = []
let options["tspec::create_timing_on_unconstrained_pins"] = []
let options["tspec::dangling"] = []
let options["tspec::format_if_num"] = []
let options["tspec::gen_constraints_for_unbudgeted_pins"] = []
let options["tspec::generate_budgeted_collateral_for_xmim"] = []
let options["tspec::generate_budgeted_tspec"] = []
let options["tspec::get_driver"] = []
let options["tspec::get_keys"] = []
let options["tspec::get_receiver"] = []
let options["tspec::get_subkeys"] = []
let options["tspec::nets_in_path"] = []
let options["tspec::read"] = []
let options["tspec::reconcile_tintent"] = []
let options["tspec::report_tspec_count"] = []
let options["tspec::report_unconstrained_pins"] = []
let options["tspec::report_unconstrained_ports"] = []
let options["tspec::spec_default"] = []
let options["tspec::timing_path_analyze"] = ["-corner","-max_paths","-net_delay_limit","-tpaths",]
let options["tspec::tspec_async_pins"] = []
let options["ubm::NflTclFindTheFullPath"] = []
let options["ubm::load_lib"] = []
let options["utils::CalcPackageLocations"] = []
let options["utils::add_header_to_file"] = ["-comment_char","-file_name","-msg","-runtime",]
let options["utils::change_ref_libs_path"] = []
let options["utils::compute_relative_path"] = []
let options["utils::convert_units"] = ["-from","-to","-value",]
let options["utils::find_package"] = []
let options["utils::float_eq"] = []
let options["utils::get_array_contents_sorted_by_value"] = []
let options["utils::get_design_info"] = ["-stages_done",]
let options["utils::get_last_stage"] = []
let options["utils::get_pcnt"] = []
let options["utils::get_repeaters"] = []
let options["utils::get_tmp_dir_name"] = ["-group",]
let options["utils::get_tmp_file_name"] = []
let options["utils::get_top_level_port_of_pin"] = []
let options["utils::get_toplevel_port_of_net"] = []
let options["utils::is_stage_done"] = []
let options["utils::port_up_terminals"] = ["-cells","-layer","-pins","-snap_to_boundary_edge",]
let options["utils::print_header"] = ["-comment_char","-file_name","-msg","-runtime",]
let options["utils::print_histogram"] = ["-count_label","-key_label","-lower_bound","-max_star_length","-percentage","-title","-type","-unit","-upper_bound",]
let options["utils::recursive_trace_net_topology"] = []
let options["utils::save_design_info"] = []
let options["utils::shrink_wrap_boundary"] = []
let options["utils::snap_terminals_to_boundary_edge"] = ["-edge","-terminals",]
let options["utils::trace_driver_pin"] = ["-pin",]
let options["utils::trace_net_topology"] = ["-pins","-return_all",]
let options["via_ladder::add_via_ladder"] = ["-allow_drcs","-cells","-constraints_only","-incremental","-nets","-report_tag","-via_ladder_constraint",]
let options["via_ladder::assign_via_ladder_constraints"] = ["-cells","-nets","-pin_name","-report_tag","-via_ladder_constraint",]
let options["via_ladder::calc_terminal_window_height"] = []
let options["via_ladder::calc_terminal_window_min_width"] = []
let options["via_ladder::calc_terminal_window_width"] = []
let options["via_ladder::calc_vl_structure"] = []
let options["via_ladder::gen_vl_pattern_from_tech"] = []
let options["via_ladder::generate_via_ladder_rules"] = []
let options["via_ladder::remove_via_ladder"] = ["-cells","-dont_remove_constraint","-nets",]
let options["via_ladder::set_via_ladder_rule"] = ["-config_file",]
let options["via_ladder::stdcell_vl_profile"] = []
let options["via_ladder::update_techfile_for_via_ladder_rule"] = ["-outfile","-rule_file","-techfile",]
let options["vs::fix_scan_def"] = []
let options["vs::get_main_driver"] = []
let options["vs::get_reference"] = []
let options["vs::merge_seq_cells"] = []
let options["vs::parse_cts_exceptions"] = []
let options["vs::parse_mco_sdc"] = []
let options["vs::remove_dont_use"] = []
let options["vs::sort_lib_cells"] = []
let options["vs::vector_swap"] = ["-bbox","-check_only","-cmax_percent_cluster","-merge_lces","-swap",]
let options["vs::vector_swap_snps"] = []
let options["vs::vector_unique_name"] = []
let options["vs::vector_write_map_file"] = []
let options["xmim::get_ft_connected_pins"] = []
let options["xmim::prepare_synth_net"] = []
let options["xmim::stitch_and_propagte_pins"] = []
let options["xmim::swap_in_abstracts"] = []
let options["xmim::write_interface_track_region_config"] = []
let options["xml::pkgload"] = []
let options["zndp::add_new_module"] = ["-cells","-instances","-no_save","-reference",]
let options["zndp::connect"] = ["-net_type","-netbus","-pinbus",]
let options["zndp::create_bbox_library"] = ["-lib",]
let options["zndp::create_bbox_topblock"] = ["-block","-boundary",]
let options["zndp::create_boundaries_file"] = ["-filename",]
let options["zndp::create_boundaries_placement_files"] = []
let options["zndp::create_interface"] = ["-busname","-cells","-direction","-net_type",]
let options["zndp::disconnect"] = ["-all","-netbus","-pinbus",]
let options["zndp::expand"] = []
let options["zndp::floorplan_block"] = ["-cells","-no_backoff","-no_tracks_under_rails","-top",]
let options["zndp::get_ring"] = []
let options["zndp::remove_interface"] = ["-busname","-cells",]
let options["zndp::snap_terminal2selectedshapes"] = ["-objects",]
let options["after"] = []
let options["append"] = []
let options["apply"] = []
let options["array"] = ["anymore","donesearch","exists","get","names","nextelement","set","size","startsearch","statistics","unset",]
let options["binary"] = ["decode","encode","format","scan",]
let options["break"] = []
let options["case"] = []
let options["catch"] = ["-code",]
let options["chan"] = ["blocked","close","configure","copy","create","eof","event","flush","gets","names","pending","pipe","pop","postevent","push","puts","read","seek","tell","truncate",]
let options["close"] = []
let options["concat"] = []
let options["continue"] = []
let options["coroutine"] = []
let options["dict"] = ["append","create","exists","filter","for","get","incr","info","keys","lappend","map","merge","remove","replace","set","size","unset","update","values","with",]
let options["encoding"] = []
let options["eof"] = []
let options["error"] = ["-errorcode",]
let options["eval"] = []
let options["exec"] = ["-ignorestderr","-keepnewline",]
let options["expr"] = ["abs","acos","asin","atan","atan2","bool","ceil","cos","cosh","double","entier","exp","floor","fmod","hypot","int","isqrt","log","log10","max","min","pow","rand","round","sin","sinh","sqrt","srand","tan","tanh","wide",]
let options["fblocked"] = []
let options["fconfigure"] = ["-blocking","-buffering","-buffersize","-encoding","-eofchar","-translation",]
let options["fcopy"] = ["-command","-encoding",]
let options["file"] = ["atime","attributes","channels","copy","delete","dirname","executable","exists","extension","isdirectory","isfile","join","link","lstat","mkdir","mtime","nativename","normalize","owned","pathtype","readable","readlink","rename","rootname","separator","size","split","stat","system","tail","tempfile","type","volumes","writable",]
let options["fileevent"] = []
let options["flush"] = []
let options["for"] = []
let options["foreach"] = []
let options["format"] = []
let options["gets"] = []
let options["glob"] = ["-directory","-join","-nocomplain","-path","-tails","-type","-types",]
let options["global"] = []
let options["if"] = []
let options["incr"] = []
let options["info"] = ["args","body","class","cmdcount","commands","complete","coroutine","default","errorstack","exists","frame","functions","globals","hostname","level","library","loaded","locals","nameofexecutable","object","patchlevel","procs","script","sharelibextension","tclversion","vars",]
let options["interp"] = ["-command","-global","-granularity","-milliseconds","-namespace","-option","-seconds","-value",]
let options["join"] = []
let options["lappend"] = []
let options["lassign"] = []
let options["lindex"] = []
let options["linsert"] = []
let options["list"] = []
let options["llength"] = []
let options["lmap"] = []
let options["lrange"] = []
let options["lrepeat"] = []
let options["lreplace"] = []
let options["lreverse"] = []
let options["lsearch"] = ["-all","-ascii","-bisect","-decreasing","-dictionary","-exact","-glob","-increasing","-index","-inline","-integer","-nocase","-not","-real","-regexp","-sorted","-start","-subindices",]
let options["lset"] = []
let options["lsort"] = ["-ascii","-command","-decreasing","-dictionary","-increasing","-index","-indices","-integer","-nocase","-real","-stride","-unique",]
let options["namespace"] = ["children","code","current","delete","ensemble","eval","exists","export","forget","import","inscope","origin","parent","path","qualifiers","tail","unknown","upvar","which",]
let options["open"] = ["-handshake","-lasterror","-mode","-pollinterval","-queue","-sysbuffer","-timeout","-ttycontrol","-ttystatus","-xchar",]
let options["package"] = ["ifneeded","names","prefer","present","provide","require","unknown","vcompare","versions","vsatisfies",]
let options["pid"] = []
let options["proc"] = []
let options["puts"] = ["-translation",]
let options["read"] = []
let options["regexp"] = ["-about","-all","-expanded","-indices","-inline","-line","-lineanchor","-linestop","-nocase","-start",]
let options["regsub"] = ["-all","-expanded","-line","-lineanchor","-linestop","-nocase","-start",]
let options["return"] = ["-code","-errorcode","-errorinfo","-errorstack","-level","-options",]
let options["scan"] = []
let options["seek"] = []
let options["set"] = []
let options["socket"] = ["-async","-error","-myaddr","-myport","-peername","-sockname",]
let options["split"] = []
let options["string"] = ["bytelength","cat","compare","equal","first","index","is","last","length","map","match","range","repeat","replace","reverse","tolower","totitle","toupper","trim","trimleft","trimright","wordend","wordstart",]
let options["subst"] = []
let options["switch"] = ["-exact","-glob","-indexvar","-matchvar","-nocase","-regexp",]
let options["tailcall"] = []
let options["tell"] = []
let options["throw"] = []
let options["time"] = []
let options["trace"] = []
let options["try"] = ["-errorcode",]
let options["unset"] = ["-nocomplain",]
let options["update"] = []
let options["uplevel"] = []
let options["upvar"] = []
let options["variable"] = []
let options["vwait"] = ["-server",]
let options["while"] = []
let options["yield"] = []
let options["yieldto"] = []
let options["zlib"] = ["-checksum","-dictionary","-finalize","-flush","-fullflush","-header","-level","-limit",]
let options["package require"] = ["Accl","AntaresBridge","AntaresBridge_ui","AntaresCWBridge","AntaresMWBridge","AntaresQeaFileUtil","AntaresRptMgr","AntaresSwig","BLT","BWidget","BaseTcl","BeanCounter","BeanCounter::gui","Blade","BladeRFA","Blade_ui","Blf","CmsApi","ColorMap","ConnanTcl","DFMStats","DFMStats2","Decap","DensityCalc","DensityCalc_ui","DesignMerge","DesignMergeFlowsAndMacros","Dfm","DfmLoc","Diamond","Dice","DiceWidgets","Dmi","Dmi2","DmiDR","Duet","DuetTcl","DuetX","EMSGUI","EkkiInterProcessSelect","EventUtils","Expect","FBTcl","FcdeGetoptTcl","FcdeSchemeGenTcl","FclUtils","GP","GlxRegex","GlxTpr","GlxVia","Gnac","Gtl","GtlOp","GtlUdm","Gtlubi","Gut","Gv","Highlight","Ideck","Img","IncrementalPv","Itcl","Itk","Iwidgets","LCLCLite","LaunchPad","LaunchPad::AppLayer","LaunchPad::BaseLayer","LaunchPad::CIST","LaunchPad::Itcl","LaunchPad::Itcl::CleanDir","LaunchPad::Itcl::CmdLine","LaunchPad::Itcl::Obj","LaunchPad::Itcl::Serial","LaunchPad::Itcl::Template","LaunchPad::Itcl::Temporal","LaunchPad::JobMgr","LaunchPad::ShlibAPI","LaunchPad_ui","MarsBar","MarsBase","MarsProbe","Memchan","MimUI","MysqlUtils","NSCC","NacFixer","NewFlowManagerBuilder","NflBasicsTcl","NflBasicsTclLow","NflTcl","Nsl","Oratcl","PDTcl","Pdmcore","Pdmcorelib","PtclUtils","PvGuiUtilsTcl","RuleEditor","S3","SASL","SASL::NTLM","SASL::XGoogleToken","SnapTcl","T_lib","Tal","TalCW","TalMW","TalQea","TalSwig","TalTechs","TalTesting","Tcl","TclOO","Tclx","Tix","Tixsam","Tkhtml","Tktable","Tkx","Trf","UDMTcl","UbmCacheTcl","UbmNoNflTcl","UbmTcl","UdmRegressionTcl","ViaDouble","ViaDouble_ui","XOTcl","above_fc","aes","afl","afl_config","afl_loader","alias","antares_sg","ascii85","asn","autoproxy","base32","base32::core","base32::hex","base64","basic","bee","bench","bench::in","bench::out::csv","bench::out::text","bibtex","blowfish","budget","c4bump","cache::async","catFoundation","category_decl","category_mgr","category_mgr_ui","change_tracker","char","check_this","cim","cips","cist","cist_ui","cksum","class","client_console","clkpush","clock_utils","clock_xing","clx","cmdline","cncb","colSrv","collgen","collgen_basics","comm","command_mgr","configulate4rumba","configuration","connan_udmpp","connan_xt","context","control","cool","coroutine","coroutine::auto","counter","cpp_extras","cpx_boost","cpx_freetype2","cpx_gzstream","cpx_libpng","cpx_libunwind","cpx_oglft","cpx_openssl","cpx_perlpp","cpx_pse","cpx_sqlcipher","cpx_stlport","cpx_swig_runtime","cpx_zlib","cpxi","crc16","crc32","csv","ctm","cts","cwip","cwogl","cwp","cwp_ui","dclcompiler","dcshAttrs","dcshBlockDiagram","dcshLayout","dcshRtlXref","debit","debit_options","debit_utils","default_constraint","des","design_browser","design_metrics","devtools","dfm","dlapi","dmm","dns","docstrip","docstrip::util","doctools","doctools::changelog","doctools::config","doctools::cvs","doctools::html","doctools::html::cssdefaults","doctools::idx","doctools::idx::export","doctools::idx::export::docidx","doctools::idx::export::html","doctools::idx::export::json","doctools::idx::export::nroff","doctools::idx::export::text","doctools::idx::export::wiki","doctools::idx::import","doctools::idx::import::docidx","doctools::idx::import::json","doctools::idx::parse","doctools::idx::structure","doctools::msgcat","doctools::msgcat::idx::c","doctools::msgcat::idx::de","doctools::msgcat::idx::en","doctools::msgcat::idx::fr","doctools::msgcat::toc::c","doctools::msgcat::toc::de","doctools::msgcat::toc::en","doctools::msgcat::toc::fr","doctools::nroff::man_macros","doctools::paths","doctools::tcl::parse","doctools::text","doctools::toc","doctools::toc::export","doctools::toc::export::doctoc","doctools::toc::export::html","doctools::toc::export::json","doctools::toc::export::nroff","doctools::toc::export::text","doctools::toc::export::wiki","doctools::toc::import","doctools::toc::import::doctoc","doctools::toc::import::json","doctools::toc::parse","doctools::toc::structure","dom","dom::libxml2","dop","dp","dpGUI","dpRegPlan","dpTreeList","dpUtil","dp_high","draw","drvis","duet_gui","duet_splash","duettclreadline","ebb_recon_fixer","eco","eco_utils","elh_fixer","elh_netlist_editor","elh_netlist_editor::editor","elh_netlist_editor::infrastructure","elh_netlist_editor::pdplugin","evr","exception","exif","expat","fcde_signals_handler","fcde_system_utils","fevcheck","fileutil","fileutil::magic::cfront","fileutil::magic::cgen","fileutil::magic::filetype","fileutil::magic::mimetype","fileutil::magic::rt","fileutil::multi","fileutil::multi::op","fileutil::traverse","floorplan","flowmanager","flowmanager_ui","ftp","ftp::geturl","ftpd","globfind","glview","gpx","grammar::aycock","grammar::aycock::debug","grammar::aycock::runtime","grammar::fa","grammar::fa::dacceptor","grammar::fa::dexec","grammar::fa::op","grammar::me::cpu","grammar::me::cpu::core","grammar::me::cpu::gasm","grammar::me::tcl","grammar::me::util","grammar::peg","grammar::peg::interp","griddler","gui","gv_core","healthchecks","hier_query","highvolt","hilite_objs","hook","html","htmlgen","htmlparse","http","huddle","iccpp_com","iccpp_cr","iccpp_hc","iccpp_iccpp","iccpp_ns","iccpp_pp","ident","imap4","img::base","img::bmp","img::gif","img::ico","img::jpeg","img::pcx","img::pixmap","img::png","img::ppm","img::ps","img::sgi","img::sun","img::tga","img::tiff","img::window","img::xbm","img::xpm","inifile","interface","interp","interp::delegate::method","interp::delegate::proc","ip","irc","ism","itcl","javascript","jpeg","jpegtcl","json","json::write","ldap","ldapx","libxml2","log","logger","logger::appender","logger::utils","lrc","map::slippy","map::slippy::cache","map::slippy::fetcher","mapproj","math","math::bigfloat","math::bignum","math::calculus","math::calculus::symdiff","math::complexnumbers","math::constants","math::fourier","math::fuzzy","math::geometry","math::interpolate","math::linearalgebra","math::machineparameters","math::numtheory","math::optimize","math::polynomials","math::rationalfunctions","math::roman","math::special","math::statistics","md4","md5","md5crypt","mementoTcl","memory_pins","menu","metro_utils","mime","mimgengui","miner","mint","misc","mk4vfs","mogl","mpp","msgcat","multiplexer","mysqltcl","nameserv","nameserv::auto","nameserv::common","nameserv::server","namespacex","nbc","ncgi","netlist_editor","netlist_editor_ui","netspec","nmea","nntp","nwlmshLayout","nwshACG","nwshAttrs","nwshCTSMenus","nwshCTSObjList","nwshCTSWindowType","nwshClock","nwshDPHierExploration","nwshDPTaskPage","nwshECOSchematic","nwshLayout","nwshMVSchematic","nwshPGPattern","nwshPathCategoryView","nwshTimingMenus","nwshTimingWindowType","nwtnAreaNetConnectionVM","nwtnAssistant","nwtnAttrs","nwtnBlockDiagram","nwtnCellDisplacementVM","nwtnClockTrunkPlanning","nwtnCmdsFile","nwtnCustomize","nwtnErrorMenus","nwtnFloorplanMenus","nwtnFloorplanTaskFlow","nwtnGuiSetup","nwtnHierarchyVM","nwtnImportedPathPinsVM","nwtnLayoutClockTreeTask","nwtnLayoutCreateBlockTask","nwtnLayoutCustomRoutingTask","nwtnLayoutDesign","nwtnLayoutDesignPlanningTask","nwtnLayoutECOTask","nwtnLayoutEditMenus","nwtnLayoutICVTask","nwtnLayoutMenus","nwtnLayoutPlacementTask","nwtnLayoutRailTask","nwtnLayoutRoutingTask","nwtnLayoutSplitConstraintsTask","nwtnLayoutTimingSetupTask","nwtnLayoutToolbar","nwtnLayoutWindowType","nwtnMSCTSTapDriverVM","nwtnMainWindowType","nwtnMenus","nwtnOEBWindowType","nwtnOebMenus","nwtnPreferences","nwtnRelativePlacementVM","nwtnRpNetConnectionVM","nwtnScanChainVM","nwtnSchematicMenus","nwtnTables","nwtnTasks","nwtnViewStatus","nwtnVoltageAreaVM","nwtnWhatIfChannelCongestionMM","nwtnWindowTypes","oa","opt","optimization","options_mgr","otp","page::analysis::peg::emodes","page::analysis::peg::minimize","page::analysis::peg::reachable","page::analysis::peg::realizable","page::compiler::peg::mecpu","page::config::peg","page::gen::peg::canon","page::gen::peg::cpkg","page::gen::peg::hb","page::gen::peg::me","page::gen::peg::mecpu","page::gen::peg::ser","page::gen::tree::text","page::parse::lemon","page::parse::peg","page::parse::peghb","page::parse::pegser","page::pluginmgr","page::reader::hb","page::reader::lemon","page::reader::peg","page::reader::ser","page::reader::treeser","page::transform::mecpu","page::transform::reachable","page::transform::realizable","page::util::flow","page::util::norm::lemon","page::util::norm::peg","page::util::peg","page::util::quote","page::writer::hb","page::writer::identity","page::writer::me","page::writer::mecpu","page::writer::null","page::writer::peg","page::writer::ser","page::writer::tpc","page::writer::tree","param_mgr","param_mgr_ui","parseOpt","path","path_nav","paths","pg_util","picoirc","pinpairing","pki","place","platform","platform::shell","pluginmgr","png","pngtcl","pop3","pop3d","pop3d::dbox","pop3d::udb","ppp","prjclks","process_sub_groups","profiler","progutils","pt::ast","pt::cparam::configuration::critcl","pt::parse::peg","pt::pe","pt::pe::op","pt::peg","pt::peg::container","pt::peg::container::peg","pt::peg::export","pt::peg::export::container","pt::peg::export::json","pt::peg::export::peg","pt::peg::from::json","pt::peg::from::peg","pt::peg::import","pt::peg::import::json","pt::peg::interp","pt::peg::op","pt::peg::to::container","pt::peg::to::cparam","pt::peg::to::json","pt::peg::to::param","pt::peg::to::peg","pt::peg::to::tclparam","pt::pgen","pt::rde","pt::tclparam::configuration::snit","pt::tclparam::configuration::tcloo","puretclparser","purify_tcl","qualifier_mgr","quantify_tcl","rc4","rcs","refresh","reorder","report","reports","resolv","rest","ripemd128","ripemd160","route","rpGUI","rumba","rumba_spacing_rules","samprof","sd_mcmm","segment","segment_assertion","server_console","sgml","sgmlparser","sha1","sha256","shared","shared_mutex","simulation::annealing","simulation::montecarlo","simulation::random","smart","smtp","smtpd","snit","snpsAcg","snpsArchSolnLGB","snpsArchSolnLIC","snpsArchSolnMDFS","snpsArchSolnORS","snpsAttrs","snpsBusyCursorSkipList","snpsCTB","snpsCTBInternal","snpsCalculateWindowGeometry","snpsCollections","snpsCommandForm","snpsCommandHelpTest","snpsCommonSetup","snpsCommonViewMenu","snpsCopyPaste","snpsCreateViewType","snpsCurrInst","snpsCustomize","snpsDebug","snpsDemo","snpsDesignObjectBrowser","snpsDialogTest","snpsDialogsBinsOnlyInformation","snpsDialogsClockMapInformation","snpsDialogsCompileLinkDesign","snpsDialogsFanInOutInfo","snpsDialogsFileChooser","snpsDialogsHistBin1Information","snpsDialogsHistBinInformation","snpsDialogsHistBumpNoise","snpsDialogsHistBumpVoltage","snpsDialogsHistDeltaDelay","snpsDialogsNumberOfLevelsChooser","snpsDialogsObjectChooser","snpsDialogsObjectListInfo","snpsDialogsPath","snpsDialogsPathPinSimpleInfo","snpsDialogsPathsBasicInfo","snpsDialogsPathsBasicSimpleInfo","snpsDialogsReportOutputOptionInfo","snpsDialogsSchematicWhatIf","snpsDialogsSlctOperationInfo","snpsDialogsWindowReuseInfo","snpsDocBrowser","snpsFanoutViewer","snpsFile","snpsFollowNlFactory","snpsGUIAppSpecifics","snpsGUITest","snpsGuiMenuEnable","snpsGuiSelect","snpsHier","snpsHier::children","snpsHier::columns","snpsHier::dialogs","snpsHier::hierarchies","snpsHier::rootFcts","snpsHierExample1","snpsHierExample2","snpsHighlight","snpsHistogram","snpsHistogramDialogBottleneck","snpsHistogramDialogBumpNoise","snpsHistogramDialogBumpVoltage","snpsHistogramDialogDRC","snpsHistogramDialogDeltaDelay","snpsHistogramDialogEndpointSlack","snpsHistogramDialogNetCapacitance","snpsHistogramDialogPathsSlack","snpsHistogramDialogTable","snpsInfotips","snpsInterProcessCommunication","snpsLayout","snpsLayoutLayers","snpsLayoutPreferences","snpsLayoutTest","snpsLayoutTools","snpsLibViewer","snpsLoadsDrivers","snpsMM","snpsMRUPalette","snpsMenus","snpsMisc","snpsMiscAnchorPoint","snpsMiscDialogObjectChooser","snpsMiscEditMovebounds","snpsMiscPreset","snpsMiscSetting","snpsMiscTiming","snpsMiscViewportHistory","snpsOpDlg","snpsOutput","snpsPaletteGroup","snpsPlaceMPO","snpsPlaceNYPD","snpsPlaceRWR","snpsPlaceSETT","snpsPlaceVIAP","snpsProcheck","snpsQObjectViewer","snpsQoRSnapshot","snpsQtcl","snpsQtclCoreTests","snpsQtclExtensions","snpsSchematic","snpsSchematicDialogPathSchematicAddFanInOut","snpsSchematicDialogPathSchematicAddPaths","snpsSchematicDialogSchematicSizeCell","snpsSchematicEnable","snpsSchematicMethod","snpsSchematicNetlist","snpsSchematicNetlistInternal","snpsSelectDialogFanInOut","snpsSelection","snpsSelectionInternal","snpsStack","snpsTable","snpsTableCustomize","snpsTableInternal","snpsTaskAssistant","snpsTclPro","snpsTest","snpsTestBinning","snpsTestDialogAddFaninFanout","snpsTestDialogAddPaths","snpsTestDialogEndpointSlackHistogram","snpsTestDialogNetCapacitanceHistogram","snpsTestDialogObjectChooser","snpsTestDialogPathsSlackHistogram","snpsTestDialogSelectByName","snpsTestDialogs","snpsTestHistogram","snpsTestList","snpsTestListUtils","snpsTestMenu","snpsTestMouse","snpsTestNl","snpsTestObjectAtPoint","snpsTiledView","snpsTimingGUI","snpsTkStyle","snpsTypedText","snpsUpdateTimer","snpsUtils","snpsVM","snpsViewMgr","snpsWindowFrameWork","snpsWriteXMLNl","soundex","spf","starkit","stats","stooop","stringprep","stringprep::data","strokes","struct","struct::disjointset","struct::graph","struct::graph::op","struct::list","struct::matrix","struct::pool","struct::prioqueue","struct::queue","struct::record","struct::set","struct::skiplist","struct::stack","struct::tree","sum","switched","tar","taskassistant","tbcload","tcl-dp","tcl::chan::core","tcl::chan::events","tcl::chan::fifo","tcl::chan::fifo2","tcl::chan::halfpipe","tcl::chan::memchan","tcl::chan::null","tcl::chan::nullzero","tcl::chan::random","tcl::chan::string","tcl::chan::textwindow","tcl::chan::variable","tcl::chan::zero","tcl::randomseed","tcl::tommath","tcl::transform::adler32","tcl::transform::base64","tcl::transform::core","tcl::transform::counter","tcl::transform::crc32","tcl::transform::hex","tcl::transform::identity","tcl::transform::limitsize","tcl::transform::observe","tcl::transform::otp","tcl::transform::rot","tcl::transform::spacer","tcl::transform::zlib","tclDES","tclDESjr","tcl_extras","tcl_readline","tclodbc","tclparser","tclreadline","tcltest","tdom","tepam","term","term::ansi::code","term::ansi::code::attr","term::ansi::code::ctrl","term::ansi::code::macros","term::ansi::ctrl::unix","term::ansi::send","term::interact::menu","term::interact::pager","term::receive","term::receive::bind","term::send","text::write","textutil","textutil::adjust","textutil::expander","textutil::repeat","textutil::split","textutil::string","textutil::tabify","textutil::trim","tgta_load_scripts","tgta_opt","tie","tie::std::array","tie::std::dsource","tie::std::file","tie::std::growfile","tie::std::log","tie::std::rarray","tiff","tifftcl","tile","time","timex","tkdnd","togl","transfer::connect","transfer::copy","transfer::copy::queue","transfer::data::destination","transfer::data::source","transfer::receiver","transfer::transmitter","transparent","treeql","trsync","tspec","ubm","ubm_gui","udm_extras","udmpp","udmppRegression","uevent","uevent::onidle","unicode","unicode::data","units","uri","uri::urn","uuencode","uuid","vfs","vfs::ftp","vfs::http","vfs::mk4","vfs::ns","vfs::tar","vfs::template","vfs::template::collate","vfs::template::fish","vfs::template::quota","vfs::template::version","vfs::template::version::delta","vfs::test","vfs::tk","vfs::urltype","vfs::webdav","vfs::zip","vfslib","viaopt","viaopt_autovia","wip","wire_edit","wm_default","xmim","xml","xml::libxml2","xml::tcl","xml::tclparser","xmldefs","xmldep","xmlgen","xmlswitch","xotcl::comm::connection","xotcl::comm::dav","xotcl::comm::ftp","xotcl::comm::httpAccess","xotcl::comm::httpd","xotcl::comm::imap","xotcl::comm::ldap","xotcl::comm::mime","xotcl::comm::pcache","xotcl::htmllib","xotcl::metadataAnalyzer","xotcl::mixinStrategy","xotcl::package","xotcl::script","xotcl::scriptCreation::recoveryPoint","xotcl::scriptCreation::scriptCreator","xotcl::serializer","xotcl::staticMetadataAnalyzer","xotcl::test","xotcl::trace","xotcl::upvar-compat","xotcl::wafecompat","xotcl::xodoc","xpath","xslt","xslt::cache","xslt::libxslt","xslt::process","xslt::resources","xslt::utilities","xsxp","xul","yaml","yencode","zipvfs","zlib","zlibtcl","zndp",]
"" Reassign to a global variable ""
let g:TclComplete#options = options
